type a = int[,]

type a = int[]

type a = int[,,,,,,,,,,]

type a = {int, int}

type a = {float, a}

type a = {float[], a}

type a = {}

type a = {a, a}

type a = {float[], float[,]}

type a = {float[], float[,], float[,,]}

time assert a, "asdf"

time let {} = a

time time time assert c, "asdf"

time time time time time let a = 1

let a = a

let a[H] = a

let a[H,W] = a

let a[H,W,H] = a

let {a} = a

let {} = a

let {a, a} = a

let {a[H], b} = a

let {a[H,W], {b, c[D], {}}} = a

assert a, "asdf"

assert {}, "asdf"

assert {a}, "asdf"

assert {a, a, a}, "asdf"

assert [], "asdf"

assert [a], "asdf"

assert [a, b, c], "asdf"

assert [a, b, {c, d}], "asdf"

assert (a), ""

assert ([a]), ""

assert ([]), ""

assert a{0}, ""

assert a{1}, ""

assert a{2}, ""

assert a{9999999}, ""

assert a[0], ""

assert a[a], ""

assert a[a, 1], ""

assert a[a, b, c, d, e], ""

assert a[], ""

show a[b[2]][a[3]]

assert f(), ""

assert f(a), ""

assert f(a, b, c), ""

assert f(a, (b), c), ""

assert a[a[a[a]][a[a]]][a[a]], ""

assert [a[[a[[[[[a[a]]]]]]]]], ""

assert [f(), g[3], e[[[c], d{1}, g()]]], ""

fn f() : int {
assert a[a], ""
}

fn f(a : a) : a {
assert a[a], ""
}

fn f(a : a, b : b, c : c) : a {
let a[H,W,H] = a
}

fn f(a : a[]) : a {
assert {{}, (b), [c]}, ""
}

fn f(a[H] : a[]) : a {
assert a[a], ""
}

fn f(a[H, W] : a[]) : a {
assert {}, "asdf"
}

fn f({a[H, W] : a[], b : b}) : a {
assert a[a, b, c, d, e], ""
}

fn f({a[H, W] : a[,], b[A] : b[]}) : a {
let {} = a
}

fn f({a[H, W] : a[,], {{b[A] : b[], {}}}}, {}, {a : a}, {a : {a, a}}) : a {
assert f{1}, ""
}
