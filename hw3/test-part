#!/bin/sh
set -e

DIR="$1"
PART="$2"
# From https://stackoverflow.com/questions/59895/
HERE=$(CDPATH= cd -- "$(dirname -- "$0")" && pwd)

jpl () {
    ./jplc "$@"
}

test_ok() {
    PROG="$1"
    OUT="$2"
    printf "%s : " $(basename "$PROG")
    make --silent --no-print-directory -C "$DIR" run TEST="$PROG" > "$HERE"/out.txt
    if ! grep -c "Compilation succeeded" "$HERE"/out.txt >/dev/null ||
       grep -c "Compilation failed" "$HERE"/out.txt >/dev/null; then
        echo "fail: file should have parsed"
        return 1
    fi
    sed "\$d" "$HERE"/out.txt | jpl --pp-sexp - | sed "\$d"> "$HERE"/out.pp
    diff -c "$HERE/out.pp" "$OUT" && echo pass
}

test_fail() {
    PROG="$1"
    printf "%s : " $(basename "$PROG")
    make --silent --no-print-directory --ignore-errors -C "$DIR" run TEST="$PROG" > "$HERE"/out.txt
    if ! grep -c "Compilation succeeded" "$HERE"/out.txt >/dev/null && \
        grep -c "Compilation failed" "$HERE"/out.txt >/dev/null; then
        echo "pass"
    else
        echo "fail: file should not have parsed"
        return 1
    fi
}

regen() {
    PROG="$1"
    OUT="$2"
    printf "%s ...\n" $(basename "$PROG")
    make -C --no-print-directory "$DIR" run TEST="$PROG" | tail -n+2 > "$HERE"/out.txt
    sed "\$d" "$HERE"/out.txt | jpl --pp-sexp - | sed "\$d"> "$OUT"
}

forall () {
    TESTS="$1"
    shift
    
    count=0
    total=0
    for f in "$TESTS"/*.jpl; do
        if "$@" "$f" "$f".expected; then
            count=$((count+1))
        else
            : pass
        fi
        total=$((total+1))
    done
    echo Passed $count out of $total
}

case $PART in
    count)
        echo 5
        ;;
    all)
        sh "$0" 1
        sh "$0" 2
        sh "$0" 3
        sh "$0" 4
        sh "$0" 5
        ;;
    regen)
        for f in "$HERE"/ok/*.jpl; do
            regen "$f" "$f".expected
        done
        echo Regenerated ok tests.
        for f in "$HERE"/ok-fuzzer/*.jpl; do
            regen "$f" "$f".expected
        done
        echo Regenerated ok-fuzzer tests.
        ;;
    1)
        forall "$HERE/ok" test_ok
        ;;
    2)
        forall "$HERE/ok-fuzzer" test_ok
        ;;
    3)
        forall "$HERE/fail-fuzzer1" test_fail
        ;;
    4)
        forall "$HERE/fail-fuzzer2" test_fail
        ;;
    5)
        forall "$HERE/fail-fuzzer3" test_fail
        ;;
    *)
        echo "USAGE: make test-hw2 DIR=$DIR PART=$PART"
        echo "$PART can be any of all $(seq 1 $(sh $0 count))"
        ;;
esac
