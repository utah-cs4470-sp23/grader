global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 95.21
const1: dq 45.23
const2: dq 40.16
const3: dq 66.28
const4: dq 54.83
const5: dq 65.74
const6: dq 39.33
const7: dq 70.72
const8: db `mod by zero`, 0
const9: db `divide by zero`, 0
const10: db `non-positive loop bound`, 0
const11: dq 601
const12: dq 415
const13: db `overflow computing array size`, 0
const14: dq 64
const15: dq 895
const16: dq 863
const17: dq 89.21
const18: dq 0
const19: dq 296
const20: db `negative array index`, 0
const21: db `index too large`, 0
const22: dq 283
const23: dq 39
const24: dq 647
const25: dq 54.34
const26: dq 43.81
const27: dq 3
const28: dq 15.33
const29: dq 714
const30: dq 470
const31: dq 56.21
const32: db `g`, 0
const33: dq 60.82
const34: dq 800
const35: dq 850
const36: dq 11.31
const37: dq 19.65
const38: db `w`, 0
const39: dq 1
const40: dq 75.24
const41: dq 304
const42: dq 803
const43: dq 68
const44: dq 119
const45: dq 426
const46: dq 26.18
const47: dq 651
const48: dq 888
const49: dq 93
const50: dq 952
const51: dq 358
const52: dq 86
const53: dq 35.29
const54: dq 108
const55: dq 58.75
const56: dq 557
const57: dq 976
const58: dq 591

section .text
a:
_a:
	push rbp
	mov rbp, rsp
	push rdi
	sub rsp, 8 ; Align stack
	mov rax, [rel const0] ; 95.21
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const1] ; 45.23
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rdi, 8
	call _jpl_alloc
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	sub rsp, 8 ; Align stack
	mov rax, [rel const2] ; 40.16
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const3] ; 66.28
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const4] ; 54.83
	push rax
	sub rsp, 8 ; Align stack
	mov rax, [rel const5] ; 65.74
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const6] ; 39.33
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const7] ; 70.72
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump1
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump3
	lea rdi, [rel const8] ; mod by zero
	call _fail_assertion
.jump3:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump4
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; divide by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump4:
	cqo
	idiv r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump5
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump5:
	; Computing bound for h
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for h
	mov rax, [rel const11] ; 601
	push rax
	mov rax, [rsp]
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
.jump6: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump7 ; If h >= bound, break
.jump8:
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump9
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump9:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
.jump10: ; Begin body of loop
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump11 ; If i >= bound, break
.jump12:
	; Compute loop body
	mov rax, [rel const12] ; 415
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment i
	add qword [rsp + 0], 1
	jmp .jump10
.jump11: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment h
	add qword [rsp + 0], 1
	jmp .jump6
.jump7: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump13
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump13:
	; Computing total size of heap memory to allocate
	mov rdi, 0 ; sizeof {{}}
imul rdi, [rsp + 0 + 0] ; multiply by (sum[h : 601] (sum[i : f] 415))
	jno .jump14
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump14:
	imul rdi, [rsp + 0 + 8] ; multiply by ((argnum % c) / c)
	jno .jump15
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump15:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
.jump16: ; Begin body of loop
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump18 ; If i >= bound, ...
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
.jump18:
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump17 ; If h >= bound, break
.jump19:
	; Compute loop body
	sub rsp, 0
	; Moving 0 bytes from rbp - -32 to rsp
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 0
	add rax, [rsp + 32]
	; Move body (0 bytes) to index
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	; Increment i
	add qword [rsp + 8], 1
	jmp .jump16
.jump17: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump2
.jump1:
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump20
	lea rdi, [rel const9] ; divide by zero
	call _fail_assertion
.jump20:
	cqo
	idiv r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump21
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for i
	mov rax, [rel const14] ; 64
	push rax
	mov rax, [rsp]
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump23
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump23:
	; Computing total size of heap memory to allocate
	mov rdi, 0 ; sizeof {{}}
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump24
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump24:
	imul rdi, [rsp + 0 + 8] ; multiply by 64
	jno .jump25
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump25:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
.jump26: ; Begin body of loop
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump28 ; If i >= bound, ...
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
.jump28:
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump27 ; If h >= bound, break
.jump29:
	; Compute loop body
	sub rsp, 0
	; Moving 0 bytes from rbp - -32 to rsp
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 0
	add rax, [rsp + 32]
	; Move body (0 bytes) to index
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	; Increment i
	add qword [rsp + 8], 1
	jmp .jump26
.jump27: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump22
.jump21:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump30
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump30:
	; Computing bound for h
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for j
	mov rax, [rel const15] ; 895
	push rax
	mov rax, [rsp]
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump31
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump31:
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump32
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump32:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
.jump33: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump35 ; If j >= bound, ...
	mov qword [rsp + 16], 0 ; j = 0
	add qword [rsp + 8], 1 ; i++
.jump35:
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump36 ; If i >= bound, ...
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
.jump36:
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump34 ; If h >= bound, break
.jump37:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment j
	add qword [rsp + 16], 1
	jmp .jump33
.jump34: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump38
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump38:
	; Computing total size of heap memory to allocate
	mov rdi, 0 ; sizeof {{}}
imul rdi, [rsp + 0 + 0] ; multiply by (sum[h : c, i : argnum, j : 895] j)
	jno .jump39
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump39:
	imul rdi, [rsp + 0 + 8] ; multiply by c
	jno .jump40
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump40:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
.jump41: ; Begin body of loop
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump43 ; If i >= bound, ...
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
.jump43:
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump42 ; If h >= bound, break
.jump44:
	; Compute loop body
	sub rsp, 0
	; Moving 0 bytes from rbp - -32 to rsp
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 0
	add rax, [rsp + 32]
	; Move body (0 bytes) to index
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	; Increment i
	add qword [rsp + 8], 1
	jmp .jump41
.jump42: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump22:
.jump2:
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump45
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump45:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
.jump46: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump47 ; If h >= bound, break
.jump48:
	; Compute loop body
	mov rax, [rel const16] ; 863
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment h
	add qword [rsp + 0], 1
	jmp .jump46
.jump47: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	pop rax
	pop r10
	sub rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump49
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	mov rax, [rel const17] ; 89.21
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	jmp .jump50
.jump49:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for h
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump51
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump51:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
.jump52: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump53 ; If h >= bound, break
.jump54:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment h
	add qword [rsp + 0], 1
	jmp .jump52
.jump53: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump55
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump55:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
.jump56: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump57 ; If h >= bound, break
.jump58:
	; Compute loop body
	mov rax, [rel const18] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump59
	mov rax, [rel const19] ; 296
	push rax
	jmp .jump60
.jump59:
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
.jump60:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump61
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump61:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
.jump62: ; Begin body of loop
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump63 ; If i >= bound, break
.jump64:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment i
	add qword [rsp + 0], 1
	jmp .jump62
.jump63: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	pop rax
	pop r10
	cmp r10, 0
	jne .jump65
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; mod by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump65:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment h
	add qword [rsp + 0], 1
	jmp .jump56
.jump57: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
.jump50:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump66
	sub rsp, 8 ; Align stack
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump66:
	cmp rax, [rsp + 16]
	jl .jump67
	sub rsp, 8 ; Align stack
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump67:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump68
	sub rsp, 8 ; Align stack
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump68:
	cmp rax, [rsp + 24]
	jl .jump69
	sub rsp, 8 ; Align stack
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump69:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 0
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 0
	; Moving 0 bytes from rax to rsp
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump70
	lea rdi, [rel const8] ; mod by zero
	call _fail_assertion
.jump70:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const22] ; 283
	push rax
	; Moving 8 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump71
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump71:
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for l
	mov rax, [rel const23] ; 39
	push rax
	mov rax, [rsp]
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump72
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump72:
	; Computing bound for j
	mov rax, [rel const24] ; 647
	push rax
	mov rax, [rsp]
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize l to 0
	mov rax, 0
	push rax
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
.jump73: ; Begin body of loop
	; Compare l to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump75 ; If l >= bound, ...
	mov qword [rsp + 16], 0 ; l = 0
	add qword [rsp + 8], 1 ; k++
.jump75:
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump76 ; If k >= bound, ...
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
.jump76:
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump74 ; If j >= bound, break
.jump77:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment l
	add qword [rsp + 16], 1
	jmp .jump73
.jump74: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump78
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump78:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
imul rdi, [rsp + 0 + 0] ; multiply by ((sum[j : 647, k : c, l : 39] c) - c)
	jno .jump79
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump79:
	imul rdi, [rsp + 0 + 8] ; multiply by (- to_int(g))
	jno .jump80
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump80:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
.jump81: ; Begin body of loop
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump83 ; If k >= bound, ...
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
.jump83:
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump82 ; If j >= bound, break
.jump84:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment k
	add qword [rsp + 8], 1
	jmp .jump81
.jump82: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Moving 24 bytes from rsp + 16 to rsp + 16
		mov r10, [rsp + 16 + 16]
		mov [rsp + 16 + 16], r10
		mov r10, [rsp + 16 + 8]
		mov [rsp + 16 + 8], r10
		mov r10, [rsp + 16 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	mov rax, [rbp - 8] ; Address to write return value into
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 64 ; Local variables
	pop rbp
	ret

b:
_b:
	push rbp
	mov rbp, rsp
	mov rax, [rel const25] ; 54.34
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const26] ; 43.81
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump85
	; Moving 0 bytes from rsp + 0 to rsp + 0
	add rsp, 0
	jmp .jump86
.jump85:
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	; Moving 0 bytes from rsp + 8 to rsp + 8
	add rsp, 8
.jump86:
	; Moving 0 bytes from rsp + 0 to rsp + 0
	add rsp, 0
	call _b
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for e
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump87
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump87:
	; Computing bound for d
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const27] ; 3
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump88
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump89
.jump88:
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
.jump89:
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const18] ; False
	push rax
	; Moving 8 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	; Moving 8 bytes from rsp + 8 to rsp + 16
		mov r10, [rsp + 8 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	mov rax, [rsp]
	cmp rax, 0
	jg .jump90
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump90:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by {{false, c}{1}, (if (argnum < 3) then argnum else argnum), tan(sin(c))}{1}
	jno .jump91
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump91:
	imul rdi, [rsp + 0 + 8] ; multiply by (- (- argnum))
	jno .jump92
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump92:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
.jump93: ; Begin body of loop
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump95 ; If e >= bound, ...
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
.jump95:
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump94 ; If d >= bound, break
.jump96:
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump97
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump97:
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump98
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump98:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
.jump99: ; Begin body of loop
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump101 ; If g >= bound, ...
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
.jump101:
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump100 ; If f >= bound, break
.jump102:
	; Compute loop body
	sub rsp, 8 ; Align stack
	call _b
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 32] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 32], xmm0 ; Save sum
	; Increment g
	add qword [rsp + 8], 1
	jmp .jump99
.jump100: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment e
	add qword [rsp + 8], 1
	jmp .jump93
.jump94: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rax, [rel const18] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump103
	mov rax, [rel const18] ; False
	push rax
	jmp .jump104
.jump103:
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const28] ; 15.33
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	pop rax
	cmp rax, 0
	je .jump105
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump106
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump106:
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump107
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump107:
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump108
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump108:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by f
	jno .jump109
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump109:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump110
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump110:
	imul rdi, [rsp + 0 + 16] ; multiply by f
	jno .jump111
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump111:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
.jump112: ; Begin body of loop
	; Compare i to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump114 ; If i >= bound, ...
	mov qword [rsp + 16], 0 ; i = 0
	add qword [rsp + 8], 1 ; h++
.jump114:
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump115 ; If h >= bound, ...
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
.jump115:
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump113 ; If g >= bound, break
.jump116:
	; Compute loop body
	mov rax, [rel const18] ; False
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment i
	add qword [rsp + 16], 1
	jmp .jump112
.jump113: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump117
	lea rdi, [rel const8] ; mod by zero
	call _fail_assertion
.jump117:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const29] ; 714
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump118
	lea rdi, [rel const8] ; mod by zero
	call _fail_assertion
.jump118:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump119
	sub rsp, 8 ; Align stack
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump119:
	cmp rax, [rsp + 24]
	jl .jump120
	sub rsp, 8 ; Align stack
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump120:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump121
	sub rsp, 8 ; Align stack
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump121:
	cmp rax, [rsp + 32]
	jl .jump122
	sub rsp, 8 ; Align stack
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump122:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump123
	sub rsp, 8 ; Align stack
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump123:
	cmp rax, [rsp + 40]
	jl .jump124
	sub rsp, 8 ; Align stack
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump124:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump125
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	call _b
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	jmp .jump126
.jump125:
	mov rax, [rel const30] ; 470
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	jne .jump127
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const31] ; 56.21
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	pop rax
.jump127:
	push rax
.jump126:
	pop rax
.jump105:
	push rax
.jump104:
	pop rax
	cmp rax, 0
	jne .jump128
	lea rdi, [rel const32] ; g
	call _fail_assertion
.jump128:
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 32 ; Local variables
	pop rbp
	ret

l:
_l:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	sub rsp, 16
	; Moving 16 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump151
	sub rsp, 8 ; Align stack
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump151:
	cmp rax, [rsp + 8]
	jl .jump152
	sub rsp, 8 ; Align stack
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump152:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Moving 8 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	pop rax
	add rsp, 0 ; Local variables
	pop rbp
	ret
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rdi, 8
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump153
	sub rsp, 8 ; Align stack
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump153:
	cmp rax, [rsp + 8]
	jl .jump154
	sub rsp, 8 ; Align stack
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump154:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	add rsp, 0 ; Local variables
	pop rbp
	ret
	sub rsp, 8
	; Moving 8 bytes from rbp - -48 to rsp
		mov r10, [rbp - -48 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const18] ; False
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	; Moving 0 bytes from rsp + 0 to rsp + 8
	add rsp, 8
	sub rsp, 24
	; Moving 24 bytes from rbp - -56 to rsp
		mov r10, [rbp - -56 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -56 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump155
	sub rsp, 8
	; Moving 8 bytes from rbp - -80 to rsp
		mov r10, [rbp - -80 + 0]
		mov [rsp + 0], r10
	jmp .jump156
.jump155:
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
.jump156:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump157
	sub rsp, 8 ; Align stack
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump157:
	cmp rax, [rsp + 16]
	jl .jump158
	sub rsp, 8 ; Align stack
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump158:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump159
	sub rsp, 8 ; Align stack
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump159:
	cmp rax, [rsp + 24]
	jl .jump160
	sub rsp, 8 ; Align stack
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump160:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump161
	sub rsp, 8
	; Moving 8 bytes from rbp - -48 to rsp
		mov r10, [rbp - -48 + 0]
		mov [rsp + 0], r10
	jmp .jump162
.jump161:
	sub rsp, 16
	; Moving 16 bytes from rbp - -80 to rsp
		mov r10, [rbp - -80 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -80 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -64 to rsp
		mov r10, [rbp - -64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump163
	sub rsp, 8 ; Align stack
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump163:
	cmp rax, [rsp + 8]
	jl .jump164
	sub rsp, 8 ; Align stack
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump164:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	; Moving 8 bytes from rsp + 16 to rsp + 16
		mov r10, [rsp + 16 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
.jump162:
	pop rax
	cmp rax, 0
	jne .jump165
	sub rsp, 8
	; Moving 8 bytes from rbp - -48 to rsp
		mov r10, [rbp - -48 + 0]
		mov [rsp + 0], r10
	pop rax
.jump165:
	push rax
	pop rax
	cmp rax, 0
	jne .jump166
	lea rdi, [rel const38] ; w
	call _fail_assertion
.jump166:
	sub rsp, 8
	; Moving 8 bytes from rbp - -48 to rsp
		mov r10, [rbp - -48 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	jne .jump167
	mov rax, [rel const39] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump168
	sub rsp, 8
	; Moving 8 bytes from rbp - -48 to rsp
		mov r10, [rbp - -48 + 0]
		mov [rsp + 0], r10
	pop rax
.jump168:
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
.jump167:
	push rax
	pop rax
	cmp rax, 0
	je .jump169
	mov rax, [rel const39] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump171
	sub rsp, 16
	; Moving 16 bytes from rbp - -80 to rsp
		mov r10, [rbp - -80 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -80 + 0]
		mov [rsp + 0], r10
	; Moving 16 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	jmp .jump172
.jump171:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for w
	sub rsp, 8
	; Moving 8 bytes from rbp - -80 to rsp
		mov r10, [rbp - -80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump173
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump173:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by v
	jno .jump174
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump174:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize w to 0
	mov rax, 0
	push rax
.jump175: ; Begin body of loop
	; Compare w to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump176 ; If w >= bound, break
.jump177:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment w
	add qword [rsp + 0], 1
	jmp .jump175
.jump176: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
.jump172:
	sub rsp, 8
	; Moving 8 bytes from rbp - -80 to rsp
		mov r10, [rbp - -80 + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	; Moving 24 bytes from rbp - -56 to rsp
		mov r10, [rbp - -56 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -56 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -48 to rsp
		mov r10, [rbp - -48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -40 to rsp
		mov r10, [rbp - -40 + 0]
		mov [rsp + 0], r10
	; Moving 40 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 32]
		mov [rsp + 8 + 32], r10
		mov r10, [rsp + 0 + 24]
		mov [rsp + 8 + 24], r10
		mov r10, [rsp + 0 + 16]
		mov [rsp + 8 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 8 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const40] ; 75.24
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump178
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for y
	sub rsp, 8
	; Moving 8 bytes from rbp - -80 to rsp
		mov r10, [rbp - -80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump180
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump180:
	; Computing bound for x
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump181
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump181:
	; Computing bound for w
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump182
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump182:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof {float,bool,float}[,]
	imul rdi, [rsp + 0 + 0] ; multiply by f
	jno .jump183
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump183:
	imul rdi, [rsp + 0 + 8] ; multiply by f
	jno .jump184
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump184:
	imul rdi, [rsp + 0 + 16] ; multiply by v
	jno .jump185
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump185:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize y to 0
	mov rax, 0
	push rax
	; Initialize x to 0
	mov rax, 0
	push rax
	; Initialize w to 0
	mov rax, 0
	push rax
.jump186: ; Begin body of loop
	; Compare y to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump188 ; If y >= bound, ...
	mov qword [rsp + 16], 0 ; y = 0
	add qword [rsp + 8], 1 ; x++
.jump188:
	; Compare x to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump189 ; If x >= bound, ...
	mov qword [rsp + 8], 0 ; x = 0
	add qword [rsp + 0], 1 ; w++
.jump189:
	; Compare w to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump187 ; If w >= bound, break
.jump190:
	; Compute loop body
	sub rsp, 24
	; Moving 24 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 24
	add rax, [rsp + 72]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment y
	add qword [rsp + 16], 1
	jmp .jump186
.jump187: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	mov rax, [rel const41] ; 304
	push rax
	mov rax, [rel const39] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump191
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	jmp .jump192
.jump191:
	mov rax, [rel const42] ; 803
	push rax
.jump192:
	sub rsp, 8
	; Moving 8 bytes from rbp - -56 to rsp
		mov r10, [rbp - -56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump193
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
.jump193:
	cmp rax, [rsp + 24]
	jl .jump194
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
.jump194:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump195
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
.jump195:
	cmp rax, [rsp + 32]
	jl .jump196
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
.jump196:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump197
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
.jump197:
	cmp rax, [rsp + 40]
	jl .jump198
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
.jump198:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 24
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump179
.jump178:
	sub rsp, 24
	; Moving 24 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
.jump179:
	call _l
	add rsp, 24
	add rsp, 40
	add rsp, 16
	push rax
	jmp .jump170
.jump169:
	sub rsp, 16
	; Moving 16 bytes from rbp - -80 to rsp
		mov r10, [rbp - -80 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -80 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for w
	mov rax, [rel const43] ; 68
	push rax
	mov rax, [rsp]
	mov rdi, 2720
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize w to 0
	mov rax, 0
	push rax
.jump199: ; Begin body of loop
	; Compare w to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump200 ; If w >= bound, break
.jump201:
	; Compute loop body
	sub rsp, 24
	; Moving 24 bytes from rbp - -56 to rsp
		mov r10, [rbp - -56 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -56 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -56 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const18] ; False
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 40
	add rax, [rsp + 56]
	; Move body (40 bytes) to index
	; Moving 40 bytes from rsp to rax
		mov r10, [rsp + 32]
		mov [rax + 32], r10
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 40
	; Increment w
	add qword [rsp + 0], 1
	jmp .jump199
.jump200: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	mov rax, [rel const39] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump202
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump204
	sub rsp, 8 ; Align stack
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump204:
	cmp rax, [rsp + 8]
	jl .jump205
	sub rsp, 8 ; Align stack
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump205:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump203
.jump202:
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
.jump203:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump206
	sub rsp, 8 ; Align stack
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump206:
	cmp rax, [rsp + 8]
	jl .jump207
	sub rsp, 8 ; Align stack
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump207:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 40
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 40
	; Moving 40 bytes from rax to rsp
		mov r10, [rax + 32]
		mov [rsp + 32], r10
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	call _b
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - -40 to rsp
		mov r10, [rbp - -40 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump208
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for x
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump210
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump210:
	; Computing bound for w
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump211
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump211:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof {float,bool,float}[,]
	imul rdi, [rsp + 0 + 0] ; multiply by o
	jno .jump212
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump212:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump213
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump213:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize x to 0
	mov rax, 0
	push rax
	; Initialize w to 0
	mov rax, 0
	push rax
.jump214: ; Begin body of loop
	; Compare x to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump216 ; If x >= bound, ...
	mov qword [rsp + 8], 0 ; x = 0
	add qword [rsp + 0], 1 ; w++
.jump216:
	; Compare w to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump215 ; If w >= bound, break
.jump217:
	; Compute loop body
	sub rsp, 24
	; Moving 24 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 24
	add rax, [rsp + 56]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment x
	add qword [rsp + 8], 1
	jmp .jump214
.jump215: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump209
.jump208:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for x
	sub rsp, 8
	; Moving 8 bytes from rbp - -80 to rsp
		mov r10, [rbp - -80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump218
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump218:
	; Computing bound for w
	mov rax, [rel const44] ; 119
	push rax
	mov rax, [rsp]
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof {float,bool,float}[,]
	imul rdi, [rsp + 0 + 0] ; multiply by 119
	jno .jump219
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump219:
	imul rdi, [rsp + 0 + 8] ; multiply by v
	jno .jump220
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump220:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize x to 0
	mov rax, 0
	push rax
	; Initialize w to 0
	mov rax, 0
	push rax
.jump221: ; Begin body of loop
	; Compare x to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump223 ; If x >= bound, ...
	mov qword [rsp + 8], 0 ; x = 0
	add qword [rsp + 0], 1 ; w++
.jump223:
	; Compare w to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump222 ; If w >= bound, break
.jump224:
	; Compute loop body
	sub rsp, 24
	; Moving 24 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 24
	add rax, [rsp + 56]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment x
	add qword [rsp + 8], 1
	jmp .jump221
.jump222: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump209:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for y
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump225
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump225:
	; Computing bound for x
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump226
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump226:
	; Computing bound for w
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump227
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump227:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize y to 0
	mov rax, 0
	push rax
	; Initialize x to 0
	mov rax, 0
	push rax
	; Initialize w to 0
	mov rax, 0
	push rax
.jump228: ; Begin body of loop
	; Compare y to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump230 ; If y >= bound, ...
	mov qword [rsp + 16], 0 ; y = 0
	add qword [rsp + 8], 1 ; x++
.jump230:
	; Compare x to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump231 ; If x >= bound, ...
	mov qword [rsp + 8], 0 ; x = 0
	add qword [rsp + 0], 1 ; w++
.jump231:
	; Compare w to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump229 ; If w >= bound, break
.jump232:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment y
	add qword [rsp + 16], 1
	jmp .jump228
.jump229: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -48 to rsp
		mov r10, [rbp - -48 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump233
	sub rsp, 8
	; Moving 8 bytes from rbp - -64 to rsp
		mov r10, [rbp - -64 + 0]
		mov [rsp + 0], r10
	jmp .jump234
.jump233:
	mov rax, [rel const45] ; 426
	push rax
.jump234:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump235
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
.jump235:
	cmp rax, [rsp + 16]
	jl .jump236
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
.jump236:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump237
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
.jump237:
	cmp rax, [rsp + 24]
	jl .jump238
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
.jump238:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 24
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	call _l
	add rsp, 24
	add rsp, 40
	add rsp, 16
	push rax
.jump170:
	pop rax
	add rsp, 0 ; Local variables
	pop rbp
	ret

C:
_C:
	push rbp
	mov rbp, rsp
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for G
	sub rsp, 8
	; Moving 8 bytes from r12 - 168 to rsp
		mov r10, [r12 - 168 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump310
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump310:
	; Computing bound for F
	sub rsp, 8
	; Moving 8 bytes from r12 - 176 to rsp
		mov r10, [r12 - 176 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump311
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump311:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof int[,,][,,]
	imul rdi, [rsp + 0 + 0] ; multiply by o
	jno .jump312
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump312:
	imul rdi, [rsp + 0 + 8] ; multiply by q
	jno .jump313
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump313:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize G to 0
	mov rax, 0
	push rax
	; Initialize F to 0
	mov rax, 0
	push rax
.jump314: ; Begin body of loop
	; Compare G to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump316 ; If G >= bound, ...
	mov qword [rsp + 8], 0 ; G = 0
	add qword [rsp + 0], 1 ; F++
.jump316:
	; Compare F to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump315 ; If F >= bound, break
.jump317:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for J
	sub rsp, 8
	; Moving 8 bytes from r12 - 184 to rsp
		mov r10, [r12 - 184 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump318
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump318:
	; Computing bound for I
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump319
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump319:
	; Computing bound for H
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for J
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump320
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump320:
	; Computing bound for I
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump321
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump321:
	; Computing bound for H
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump322
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump322:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize J to 0
	mov rax, 0
	push rax
	; Initialize I to 0
	mov rax, 0
	push rax
	; Initialize H to 0
	mov rax, 0
	push rax
.jump323: ; Begin body of loop
	; Compare J to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump325 ; If J >= bound, ...
	mov qword [rsp + 16], 0 ; J = 0
	add qword [rsp + 8], 1 ; I++
.jump325:
	; Compare I to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump326 ; If I >= bound, ...
	mov qword [rsp + 8], 0 ; I = 0
	add qword [rsp + 0], 1 ; H++
.jump326:
	; Compare H to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump324 ; If H >= bound, break
.jump327:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment J
	add qword [rsp + 16], 1
	jmp .jump323
.jump324: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump328
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump328:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof int[,,]
imul rdi, [rsp + 0 + 0] ; multiply by (sum[H : argnum, I : w, J : D] g)
	jno .jump329
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump329:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump330
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump330:
	imul rdi, [rsp + 0 + 16] ; multiply by n
	jno .jump331
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump331:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize J to 0
	mov rax, 0
	push rax
	; Initialize I to 0
	mov rax, 0
	push rax
	; Initialize H to 0
	mov rax, 0
	push rax
.jump332: ; Begin body of loop
	; Compare J to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump334 ; If J >= bound, ...
	mov qword [rsp + 16], 0 ; J = 0
	add qword [rsp + 8], 1 ; I++
.jump334:
	; Compare I to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump335 ; If I >= bound, ...
	mov qword [rsp + 8], 0 ; I = 0
	add qword [rsp + 0], 1 ; H++
.jump335:
	; Compare H to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump333 ; If H >= bound, break
.jump336:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for M
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump337
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump337:
	; Computing bound for L
	mov rax, [rel const50] ; 952
	push rax
	mov rax, [rsp]
	; Computing bound for K
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump338
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump338:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by G
	jno .jump339
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump339:
	imul rdi, [rsp + 0 + 8] ; multiply by 952
	jno .jump340
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump340:
	imul rdi, [rsp + 0 + 16] ; multiply by J
	jno .jump341
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump341:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize M to 0
	mov rax, 0
	push rax
	; Initialize L to 0
	mov rax, 0
	push rax
	; Initialize K to 0
	mov rax, 0
	push rax
.jump342: ; Begin body of loop
	; Compare M to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump344 ; If M >= bound, ...
	mov qword [rsp + 16], 0 ; M = 0
	add qword [rsp + 8], 1 ; L++
.jump344:
	; Compare L to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump345 ; If L >= bound, ...
	mov qword [rsp + 8], 0 ; L = 0
	add qword [rsp + 0], 1 ; K++
.jump345:
	; Compare K to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump343 ; If K >= bound, break
.jump346:
	; Compute loop body
	mov rax, [rel const51] ; 358
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment M
	add qword [rsp + 16], 1
	jmp .jump342
.jump343: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, [rsp + 72] ; No overflow if indices in bounds
	add rax, [rsp + 48]
	shl rax, 5
	add rax, [rsp + 80]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment J
	add qword [rsp + 16], 1
	jmp .jump332
.jump333: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	shl rax, 5
	add rax, [rsp + 64]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment G
	add qword [rsp + 8], 1
	jmp .jump314
.jump315: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump347
	sub rsp, 8 ; Align stack
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump347:
	cmp rax, [rsp + 16]
	jl .jump348
	sub rsp, 8 ; Align stack
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump348:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump349
	sub rsp, 8 ; Align stack
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump349:
	cmp rax, [rsp + 24]
	jl .jump350
	sub rsp, 8 ; Align stack
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump350:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 5
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 32
	; Moving 32 bytes from rax to rsp
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const52] ; 86
	push rax
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 152 to rsp
		mov r10, [r12 - 152 + 0]
		mov [rsp + 0], r10
	mov rdi, 8
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for G
	sub rsp, 8
	; Moving 8 bytes from r12 - 128 to rsp
		mov r10, [r12 - 128 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump351
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump351:
	; Computing bound for F
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump352
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump352:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by D
	jno .jump353
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump353:
	imul rdi, [rsp + 0 + 8] ; multiply by v
	jno .jump354
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump354:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize G to 0
	mov rax, 0
	push rax
	; Initialize F to 0
	mov rax, 0
	push rax
.jump355: ; Begin body of loop
	; Compare G to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump357 ; If G >= bound, ...
	mov qword [rsp + 8], 0 ; G = 0
	add qword [rsp + 0], 1 ; F++
.jump357:
	; Compare F to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump356 ; If F >= bound, break
.jump358:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 152 to rsp
		mov r10, [r12 - 152 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment G
	add qword [rsp + 8], 1
	jmp .jump355
.jump356: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rax, [rel const18] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump359
	sub rsp, 8
	; Moving 8 bytes from r12 - 152 to rsp
		mov r10, [r12 - 152 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump361
	mov rax, [rel const18] ; False
	push rax
	jmp .jump362
.jump361:
	mov rax, [rel const39] ; True
	push rax
.jump362:
	jmp .jump360
.jump359:
	sub rsp, 8
	; Moving 8 bytes from r12 - 104 to rsp
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 144 to rsp
		mov r10, [r12 - 144 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
.jump360:
	call _b
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	sub rsp, 8
	movsd [rsp], xmm0
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for G
	sub rsp, 8
	; Moving 8 bytes from r12 - 144 to rsp
		mov r10, [r12 - 144 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump363
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump363:
	; Computing bound for F
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump364
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump364:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof {float,bool,float}
	imul rdi, [rsp + 0 + 0] ; multiply by w
	jno .jump365
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump365:
	imul rdi, [rsp + 0 + 8] ; multiply by to_int(atan(s))
	jno .jump366
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump366:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize G to 0
	mov rax, 0
	push rax
	; Initialize F to 0
	mov rax, 0
	push rax
.jump367: ; Begin body of loop
	; Compare G to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump369 ; If G >= bound, ...
	mov qword [rsp + 8], 0 ; G = 0
	add qword [rsp + 0], 1 ; F++
.jump369:
	; Compare F to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump368 ; If F >= bound, break
.jump370:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 152 to rsp
		mov r10, [r12 - 152 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump371
	mov rax, [rel const53] ; 35.29
	push rax
	mov rax, [rel const18] ; False
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	jmp .jump372
.jump371:
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 152 to rsp
		mov r10, [r12 - 152 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 144 to rsp
		mov r10, [r12 - 144 + 0]
		mov [rsp + 0], r10
.jump372:
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 24
	add rax, [rsp + 56]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment G
	add qword [rsp + 8], 1
	jmp .jump367
.jump368: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	call _l
	add rsp, 24
	add rsp, 40
	add rsp, 16
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 168 to rsp
		mov r10, [r12 - 168 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump373
	sub rsp, 8 ; Align stack
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump373:
	cmp rax, [rsp + 24]
	jl .jump374
	sub rsp, 8 ; Align stack
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump374:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump375
	sub rsp, 8 ; Align stack
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump375:
	cmp rax, [rsp + 32]
	jl .jump376
	sub rsp, 8 ; Align stack
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump376:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump377
	sub rsp, 8 ; Align stack
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump377:
	cmp rax, [rsp + 40]
	jl .jump378
	sub rsp, 8 ; Align stack
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump378:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 5
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 32
	; Moving 32 bytes from rax to rsp
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for L
	sub rsp, 24
	; Moving 24 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -24 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 184 to rsp
		mov r10, [r12 - 184 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 208 to rsp
		mov r10, [r12 - 208 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump379
	sub rsp, 8 ; Align stack
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump379:
	cmp rax, [rsp + 16]
	jl .jump380
	sub rsp, 8 ; Align stack
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump380:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump381
	sub rsp, 8 ; Align stack
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump381:
	cmp rax, [rsp + 24]
	jl .jump382
	sub rsp, 8 ; Align stack
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump382:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump383
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump383:
	; Computing bound for K
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump384
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump384:
	; Computing bound for J
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump385
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump385:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by g
	jno .jump386
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump386:
	imul rdi, [rsp + 0 + 8] ; multiply by H
	jno .jump387
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump387:
	imul rdi, [rsp + 0 + 16] ; multiply by E[B, n]
	jno .jump388
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump388:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize L to 0
	mov rax, 0
	push rax
	; Initialize K to 0
	mov rax, 0
	push rax
	; Initialize J to 0
	mov rax, 0
	push rax
.jump389: ; Begin body of loop
	; Compare L to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump391 ; If L >= bound, ...
	mov qword [rsp + 16], 0 ; L = 0
	add qword [rsp + 8], 1 ; K++
.jump391:
	; Compare K to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump392 ; If K >= bound, ...
	mov qword [rsp + 8], 0 ; K = 0
	add qword [rsp + 0], 1 ; J++
.jump392:
	; Compare J to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump390 ; If J >= bound, break
.jump393:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 208 to rsp
		mov r10, [r12 - 208 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment L
	add qword [rsp + 16], 1
	jmp .jump389
.jump390: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 192 to rsp
		mov r10, [r12 - 192 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const54] ; 108
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump394
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
.jump394:
	cmp rax, [rsp + 24]
	jl .jump395
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
.jump395:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump396
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
.jump396:
	cmp rax, [rsp + 32]
	jl .jump397
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
.jump397:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump398
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
.jump398:
	cmp rax, [rsp + 40]
	jl .jump399
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
.jump399:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump400
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	jmp .jump401
.jump400:
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
.jump401:
	pop rax
	pop r10
	cmp rax, r10
	setg al
	and rax, 1
	push rax
	sub rsp, 16
	; Moving 16 bytes from r12 - 168 to rsp
		mov r10, [r12 - 168 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 168 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const39] ; True
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 104 to rsp
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 136 to rsp
		mov r10, [r12 - 136 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	add rsp, 64 ; Local variables
	pop rbp
	ret

E:
_E:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	; Moving 8 bytes from r12 - 192 to rsp
		mov r10, [r12 - 192 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 224 to rsp
		mov r10, [r12 - 224 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump402
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 144 to rsp
		mov r10, [r12 - 144 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for I
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump404
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump404:
	; Computing bound for H
	sub rsp, 8
	; Moving 8 bytes from r12 - 192 to rsp
		mov r10, [r12 - 192 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump405
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump405:
	; Computing bound for G
	sub rsp, 8
	; Moving 8 bytes from r12 - 216 to rsp
		mov r10, [r12 - 216 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump406
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump406:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by A
	jno .jump407
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump407:
	imul rdi, [rsp + 0 + 8] ; multiply by m
	jno .jump408
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump408:
	imul rdi, [rsp + 0 + 16] ; multiply by k
	jno .jump409
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump409:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize I to 0
	mov rax, 0
	push rax
	; Initialize H to 0
	mov rax, 0
	push rax
	; Initialize G to 0
	mov rax, 0
	push rax
.jump410: ; Begin body of loop
	; Compare I to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump412 ; If I >= bound, ...
	mov qword [rsp + 16], 0 ; I = 0
	add qword [rsp + 8], 1 ; H++
.jump412:
	; Compare H to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump413 ; If H >= bound, ...
	mov qword [rsp + 8], 0 ; H = 0
	add qword [rsp + 0], 1 ; G++
.jump413:
	; Compare G to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump411 ; If G >= bound, break
.jump414:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 176 to rsp
		mov r10, [r12 - 176 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment I
	add qword [rsp + 16], 1
	jmp .jump410
.jump411: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for I
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump415
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump415:
	; Computing bound for H
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump416
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump416:
	; Computing bound for G
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump417
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump417:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof float[,]
	imul rdi, [rsp + 0 + 0] ; multiply by w
	jno .jump418
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump418:
	imul rdi, [rsp + 0 + 8] ; multiply by d
	jno .jump419
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump419:
	imul rdi, [rsp + 0 + 16] ; multiply by f
	jno .jump420
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump420:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize I to 0
	mov rax, 0
	push rax
	; Initialize H to 0
	mov rax, 0
	push rax
	; Initialize G to 0
	mov rax, 0
	push rax
.jump421: ; Begin body of loop
	; Compare I to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump423 ; If I >= bound, ...
	mov qword [rsp + 16], 0 ; I = 0
	add qword [rsp + 8], 1 ; H++
.jump423:
	; Compare H to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump424 ; If H >= bound, ...
	mov qword [rsp + 8], 0 ; H = 0
	add qword [rsp + 0], 1 ; G++
.jump424:
	; Compare G to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump422 ; If G >= bound, break
.jump425:
	; Compute loop body
	sub rsp, 24
	; Moving 24 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 64 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 24
	add rax, [rsp + 72]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment I
	add qword [rsp + 16], 1
	jmp .jump421
.jump422: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 16
	; Moving 16 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 176 to rsp
		mov r10, [r12 - 176 + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	; Moving 24 bytes from r12 - 216 to rsp
		mov r10, [r12 - 216 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 216 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 216 + 0]
		mov [rsp + 0], r10
	jmp .jump403
.jump402:
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 152 to rsp
		mov r10, [r12 - 152 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump426
	mov rax, [rel const55] ; 58.75
	push rax
	jmp .jump427
.jump426:
	call _b
	sub rsp, 8
	movsd [rsp], xmm0
.jump427:
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for I
	sub rsp, 8
	; Moving 8 bytes from r12 - 128 to rsp
		mov r10, [r12 - 128 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump428
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump428:
	; Computing bound for H
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump429
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump429:
	; Computing bound for G
	mov rax, [rel const56] ; 557
	push rax
	mov rax, [rsp]
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by 557
	jno .jump430
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump430:
	imul rdi, [rsp + 0 + 8] ; multiply by F
	jno .jump431
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump431:
	imul rdi, [rsp + 0 + 16] ; multiply by v
	jno .jump432
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump432:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize I to 0
	mov rax, 0
	push rax
	; Initialize H to 0
	mov rax, 0
	push rax
	; Initialize G to 0
	mov rax, 0
	push rax
.jump433: ; Begin body of loop
	; Compare I to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump435 ; If I >= bound, ...
	mov qword [rsp + 16], 0 ; I = 0
	add qword [rsp + 8], 1 ; H++
.jump435:
	; Compare H to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump436 ; If H >= bound, ...
	mov qword [rsp + 8], 0 ; H = 0
	add qword [rsp + 0], 1 ; G++
.jump436:
	; Compare G to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump434 ; If G >= bound, break
.jump437:
	; Compute loop body
	mov rax, [rel const57] ; 976
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment I
	add qword [rsp + 16], 1
	jmp .jump433
.jump434: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for I
	mov rax, [rel const58] ; 591
	push rax
	mov rax, [rsp]
	; Computing bound for H
	sub rsp, 8
	; Moving 8 bytes from r12 - 208 to rsp
		mov r10, [r12 - 208 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump438
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump438:
	; Computing bound for G
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump439
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump439:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof float[,]
	imul rdi, [rsp + 0 + 0] ; multiply by d
	jno .jump440
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump440:
	imul rdi, [rsp + 0 + 8] ; multiply by B
	jno .jump441
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump441:
	imul rdi, [rsp + 0 + 16] ; multiply by 591
	jno .jump442
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump442:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize I to 0
	mov rax, 0
	push rax
	; Initialize H to 0
	mov rax, 0
	push rax
	; Initialize G to 0
	mov rax, 0
	push rax
.jump443: ; Begin body of loop
	; Compare I to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump445 ; If I >= bound, ...
	mov qword [rsp + 16], 0 ; I = 0
	add qword [rsp + 8], 1 ; H++
.jump445:
	; Compare H to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump446 ; If H >= bound, ...
	mov qword [rsp + 8], 0 ; H = 0
	add qword [rsp + 0], 1 ; G++
.jump446:
	; Compare G to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump444 ; If G >= bound, break
.jump447:
	; Compute loop body
	sub rsp, 24
	; Moving 24 bytes from r12 - 128 to rsp
		mov r10, [r12 - 128 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 128 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 128 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 24
	add rax, [rsp + 72]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment I
	add qword [rsp + 16], 1
	jmp .jump443
.jump444: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	; Moving 24 bytes from r12 - 128 to rsp
		mov r10, [r12 - 128 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 128 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 128 + 0]
		mov [rsp + 0], r10
.jump403:
	; Moving 112 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 104]
		mov [rsp + 8 + 104], r10
		mov r10, [rsp + 0 + 96]
		mov [rsp + 8 + 96], r10
		mov r10, [rsp + 0 + 88]
		mov [rsp + 8 + 88], r10
		mov r10, [rsp + 0 + 80]
		mov [rsp + 8 + 80], r10
		mov r10, [rsp + 0 + 72]
		mov [rsp + 8 + 72], r10
		mov r10, [rsp + 0 + 64]
		mov [rsp + 8 + 64], r10
		mov r10, [rsp + 0 + 56]
		mov [rsp + 8 + 56], r10
		mov r10, [rsp + 0 + 48]
		mov [rsp + 8 + 48], r10
		mov r10, [rsp + 0 + 40]
		mov [rsp + 8 + 40], r10
		mov r10, [rsp + 0 + 32]
		mov [rsp + 8 + 32], r10
		mov r10, [rsp + 0 + 24]
		mov [rsp + 8 + 24], r10
		mov r10, [rsp + 0 + 16]
		mov [rsp + 8 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 8 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	sub rsp, 8
	; Moving 8 bytes from r12 - 208 to rsp
		mov r10, [r12 - 208 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const39] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump448
	jmp .jump449
.jump448:
.jump449:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for V
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump450
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump450:
	; Computing bound for U
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump451
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump451:
	; Computing bound for T
	sub rsp, 8
	; Moving 8 bytes from r12 - 184 to rsp
		mov r10, [r12 - 184 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump452
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump452:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by n
	jno .jump453
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump453:
	imul rdi, [rsp + 0 + 8] ; multiply by R
	jno .jump454
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump454:
	imul rdi, [rsp + 0 + 16] ; multiply by J
	jno .jump455
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump455:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize V to 0
	mov rax, 0
	push rax
	; Initialize U to 0
	mov rax, 0
	push rax
	; Initialize T to 0
	mov rax, 0
	push rax
.jump456: ; Begin body of loop
	; Compare V to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump458 ; If V >= bound, ...
	mov qword [rsp + 16], 0 ; V = 0
	add qword [rsp + 8], 1 ; U++
.jump458:
	; Compare U to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump459 ; If U >= bound, ...
	mov qword [rsp + 8], 0 ; U = 0
	add qword [rsp + 0], 1 ; T++
.jump459:
	; Compare T to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump457 ; If T >= bound, break
.jump460:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment V
	add qword [rsp + 16], 1
	jmp .jump456
.jump457: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Moving 32 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 24]
		mov [rsp + 8 + 24], r10
		mov r10, [rsp + 0 + 16]
		mov [rsp + 8 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 8 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	; Moving 0 bytes from rsp + 32 to rsp + 32
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from r12 - 192 to rsp
		mov r10, [r12 - 192 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	add rsp, 128 ; Local variables
	pop rbp
	ret

F:
_F:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	; Moving 8 bytes from r12 - 224 to rsp
		mov r10, [r12 - 224 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 216 to rsp
		mov r10, [r12 - 216 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 168 to rsp
		mov r10, [r12 - 168 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump461
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; mod by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump461:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 224 to rsp
		mov r10, [r12 - 224 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump462
	sub rsp, 8
	; Moving 8 bytes from r12 - 176 to rsp
		mov r10, [r12 - 176 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 176 to rsp
		mov r10, [r12 - 176 + 0]
		mov [rsp + 0], r10
	jmp .jump463
.jump462:
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
.jump463:
	; Moving 32 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 24]
		mov [rsp + 0 + 24], r10
		mov r10, [rsp + 0 + 16]
		mov [rsp + 0 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for S
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump464
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump464:
	; Computing bound for R
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump465
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump465:
	; Computing bound for Q
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump466
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump466:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize S to 0
	mov rax, 0
	push rax
	; Initialize R to 0
	mov rax, 0
	push rax
	; Initialize Q to 0
	mov rax, 0
	push rax
.jump467: ; Begin body of loop
	; Compare S to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump469 ; If S >= bound, ...
	mov qword [rsp + 16], 0 ; S = 0
	add qword [rsp + 8], 1 ; R++
.jump469:
	; Compare R to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump470 ; If R >= bound, ...
	mov qword [rsp + 8], 0 ; R = 0
	add qword [rsp + 0], 1 ; Q++
.jump470:
	; Compare Q to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump468 ; If Q >= bound, break
.jump471:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 48] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment S
	add qword [rsp + 16], 1
	jmp .jump467
.jump468: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 32 ; Local variables
	pop rbp
	ret
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const18] ; False
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 104 to rsp
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 48 ; Local variables
	pop rbp
	ret

jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	mov rax, [rel const33] ; 60.82
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const34] ; 800
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump129
	lea rdi, [rel const8] ; mod by zero
	call _fail_assertion
.jump129:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for f
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump130
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump130:
	; Computing bound for e
	mov rax, [rel const35] ; 850
	push rax
	mov rax, [rsp]
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize f to 0
	mov rax, 0
	push rax
	; Initialize e to 0
	mov rax, 0
	push rax
.jump131: ; Begin body of loop
	; Compare f to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump133 ; If f >= bound, ...
	mov qword [rsp + 8], 0 ; f = 0
	add qword [rsp + 0], 1 ; e++
.jump133:
	; Compare e to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump132 ; If e >= bound, break
.jump134:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment f
	add qword [rsp + 8], 1
	jmp .jump131
.jump132: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	sub rsp, 8 ; Align stack
	call _b
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 16
	; Moving 16 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 24 to rsp + 24
		mov r10, [rsp + 24 + 0]
		mov [rsp + 24 + 0], r10
	add rsp, 24
	mov rax, [rsp]
	cmp rax, 0
	jg .jump135
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump135:
	; Computing bound for e
	mov rax, [rel const18] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump136
	mov rax, [rel const18] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump138
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	jmp .jump139
.jump138:
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
.jump139:
	jmp .jump137
.jump136:
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
.jump137:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump140
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump140:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by (if false then (if false then d else argnum) else (- (- argnum)))
	jno .jump141
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump141:
imul rdi, [rsp + 0 + 8] ; multiply by {c, asin(b()), (sum[e : 850, f : argnum] f)}{2}
	jno .jump142
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump142:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize f to 0
	mov rax, 0
	push rax
	; Initialize e to 0
	mov rax, 0
	push rax
.jump143: ; Begin body of loop
	; Compare f to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump145 ; If f >= bound, ...
	mov qword [rsp + 8], 0 ; f = 0
	add qword [rsp + 0], 1 ; e++
.jump145:
	; Compare e to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump144 ; If e >= bound, break
.jump146:
	; Compute loop body
	mov rax, [rel const36] ; 11.31
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	call _b
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment f
	add qword [rsp + 8], 1
	jmp .jump143
.jump144: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const18] ; False
	push rax
	mov rax, [rel const18] ; False
	push rax
	mov rdi, 16
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump147
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
.jump147:
	cmp rax, [rsp + 8]
	jl .jump148
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
.jump148:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump149
	sub rsp, 8 ; Align stack
	call _b
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	pop rdi
	call _to_float
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	jmp .jump150
.jump149:
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
.jump150:
	mov rax, [rel const37] ; 19.65
	push rax
	mov rdi, 24
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	push rax
	mov rax, 3
	push rax
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	; Moving 24 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 64 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const46] ; 26.18
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const18] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump239
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump240
.jump239:
	mov rax, [rel const47] ; 651
	push rax
.jump240:
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	sub rsp, 16
	; Moving 16 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 176 to rsp
		mov r10, [rbp - 176 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 168 to rsp
		mov r10, [rbp - 168 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setg al
	and rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 152 to rsp
		mov r10, [rbp - 152 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	mov rdi, 24
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	push rax
	mov rax, 3
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for B
	sub rsp, 8
	; Moving 8 bytes from rbp - 184 to rsp
		mov r10, [rbp - 184 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump241
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump241:
	; Computing bound for A
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump242
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump242:
	; Computing bound for z
	sub rsp, 8
	; Moving 8 bytes from rbp - 184 to rsp
		mov r10, [rbp - 184 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump243
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump243:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by n
	jno .jump244
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump244:
	imul rdi, [rsp + 0 + 8] ; multiply by f
	jno .jump245
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump245:
	imul rdi, [rsp + 0 + 16] ; multiply by n
	jno .jump246
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump246:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize B to 0
	mov rax, 0
	push rax
	; Initialize A to 0
	mov rax, 0
	push rax
	; Initialize z to 0
	mov rax, 0
	push rax
.jump247: ; Begin body of loop
	; Compare B to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump249 ; If B >= bound, ...
	mov qword [rsp + 16], 0 ; B = 0
	add qword [rsp + 8], 1 ; A++
.jump249:
	; Compare A to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump250 ; If A >= bound, ...
	mov qword [rsp + 8], 0 ; A = 0
	add qword [rsp + 0], 1 ; z++
.jump250:
	; Compare z to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump248 ; If z >= bound, break
.jump251:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 176 to rsp
		mov r10, [rbp - 176 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment B
	add qword [rsp + 16], 1
	jmp .jump247
.jump248: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 184 to rsp
		mov r10, [rbp - 184 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 176 to rsp
		mov r10, [rbp - 176 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 184 to rsp
		mov r10, [rbp - 184 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump252
	sub rsp, 8 ; Align stack
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump252:
	cmp rax, [rsp + 24]
	jl .jump253
	sub rsp, 8 ; Align stack
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump253:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump254
	sub rsp, 8 ; Align stack
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump254:
	cmp rax, [rsp + 32]
	jl .jump255
	sub rsp, 8 ; Align stack
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump255:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump256
	sub rsp, 8 ; Align stack
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump256:
	cmp rax, [rsp + 40]
	jl .jump257
	sub rsp, 8 ; Align stack
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump257:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump258
	sub rsp, 8 ; Align stack
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump258:
	cmp rax, [rsp + 8]
	jl .jump259
	sub rsp, 8 ; Align stack
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump259:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump260
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for B
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump262
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump262:
	; Computing bound for A
	sub rsp, 8
	; Moving 8 bytes from rbp - 168 to rsp
		mov r10, [rbp - 168 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump263
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump263:
	; Computing bound for z
	sub rsp, 8
	; Moving 8 bytes from rbp - 176 to rsp
		mov r10, [rbp - 176 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump264
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump264:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by o
	jno .jump265
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump265:
	imul rdi, [rsp + 0 + 8] ; multiply by q
	jno .jump266
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump266:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump267
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump267:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize B to 0
	mov rax, 0
	push rax
	; Initialize A to 0
	mov rax, 0
	push rax
	; Initialize z to 0
	mov rax, 0
	push rax
.jump268: ; Begin body of loop
	; Compare B to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump270 ; If B >= bound, ...
	mov qword [rsp + 16], 0 ; B = 0
	add qword [rsp + 8], 1 ; A++
.jump270:
	; Compare A to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump271 ; If A >= bound, ...
	mov qword [rsp + 8], 0 ; A = 0
	add qword [rsp + 0], 1 ; z++
.jump271:
	; Compare z to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump269 ; If z >= bound, break
.jump272:
	; Compute loop body
	mov rax, [rel const39] ; True
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment B
	add qword [rsp + 16], 1
	jmp .jump268
.jump269: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for B
	sub rsp, 8
	; Moving 8 bytes from rbp - 192 to rsp
		mov r10, [rbp - 192 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump273
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump273:
	; Computing bound for A
	sub rsp, 8
	; Moving 8 bytes from rbp - 176 to rsp
		mov r10, [rbp - 176 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump274
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump274:
	; Computing bound for z
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump275
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump275:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump276
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump276:
	imul rdi, [rsp + 0 + 8] ; multiply by o
	jno .jump277
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump277:
	imul rdi, [rsp + 0 + 16] ; multiply by m
	jno .jump278
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump278:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize B to 0
	mov rax, 0
	push rax
	; Initialize A to 0
	mov rax, 0
	push rax
	; Initialize z to 0
	mov rax, 0
	push rax
.jump279: ; Begin body of loop
	; Compare B to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump281 ; If B >= bound, ...
	mov qword [rsp + 16], 0 ; B = 0
	add qword [rsp + 8], 1 ; A++
.jump281:
	; Compare A to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump282 ; If A >= bound, ...
	mov qword [rsp + 8], 0 ; A = 0
	add qword [rsp + 0], 1 ; z++
.jump282:
	; Compare z to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump280 ; If z >= bound, break
.jump283:
	; Compute loop body
	mov rax, [rel const18] ; False
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment B
	add qword [rsp + 16], 1
	jmp .jump279
.jump280: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for B
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump284
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump284:
	; Computing bound for A
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump285
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump285:
	; Computing bound for z
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump286
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump286:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by d
	jno .jump287
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump287:
	imul rdi, [rsp + 0 + 8] ; multiply by g
	jno .jump288
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump288:
	imul rdi, [rsp + 0 + 16] ; multiply by w
	jno .jump289
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump289:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize B to 0
	mov rax, 0
	push rax
	; Initialize A to 0
	mov rax, 0
	push rax
	; Initialize z to 0
	mov rax, 0
	push rax
.jump290: ; Begin body of loop
	; Compare B to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump292 ; If B >= bound, ...
	mov qword [rsp + 16], 0 ; B = 0
	add qword [rsp + 8], 1 ; A++
.jump292:
	; Compare A to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump293 ; If A >= bound, ...
	mov qword [rsp + 8], 0 ; A = 0
	add qword [rsp + 0], 1 ; z++
.jump293:
	; Compare z to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump291 ; If z >= bound, break
.jump294:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 152 to rsp
		mov r10, [rbp - 152 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment B
	add qword [rsp + 16], 1
	jmp .jump290
.jump291: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	mov rdi, 96
	call _jpl_alloc
	; Moving 96 bytes from rsp to rax
		mov r10, [rsp + 88]
		mov [rax + 88], r10
		mov r10, [rsp + 80]
		mov [rax + 80], r10
		mov r10, [rsp + 72]
		mov [rax + 72], r10
		mov r10, [rsp + 64]
		mov [rax + 64], r10
		mov r10, [rsp + 56]
		mov [rax + 56], r10
		mov r10, [rsp + 48]
		mov [rax + 48], r10
		mov r10, [rsp + 40]
		mov [rax + 40], r10
		mov r10, [rsp + 32]
		mov [rax + 32], r10
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 96
	push rax
	mov rax, 3
	push rax
	jmp .jump261
.jump260:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for z
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const48] ; 888
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump295
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
.jump295:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof bool[,,]
	imul rdi, [rsp + 0 + 0] ; multiply by (888 * g)
	jno .jump296
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump296:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize z to 0
	mov rax, 0
	push rax
.jump297: ; Begin body of loop
	; Compare z to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump298 ; If z >= bound, break
.jump299:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for C
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump300
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump300:
	; Computing bound for B
	mov rax, [rel const49] ; 93
	push rax
	mov rax, [rsp]
	; Computing bound for A
	sub rsp, 8
	; Moving 8 bytes from rbp - 248 to rsp
		mov r10, [rbp - 248 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump301
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump301:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by z
	jno .jump302
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump302:
	imul rdi, [rsp + 0 + 8] ; multiply by 93
	jno .jump303
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump303:
	imul rdi, [rsp + 0 + 16] ; multiply by w
	jno .jump304
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump304:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize C to 0
	mov rax, 0
	push rax
	; Initialize B to 0
	mov rax, 0
	push rax
	; Initialize A to 0
	mov rax, 0
	push rax
.jump305: ; Begin body of loop
	; Compare C to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump307 ; If C >= bound, ...
	mov qword [rsp + 16], 0 ; C = 0
	add qword [rsp + 8], 1 ; B++
.jump307:
	; Compare B to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump308 ; If B >= bound, ...
	mov qword [rsp + 8], 0 ; B = 0
	add qword [rsp + 0], 1 ; A++
.jump308:
	; Compare A to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump306 ; If A >= bound, break
.jump309:
	; Compute loop body
	mov rax, [rel const39] ; True
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment C
	add qword [rsp + 16], 1
	jmp .jump305
.jump306: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	shl rax, 5
	add rax, [rsp + 48]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment z
	add qword [rsp + 0], 1
	jmp .jump297
.jump298: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
.jump261:
	lea rdi, [rsp + 24]
	call _a
	add rsp, 16
	add rsp, 0
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 152 to rsp
		mov r10, [rbp - 152 + 0]
		mov [rsp + 0], r10
	add rsp, 216 ; Local variables
	pop r12
	pop rbp
	ret

