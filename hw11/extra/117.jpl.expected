global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 913
const1: db `non-positive loop bound`, 0
const2: db `overflow computing array size`, 0
const3: dq 767
const4: db `negative array index`, 0
const5: db `index too large`, 0
const6: dq 1
const7: dq 640
const8: dq 161
const9: dq 229
const10: db `divide by zero`, 0
const11: dq 134
const12: dq 33.84
const13: db `mod by zero`, 0
const14: db `b`, 0
const15: dq 279
const16: dq 0
const17: dq 127
const18: dq 885
const19: dq 770
const20: dq 173
const21: dq 823
const22: dq 982
const23: dq 343
const24: dq 91.14
const25: dq 18.63
const26: dq 21.03
const27: dq 56
const28: dq 40
const29: dq 387
const30: dq 980
const31: dq 277
const32: dq 448
const33: dq 179
const34: dq 12.14
const35: dq 748
const36: dq 833
const37: dq 166
const38: dq 917
const39: dq 650
const40: dq 218
const41: dq 4.9
const42: dq 52.27
const43: dq 45.49
const44: dq 763
const45: dq 110
const46: dq 281
const47: dq 427
const48: dq 587
const49: dq 532
const50: dq 300
const51: dq 63.84
const52: dq 326
const53: dq 713
const54: dq 631
const55: dq 222
const56: dq 36.96
const57: dq 36.59
const58: dq 530
const59: dq 366
const60: dq 85.46
const61: dq 51.78
const62: dq 42.8
const63: dq 832
const64: dq 65.28
const65: dq 58.11
const66: dq 10.53
const67: dq 15.39
const68: dq 77
const69: dq 233
const70: dq 737
const71: dq 929
const72: dq 391
const73: dq 939
const74: dq 1000
const75: dq 72.77
const76: dq 81.07
const77: dq 244
const78: dq 570
const79: dq 677
const80: dq 68.71
const81: dq 95.96
const82: dq 221
const83: dq 612
const84: dq 97
const85: db `l.png`, 0
const86: dq 853
const87: dq 171
const88: dq 30
const89: dq 72.95
const90: dq 66.75
const91: dq 411
const92: dq 60.45
const93: dq 533
const94: dq 295
const95: dq 17.9
const96: db `(FloatType)`, 0
const97: dq 49.76
const98: db `o`, 0
const99: dq 36.6
const100: db `C`, 0
const101: dq 106
const102: db `p`, 0
const103: dq 16.39
const104: dq 103
const105: dq 709
const106: dq 890
const107: dq 114
const108: dq 6.37

section .text
a:
_a:
	push rbp
	mov rbp, rsp
	push rdi
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for b
	mov rax, [rel const0] ; 913
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump1:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by (- 913)
	jno .jump2
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump2:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize b to 0
	mov rax, 0
	push rax
.jump3: ; Begin body of loop
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump4 ; If b >= bound, break
.jump5:
	; Compute loop body
	sub rsp, 32
	lea rdi, [rsp + 0]
	call _a
	mov rax, [rel const3] ; 767
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump6
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump6:
	cmp rax, [rsp + 24]
	jl .jump7
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump7:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump8
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump8:
	cmp rax, [rsp + 32]
	jl .jump9
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump9:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump10
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump10:
	cmp rax, [rsp + 40]
	jl .jump11
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump11:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setg al
	and rax, 1
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment b
	add qword [rsp + 0], 1
	jmp .jump3
.jump4: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for d
	mov rax, [rel const6] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump12
	mov rax, [rel const7] ; 640
	push rax
	jmp .jump13
.jump12:
	mov rax, [rel const8] ; 161
	push rax
.jump13:
	pop rax
	neg rax
	push rax
	mov rax, [rel const9] ; 229
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump14
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; divide by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump14:
	cqo
	idiv r10
	push rax
	mov rax, [rel const11] ; 134
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump15
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump15:
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const12] ; 33.84
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump16
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; mod by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump16:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump17
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump17:
	; Computing bound for b
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump18
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump18:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump19: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump21 ; If d >= bound, ...
	mov qword [rsp + 16], 0 ; d = 0
	add qword [rsp + 8], 1 ; c++
.jump21:
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump22 ; If c >= bound, ...
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
.jump22:
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump20 ; If b >= bound, break
.jump23:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment d
	add qword [rsp + 16], 1
	jmp .jump19
.jump20: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump24
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump24:
	cmp rax, [rsp + 8]
	jl .jump25
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump25:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	jne .jump26
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; b
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump26:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for d
	mov rax, [rel const15] ; 279
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	mov rax, [rsp]
	cmp rax, 0
	jg .jump27
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump27:
	; Computing bound for c
	mov rax, [rel const6] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump28
	mov rax, [rel const16] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump30
	mov rax, [rel const17] ; 127
	push rax
	mov rax, [rel const18] ; 885
	push rax
	jmp .jump31
.jump30:
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const19] ; 770
	push rax
.jump31:
	jmp .jump29
.jump28:
	mov rax, [rel const16] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump32
	mov rax, [rel const20] ; 173
	push rax
	jmp .jump33
.jump32:
	mov rax, [rel const21] ; 823
	push rax
.jump33:
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
.jump29:
	; Moving 8 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	mov rax, [rsp]
	cmp rax, 0
	jg .jump34
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump34:
	; Computing bound for b
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump35
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump35:
	; Computing bound for b
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump36
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump36:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump37
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump37:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump38
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump38:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump39: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump41 ; If c >= bound, ...
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
.jump41:
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump40 ; If b >= bound, break
.jump42:
	; Compute loop body
	mov rax, [rel const6] ; True
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment c
	add qword [rsp + 8], 1
	jmp .jump39
.jump40: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Moving 8 bytes from rsp + 24 to rsp + 24
		mov r10, [rsp + 24 + 0]
		mov [rsp + 24 + 0], r10
	add rsp, 24
	sub rsp, 8 ; Align stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for d
	mov rax, [rel const22] ; 982
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump43
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump43:
	; Computing bound for c
	mov rax, [rel const23] ; 343
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump44
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump44:
	; Computing bound for b
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump45
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump45:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump46: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump48 ; If d >= bound, ...
	mov qword [rsp + 16], 0 ; d = 0
	add qword [rsp + 8], 1 ; c++
.jump48:
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump49 ; If c >= bound, ...
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
.jump49:
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump47 ; If b >= bound, break
.jump50:
	; Compute loop body
	mov rax, [rel const24] ; 91.14
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 48] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment d
	add qword [rsp + 16], 1
	jmp .jump46
.jump47: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump51
	lea rdi, [rel const13] ; mod by zero
	call _fail_assertion
.jump51:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump52
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump52:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
imul rdi, [rsp + 0 + 0] ; multiply by (to_int(atan((sum[b : argnum, c : 343, d : 982] 91.14))) % {(array[b : argnum, c : argnum] true), argnum}{1})
	jno .jump53
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump53:
	imul rdi, [rsp + 0 + 8] ; multiply by (if (! true) then (if false then {885, 127} else {770, argnum}) else {argnum, (if false then 173 else 823)}){1}
	jno .jump54
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump54:
	imul rdi, [rsp + 0 + 16] ; multiply by {argnum, ((- argnum) < 279)}{0}
	jno .jump55
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump55:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump56: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump58 ; If d >= bound, ...
	mov qword [rsp + 16], 0 ; d = 0
	add qword [rsp + 8], 1 ; c++
.jump58:
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump59 ; If c >= bound, ...
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
.jump59:
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump57 ; If b >= bound, break
.jump60:
	; Compute loop body
	mov rax, [rel const25] ; 18.63
	push rax
	mov rax, [rel const26] ; 21.03
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment d
	add qword [rsp + 16], 1
	jmp .jump56
.jump57: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	mov rax, [rbp - 8] ; Address to write return value into
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 40 ; Local variables
	pop rbp
	ret
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for b
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump61
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump61:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof bool[]
	imul rdi, [rsp + 0 + 0] ; multiply by (argnum + argnum)
	jno .jump62
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump62:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize b to 0
	mov rax, 0
	push rax
.jump63: ; Begin body of loop
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump64 ; If b >= bound, break
.jump65:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump66
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump66:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by b
	jno .jump67
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump67:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
.jump68: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump69 ; If c >= bound, break
.jump70:
	; Compute loop body
	mov rax, [rel const16] ; False
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment c
	add qword [rsp + 0], 1
	jmp .jump68
.jump69: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 16
	add rax, [rsp + 32]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment b
	add qword [rsp + 0], 1
	jmp .jump63
.jump64: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	mov rax, [rel const27] ; 56
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump71
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const28] ; 40
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump73
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump73:
	cmp rax, [rsp + 8]
	jl .jump74
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump74:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump72
.jump71:
	mov rax, [rel const29] ; 387
	push rax
.jump72:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump75
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump75:
	cmp rax, [rsp + 8]
	jl .jump76
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump76:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 16
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const30] ; 980
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump77
	lea rdi, [rel const13] ; mod by zero
	call _fail_assertion
.jump77:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump78
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump78:
	; Computing bound for c
	mov rax, [rel const31] ; 277
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump79
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump79:
	; Computing bound for b
	mov rax, [rel const32] ; 448
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump80
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump80:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump81: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump83 ; If d >= bound, ...
	mov qword [rsp + 16], 0 ; d = 0
	add qword [rsp + 8], 1 ; c++
.jump83:
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump84 ; If c >= bound, ...
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
.jump84:
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump82 ; If b >= bound, break
.jump85:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment d
	add qword [rsp + 16], 1
	jmp .jump81
.jump82: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump86
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump86:
	cmp rax, [rsp + 8]
	jl .jump87
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump87:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump88
	jmp .jump89
.jump88:
	mov rax, [rel const33] ; 179
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	mov rax, [rel const34] ; 12.14
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump90
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump92
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump92:
	; Computing bound for b
	mov rax, [rel const35] ; 748
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump93
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump93:
	; Computing total size of heap memory to allocate
	mov rdi, 0 ; sizeof {}
	imul rdi, [rsp + 0 + 0] ; multiply by 748
	jno .jump94
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump94:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump95
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump95:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump96: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump98 ; If c >= bound, ...
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
.jump98:
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump97 ; If b >= bound, break
.jump99:
	; Compute loop body
	mov rax, [rel const6] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump100
	jmp .jump101
.jump100:
.jump101:
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 0
	add rax, [rsp + 32]
	; Move body (0 bytes) to index
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	; Increment c
	add qword [rsp + 8], 1
	jmp .jump96
.jump97: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rax, [rel const36] ; 833
	push rax
	mov rax, [rel const37] ; 166
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for d
	mov rax, [rel const38] ; 917
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump102
	lea rdi, [rel const10] ; divide by zero
	call _fail_assertion
.jump102:
	cqo
	idiv r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump103
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump103:
	; Computing bound for c
	mov rax, [rel const39] ; 650
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump104
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump104:
	; Computing bound for b
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for b
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump105
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump105:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize b to 0
	mov rax, 0
	push rax
.jump106: ; Begin body of loop
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump107 ; If b >= bound, break
.jump108:
	; Compute loop body
	mov rax, [rel const40] ; 218
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment b
	add qword [rsp + 0], 1
	jmp .jump106
.jump107: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump109
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump109:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump110: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump112 ; If d >= bound, ...
	mov qword [rsp + 16], 0 ; d = 0
	add qword [rsp + 8], 1 ; c++
.jump112:
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump113 ; If c >= bound, ...
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
.jump113:
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump111 ; If b >= bound, break
.jump114:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 112 to rsp
		mov r10, [rbp - 112 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment d
	add qword [rsp + 16], 1
	jmp .jump110
.jump111: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump115
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump115:
	cmp rax, [rsp + 16]
	jl .jump116
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump116:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump117
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump117:
	cmp rax, [rsp + 24]
	jl .jump118
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump118:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 0
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 0
	; Moving 0 bytes from rax to rsp
	jmp .jump91
.jump90:
.jump91:
.jump89:
	sub rsp, 8 ; Align stack
	mov rax, [rel const41] ; 4.9
	push rax
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for b
	mov rax, [rel const16] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump119
	mov rax, [rel const42] ; 52.27
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	jmp .jump120
.jump119:
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
.jump120:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump121
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump121:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize b to 0
	mov rax, 0
	push rax
.jump122: ; Begin body of loop
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump123 ; If b >= bound, break
.jump124:
	; Compute loop body
	mov rax, [rel const43] ; 45.49
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 16] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 16], xmm0 ; Save sum
	; Increment b
	add qword [rsp + 0], 1
	jmp .jump122
.jump123: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for e
	mov rax, [rel const6] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump125
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for e
	mov rax, [rel const44] ; 763
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const45] ; 110
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump127
	lea rdi, [rel const10] ; divide by zero
	call _fail_assertion
.jump127:
	cqo
	idiv r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump128
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump128:
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const46] ; 281
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump129
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; mod by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump129:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump130
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump130:
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump131
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump131:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump132: ; Begin body of loop
	; Compare e to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump134 ; If e >= bound, ...
	mov qword [rsp + 16], 0 ; e = 0
	add qword [rsp + 8], 1 ; d++
.jump134:
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump135 ; If d >= bound, ...
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
.jump135:
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump133 ; If c >= bound, break
.jump136:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment e
	add qword [rsp + 16], 1
	jmp .jump132
.jump133: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	jmp .jump126
.jump125:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for d
	mov rax, [rel const47] ; 427
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump137
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump137:
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump138
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump138:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump139: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump141 ; If d >= bound, ...
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
.jump141:
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump140 ; If c >= bound, break
.jump142:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment d
	add qword [rsp + 8], 1
	jmp .jump139
.jump140: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rel const48] ; 587
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
.jump126:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump143
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump143:
	; Computing bound for d
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const49] ; 532
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump144
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; mod by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump144:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump145
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump145:
	; Computing bound for c
	mov rax, [rel const50] ; 300
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump146
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump146:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof int[,]
	imul rdi, [rsp + 0 + 0] ; multiply by 300
	jno .jump147
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump147:
	imul rdi, [rsp + 0 + 8] ; multiply by (532 % argnum)
	jno .jump148
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump148:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump149: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump151 ; If d >= bound, ...
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
.jump151:
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump150 ; If c >= bound, break
.jump152:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump153
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump153:
	; Computing bound for e
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump154
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump154:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump155
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump155:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump156
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump156:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize f to 0
	mov rax, 0
	push rax
	; Initialize e to 0
	mov rax, 0
	push rax
.jump157: ; Begin body of loop
	; Compare f to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump159 ; If f >= bound, ...
	mov qword [rsp + 8], 0 ; f = 0
	add qword [rsp + 0], 1 ; e++
.jump159:
	; Compare e to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump158 ; If e >= bound, break
.jump160:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment f
	add qword [rsp + 8], 1
	jmp .jump157
.jump158: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 24
	add rax, [rsp + 56]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment d
	add qword [rsp + 8], 1
	jmp .jump149
.jump150: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump161
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump161:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
.jump162: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump163 ; If c >= bound, break
.jump164:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 112 to rsp
		mov r10, [rbp - 112 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment c
	add qword [rsp + 0], 1
	jmp .jump162
.jump163: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rel const51] ; 63.84
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump165
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump165:
	cmp rax, [rsp + 16]
	jl .jump166
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump166:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump167
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump167:
	cmp rax, [rsp + 24]
	jl .jump168
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump168:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 24
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const52] ; 326
	push rax
	mov rax, [rel const53] ; 713
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump169
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	jmp .jump170
.jump169:
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const54] ; 631
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump171
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; mod by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump171:
	cqo
	idiv r10
	mov rax, rdx
	push rax
.jump170:
	pop rax
	neg rax
	push rax
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump172
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump172:
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump173
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump173:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump174: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump176 ; If d >= bound, ...
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
.jump176:
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump175 ; If c >= bound, break
.jump177:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment d
	add qword [rsp + 8], 1
	jmp .jump174
.jump175: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump178
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump178:
	cmp rax, [rsp + 16]
	jl .jump179
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump179:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump180
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump180:
	cmp rax, [rsp + 24]
	jl .jump181
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump181:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump182
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump182:
	; Computing bound for c
	sub rsp, 32
	sub rsp, 8 ; Align stack
	lea rdi, [rsp + 8]
	call _a
	add rsp, 8 ; Remove alignment
	mov rax, [rel const55] ; 222
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump183
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump183:
	cmp rax, [rsp + 24]
	jl .jump184
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump184:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump185
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump185:
	cmp rax, [rsp + 32]
	jl .jump186
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump186:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump187
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump187:
	cmp rax, [rsp + 40]
	jl .jump188
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump188:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const56] ; 36.96
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump189
	sub rsp, 8 ; Align stack
	mov rax, [rel const57] ; 36.59
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const58] ; 530
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	neg rax
	push rax
	jmp .jump190
.jump189:
	mov rax, [rel const59] ; 366
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
.jump190:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump191
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump191:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by (if (! (exp(36.96) != a()[argnum, argnum, 222])) then (- ((- 530) - to_int(36.59))) else (- (- 366)))
	jno .jump192
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump192:
imul rdi, [rsp + 0 + 8] ; multiply by (array[c : 300, d : (532 % argnum)] (array[e : argnum, f : argnum] c))[to_int(sin(63.84)), (sum[c : (- argnum)] c)][(sum[c : (argnum + to_int(b)), d : (- argnum)] (- argnum)), (- (if (713 < 326) then (- argnum) else (631 % argnum)))]
	jno .jump193
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump193:
imul rdi, [rsp + 0 + 16] ; multiply by (if (! true) then (sum[c : argnum, d : ((- 281) % argnum), e : (110 / (- 763))] to_int((- b))) else (- (587 + (sum[c : argnum, d : 427] c))))
	jno .jump194
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump194:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump195: ; Begin body of loop
	; Compare e to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump197 ; If e >= bound, ...
	mov qword [rsp + 16], 0 ; e = 0
	add qword [rsp + 8], 1 ; d++
.jump197:
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump198 ; If d >= bound, ...
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
.jump198:
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump196 ; If c >= bound, break
.jump199:
	; Compute loop body
	sub rsp, 8 ; Align stack
	mov rax, [rel const60] ; 85.46
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment e
	add qword [rsp + 16], 1
	jmp .jump195
.jump196: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	mov rax, [rbp - 8] ; Address to write return value into
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 80 ; Local variables
	pop rbp
	ret

m:
_m:
	push rbp
	mov rbp, rsp
	mov rax, [rel const16] ; False
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	pop rax
	cmp rax, 0
	je .jump304
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump306
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump306:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump307
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump307:
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump308
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump308:
	; Computing total size of heap memory to allocate
	mov rdi, 0 ; sizeof {{}}
	imul rdi, [rsp + 0 + 0] ; multiply by g
	jno .jump309
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump309:
	imul rdi, [rsp + 0 + 8] ; multiply by k
	jno .jump310
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump310:
	imul rdi, [rsp + 0 + 16] ; multiply by f
	jno .jump311
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump311:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
.jump312: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump314 ; If p >= bound, ...
	mov qword [rsp + 16], 0 ; p = 0
	add qword [rsp + 8], 1 ; o++
.jump314:
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump315 ; If o >= bound, ...
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
.jump315:
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump313 ; If n >= bound, break
.jump316:
	; Compute loop body
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 0
	add rax, [rsp + 48]
	; Move body (0 bytes) to index
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	; Increment p
	add qword [rsp + 16], 1
	jmp .jump312
.jump313: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump305
.jump304:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for p
	mov rax, [rel const86] ; 853
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump317
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump317:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump318
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump318:
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump319
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump319:
	; Computing total size of heap memory to allocate
	mov rdi, 0 ; sizeof {{}}
	imul rdi, [rsp + 0 + 0] ; multiply by k
	jno .jump320
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump320:
	imul rdi, [rsp + 0 + 8] ; multiply by f
	jno .jump321
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump321:
	imul rdi, [rsp + 0 + 16] ; multiply by 853
	jno .jump322
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump322:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
.jump323: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump325 ; If p >= bound, ...
	mov qword [rsp + 16], 0 ; p = 0
	add qword [rsp + 8], 1 ; o++
.jump325:
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump326 ; If o >= bound, ...
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
.jump326:
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump324 ; If n >= bound, break
.jump327:
	; Compute loop body
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 0
	add rax, [rsp + 48]
	; Move body (0 bytes) to index
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	; Increment p
	add qword [rsp + 16], 1
	jmp .jump323
.jump324: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump305:
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const87] ; 171
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump328
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump328:
	cmp rax, [rsp + 24]
	jl .jump329
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump329:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump330
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump330:
	cmp rax, [rsp + 32]
	jl .jump331
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump331:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump332
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump332:
	cmp rax, [rsp + 40]
	jl .jump333
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump333:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 0
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 0
	; Moving 0 bytes from rax to rsp
	; Moving 0 bytes from rsp + 0 to rsp + 0
	add rsp, 0
	mov rax, [rel const6] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump334
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump336
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump336:
	; Computing bound for n
	mov rax, [rel const88] ; 30
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump337
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump337:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by 30
	jno .jump338
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump338:
	imul rdi, [rsp + 0 + 8] ; multiply by k
	jno .jump339
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump339:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
.jump340: ; Begin body of loop
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump342 ; If o >= bound, ...
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
.jump342:
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump341 ; If n >= bound, break
.jump343:
	; Compute loop body
	sub rsp, 8 ; Align stack
	mov rax, [rel const89] ; 72.95
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment o
	add qword [rsp + 8], 1
	jmp .jump340
.jump341: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump335
.jump334:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump344
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump344:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof float[,]
	imul rdi, [rsp + 0 + 0] ; multiply by e
	jno .jump345
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump345:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
.jump346: ; Begin body of loop
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump347 ; If n >= bound, break
.jump348:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for p
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump349
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump349:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump350
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump350:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
.jump351: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump353 ; If p >= bound, ...
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
.jump353:
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump352 ; If o >= bound, break
.jump354:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment p
	add qword [rsp + 8], 1
	jmp .jump351
.jump352: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump355
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump355:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump356
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump356:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by (e * f)
	jno .jump357
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump357:
imul rdi, [rsp + 0 + 8] ; multiply by (sum[o : i, p : k] o)
	jno .jump358
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump358:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
.jump359: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump361 ; If p >= bound, ...
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
.jump361:
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump360 ; If o >= bound, break
.jump362:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment p
	add qword [rsp + 8], 1
	jmp .jump359
.jump360: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 24
	add rax, [rsp + 40]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment n
	add qword [rsp + 0], 1
	jmp .jump346
.jump347: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rel const16] ; False
	push rax
	mov rax, [rel const16] ; False
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	; Moving 8 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump363
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump363:
	cmp rax, [rsp + 8]
	jl .jump364
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump364:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 24
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump335:
	mov rax, [rel const90] ; 66.75
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump365
	mov rax, [rel const16] ; False
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	pop rax
.jump365:
	push rax
	pop rax
	cmp rax, 0
	je .jump366
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	jmp .jump367
.jump366:
	sub rsp, 8
	; Moving 8 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
.jump367:
	pop rax
	neg rax
	push rax
	pop rax
	add rsp, 24 ; Local variables
	pop rbp
	ret
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const91] ; 411
	push rax
	sub rsp, 8 ; Align stack
	mov rax, [rel const92] ; 60.45
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rdi, 24
	call _jpl_alloc
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	push rax
	mov rax, 3
	push rax
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	; Moving 16 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	mov rdi, 48
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 48 bytes from rsp to rax
		mov r10, [rsp + 40]
		mov [rax + 40], r10
		mov r10, [rsp + 32]
		mov [rax + 32], r10
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 48
	push rax
	mov rax, 3
	push rax
	sub rsp, 8 ; Align stack
	mov rax, [rel const93] ; 533
	push rax
	pop rdi
	call _to_float
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const16] ; False
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	; Moving 24 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 16]
		mov [rsp + 8 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 8 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	; Moving 8 bytes from rsp + 0 to rsp + 16
		mov r10, [rsp + 0 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump368
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump368:
	cmp rax, [rsp + 8]
	jl .jump369
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump369:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 16
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const94] ; 295
	push rax
	call _m
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	add rsp, 40 ; Local variables
	pop rbp
	ret

o:
_o:
	push rbp
	mov rbp, rsp
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for v
	sub rsp, 8 ; Align stack
	call _m
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump378
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump378:
	; Computing bound for u
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump379
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump379:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof {float[,,]}
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump380
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump380:
	imul rdi, [rsp + 0 + 8] ; multiply by m()
	jno .jump381
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump381:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize v to 0
	mov rax, 0
	push rax
	; Initialize u to 0
	mov rax, 0
	push rax
.jump382: ; Begin body of loop
	; Compare v to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump384 ; If v >= bound, ...
	mov qword [rsp + 8], 0 ; v = 0
	add qword [rsp + 0], 1 ; u++
.jump384:
	; Compare u to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump383 ; If u >= bound, break
.jump385:
	; Compute loop body
	sub rsp, 32
	sub rsp, 8 ; Align stack
	lea rdi, [rsp + 8]
	call _a
	add rsp, 8 ; Remove alignment
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 32
	add rax, [rsp + 64]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment v
	add qword [rsp + 8], 1
	jmp .jump382
.jump383: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump386
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump386:
	cmp rax, [rsp + 16]
	jl .jump387
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump387:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump388
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump388:
	cmp rax, [rsp + 24]
	jl .jump389
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump389:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 32
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 32
	; Moving 32 bytes from rax to rsp
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Moving 32 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 24]
		mov [rsp + 0 + 24], r10
		mov r10, [rsp + 0 + 16]
		mov [rsp + 0 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	sub rsp, 32
	lea rdi, [rsp + 0]
	call _a
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	; Moving 24 bytes from r12 - 112 to rsp
		mov r10, [r12 - 112 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 112 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 112 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const99] ; 36.6
	push rax
	; Moving 16 bytes from rsp + 0 to rsp + 32
		mov r10, [rsp + 0 + 8]
		mov [rsp + 32 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 32 + 0], r10
	add rsp, 32
	; Moving 8 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	jne .jump390
	lea rdi, [rel const100] ; C
	call _fail_assertion
.jump390:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for E
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump391
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump391:
	; Computing bound for D
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump392
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump392:
	; Computing bound for C
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump393
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump393:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof int[]
	imul rdi, [rsp + 0 + 0] ; multiply by f
	jno .jump394
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump394:
	imul rdi, [rsp + 0 + 8] ; multiply by g
	jno .jump395
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump395:
	imul rdi, [rsp + 0 + 16] ; multiply by e
	jno .jump396
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump396:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize E to 0
	mov rax, 0
	push rax
	; Initialize D to 0
	mov rax, 0
	push rax
	; Initialize C to 0
	mov rax, 0
	push rax
.jump397: ; Begin body of loop
	; Compare E to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump399 ; If E >= bound, ...
	mov qword [rsp + 16], 0 ; E = 0
	add qword [rsp + 8], 1 ; D++
.jump399:
	; Compare D to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump400 ; If D >= bound, ...
	mov qword [rsp + 8], 0 ; D = 0
	add qword [rsp + 0], 1 ; C++
.jump400:
	; Compare C to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump398 ; If C >= bound, break
.jump401:
	; Compute loop body
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 16
	add rax, [rsp + 64]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment E
	add qword [rsp + 16], 1
	jmp .jump397
.jump398: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Moving 32 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 24]
		mov [rsp + 0 + 24], r10
		mov r10, [rsp + 0 + 16]
		mov [rsp + 0 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const101] ; 106
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump402
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump402:
	cmp rax, [rsp + 24]
	jl .jump403
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump403:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump404
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump404:
	cmp rax, [rsp + 32]
	jl .jump405
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump405:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump406
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump406:
	cmp rax, [rsp + 40]
	jl .jump407
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump407:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 16
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const6] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump408
	mov rax, [rel const6] ; True
	push rax
	jmp .jump409
.jump408:
	mov rax, [rel const6] ; True
	push rax
.jump409:
	pop rax
	cmp rax, 0
	je .jump410
	sub rsp, 8
	; Moving 8 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	jmp .jump411
.jump410:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for G
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump412
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump412:
	; Computing bound for F
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump413
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump413:
	; Computing bound for E
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump414
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump414:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by f
	jno .jump415
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump415:
	imul rdi, [rsp + 0 + 8] ; multiply by j
	jno .jump416
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump416:
	imul rdi, [rsp + 0 + 16] ; multiply by r
	jno .jump417
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump417:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize G to 0
	mov rax, 0
	push rax
	; Initialize F to 0
	mov rax, 0
	push rax
	; Initialize E to 0
	mov rax, 0
	push rax
.jump418: ; Begin body of loop
	; Compare G to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump420 ; If G >= bound, ...
	mov qword [rsp + 16], 0 ; G = 0
	add qword [rsp + 8], 1 ; F++
.jump420:
	; Compare F to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump421 ; If F >= bound, ...
	mov qword [rsp + 8], 0 ; F = 0
	add qword [rsp + 0], 1 ; E++
.jump421:
	; Compare E to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump419 ; If E >= bound, break
.jump422:
	; Compute loop body
	mov rax, [rel const6] ; True
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment G
	add qword [rsp + 16], 1
	jmp .jump418
.jump419: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for E
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump423
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump423:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize E to 0
	mov rax, 0
	push rax
.jump424: ; Begin body of loop
	; Compare E to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump425 ; If E >= bound, break
.jump426:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment E
	add qword [rsp + 0], 1
	jmp .jump424
.jump425: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump427
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump427:
	cmp rax, [rsp + 24]
	jl .jump428
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump428:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump429
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump429:
	cmp rax, [rsp + 32]
	jl .jump430
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump430:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump431
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump431:
	cmp rax, [rsp + 40]
	jl .jump432
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump432:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump433
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const16] ; False
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	jmp .jump434
.jump433:
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump435
	mov rax, [rel const16] ; False
	push rax
	pop rax
	cmp rax, 0
	jne .jump436
	mov rax, [rel const16] ; False
	push rax
	pop rax
.jump436:
	push rax
	pop rax
.jump435:
	push rax
.jump434:
.jump411:
	pop rax
	cmp rax, 0
	jne .jump437
	mov rax, [rel const16] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump438
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for G
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump440
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump440:
	; Computing bound for F
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump441
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump441:
	; Computing bound for E
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump442
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump442:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by v
	jno .jump443
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump443:
	imul rdi, [rsp + 0 + 8] ; multiply by e
	jno .jump444
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump444:
	imul rdi, [rsp + 0 + 16] ; multiply by z
	jno .jump445
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump445:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize G to 0
	mov rax, 0
	push rax
	; Initialize F to 0
	mov rax, 0
	push rax
	; Initialize E to 0
	mov rax, 0
	push rax
.jump446: ; Begin body of loop
	; Compare G to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump448 ; If G >= bound, ...
	mov qword [rsp + 16], 0 ; G = 0
	add qword [rsp + 8], 1 ; F++
.jump448:
	; Compare F to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump449 ; If F >= bound, ...
	mov qword [rsp + 8], 0 ; F = 0
	add qword [rsp + 0], 1 ; E++
.jump449:
	; Compare E to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump447 ; If E >= bound, break
.jump450:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment G
	add qword [rsp + 16], 1
	jmp .jump446
.jump447: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 32
	; Moving 32 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - -16 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 0
	; Moving 0 bytes from rbp - -16 to rsp
	call _o
	add rsp, 0
	add rsp, 32
	push rax
	pop rax
	cmp rax, 0
	je .jump451
	sub rsp, 0
	; Moving 0 bytes from rbp - -16 to rsp
	jmp .jump452
.jump451:
	sub rsp, 0
	; Moving 0 bytes from rbp - -16 to rsp
.jump452:
	call _o
	add rsp, 0
	add rsp, 32
	push rax
	jmp .jump439
.jump438:
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	jne .jump453
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	pop rax
.jump453:
	push rax
.jump439:
	pop rax
.jump437:
	push rax
	pop rax
	add rsp, 80 ; Local variables
	pop rbp
	ret

t:
_t:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	movsd [rsp], xmm1
	sub rsp, 32
	lea rdi, [rsp + 0]
	call _a
	mov rax, [rel const103] ; 16.39
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _t
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 48 ; Local variables
	pop rbp
	ret
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for C
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump457
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump457:
	; Computing bound for B
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump458
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump458:
	; Computing bound for A
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump459
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump459:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by z
	jno .jump460
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump460:
	imul rdi, [rsp + 0 + 8] ; multiply by f
	jno .jump461
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump461:
	imul rdi, [rsp + 0 + 16] ; multiply by y
	jno .jump462
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump462:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize C to 0
	mov rax, 0
	push rax
	; Initialize B to 0
	mov rax, 0
	push rax
	; Initialize A to 0
	mov rax, 0
	push rax
.jump463: ; Begin body of loop
	; Compare C to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump465 ; If C >= bound, ...
	mov qword [rsp + 16], 0 ; C = 0
	add qword [rsp + 8], 1 ; B++
.jump465:
	; Compare B to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump466 ; If B >= bound, ...
	mov qword [rsp + 8], 0 ; B = 0
	add qword [rsp + 0], 1 ; A++
.jump466:
	; Compare A to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump464 ; If A >= bound, break
.jump467:
	; Compute loop body
	mov rax, [rel const6] ; True
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment C
	add qword [rsp + 16], 1
	jmp .jump463
.jump464: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Moving 32 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 24]
		mov [rsp + 0 + 24], r10
		mov r10, [rsp + 0 + 16]
		mov [rsp + 0 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	sub rsp, 8
	; Moving 8 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump468
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump468:
	cmp rax, [rsp + 24]
	jl .jump469
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump469:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump470
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump470:
	cmp rax, [rsp + 32]
	jl .jump471
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump471:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump472
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump472:
	cmp rax, [rsp + 40]
	jl .jump473
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump473:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump474
	mov rax, [rel const6] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump476
	mov rax, [rel const104] ; 103
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rdi, 16
	call _jpl_alloc
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
	jmp .jump477
.jump476:
	sub rsp, 8
	; Moving 8 bytes from r12 - 152 to rsp
		mov r10, [r12 - 152 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 144 to rsp
		mov r10, [r12 - 144 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump478
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for C
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump480
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump480:
	; Computing bound for B
	sub rsp, 8
	; Moving 8 bytes from r12 - 152 to rsp
		mov r10, [r12 - 152 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump481
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump481:
	; Computing bound for A
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump482
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump482:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof int[]
	imul rdi, [rsp + 0 + 0] ; multiply by k
	jno .jump483
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump483:
	imul rdi, [rsp + 0 + 8] ; multiply by q
	jno .jump484
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump484:
	imul rdi, [rsp + 0 + 16] ; multiply by y
	jno .jump485
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump485:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize C to 0
	mov rax, 0
	push rax
	; Initialize B to 0
	mov rax, 0
	push rax
	; Initialize A to 0
	mov rax, 0
	push rax
.jump486: ; Begin body of loop
	; Compare C to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump488 ; If C >= bound, ...
	mov qword [rsp + 16], 0 ; C = 0
	add qword [rsp + 8], 1 ; B++
.jump488:
	; Compare B to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump489 ; If B >= bound, ...
	mov qword [rsp + 8], 0 ; B = 0
	add qword [rsp + 0], 1 ; A++
.jump489:
	; Compare A to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump487 ; If A >= bound, break
.jump490:
	; Compute loop body
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 16
	add rax, [rsp + 64]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment C
	add qword [rsp + 16], 1
	jmp .jump486
.jump487: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump479
.jump478:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for C
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump491
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump491:
	; Computing bound for B
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump492
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump492:
	; Computing bound for A
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump493
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump493:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof int[]
	imul rdi, [rsp + 0 + 0] ; multiply by j
	jno .jump494
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump494:
	imul rdi, [rsp + 0 + 8] ; multiply by e
	jno .jump495
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump495:
	imul rdi, [rsp + 0 + 16] ; multiply by e
	jno .jump496
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump496:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize C to 0
	mov rax, 0
	push rax
	; Initialize B to 0
	mov rax, 0
	push rax
	; Initialize A to 0
	mov rax, 0
	push rax
.jump497: ; Begin body of loop
	; Compare C to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump499 ; If C >= bound, ...
	mov qword [rsp + 16], 0 ; C = 0
	add qword [rsp + 8], 1 ; B++
.jump499:
	; Compare B to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump500 ; If B >= bound, ...
	mov qword [rsp + 8], 0 ; B = 0
	add qword [rsp + 0], 1 ; A++
.jump500:
	; Compare A to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump498 ; If A >= bound, break
.jump501:
	; Compute loop body
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 16
	add rax, [rsp + 64]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment C
	add qword [rsp + 16], 1
	jmp .jump497
.jump498: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump479:
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 136 to rsp
		mov r10, [r12 - 136 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump502
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump502:
	cmp rax, [rsp + 24]
	jl .jump503
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump503:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump504
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump504:
	cmp rax, [rsp + 32]
	jl .jump505
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump505:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump506
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump506:
	cmp rax, [rsp + 40]
	jl .jump507
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump507:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 16
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump477:
	jmp .jump475
.jump474:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for A
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for A
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump508
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump508:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize A to 0
	mov rax, 0
	push rax
.jump509: ; Begin body of loop
	; Compare A to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump510 ; If A >= bound, break
.jump511:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment A
	add qword [rsp + 0], 1
	jmp .jump509
.jump510: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump512
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump512:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
imul rdi, [rsp + 0 + 0] ; multiply by (sum[A : f] f)
	jno .jump513
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump513:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize A to 0
	mov rax, 0
	push rax
.jump514: ; Begin body of loop
	; Compare A to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump515 ; If A >= bound, break
.jump516:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment A
	add qword [rsp + 0], 1
	jmp .jump514
.jump515: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
.jump475:
	mov rax, [rel const6] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump517
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for D
	mov rax, [rel const105] ; 709
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump519
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump519:
	; Computing bound for C
	sub rsp, 8
	; Moving 8 bytes from r12 - 136 to rsp
		mov r10, [r12 - 136 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump520
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump520:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by s
	jno .jump521
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump521:
	imul rdi, [rsp + 0 + 8] ; multiply by 709
	jno .jump522
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump522:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize D to 0
	mov rax, 0
	push rax
	; Initialize C to 0
	mov rax, 0
	push rax
.jump523: ; Begin body of loop
	; Compare D to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump525 ; If D >= bound, ...
	mov qword [rsp + 8], 0 ; D = 0
	add qword [rsp + 0], 1 ; C++
.jump525:
	; Compare C to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump524 ; If C >= bound, break
.jump526:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment D
	add qword [rsp + 8], 1
	jmp .jump523
.jump524: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const106] ; 890
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const107] ; 114
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump527
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump527:
	cmp rax, [rsp + 16]
	jl .jump528
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump528:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump529
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump529:
	cmp rax, [rsp + 24]
	jl .jump530
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump530:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	jmp .jump518
.jump517:
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for E
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump531
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump531:
	; Computing bound for D
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump532
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump532:
	; Computing bound for C
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump533
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump533:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump534
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump534:
	imul rdi, [rsp + 0 + 8] ; multiply by j
	jno .jump535
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump535:
	imul rdi, [rsp + 0 + 16] ; multiply by x
	jno .jump536
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump536:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize E to 0
	mov rax, 0
	push rax
	; Initialize D to 0
	mov rax, 0
	push rax
	; Initialize C to 0
	mov rax, 0
	push rax
.jump537: ; Begin body of loop
	; Compare E to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump539 ; If E >= bound, ...
	mov qword [rsp + 16], 0 ; E = 0
	add qword [rsp + 8], 1 ; D++
.jump539:
	; Compare D to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump540 ; If D >= bound, ...
	mov qword [rsp + 8], 0 ; D = 0
	add qword [rsp + 0], 1 ; C++
.jump540:
	; Compare C to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump538 ; If C >= bound, break
.jump541:
	; Compute loop body
	mov rax, [rel const16] ; False
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment E
	add qword [rsp + 16], 1
	jmp .jump537
.jump538: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8 ; Align stack
	mov rax, [rel const108] ; 6.37
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Moving 32 bytes from rsp + 8 to rsp + 16
		mov r10, [rsp + 8 + 24]
		mov [rsp + 16 + 24], r10
		mov r10, [rsp + 8 + 16]
		mov [rsp + 16 + 16], r10
		mov r10, [rsp + 8 + 8]
		mov [rsp + 16 + 8], r10
		mov r10, [rsp + 8 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	call _o
	add rsp, 0
	add rsp, 32
	push rax
.jump518:
	pop rax
	cmp rax, 0
	jne .jump542
	lea rdi, [rel const100] ; C
	call _fail_assertion
.jump542:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for D
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump543
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump543:
	; Computing bound for C
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump544
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump544:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize D to 0
	mov rax, 0
	push rax
	; Initialize C to 0
	mov rax, 0
	push rax
.jump545: ; Begin body of loop
	; Compare D to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump547 ; If D >= bound, ...
	mov qword [rsp + 8], 0 ; D = 0
	add qword [rsp + 0], 1 ; C++
.jump547:
	; Compare C to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump546 ; If C >= bound, break
.jump548:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 32] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 32], xmm0 ; Save sum
	; Increment D
	add qword [rsp + 8], 1
	jmp .jump545
.jump546: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 64 ; Local variables
	pop rbp
	ret

jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for c
	mov rax, [rel const61] ; 51.78
	push rax
	mov rax, [rel const62] ; 42.8
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump200
	mov rax, [rel const63] ; 832
	push rax
	jmp .jump201
.jump200:
	mov rax, [rel const64] ; 65.28
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
.jump201:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump202
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump202:
	; Computing bound for b
	sub rsp, 8 ; Align stack
	mov rax, [rel const65] ; 58.11
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump203
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump203:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof {float,float,float[,,]}[,]
	imul rdi, [rsp + 0 + 0] ; multiply by to_int(asin(58.11))
	jno .jump204
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump204:
	imul rdi, [rsp + 0 + 8] ; multiply by (if (42.8 == 51.78) then 832 else to_int(65.28))
	jno .jump205
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump205:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump206: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump208 ; If c >= bound, ...
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
.jump208:
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump207 ; If b >= bound, break
.jump209:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for e
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump210
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump210:
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump211
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump211:
	; Computing total size of heap memory to allocate
	mov rdi, 48 ; sizeof {float,float,float[,,]}
	imul rdi, [rsp + 0 + 0] ; multiply by (- b)
	jno .jump212
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump212:
	imul rdi, [rsp + 0 + 8] ; multiply by b
	jno .jump213
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump213:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
.jump214: ; Begin body of loop
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump216 ; If e >= bound, ...
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
.jump216:
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump215 ; If d >= bound, break
.jump217:
	; Compute loop body
	sub rsp, 32
	sub rsp, 8 ; Align stack
	lea rdi, [rsp + 8]
	call _a
	add rsp, 8 ; Remove alignment
	mov rax, [rel const66] ; 10.53
	push rax
	mov rax, [rel const67] ; 15.39
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 48]
	imul rax, [rsp + 72] ; No overflow if indices in bounds
	add rax, [rsp + 56]
	imul rax, 48
	add rax, [rsp + 80]
	; Move body (48 bytes) to index
	; Moving 48 bytes from rsp to rax
		mov r10, [rsp + 40]
		mov [rax + 40], r10
		mov r10, [rsp + 32]
		mov [rax + 32], r10
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 48
	; Increment e
	add qword [rsp + 8], 1
	jmp .jump214
.jump215: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 24
	add rax, [rsp + 56]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment c
	add qword [rsp + 8], 1
	jmp .jump206
.jump207: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rax, [rel const16] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump218
	mov rax, [rel const16] ; False
	push rax
	jmp .jump219
.jump218:
	mov rax, [rel const6] ; True
	push rax
.jump219:
	pop rax
	cmp rax, 0
	je .jump220
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for d
	mov rax, [rel const68] ; 77
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump222
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump222:
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump223
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump223:
	; Computing bound for b
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump224
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump224:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump225
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump225:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump226
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump226:
	imul rdi, [rsp + 0 + 16] ; multiply by 77
	jno .jump227
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump227:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump228: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump230 ; If d >= bound, ...
	mov qword [rsp + 16], 0 ; d = 0
	add qword [rsp + 8], 1 ; c++
.jump230:
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump231 ; If c >= bound, ...
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
.jump231:
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump229 ; If b >= bound, break
.jump232:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment d
	add qword [rsp + 16], 1
	jmp .jump228
.jump229: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump221
.jump220:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for d
	mov rax, [rel const69] ; 233
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump233
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump233:
	; Computing bound for c
	mov rax, [rel const70] ; 737
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump234
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump234:
	; Computing bound for b
	mov rax, [rel const71] ; 929
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump235
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump235:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by 929
	jno .jump236
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump236:
	imul rdi, [rsp + 0 + 8] ; multiply by 737
	jno .jump237
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump237:
	imul rdi, [rsp + 0 + 16] ; multiply by 233
	jno .jump238
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump238:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump239: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump241 ; If d >= bound, ...
	mov qword [rsp + 16], 0 ; d = 0
	add qword [rsp + 8], 1 ; c++
.jump241:
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump242 ; If c >= bound, ...
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
.jump242:
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump240 ; If b >= bound, break
.jump243:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment d
	add qword [rsp + 16], 1
	jmp .jump239
.jump240: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump221:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for c
	mov rax, [rel const72] ; 391
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump244
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump244:
	; Computing bound for b
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump245
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump245:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump246
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump246:
	imul rdi, [rsp + 0 + 8] ; multiply by 391
	jno .jump247
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump247:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump248: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump250 ; If c >= bound, ...
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
.jump250:
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump249 ; If b >= bound, break
.jump251:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment c
	add qword [rsp + 8], 1
	jmp .jump248
.jump249: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rel const73] ; 939
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump252
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump252:
	cmp rax, [rsp + 16]
	jl .jump253
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump253:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump254
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump254:
	cmp rax, [rsp + 24]
	jl .jump255
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump255:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump256
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump256:
	; Computing bound for b
	mov rax, [rel const74] ; 1000
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump257
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump257:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump258: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump260 ; If c >= bound, ...
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
.jump260:
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump259 ; If b >= bound, break
.jump261:
	; Compute loop body
	mov rax, [rel const75] ; 72.77
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 32] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 32], xmm0 ; Save sum
	; Increment c
	add qword [rsp + 8], 1
	jmp .jump258
.jump259: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump262
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump262:
	cmp rax, [rsp + 24]
	jl .jump263
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump263:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump264
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump264:
	cmp rax, [rsp + 32]
	jl .jump265
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump265:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump266
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump266:
	cmp rax, [rsp + 40]
	jl .jump267
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump267:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	mov rax, [rel const76] ; 81.07
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump268
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump268:
	cmp rax, [rsp + 16]
	jl .jump269
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump269:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump270
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump270:
	cmp rax, [rsp + 24]
	jl .jump271
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump271:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 24
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for d
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for b
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump272
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump272:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize b to 0
	mov rax, 0
	push rax
.jump273: ; Begin body of loop
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump274 ; If b >= bound, break
.jump275:
	; Compute loop body
	mov rax, [rel const6] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump276
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump277
.jump276:
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
.jump277:
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment b
	add qword [rsp + 0], 1
	jmp .jump273
.jump274: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump278
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump278:
	; Computing bound for c
	mov rax, [rel const77] ; 244
	push rax
	mov rax, [rel const78] ; 570
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump279
	mov rax, [rel const79] ; 677
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const80] ; 68.71
	push rax
	jmp .jump280
.jump279:
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const81] ; 95.96
	push rax
.jump280:
	; Moving 8 bytes from rsp + 16 to rsp + 16
		mov r10, [rsp + 16 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	mov rax, [rsp]
	cmp rax, 0
	jg .jump281
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump281:
	; Computing bound for b
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for b
	mov rax, [rel const6] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump282
	mov rax, [rel const29] ; 387
	push rax
	jmp .jump283
.jump282:
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
.jump283:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump284
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump284:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize b to 0
	mov rax, 0
	push rax
.jump285: ; Begin body of loop
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump286 ; If b >= bound, break
.jump287:
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for c
	mov rax, [rel const82] ; 221
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump288
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump288:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
.jump289: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump290 ; If c >= bound, break
.jump291:
	; Compute loop body
	mov rax, [rel const83] ; 612
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment c
	add qword [rsp + 0], 1
	jmp .jump289
.jump290: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment b
	add qword [rsp + 0], 1
	jmp .jump285
.jump286: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump292
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump292:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump293: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump295 ; If d >= bound, ...
	mov qword [rsp + 16], 0 ; d = 0
	add qword [rsp + 8], 1 ; c++
.jump295:
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump296 ; If c >= bound, ...
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
.jump296:
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump294 ; If b >= bound, break
.jump297:
	; Compute loop body
	mov rax, [rel const84] ; 97
	push rax
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment d
	add qword [rsp + 16], 1
	jmp .jump293
.jump294: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump298
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump298:
	cmp rax, [rsp + 16]
	jl .jump299
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump299:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump300
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump300:
	cmp rax, [rsp + 24]
	jl .jump301
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump301:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 48
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 48
	; Moving 48 bytes from rax to rsp
		mov r10, [rax + 40]
		mov [rsp + 40], r10
		mov r10, [rax + 32]
		mov [rsp + 32], r10
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const6] ; True
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	; Moving 16 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	; Moving 8 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	pop rax
	cmp rax, 0
	je .jump302
	sub rsp, 32
	; Moving 32 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 40 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 40 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	jmp .jump303
.jump302:
	sub rsp, 32
	sub rsp, 8 ; Align stack
	lea rdi, [rsp + 8]
	call _a
	add rsp, 8 ; Remove alignment
.jump303:
	sub rsp, 24
	lea rdi, [rsp]
	lea rsi, [rel const85] ; l.png
	call _read_image
	sub rsp, 8 ; Align stack
	sub rsp, 8 ; Align stack
	call _m
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump370
	lea rdi, [rel const13] ; mod by zero
	call _fail_assertion
.jump370:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump371
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	jmp .jump372
.jump371:
	mov rax, [rel const95] ; 17.9
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
.jump372:
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	lea rdi, [rel const96] ; (FloatType)
	lea rsi, [rsp]
	call _show
	add rsp, 8
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump373
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	mov rdi, 24
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	push rax
	mov rax, 3
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump375
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump375:
	cmp rax, [rsp + 8]
	jl .jump376
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump376:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump374
.jump373:
	mov rax, [rel const97] ; 49.76
	push rax
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	; Moving 8 bytes from rsp + 16 to rsp + 16
		mov r10, [rsp + 16 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
.jump374:
	mov rax, [rel const6] ; True
	push rax
	pop rax
	cmp rax, 0
	jne .jump377
	sub rsp, 8 ; Align stack
	lea rdi, [rel const98] ; o
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump377:
	lea rdi, [rel const102] ; p
	sub rsp, 8 ; Align stack
	call _print
	add rsp, 8 ; Remove alignment
	mov rax, [rel const16] ; False
	push rax
	pop rax
	cmp rax, 0
	jne .jump454
	mov rax, [rel const6] ; True
	push rax
	pop rax
.jump454:
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump455
	sub rsp, 32
	; Moving 32 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 40 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 40 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	jmp .jump456
.jump455:
	sub rsp, 32
	; Moving 32 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 40 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 40 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
.jump456:
	add rsp, 144 ; Local variables
	pop r12
	pop rbp
	ret

