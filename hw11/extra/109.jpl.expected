global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 0
const1: dq 1
const2: dq 10.35
const3: db `divide by zero`, 0
const4: db `non-positive loop bound`, 0
const5: dq 423
const6: dq 66.0
const7: db `overflow computing array size`, 0
const8: dq 50.4
const9: dq 81.42
const10: dq 42.07
const11: dq 803
const12: dq 554
const13: dq 676
const14: db `negative array index`, 0
const15: db `index too large`, 0
const16: dq 23.22
const17: dq 48.55
const18: dq 237
const19: dq 89.29
const20: dq 313
const21: dq 50.43
const22: dq 62.55
const23: dq 54.37
const24: dq 716
const25: db `(IntType)`, 0
const26: dq 501
const27: dq 18.45
const28: dq 59.63
const29: dq 29.5
const30: dq 41.86
const31: db `h.png`, 0
const32: dq 98.42
const33: dq 29.93
const34: dq 10.38
const35: dq 201
const36: dq 618
const37: dq 870
const38: dq 8.6
const39: db `(ArrayType (FloatType) 1)`, 0
const40: dq 946
const41: dq 69.53
const42: dq 24
const43: dq 596
const44: dq 13.99
const45: dq 514
const46: dq 115
const47: db `mod by zero`, 0
const48: dq 989
const49: db `m`, 0
const50: dq 252

section .text
e:
_e:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	sub rsp, 8 ; Align stack
	mov rax, [rel const0] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump72
	sub rsp, 24
	; Moving 24 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump73
.jump72:
	sub rsp, 24
	; Moving 24 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
.jump73:
	call _e
	add rsp, 24
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 24
	; Moving 24 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	call _e
	add rsp, 24
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	mov rdi, 24
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	push rax
	mov rax, 3
	push rax
	mov rax, [rel const0] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump74
	mov rax, [rel const23] ; 54.37
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	jmp .jump75
.jump74:
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
.jump75:
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump76
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump76:
	cmp rax, [rsp + 8]
	jl .jump77
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump77:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 8 ; Local variables
	pop rbp
	ret
	mov rax, [rel const24] ; 716
	push rax
	mov rax, [rel const0] ; False
	push rax
	pop rax
	cmp rax, 0
	jne .jump78
	mov rax, [rel const0] ; False
	push rax
	pop rax
.jump78:
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump79
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	jmp .jump80
.jump79:
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 24
	; Moving 24 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump81
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump81:
	cmp rax, [rsp + 16]
	jl .jump82
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump82:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump83
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump83:
	cmp rax, [rsp + 24]
	jl .jump84
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump84:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
.jump80:
	; Moving 8 bytes from rsp + 8 to rsp + 16
		mov r10, [rsp + 8 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const0] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump85
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	jmp .jump86
.jump85:
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
.jump86:
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 16 ; Local variables
	pop rbp
	ret
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 16 ; Local variables
	pop rbp
	ret

k:
_k:
	push rbp
	mov rbp, rsp
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const0] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	jne .jump152
	sub rsp, 8
	; Moving 8 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const1] ; True
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
.jump152:
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	pop rax
	cmp rax, 0
	je .jump153
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump155
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump155:
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump156
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump156:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
	; Initialize m to 0
	mov rax, 0
	push rax
.jump157: ; Begin body of loop
	; Compare n to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump159 ; If n >= bound, ...
	mov qword [rsp + 8], 0 ; n = 0
	add qword [rsp + 0], 1 ; m++
.jump159:
	; Compare m to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump158 ; If m >= bound, break
.jump160:
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for q
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump161
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump161:
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump162
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump162:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump163
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump163:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize q to 0
	mov rax, 0
	push rax
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
.jump164: ; Begin body of loop
	; Compare q to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump166 ; If q >= bound, ...
	mov qword [rsp + 16], 0 ; q = 0
	add qword [rsp + 8], 1 ; p++
.jump166:
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump167 ; If p >= bound, ...
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
.jump167:
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump165 ; If o >= bound, break
.jump168:
	; Compute loop body
	mov rax, [rel const44] ; 13.99
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 48] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment q
	add qword [rsp + 16], 1
	jmp .jump164
.jump165: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 32] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 32], xmm0 ; Save sum
	; Increment n
	add qword [rsp + 8], 1
	jmp .jump157
.jump158: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	jmp .jump154
.jump153:
	call _k
	push rax
.jump154:
	pop rax
	add rsp, 16 ; Local variables
	pop rbp
	ret
	call _k
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for n
	call _k
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump169
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump169:
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump170
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump170:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by (- b)
	jno .jump171
	lea rdi, [rel const7] ; overflow computing array size
	call _fail_assertion
.jump171:
	imul rdi, [rsp + 0 + 8] ; multiply by (c * k())
	jno .jump172
	lea rdi, [rel const7] ; overflow computing array size
	call _fail_assertion
.jump172:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
	; Initialize m to 0
	mov rax, 0
	push rax
.jump173: ; Begin body of loop
	; Compare n to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump175 ; If n >= bound, ...
	mov qword [rsp + 8], 0 ; n = 0
	add qword [rsp + 0], 1 ; m++
.jump175:
	; Compare m to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump174 ; If m >= bound, break
.jump176:
	; Compute loop body
	mov rax, [rel const45] ; 514
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment n
	add qword [rsp + 8], 1
	jmp .jump173
.jump174: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump177
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump177:
	; Computing bound for n
	mov rax, [rel const46] ; 115
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump178
	lea rdi, [rel const47] ; mod by zero
	call _fail_assertion
.jump178:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump179
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump179:
	; Computing bound for m
	sub rsp, 8 ; Align stack
	call _k
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump180
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump180:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
	; Initialize m to 0
	mov rax, 0
	push rax
.jump181: ; Begin body of loop
	; Compare o to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump183 ; If o >= bound, ...
	mov qword [rsp + 16], 0 ; o = 0
	add qword [rsp + 8], 1 ; n++
.jump183:
	; Compare n to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump184 ; If n >= bound, ...
	mov qword [rsp + 8], 0 ; n = 0
	add qword [rsp + 0], 1 ; m++
.jump184:
	; Compare m to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump182 ; If m >= bound, break
.jump185:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment o
	add qword [rsp + 16], 1
	jmp .jump181
.jump182: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rel const1] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump186
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump187
.jump186:
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
.jump187:
	mov rax, [rel const48] ; 989
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump188
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump188:
	cmp rax, [rsp + 8]
	jl .jump189
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump189:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump190
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump190:
	cmp rax, [rsp + 16]
	jl .jump191
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump191:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump192
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump192:
	cmp rax, [rsp + 24]
	jl .jump193
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump193:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	jne .jump194
	lea rdi, [rel const49] ; m
	call _fail_assertion
.jump194:
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const50] ; 252
	push rax
	pop rax
	add rsp, 24 ; Local variables
	pop rbp
	ret

jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp
	mov rax, [rel const0] ; False
	push rax
	mov rax, [rel const1] ; True
	push rax
	; Moving 16 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	; Moving 8 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	pop rax
	cmp rax, 0
	je .jump1
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for c
	mov rax, [rel const2] ; 10.35
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump3
	lea rdi, [rel const3] ; divide by zero
	call _fail_assertion
.jump3:
	cqo
	idiv r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump4
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump4:
	; Computing bound for b
	mov rax, [rel const5] ; 423
	push rax
	mov rax, [rsp]
	; Computing bound for a
	mov rax, [rel const6] ; 66.0
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump5
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump5:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof float[,]
	imul rdi, [rsp + 0 + 0] ; multiply by to_int(asin(66.0))
	jno .jump6
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump6:
	imul rdi, [rsp + 0 + 8] ; multiply by 423
	jno .jump7
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump7:
	imul rdi, [rsp + 0 + 16] ; multiply by (argnum / to_int(10.35))
	jno .jump8
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump8:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
	; Initialize a to 0
	mov rax, 0
	push rax
.jump9: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump11 ; If c >= bound, ...
	mov qword [rsp + 16], 0 ; c = 0
	add qword [rsp + 8], 1 ; b++
.jump11:
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump12 ; If b >= bound, ...
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
.jump12:
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump10 ; If a >= bound, break
.jump13:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for e
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump14
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump14:
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump15
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump15:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump16
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump16:
	imul rdi, [rsp + 0 + 8] ; multiply by c
	jno .jump17
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump17:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
.jump18: ; Begin body of loop
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump20 ; If e >= bound, ...
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
.jump20:
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump19 ; If d >= bound, break
.jump21:
	; Compute loop body
	sub rsp, 8 ; Align stack
	mov rax, [rel const8] ; 50.4
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment e
	add qword [rsp + 8], 1
	jmp .jump18
.jump19: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 24
	add rax, [rsp + 72]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment c
	add qword [rsp + 16], 1
	jmp .jump9
.jump10: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8 ; Align stack
	mov rax, [rel const1] ; True
	push rax
	mov rax, [rel const1] ; True
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump22
	mov rax, [rel const9] ; 81.42
	push rax
	jmp .jump23
.jump22:
	mov rax, [rel const10] ; 42.07
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
.jump23:
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump24
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump24:
	; Computing bound for b
	mov rax, [rel const11] ; 803
	push rax
	mov rax, [rsp]
	; Computing bound for a
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump25
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump25:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump26
	lea rdi, [rel const7] ; overflow computing array size
	call _fail_assertion
.jump26:
	imul rdi, [rsp + 0 + 8] ; multiply by 803
	jno .jump27
	lea rdi, [rel const7] ; overflow computing array size
	call _fail_assertion
.jump27:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump28
	lea rdi, [rel const7] ; overflow computing array size
	call _fail_assertion
.jump28:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
	; Initialize a to 0
	mov rax, 0
	push rax
.jump29: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump31 ; If c >= bound, ...
	mov qword [rsp + 16], 0 ; c = 0
	add qword [rsp + 8], 1 ; b++
.jump31:
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump32 ; If b >= bound, ...
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
.jump32:
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump30 ; If a >= bound, break
.jump33:
	; Compute loop body
	mov rax, [rel const12] ; 554
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment c
	add qword [rsp + 16], 1
	jmp .jump29
.jump30: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump34
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump34:
	; Computing bound for b
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump35
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump35:
	; Computing bound for a
	mov rax, [rel const13] ; 676
	push rax
	mov rax, [rsp]
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
	; Initialize a to 0
	mov rax, 0
	push rax
.jump36: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump38 ; If c >= bound, ...
	mov qword [rsp + 16], 0 ; c = 0
	add qword [rsp + 8], 1 ; b++
.jump38:
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump39 ; If b >= bound, ...
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
.jump39:
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump37 ; If a >= bound, break
.jump40:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 136 to rsp
		mov r10, [rbp - 136 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment c
	add qword [rsp + 16], 1
	jmp .jump36
.jump37: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump41
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump41:
	cmp rax, [rsp + 24]
	jl .jump42
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump42:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump43
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump43:
	cmp rax, [rsp + 32]
	jl .jump44
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump44:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump45
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump45:
	cmp rax, [rsp + 40]
	jl .jump46
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump46:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	sub rsp, 8 ; Align stack
	mov rax, [rel const16] ; 23.22
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump47
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump47:
	cmp rax, [rsp + 24]
	jl .jump48
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump48:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump49
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump49:
	cmp rax, [rsp + 32]
	jl .jump50
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump50:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump51
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump51:
	cmp rax, [rsp + 40]
	jl .jump52
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump52:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 24
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump2
.jump1:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for b
	mov rax, [rel const17] ; 48.55
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump53
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump53:
	; Computing bound for a
	mov rax, [rel const18] ; 237
	push rax
	mov rax, [rsp]
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof float[,]
	imul rdi, [rsp + 0 + 0] ; multiply by 237
	jno .jump54
	lea rdi, [rel const7] ; overflow computing array size
	call _fail_assertion
.jump54:
	imul rdi, [rsp + 0 + 8] ; multiply by (- to_int(48.55))
	jno .jump55
	lea rdi, [rel const7] ; overflow computing array size
	call _fail_assertion
.jump55:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize b to 0
	mov rax, 0
	push rax
	; Initialize a to 0
	mov rax, 0
	push rax
.jump56: ; Begin body of loop
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump58 ; If b >= bound, ...
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
.jump58:
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump57 ; If a >= bound, break
.jump59:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for d
	sub rsp, 8 ; Align stack
	mov rax, [rel const19] ; 89.29
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump60
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump60:
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump61
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump61:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by (- a)
	jno .jump62
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump62:
	imul rdi, [rsp + 0 + 8] ; multiply by to_int(89.29)
	jno .jump63
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump63:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump64: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump66 ; If d >= bound, ...
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
.jump66:
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump65 ; If c >= bound, break
.jump67:
	; Compute loop body
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment d
	add qword [rsp + 8], 1
	jmp .jump64
.jump65: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 24
	add rax, [rsp + 56]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment b
	add qword [rsp + 8], 1
	jmp .jump56
.jump57: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rel const20] ; 313
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump68
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump68:
	cmp rax, [rsp + 16]
	jl .jump69
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump69:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump70
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump70:
	cmp rax, [rsp + 24]
	jl .jump71
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump71:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 24
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump2:
	mov rax, [rel const21] ; 50.43
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const22] ; 62.55
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	lea rdi, [rel const25] ; (IntType)
	lea rsi, [rsp]
	call _show
	add rsp, 8
	sub rsp, 8 ; Align stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for f
	mov rax, [rel const26] ; 501
	push rax
	mov rax, [rsp]
	mov rdi, 4008
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize f to 0
	mov rax, 0
	push rax
.jump87: ; Begin body of loop
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump88 ; If f >= bound, break
.jump89:
	; Compute loop body
	mov rax, [rel const27] ; 18.45
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment f
	add qword [rsp + 0], 1
	jmp .jump87
.jump88: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump90
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump90:
	cmp rax, [rsp + 8]
	jl .jump91
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump91:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for g
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const28] ; 59.63
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump92
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump92:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize g to 0
	mov rax, 0
	push rax
.jump93: ; Begin body of loop
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump94 ; If g >= bound, break
.jump95:
	; Compute loop body
	mov rax, [rel const1] ; True
	push rax
	mov rax, [rel const0] ; False
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump96
	mov rax, [rel const1] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump98
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	jmp .jump99
.jump98:
	mov rax, [rel const29] ; 29.5
	push rax
.jump99:
	jmp .jump97
.jump96:
	sub rsp, 8 ; Align stack
	mov rax, [rel const30] ; 41.86
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
.jump97:
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 16] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 16], xmm0 ; Save sum
	; Increment g
	add qword [rsp + 0], 1
	jmp .jump93
.jump94: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 24
	lea rdi, [rsp]
	lea rsi, [rel const31] ; h.png
	call _read_image
	mov rax, [rel const0] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump100
	mov rax, [rel const32] ; 98.42
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump102
	mov rax, [rel const33] ; 29.93
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	sub rsp, 8
	movsd [rsp], xmm0
	jmp .jump103
.jump102:
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
.jump103:
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	mov rax, [rel const34] ; 10.38
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	sub rsp, 8
	movsd [rsp], xmm0
	jmp .jump101
.jump100:
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
.jump101:
	sub rsp, 8 ; Align stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for i
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump104
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump104:
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump105
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump105:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump106
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump106:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
.jump107: ; Begin body of loop
	; Compare k to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump109 ; If k >= bound, ...
	mov qword [rsp + 16], 0 ; k = 0
	add qword [rsp + 8], 1 ; j++
.jump109:
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump110 ; If j >= bound, ...
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
.jump110:
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump108 ; If i >= bound, break
.jump111:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 152 to rsp
		mov r10, [rbp - 152 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment k
	add qword [rsp + 16], 1
	jmp .jump107
.jump108: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump112
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump112:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
.jump113: ; Begin body of loop
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump114 ; If i >= bound, break
.jump115:
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for l
	mov rax, [rel const35] ; 201
	push rax
	mov rax, [rel const36] ; 618
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump116
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump116:
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump117
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump117:
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump118
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump118:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize l to 0
	mov rax, 0
	push rax
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
.jump119: ; Begin body of loop
	; Compare l to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump121 ; If l >= bound, ...
	mov qword [rsp + 16], 0 ; l = 0
	add qword [rsp + 8], 1 ; k++
.jump121:
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump122 ; If k >= bound, ...
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
.jump122:
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump120 ; If j >= bound, break
.jump123:
	; Compute loop body
	mov rax, [rel const37] ; 870
	push rax
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment l
	add qword [rsp + 16], 1
	jmp .jump119
.jump120: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment i
	add qword [rsp + 0], 1
	jmp .jump113
.jump114: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	pop rdi
	call _to_float
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const38] ; 8.6
	push rax
	mov rdi, 24
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	push rax
	mov rax, 3
	push rax
	lea rdi, [rel const39] ; (ArrayType (FloatType) 1)
	lea rsi, [rsp]
	call _show
	add rsp, 16
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump124
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump124:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump125
	lea rdi, [rel const7] ; overflow computing array size
	call _fail_assertion
.jump125:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
.jump126: ; Begin body of loop
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump127 ; If i >= bound, break
.jump128:
	; Compute loop body
	mov rax, [rel const0] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump129
	mov rax, [rel const1] ; True
	push rax
	jmp .jump130
.jump129:
	mov rax, [rel const1] ; True
	push rax
.jump130:
	pop rax
	cmp rax, 0
	je .jump131
	mov rax, [rel const40] ; 946
	push rax
	jmp .jump132
.jump131:
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
.jump132:
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment i
	add qword [rsp + 0], 1
	jmp .jump126
.jump127: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	mov rax, [rel const41] ; 69.53
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 16
		mov r10, [rsp + 0 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump133
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump133:
	cmp rax, [rsp + 8]
	jl .jump134
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump134:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const42] ; 24
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for k
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump135
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump135:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize k to 0
	mov rax, 0
	push rax
.jump136: ; Begin body of loop
	; Compare k to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump137 ; If k >= bound, break
.jump138:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment k
	add qword [rsp + 0], 1
	jmp .jump136
.jump137: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump139
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump139:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
imul rdi, [rsp + 0 + 0] ; multiply by (sum[k : argnum] b)
	jno .jump140
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump140:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize k to 0
	mov rax, 0
	push rax
.jump141: ; Begin body of loop
	; Compare k to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump142 ; If k >= bound, break
.jump143:
	; Compute loop body
	mov rax, [rel const0] ; False
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment k
	add qword [rsp + 0], 1
	jmp .jump141
.jump142: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	mov rax, [rel const43] ; 596
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump144
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump144:
	cmp rax, [rsp + 8]
	jl .jump145
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump145:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump146
	mov rax, [rel const0] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump148
	mov rax, [rel const0] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump150
	jmp .jump151
.jump150:
.jump151:
	jmp .jump149
.jump148:
.jump149:
	jmp .jump147
.jump146:
.jump147:
	; Moving 0 bytes from rsp + 0 to rsp + 0
	add rsp, 0
	add rsp, 80 ; Local variables
	pop r12
	pop rbp
	ret

