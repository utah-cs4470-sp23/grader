global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 50.89
const1: dq 89.36
const2: dq 441
const3: db `non-positive loop bound`, 0
const4: dq 27.57
const5: db `overflow computing array size`, 0
const6: dq 35.38
const7: db `negative array index`, 0
const8: db `index too large`, 0
const9: dq 0
const10: dq 1
const11: dq 386
const12: dq 563
const13: dq 374
const14: dq 639
const15: dq 936
const16: dq 498
const17: db `divide by zero`, 0
const18: dq 20.52
const19: dq 69.54
const20: dq 15.41
const21: dq 79.79
const22: dq 67.41
const23: dq 511
const24: dq 503
const25: dq 93.73
const26: dq 909
const27: dq 366
const28: dq 564
const29: dq 972
const30: dq 363
const31: dq 385
const32: dq 43.15
const33: dq 630
const34: dq 962
const35: dq 964
const36: dq 873
const37: dq 640
const38: dq 277
const39: dq 403
const40: dq 37.22
const41: dq 778
const42: dq 272
const43: dq 565
const44: db `(BoolType)`, 0
const45: dq 22.13
const46: dq 661
const47: dq 95.84
const48: dq 44.76
const49: dq 917
const50: db `n.png`, 0
const51: dq 755
const52: dq 546
const53: dq 870
const54: dq 931
const55: dq 15
const56: dq 748
const57: dq 313

section .text
h:
_h:
	push rbp
	mov rbp, rsp
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump112
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	jmp .jump113
.jump112:
	sub rsp, 8 ; Align stack
	call _h
	add rsp, 8 ; Remove alignment
	push rax
.jump113:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump114
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump114:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof int[][,]
	imul rdi, [rsp + 0 + 0] ; multiply by (if g then e else h())
	jno .jump115
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump115:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
.jump116: ; Begin body of loop
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump117 ; If i >= bound, break
.jump118:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	jne .jump119
	mov rax, [rel const10] ; True
	push rax
	pop rax
.jump119:
	push rax
	pop rax
	cmp rax, 0
	je .jump120
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump122
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump122:
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump123
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump123:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof int[]
	imul rdi, [rsp + 0 + 0] ; multiply by i
	jno .jump124
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump124:
	imul rdi, [rsp + 0 + 8] ; multiply by d
	jno .jump125
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump125:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
.jump126: ; Begin body of loop
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump128 ; If k >= bound, ...
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
.jump128:
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump127 ; If j >= bound, break
.jump129:
	; Compute loop body
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 16
	add rax, [rsp + 48]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment k
	add qword [rsp + 8], 1
	jmp .jump126
.jump127: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump121
.jump120:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump130
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump130:
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump131
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump131:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof int[]
	imul rdi, [rsp + 0 + 0] ; multiply by f
	jno .jump132
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump132:
	imul rdi, [rsp + 0 + 8] ; multiply by i
	jno .jump133
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump133:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
.jump134: ; Begin body of loop
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump136 ; If k >= bound, ...
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
.jump136:
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump135 ; If j >= bound, break
.jump137:
	; Compute loop body
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 16
	add rax, [rsp + 48]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment k
	add qword [rsp + 8], 1
	jmp .jump134
.jump135: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump121:
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 24
	add rax, [rsp + 40]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment i
	add qword [rsp + 0], 1
	jmp .jump116
.jump117: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	mov rax, [rel const33] ; 630
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump138
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump138:
	cmp rax, [rsp + 8]
	jl .jump139
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump139:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 24
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for j
	sub rsp, 8 ; Align stack
	call _h
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump140
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump140:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump141
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump141:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by e
	jno .jump142
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump142:
	imul rdi, [rsp + 0 + 8] ; multiply by h()
	jno .jump143
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump143:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
.jump144: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump146 ; If j >= bound, ...
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
.jump146:
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump145 ; If i >= bound, break
.jump147:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment j
	add qword [rsp + 8], 1
	jmp .jump144
.jump145: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Moving 24 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 16]
		mov [rsp + 8 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 8 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const34] ; 962
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump148
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
.jump148:
	cmp rax, [rsp + 16]
	jl .jump149
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
.jump149:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump150
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
.jump150:
	cmp rax, [rsp + 24]
	jl .jump151
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
.jump151:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump152
	mov rax, [rel const10] ; True
	push rax
	jmp .jump153
.jump152:
	mov rax, [rel const10] ; True
	push rax
.jump153:
	pop rax
	cmp rax, 0
	je .jump154
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump155
.jump154:
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
.jump155:
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	pop rax
	pop r10
	cmp r10, 0
	jne .jump156
	lea rdi, [rel const17] ; divide by zero
	call _fail_assertion
.jump156:
	cqo
	idiv r10
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump157
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump157:
	cmp rax, [rsp + 16]
	jl .jump158
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump158:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump159
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump159:
	cmp rax, [rsp + 24]
	jl .jump160
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump160:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 16
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	call _h
	push rax
	pop rax
	add rsp, 16 ; Local variables
	pop rbp
	ret
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for m
	mov rax, [rel const35] ; 964
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump161
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump161:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump162
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump162:
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump163
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump163:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by j
	jno .jump164
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump164:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump165
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump165:
	imul rdi, [rsp + 0 + 16] ; multiply by 964
	jno .jump166
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump166:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
	; Initialize k to 0
	mov rax, 0
	push rax
.jump167: ; Begin body of loop
	; Compare m to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump169 ; If m >= bound, ...
	mov qword [rsp + 16], 0 ; m = 0
	add qword [rsp + 8], 1 ; l++
.jump169:
	; Compare l to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump170 ; If l >= bound, ...
	mov qword [rsp + 8], 0 ; l = 0
	add qword [rsp + 0], 1 ; k++
.jump170:
	; Compare k to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump168 ; If k >= bound, break
.jump171:
	; Compute loop body
	sub rsp, 8 ; Align stack
	call _h
	add rsp, 8 ; Remove alignment
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment m
	add qword [rsp + 16], 1
	jmp .jump167
.jump168: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 40
		mov r10, [rsp + 0 + 0]
		mov [rsp + 40 + 0], r10
	add rsp, 40
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	pop rax
	cmp rax, 0
	je .jump172
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for m
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump174
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump174:
	; Computing bound for k
	mov rax, [rel const36] ; 873
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump175
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump175:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize l to 0
	mov rax, 0
	push rax
	; Initialize k to 0
	mov rax, 0
	push rax
.jump176: ; Begin body of loop
	; Compare l to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump178 ; If l >= bound, ...
	mov qword [rsp + 8], 0 ; l = 0
	add qword [rsp + 0], 1 ; k++
.jump178:
	; Compare k to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump177 ; If k >= bound, break
.jump179:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment l
	add qword [rsp + 8], 1
	jmp .jump176
.jump177: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump180
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump180:
	; Computing bound for l
	mov rax, [rel const37] ; 640
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump181
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump181:
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump182
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump182:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof int[,,]
	imul rdi, [rsp + 0 + 0] ; multiply by f
	jno .jump183
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump183:
	imul rdi, [rsp + 0 + 8] ; multiply by 640
	jno .jump184
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump184:
imul rdi, [rsp + 0 + 16] ; multiply by (sum[k : 873, l : e] f)
	jno .jump185
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump185:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
	; Initialize k to 0
	mov rax, 0
	push rax
.jump186: ; Begin body of loop
	; Compare m to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump188 ; If m >= bound, ...
	mov qword [rsp + 16], 0 ; m = 0
	add qword [rsp + 8], 1 ; l++
.jump188:
	; Compare l to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump189 ; If l >= bound, ...
	mov qword [rsp + 8], 0 ; l = 0
	add qword [rsp + 0], 1 ; k++
.jump189:
	; Compare k to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump187 ; If k >= bound, break
.jump190:
	; Compute loop body
	sub rsp, 32
	; Moving 32 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 24]
		mov [rsp + 24], r10
		mov r10, [r12 - 56 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 56 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, [rsp + 72] ; No overflow if indices in bounds
	add rax, [rsp + 48]
	imul rax, 32
	add rax, [rsp + 80]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment m
	add qword [rsp + 16], 1
	jmp .jump186
.jump187: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for m
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump191
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump191:
	; Computing bound for l
	call _h
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump192
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump192:
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump193
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump193:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
	; Initialize k to 0
	mov rax, 0
	push rax
.jump194: ; Begin body of loop
	; Compare m to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump196 ; If m >= bound, ...
	mov qword [rsp + 16], 0 ; m = 0
	add qword [rsp + 8], 1 ; l++
.jump196:
	; Compare l to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump197 ; If l >= bound, ...
	mov qword [rsp + 8], 0 ; l = 0
	add qword [rsp + 0], 1 ; k++
.jump197:
	; Compare k to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump195 ; If k >= bound, break
.jump198:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment m
	add qword [rsp + 16], 1
	jmp .jump194
.jump195: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump199
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump201
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump201:
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump202
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump202:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump203
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump203:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump204
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump204:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize l to 0
	mov rax, 0
	push rax
	; Initialize k to 0
	mov rax, 0
	push rax
.jump205: ; Begin body of loop
	; Compare l to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump207 ; If l >= bound, ...
	mov qword [rsp + 8], 0 ; l = 0
	add qword [rsp + 0], 1 ; k++
.jump207:
	; Compare k to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump206 ; If k >= bound, break
.jump208:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment l
	add qword [rsp + 8], 1
	jmp .jump205
.jump206: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump200
.jump199:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump209
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump209:
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump210
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump210:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by j
	jno .jump211
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump211:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump212
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump212:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize l to 0
	mov rax, 0
	push rax
	; Initialize k to 0
	mov rax, 0
	push rax
.jump213: ; Begin body of loop
	; Compare l to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump215 ; If l >= bound, ...
	mov qword [rsp + 8], 0 ; l = 0
	add qword [rsp + 0], 1 ; k++
.jump215:
	; Compare k to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump214 ; If k >= bound, break
.jump216:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment l
	add qword [rsp + 8], 1
	jmp .jump213
.jump214: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump200:
	mov rax, [rel const38] ; 277
	push rax
	sub rsp, 8 ; Align stack
	call _h
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump217
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
.jump217:
	cmp rax, [rsp + 16]
	jl .jump218
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
.jump218:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump219
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
.jump219:
	cmp rax, [rsp + 24]
	jl .jump220
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
.jump220:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump221
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump221:
	cmp rax, [rsp + 24]
	jl .jump222
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump222:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump223
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump223:
	cmp rax, [rsp + 32]
	jl .jump224
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump224:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump225
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump225:
	cmp rax, [rsp + 40]
	jl .jump226
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump226:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 32
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 32
	; Moving 32 bytes from rax to rsp
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump173
.jump172:
	sub rsp, 32
	; Moving 32 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 24]
		mov [rsp + 24], r10
		mov r10, [r12 - 56 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 56 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
.jump173:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for p
	mov rax, [rel const28] ; 564
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump227
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump227:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump228
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump228:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
.jump229: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump231 ; If p >= bound, ...
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
.jump231:
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump230 ; If o >= bound, break
.jump232:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment p
	add qword [rsp + 8], 1
	jmp .jump229
.jump230: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	pop rax
	add rsp, 48 ; Local variables
	pop rbp
	ret
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	add rsp, 48 ; Local variables
	pop rbp
	ret

m:
_m:
	push rbp
	mov rbp, rsp
	mov rax, [rel const9] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump273
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	jmp .jump274
.jump273:
	mov rax, [rel const10] ; True
	push rax
.jump274:
	pop rax
	xor rax, 1
	push rax
	pop rax
	add rsp, 0 ; Local variables
	pop rbp
	ret
	sub rsp, 8 ; Align stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for r
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump275
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump275:
	; Computing bound for q
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump276
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump276:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by p
	jno .jump277
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump277:
	imul rdi, [rsp + 0 + 8] ; multiply by (- o)
	jno .jump278
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump278:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize r to 0
	mov rax, 0
	push rax
	; Initialize q to 0
	mov rax, 0
	push rax
.jump279: ; Begin body of loop
	; Compare r to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump281 ; If r >= bound, ...
	mov qword [rsp + 8], 0 ; r = 0
	add qword [rsp + 0], 1 ; q++
.jump281:
	; Compare q to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump280 ; If q >= bound, break
.jump282:
	; Compute loop body
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump283
	sub rsp, 24
	; Moving 24 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump284
.jump283:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for t
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump285
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump285:
	; Computing bound for s
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump286
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump286:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by o
	jno .jump287
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump287:
	imul rdi, [rsp + 0 + 8] ; multiply by q
	jno .jump288
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump288:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize t to 0
	mov rax, 0
	push rax
	; Initialize s to 0
	mov rax, 0
	push rax
.jump289: ; Begin body of loop
	; Compare t to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump291 ; If t >= bound, ...
	mov qword [rsp + 8], 0 ; t = 0
	add qword [rsp + 0], 1 ; s++
.jump291:
	; Compare s to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump290 ; If s >= bound, break
.jump292:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment t
	add qword [rsp + 8], 1
	jmp .jump289
.jump290: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump284:
	call _m
	add rsp, 24
	add rsp, 8 ; Remove alignment
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment r
	add qword [rsp + 8], 1
	jmp .jump279
.jump280: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	call _m
	add rsp, 24
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	add rsp, 0 ; Local variables
	pop rbp
	ret
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for s
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump293
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump293:
	; Computing bound for r
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump294
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump294:
	; Computing bound for q
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump295
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump295:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof {int[,,]}
	imul rdi, [rsp + 0 + 0] ; multiply by (argnum - d)
	jno .jump296
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump296:
	imul rdi, [rsp + 0 + 8] ; multiply by f
	jno .jump297
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump297:
	imul rdi, [rsp + 0 + 16] ; multiply by j
	jno .jump298
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump298:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize s to 0
	mov rax, 0
	push rax
	; Initialize r to 0
	mov rax, 0
	push rax
	; Initialize q to 0
	mov rax, 0
	push rax
.jump299: ; Begin body of loop
	; Compare s to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump301 ; If s >= bound, ...
	mov qword [rsp + 16], 0 ; s = 0
	add qword [rsp + 8], 1 ; r++
.jump301:
	; Compare r to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump302 ; If r >= bound, ...
	mov qword [rsp + 8], 0 ; r = 0
	add qword [rsp + 0], 1 ; q++
.jump302:
	; Compare q to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump300 ; If q >= bound, break
.jump303:
	; Compute loop body
	sub rsp, 32
	; Moving 32 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 24]
		mov [rsp + 24], r10
		mov r10, [r12 - 56 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 56 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, [rsp + 72] ; No overflow if indices in bounds
	add rax, [rsp + 48]
	imul rax, 32
	add rax, [rsp + 80]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment s
	add qword [rsp + 16], 1
	jmp .jump299
.jump300: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Moving 32 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 24]
		mov [rsp + 0 + 24], r10
		mov r10, [rsp + 0 + 16]
		mov [rsp + 0 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump304
	sub rsp, 8 ; Align stack
	call _h
	add rsp, 8 ; Remove alignment
	push rax
	jmp .jump305
.jump304:
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
.jump305:
	mov rax, [rel const46] ; 661
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump306
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump306:
	cmp rax, [rsp + 24]
	jl .jump307
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump307:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump308
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump308:
	cmp rax, [rsp + 32]
	jl .jump309
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump309:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump310
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump310:
	cmp rax, [rsp + 40]
	jl .jump311
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump311:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 32
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 32
	; Moving 32 bytes from rax to rsp
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for w
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump312
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump312:
	; Computing bound for v
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump313
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump313:
	; Computing bound for u
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump314
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump314:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by (- j)
	jno .jump315
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump315:
	imul rdi, [rsp + 0 + 8] ; multiply by e
	jno .jump316
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump316:
	imul rdi, [rsp + 0 + 16] ; multiply by e
	jno .jump317
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump317:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize w to 0
	mov rax, 0
	push rax
	; Initialize v to 0
	mov rax, 0
	push rax
	; Initialize u to 0
	mov rax, 0
	push rax
.jump318: ; Begin body of loop
	; Compare w to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump320 ; If w >= bound, ...
	mov qword [rsp + 16], 0 ; w = 0
	add qword [rsp + 8], 1 ; v++
.jump320:
	; Compare v to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump321 ; If v >= bound, ...
	mov qword [rsp + 8], 0 ; v = 0
	add qword [rsp + 0], 1 ; u++
.jump321:
	; Compare u to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump319 ; If u >= bound, break
.jump322:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment w
	add qword [rsp + 16], 1
	jmp .jump318
.jump319: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rax
	add rsp, 64 ; Local variables
	pop rbp
	ret

jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp
	sub rsp, 8 ; Align stack
	mov rax, [rel const0] ; 50.89
	push rax
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const1] ; 89.36
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for a
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for a
	mov rax, [rel const2] ; 441
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump1:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize a to 0
	mov rax, 0
	push rax
.jump2: ; Begin body of loop
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump3 ; If a >= bound, break
.jump4:
	; Compute loop body
	mov rax, [rel const4] ; 27.57
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment a
	add qword [rsp + 0], 1
	jmp .jump2
.jump3: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump5
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump5:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
imul rdi, [rsp + 0 + 0] ; multiply by (sum[a : 441] to_int(27.57))
	jno .jump6
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump6:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize a to 0
	mov rax, 0
	push rax
.jump7: ; Begin body of loop
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump8 ; If a >= bound, break
.jump9:
	; Compute loop body
	sub rsp, 8 ; Align stack
	mov rax, [rel const6] ; 35.38
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment a
	add qword [rsp + 0], 1
	jmp .jump7
.jump8: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump10
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump10:
	cmp rax, [rsp + 8]
	jl .jump11
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump11:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	mov rax, [rel const9] ; False
	push rax
	pop rax
	cmp rax, 0
	jne .jump12
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump13
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
.jump13:
	push rax
	pop rax
	cmp rax, 0
	je .jump14
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump15
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
.jump15:
	push rax
	pop rax
.jump14:
	push rax
	pop rax
.jump12:
	push rax
	pop rax
	cmp rax, 0
	je .jump16
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump18
	mov rax, [rel const9] ; False
	push rax
	pop rax
.jump18:
	push rax
	pop rax
	cmp rax, 0
	je .jump19
	mov rax, [rel const10] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	jmp .jump20
.jump19:
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
.jump20:
	pop rax
	cmp rax, 0
	je .jump21
	mov rax, [rel const9] ; False
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	jne .jump22
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
.jump22:
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
.jump21:
	push rax
	jmp .jump17
.jump16:
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
.jump17:
	pop rax
	cmp rax, 0
	je .jump23
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump25
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for c
	mov rax, [rel const11] ; 386
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump27
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump27:
	; Computing bound for b
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump28
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump28:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump29
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump29:
	imul rdi, [rsp + 0 + 8] ; multiply by 386
	jno .jump30
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump30:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump31: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump33 ; If c >= bound, ...
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
.jump33:
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump32 ; If b >= bound, break
.jump34:
	; Compute loop body
	mov rax, [rel const10] ; True
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment c
	add qword [rsp + 8], 1
	jmp .jump31
.jump32: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump26
.jump25:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump35
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump35:
	; Computing bound for b
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump36
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump36:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump37
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump37:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump38
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump38:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump39: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump41 ; If c >= bound, ...
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
.jump41:
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump40 ; If b >= bound, break
.jump42:
	; Compute loop body
	mov rax, [rel const10] ; True
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment c
	add qword [rsp + 8], 1
	jmp .jump39
.jump40: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump26:
	mov rax, [rel const12] ; 563
	push rax
	mov rax, [rel const13] ; 374
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump43
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump43:
	cmp rax, [rsp + 16]
	jl .jump44
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump44:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump45
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump45:
	cmp rax, [rsp + 24]
	jl .jump46
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump46:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for d
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for b
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump47
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump47:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump48
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump48:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize b to 0
	mov rax, 0
	push rax
.jump49: ; Begin body of loop
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump50 ; If b >= bound, break
.jump51:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment b
	add qword [rsp + 0], 1
	jmp .jump49
.jump50: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	mov rax, [rel const14] ; 639
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump52
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump52:
	cmp rax, [rsp + 8]
	jl .jump53
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump53:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump54
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump54:
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump55
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump55:
	; Computing bound for b
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for d
	mov rax, [rel const15] ; 936
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump56
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump56:
	; Computing bound for c
	mov rax, [rel const16] ; 498
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump57
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump57:
	; Computing bound for b
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump58
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump58:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump59: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump61 ; If d >= bound, ...
	mov qword [rsp + 16], 0 ; d = 0
	add qword [rsp + 8], 1 ; c++
.jump61:
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump62 ; If c >= bound, ...
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
.jump62:
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump60 ; If b >= bound, break
.jump63:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment d
	add qword [rsp + 16], 1
	jmp .jump59
.jump60: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump64
	lea rdi, [rel const17] ; divide by zero
	call _fail_assertion
.jump64:
	cqo
	idiv r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump65
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump65:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
imul rdi, [rsp + 0 + 0] ; multiply by (argnum / (sum[b : argnum, c : 498, d : 936] d))
	jno .jump66
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump66:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump67
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump67:
imul rdi, [rsp + 0 + 16] ; multiply by (array[b : argnum] argnum)[(- 639)]
	jno .jump68
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump68:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump69: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump71 ; If d >= bound, ...
	mov qword [rsp + 16], 0 ; d = 0
	add qword [rsp + 8], 1 ; c++
.jump71:
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump72 ; If c >= bound, ...
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
.jump72:
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump70 ; If b >= bound, break
.jump73:
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for e
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump74
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump74:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize e to 0
	mov rax, 0
	push rax
.jump75: ; Begin body of loop
	; Compare e to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump76 ; If e >= bound, break
.jump77:
	; Compute loop body
	mov rax, [rel const18] ; 20.52
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 16] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 16], xmm0 ; Save sum
	; Increment e
	add qword [rsp + 0], 1
	jmp .jump75
.jump76: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment d
	add qword [rsp + 16], 1
	jmp .jump69
.jump70: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8 ; Align stack
	mov rax, [rel const19] ; 69.54
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const20] ; 15.41
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	jmp .jump24
.jump23:
	mov rax, [rel const10] ; True
	push rax
	mov rax, [rel const21] ; 79.79
	push rax
	mov rax, [rel const22] ; 67.41
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for c
	mov rax, [rel const23] ; 511
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump78
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump78:
	; Computing bound for b
	mov rax, [rel const24] ; 503
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump79
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump79:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump80: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump82 ; If c >= bound, ...
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
.jump82:
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump81 ; If b >= bound, break
.jump83:
	; Compute loop body
	mov rax, [rel const25] ; 93.73
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 32] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 32], xmm0 ; Save sum
	; Increment c
	add qword [rsp + 8], 1
	jmp .jump80
.jump81: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump84
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const26] ; 909
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump86
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump86:
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump87
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump87:
	; Computing bound for b
	mov rax, [rel const27] ; 366
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump88
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump88:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by (- 366)
	jno .jump89
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump89:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump90
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump90:
	imul rdi, [rsp + 0 + 16] ; multiply by (909 + argnum)
	jno .jump91
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump91:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump92: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump94 ; If d >= bound, ...
	mov qword [rsp + 16], 0 ; d = 0
	add qword [rsp + 8], 1 ; c++
.jump94:
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump95 ; If c >= bound, ...
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
.jump95:
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump93 ; If b >= bound, break
.jump96:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment d
	add qword [rsp + 16], 1
	jmp .jump92
.jump93: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump85
.jump84:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump97
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump97:
	; Computing bound for c
	mov rax, [rel const28] ; 564
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump98
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump98:
	; Computing bound for b
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for b
	mov rax, [rel const29] ; 972
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump99
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump99:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize b to 0
	mov rax, 0
	push rax
.jump100: ; Begin body of loop
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump101 ; If b >= bound, break
.jump102:
	; Compute loop body
	mov rax, [rel const30] ; 363
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment b
	add qword [rsp + 0], 1
	jmp .jump100
.jump101: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump103
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump103:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
imul rdi, [rsp + 0 + 0] ; multiply by (sum[b : 972] 363)
	jno .jump104
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump104:
	imul rdi, [rsp + 0 + 8] ; multiply by 564
	jno .jump105
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump105:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump106
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump106:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump107: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump109 ; If d >= bound, ...
	mov qword [rsp + 16], 0 ; d = 0
	add qword [rsp + 8], 1 ; c++
.jump109:
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump110 ; If c >= bound, ...
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
.jump110:
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump108 ; If b >= bound, break
.jump111:
	; Compute loop body
	mov rax, [rel const31] ; 385
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment d
	add qword [rsp + 16], 1
	jmp .jump107
.jump108: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump85:
	mov rax, [rel const32] ; 43.15
	push rax
.jump24:
	mov rax, [rel const9] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump233
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump235
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump235:
	; Computing bound for j
	mov rax, [rel const39] ; 403
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump236
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump236:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by 403
	jno .jump237
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump237:
	imul rdi, [rsp + 0 + 8] ; multiply by f
	jno .jump238
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump238:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
.jump239: ; Begin body of loop
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump241 ; If k >= bound, ...
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
.jump241:
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump240 ; If j >= bound, break
.jump242:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment k
	add qword [rsp + 8], 1
	jmp .jump239
.jump240: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	; Moving 24 bytes from rsp + 8 to rsp + 16
		mov r10, [rsp + 8 + 16]
		mov [rsp + 16 + 16], r10
		mov r10, [rsp + 8 + 8]
		mov [rsp + 16 + 8], r10
		mov r10, [rsp + 8 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	jmp .jump234
.jump233:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for k
	sub rsp, 8 ; Align stack
	mov rax, [rel const40] ; 37.22
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump243
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump243:
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const41] ; 778
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	mov rax, [rsp]
	cmp rax, 0
	jg .jump244
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump244:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by {778, d}{0}
	jno .jump245
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump245:
	imul rdi, [rsp + 0 + 8] ; multiply by to_int(exp(37.22))
	jno .jump246
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump246:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
.jump247: ; Begin body of loop
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump249 ; If k >= bound, ...
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
.jump249:
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump248 ; If j >= bound, break
.jump250:
	; Compute loop body
	mov rax, [rel const42] ; 272
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment k
	add qword [rsp + 8], 1
	jmp .jump247
.jump248: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump234:
	sub rsp, 8 ; Align stack
	call _h
	add rsp, 8 ; Remove alignment
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump251
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump251:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by (e - f)
	jno .jump252
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump252:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
.jump253: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump254 ; If j >= bound, break
.jump255:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment j
	add qword [rsp + 0], 1
	jmp .jump253
.jump254: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	mov rax, [rel const43] ; 565
	push rax
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump256
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump256:
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump257
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump257:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
.jump258: ; Begin body of loop
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump260 ; If k >= bound, ...
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
.jump260:
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump259 ; If j >= bound, break
.jump261:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment k
	add qword [rsp + 8], 1
	jmp .jump258
.jump259: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	pop rax
	pop r10
	cmp r10, 0
	jne .jump262
	lea rdi, [rel const17] ; divide by zero
	call _fail_assertion
.jump262:
	cqo
	idiv r10
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump263
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump263:
	cmp rax, [rsp + 8]
	jl .jump264
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump264:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump265
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; divide by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump265:
	cqo
	idiv r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump266
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump266:
	cmp rax, [rsp + 16]
	jl .jump267
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump267:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump268
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump268:
	cmp rax, [rsp + 24]
	jl .jump269
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump269:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const10] ; True
	push rax
	lea rdi, [rel const44] ; (BoolType)
	lea rsi, [rsp]
	call _show
	add rsp, 8
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	jne .jump270
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
.jump270:
	push rax
	pop rax
	cmp rax, 0
	je .jump271
	jmp .jump272
.jump271:
.jump272:
	mov rax, [rel const45] ; 22.13
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump323
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump323:
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump324
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump324:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof {float,float,float,float}
	imul rdi, [rsp + 0 + 0] ; multiply by (- d)
	jno .jump325
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump325:
	imul rdi, [rsp + 0 + 8] ; multiply by e
	jno .jump326
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump326:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
.jump327: ; Begin body of loop
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump329 ; If o >= bound, ...
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
.jump329:
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump328 ; If n >= bound, break
.jump330:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	pop rax
	cmp rax, 0
	je .jump331
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for r
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump333
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump333:
	; Computing bound for q
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump334
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump334:
	; Computing bound for p
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump335
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump335:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
.jump336: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump337 ; If p >= bound, break
.jump338:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment p
	add qword [rsp + 0], 1
	jmp .jump336
.jump337: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump339
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump339:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof {float,float,float,float}
imul rdi, [rsp + 0 + 0] ; multiply by (sum[p : o] j)
	jno .jump340
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump340:
	imul rdi, [rsp + 0 + 8] ; multiply by o
	jno .jump341
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump341:
	imul rdi, [rsp + 0 + 16] ; multiply by n
	jno .jump342
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump342:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize r to 0
	mov rax, 0
	push rax
	; Initialize q to 0
	mov rax, 0
	push rax
	; Initialize p to 0
	mov rax, 0
	push rax
.jump343: ; Begin body of loop
	; Compare r to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump345 ; If r >= bound, ...
	mov qword [rsp + 16], 0 ; r = 0
	add qword [rsp + 8], 1 ; q++
.jump345:
	; Compare q to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump346 ; If q >= bound, ...
	mov qword [rsp + 8], 0 ; q = 0
	add qword [rsp + 0], 1 ; p++
.jump346:
	; Compare p to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump344 ; If p >= bound, break
.jump347:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const47] ; 95.84
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const48] ; 44.76
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, [rsp + 72] ; No overflow if indices in bounds
	add rax, [rsp + 48]
	imul rax, 32
	add rax, [rsp + 80]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment r
	add qword [rsp + 16], 1
	jmp .jump343
.jump344: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump348
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump349
.jump348:
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
.jump349:
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump350
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump350:
	cmp rax, [rsp + 8]
	jl .jump351
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump351:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump352
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	jmp .jump353
.jump352:
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
.jump353:
	pop rax
	cmp rax, 0
	je .jump354
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	jmp .jump355
.jump354:
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
.jump355:
	mov rax, [rel const10] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump356
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump357
.jump356:
	mov rax, [rel const49] ; 917
	push rax
.jump357:
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump358
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump358:
	cmp rax, [rsp + 24]
	jl .jump359
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump359:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump360
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump360:
	cmp rax, [rsp + 32]
	jl .jump361
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump361:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump362
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump362:
	cmp rax, [rsp + 40]
	jl .jump363
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump363:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 32
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 32
	; Moving 32 bytes from rax to rsp
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump332
.jump331:
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump364
	call _h
	push rax
	jmp .jump365
.jump364:
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
.jump365:
	pop rdi
	call _to_float
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
.jump332:
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 32
	add rax, [rsp + 64]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment o
	add qword [rsp + 8], 1
	jmp .jump327
.jump328: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	lea rdi, [rel const50] ; n.png
	call _write_image
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump366
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const51] ; 755
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rdi, 24
	call _jpl_alloc
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	push rax
	mov rax, 3
	push rax
	jmp .jump367
.jump366:
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Moving 16 bytes from rsp + 16 to rsp + 32
		mov r10, [rsp + 16 + 8]
		mov [rsp + 32 + 8], r10
		mov r10, [rsp + 16 + 0]
		mov [rsp + 32 + 0], r10
	add rsp, 32
.jump367:
	mov rax, [rel const52] ; 546
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump368
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
.jump368:
	cmp rax, [rsp + 8]
	jl .jump369
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
.jump369:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump370
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for p
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for p
	call _h
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump372
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump372:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump373
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump373:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
.jump374: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump376 ; If p >= bound, ...
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
.jump376:
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump375 ; If o >= bound, break
.jump377:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 144 to rsp
		mov r10, [rbp - 144 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment p
	add qword [rsp + 8], 1
	jmp .jump374
.jump375: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump378
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump378:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump379
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump379:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by f
	jno .jump380
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump380:
imul rdi, [rsp + 0 + 8] ; multiply by (sum[o : n, p : h()] o)
	jno .jump381
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump381:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
.jump382: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump384 ; If p >= bound, ...
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
.jump384:
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump383 ; If o >= bound, break
.jump385:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment p
	add qword [rsp + 8], 1
	jmp .jump382
.jump383: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const53] ; 870
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump386
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for p
	call _h
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump388
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump388:
	; Computing bound for o
	mov rax, [rel const54] ; 931
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump389
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump389:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by 931
	jno .jump390
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump390:
	imul rdi, [rsp + 0 + 8] ; multiply by h()
	jno .jump391
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump391:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
.jump392: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump394 ; If p >= bound, ...
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
.jump394:
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump393 ; If o >= bound, break
.jump395:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment p
	add qword [rsp + 8], 1
	jmp .jump392
.jump393: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump387
.jump386:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump396
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump396:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump397
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump397:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by j
	jno .jump398
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump398:
	imul rdi, [rsp + 0 + 8] ; multiply by n
	jno .jump399
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump399:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
.jump400: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump402 ; If p >= bound, ...
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
.jump402:
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump401 ; If o >= bound, break
.jump403:
	; Compute loop body
	mov rax, [rel const9] ; False
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment p
	add qword [rsp + 8], 1
	jmp .jump400
.jump401: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump387:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for p
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for q
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump404
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump404:
	; Computing bound for p
	mov rax, [rel const55] ; 15
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump405
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump405:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump406
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump406:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize q to 0
	mov rax, 0
	push rax
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
.jump407: ; Begin body of loop
	; Compare q to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump409 ; If q >= bound, ...
	mov qword [rsp + 16], 0 ; q = 0
	add qword [rsp + 8], 1 ; p++
.jump409:
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump410 ; If p >= bound, ...
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
.jump410:
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump408 ; If o >= bound, break
.jump411:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 208 to rsp
		mov r10, [rbp - 208 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment q
	add qword [rsp + 16], 1
	jmp .jump407
.jump408: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump412
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump412:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump413
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	jmp .jump414
.jump413:
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
.jump414:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump415
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump415:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by (if a then j else argnum)
	jno .jump416
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump416:
imul rdi, [rsp + 0 + 8] ; multiply by (sum[o : argnum, p : 15, q : n] o)
	jno .jump417
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump417:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
.jump418: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump420 ; If p >= bound, ...
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
.jump420:
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump419 ; If o >= bound, break
.jump421:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 184 to rsp
		mov r10, [rbp - 184 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment p
	add qword [rsp + 8], 1
	jmp .jump418
.jump419: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rdi, 72
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 72 bytes from rsp to rax
		mov r10, [rsp + 64]
		mov [rax + 64], r10
		mov r10, [rsp + 56]
		mov [rax + 56], r10
		mov r10, [rsp + 48]
		mov [rax + 48], r10
		mov r10, [rsp + 40]
		mov [rax + 40], r10
		mov r10, [rsp + 32]
		mov [rax + 32], r10
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 72
	push rax
	mov rax, 3
	push rax
	jmp .jump371
.jump370:
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump422
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump424
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump424:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump425
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump425:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump426
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump426:
	imul rdi, [rsp + 0 + 8] ; multiply by j
	jno .jump427
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump427:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
.jump428: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump430 ; If p >= bound, ...
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
.jump430:
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump429 ; If o >= bound, break
.jump431:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment p
	add qword [rsp + 8], 1
	jmp .jump428
.jump429: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump423
.jump422:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump432
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump432:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump433
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump433:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by f
	jno .jump434
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump434:
	imul rdi, [rsp + 0 + 8] ; multiply by e
	jno .jump435
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump435:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
.jump436: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump438 ; If p >= bound, ...
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
.jump438:
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump437 ; If o >= bound, break
.jump439:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment p
	add qword [rsp + 8], 1
	jmp .jump436
.jump437: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump423:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump440
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump440:
	; Computing bound for o
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for o
	mov rax, [rel const56] ; 748
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump441
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump441:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize o to 0
	mov rax, 0
	push rax
.jump442: ; Begin body of loop
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump443 ; If o >= bound, break
.jump444:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment o
	add qword [rsp + 0], 1
	jmp .jump442
.jump443: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump445
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump445:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
imul rdi, [rsp + 0 + 0] ; multiply by (sum[o : 748] e)
	jno .jump446
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump446:
	imul rdi, [rsp + 0 + 8] ; multiply by n
	jno .jump447
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump447:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
.jump448: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump450 ; If p >= bound, ...
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
.jump450:
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump449 ; If o >= bound, break
.jump451:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment p
	add qword [rsp + 8], 1
	jmp .jump448
.jump449: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rdi, 48
	call _jpl_alloc
	; Moving 48 bytes from rsp to rax
		mov r10, [rsp + 40]
		mov [rax + 40], r10
		mov r10, [rsp + 32]
		mov [rax + 32], r10
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 48
	push rax
	mov rax, 2
	push rax
.jump371:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for o
	mov rax, [rel const9] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump452
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump454
	mov rax, [rel const9] ; False
	push rax
	jmp .jump455
.jump454:
	mov rax, [rel const10] ; True
	push rax
.jump455:
	pop rax
	cmp rax, 0
	je .jump456
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	jmp .jump457
.jump456:
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
.jump457:
	jmp .jump453
.jump452:
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
.jump453:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump458
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump458:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize o to 0
	mov rax, 0
	push rax
.jump459: ; Begin body of loop
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump460 ; If o >= bound, break
.jump461:
	; Compute loop body
	mov rax, [rel const57] ; 313
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment o
	add qword [rsp + 0], 1
	jmp .jump459
.jump460: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump462
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump462:
	cmp rax, [rsp + 8]
	jl .jump463
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump463:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 24
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	add rsp, 112 ; Local variables
	pop r12
	pop rbp
	ret

