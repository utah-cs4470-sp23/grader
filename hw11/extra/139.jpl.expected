global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: db `c.png`, 0
const1: dq 149
const2: db `non-positive loop bound`, 0
const3: dq 31.29
const4: db `overflow computing array size`, 0
const5: dq 0
const6: dq 414
const7: db `negative array index`, 0
const8: db `index too large`, 0
const9: dq 982
const10: dq 65.69
const11: dq 1
const12: dq 768
const13: dq 439
const14: dq 62.08
const15: db `d.png`, 0
const16: dq 28.64
const17: dq 20.32
const18: dq 190
const19: dq 883
const20: dq 917
const21: dq 997
const22: dq 42.05
const23: dq 739
const24: dq 862
const25: dq 607
const26: db `mod by zero`, 0
const27: db `divide by zero`, 0
const28: db `s`, 0
const29: dq 757
const30: dq 99.76
const31: dq 47.4
const32: dq 212
const33: dq 664
const34: dq 29
const35: dq 223
const36: dq 239
const37: dq 517
const38: dq 435
const39: dq 65.54
const40: dq 298
const41: dq 193
const42: dq 61.64
const43: dq 323
const44: dq 813
const45: dq 811
const46: dq 992
const47: dq 19
const48: dq 247
const49: dq 704
const50: dq 971
const51: dq 556
const52: dq 419
const53: dq 36.5
const54: dq 44.36
const55: dq 495
const56: db `l.png`, 0
const57: dq 330
const58: dq 94.79
const59: dq 82
const60: dq 253
const61: dq 70.77
const62: dq 11.95
const63: dq 56.04
const64: dq 26.74
const65: dq 65.81
const66: dq 845
const67: dq 45.37

section .text
g:
_g:
	push rbp
	mov rbp, rsp
	push rdi
	sub rsp, 8
	; Moving 8 bytes from rbp - -56 to rsp
		mov r10, [rbp - -56 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump116
	mov rax, [rel const11] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump118
	sub rsp, 16
	; Moving 16 bytes from rbp - -40 to rsp
		mov r10, [rbp - -40 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -40 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump120
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump120:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump121
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump121:
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump122
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump122:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by e
	jno .jump123
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump123:
	imul rdi, [rsp + 0 + 8] ; multiply by i
	jno .jump124
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump124:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump125
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump125:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
.jump126: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump128 ; If p >= bound, ...
	mov qword [rsp + 16], 0 ; p = 0
	add qword [rsp + 8], 1 ; o++
.jump128:
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump129 ; If o >= bound, ...
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
.jump129:
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump127 ; If n >= bound, break
.jump130:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment p
	add qword [rsp + 16], 1
	jmp .jump126
.jump127: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump119
.jump118:
	sub rsp, 16
	; Moving 16 bytes from rbp - -40 to rsp
		mov r10, [rbp - -40 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -40 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump131
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump131:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump132
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump132:
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump133
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump133:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by e
	jno .jump134
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump134:
	imul rdi, [rsp + 0 + 8] ; multiply by e
	jno .jump135
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump135:
	imul rdi, [rsp + 0 + 16] ; multiply by j
	jno .jump136
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump136:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
.jump137: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump139 ; If p >= bound, ...
	mov qword [rsp + 16], 0 ; p = 0
	add qword [rsp + 8], 1 ; o++
.jump139:
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump140 ; If o >= bound, ...
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
.jump140:
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump138 ; If n >= bound, break
.jump141:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment p
	add qword [rsp + 16], 1
	jmp .jump137
.jump138: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump119:
	jmp .jump117
.jump116:
	mov rax, [rel const11] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump142
	sub rsp, 16
	; Moving 16 bytes from rbp - -40 to rsp
		mov r10, [rbp - -40 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -40 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from rbp - -40 to rsp
		mov r10, [rbp - -40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump144
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump144:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - -40 to rsp
		mov r10, [rbp - -40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump145
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump145:
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - -40 to rsp
		mov r10, [rbp - -40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump146
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump146:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by l
	jno .jump147
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump147:
	imul rdi, [rsp + 0 + 8] ; multiply by l
	jno .jump148
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump148:
	imul rdi, [rsp + 0 + 16] ; multiply by l
	jno .jump149
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump149:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
.jump150: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump152 ; If p >= bound, ...
	mov qword [rsp + 16], 0 ; p = 0
	add qword [rsp + 8], 1 ; o++
.jump152:
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump153 ; If o >= bound, ...
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
.jump153:
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump151 ; If n >= bound, break
.jump154:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -40 to rsp
		mov r10, [rbp - -40 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment p
	add qword [rsp + 16], 1
	jmp .jump150
.jump151: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump143
.jump142:
	sub rsp, 16
	; Moving 16 bytes from rbp - -40 to rsp
		mov r10, [rbp - -40 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -40 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump155
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump155:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump156
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump156:
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump157
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump157:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by e
	jno .jump158
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump158:
	imul rdi, [rsp + 0 + 8] ; multiply by j
	jno .jump159
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump159:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump160
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump160:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
.jump161: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump163 ; If p >= bound, ...
	mov qword [rsp + 16], 0 ; p = 0
	add qword [rsp + 8], 1 ; o++
.jump163:
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump164 ; If o >= bound, ...
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
.jump164:
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump162 ; If n >= bound, break
.jump165:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment p
	add qword [rsp + 16], 1
	jmp .jump161
.jump162: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump143:
.jump117:
	mov rax, [rel const11] ; True
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	pop rax
	xor rax, 1
	push rax
	mov rdi, 8
	call _jpl_alloc
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for t
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump166
	sub rsp, 8 ; Align stack
	lea rdi, [rel const26] ; mod by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump166:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump167
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump167:
	; Computing bound for s
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump168
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump168:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize t to 0
	mov rax, 0
	push rax
	; Initialize s to 0
	mov rax, 0
	push rax
.jump169: ; Begin body of loop
	; Compare t to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump171 ; If t >= bound, ...
	mov qword [rsp + 8], 0 ; t = 0
	add qword [rsp + 0], 1 ; s++
.jump171:
	; Compare s to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump170 ; If s >= bound, break
.jump172:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment t
	add qword [rsp + 8], 1
	jmp .jump169
.jump170: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	pop rax
	pop r10
	cmp r10, 0
	jne .jump173
	sub rsp, 8 ; Align stack
	lea rdi, [rel const27] ; divide by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump173:
	cqo
	idiv r10
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump174
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
.jump174:
	cmp rax, [rsp + 8]
	jl .jump175
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
.jump175:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	jne .jump176
	sub rsp, 8 ; Align stack
	lea rdi, [rel const28] ; s
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump176:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for t
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for u
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump177
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump177:
	; Computing bound for t
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -40 to rsp
		mov r10, [rbp - -40 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	mov rax, [rsp]
	cmp rax, 0
	jg .jump178
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump178:
	; Computing bound for s
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump179
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump179:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize u to 0
	mov rax, 0
	push rax
	; Initialize t to 0
	mov rax, 0
	push rax
	; Initialize s to 0
	mov rax, 0
	push rax
.jump180: ; Begin body of loop
	; Compare u to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump182 ; If u >= bound, ...
	mov qword [rsp + 16], 0 ; u = 0
	add qword [rsp + 8], 1 ; t++
.jump182:
	; Compare t to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump183 ; If t >= bound, ...
	mov qword [rsp + 8], 0 ; t = 0
	add qword [rsp + 0], 1 ; s++
.jump183:
	; Compare s to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump181 ; If s >= bound, break
.jump184:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment u
	add qword [rsp + 16], 1
	jmp .jump180
.jump181: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump185
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump185:
	; Computing bound for s
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump186
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump186:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof {float,float,float,float}[,][]
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump187
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump187:
imul rdi, [rsp + 0 + 8] ; multiply by (sum[s : e, t : {l, o}{0}, u : p] p)
	jno .jump188
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump188:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize t to 0
	mov rax, 0
	push rax
	; Initialize s to 0
	mov rax, 0
	push rax
.jump189: ; Begin body of loop
	; Compare t to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump191 ; If t >= bound, ...
	mov qword [rsp + 8], 0 ; t = 0
	add qword [rsp + 0], 1 ; s++
.jump191:
	; Compare s to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump190 ; If s >= bound, break
.jump192:
	; Compute loop body
	sub rsp, 16
	; Moving 16 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 16
	add rax, [rsp + 48]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment t
	add qword [rsp + 8], 1
	jmp .jump189
.jump190: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for x
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump193
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump193:
	; Computing bound for w
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump194
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump194:
	; Computing bound for v
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump195
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump195:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by p
	jno .jump196
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump196:
	imul rdi, [rsp + 0 + 8] ; multiply by p
	jno .jump197
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump197:
	imul rdi, [rsp + 0 + 16] ; multiply by p
	jno .jump198
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump198:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize x to 0
	mov rax, 0
	push rax
	; Initialize w to 0
	mov rax, 0
	push rax
	; Initialize v to 0
	mov rax, 0
	push rax
.jump199: ; Begin body of loop
	; Compare x to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump201 ; If x >= bound, ...
	mov qword [rsp + 16], 0 ; x = 0
	add qword [rsp + 8], 1 ; w++
.jump201:
	; Compare w to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump202 ; If w >= bound, ...
	mov qword [rsp + 8], 0 ; w = 0
	add qword [rsp + 0], 1 ; v++
.jump202:
	; Compare v to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump200 ; If v >= bound, break
.jump203:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment x
	add qword [rsp + 16], 1
	jmp .jump199
.jump200: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	mov rax, [rel const29] ; 757
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -56 to rsp
		mov r10, [rbp - -56 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for x
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump204
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump204:
	; Computing bound for w
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump205
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump205:
	; Computing bound for v
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump206
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump206:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by (- u)
	jno .jump207
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump207:
	imul rdi, [rsp + 0 + 8] ; multiply by e
	jno .jump208
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump208:
	imul rdi, [rsp + 0 + 16] ; multiply by i
	jno .jump209
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump209:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize x to 0
	mov rax, 0
	push rax
	; Initialize w to 0
	mov rax, 0
	push rax
	; Initialize v to 0
	mov rax, 0
	push rax
.jump210: ; Begin body of loop
	; Compare x to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump212 ; If x >= bound, ...
	mov qword [rsp + 16], 0 ; x = 0
	add qword [rsp + 8], 1 ; w++
.jump212:
	; Compare w to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump213 ; If w >= bound, ...
	mov qword [rsp + 8], 0 ; w = 0
	add qword [rsp + 0], 1 ; v++
.jump213:
	; Compare v to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump211 ; If v >= bound, break
.jump214:
	; Compute loop body
	mov rax, [rel const30] ; 99.76
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment x
	add qword [rsp + 16], 1
	jmp .jump210
.jump211: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Moving 8 bytes from rsp + 32 to rsp + 64
		mov r10, [rsp + 32 + 0]
		mov [rsp + 64 + 0], r10
	add rsp, 64
	pop rax
	cmp rax, 0
	je .jump215
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for x
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump217
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump217:
	; Computing bound for w
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump218
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump218:
	; Computing bound for v
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump219
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump219:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof float[]
	imul rdi, [rsp + 0 + 0] ; multiply by i
	jno .jump220
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump220:
	imul rdi, [rsp + 0 + 8] ; multiply by o
	jno .jump221
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump221:
	imul rdi, [rsp + 0 + 16] ; multiply by e
	jno .jump222
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump222:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize x to 0
	mov rax, 0
	push rax
	; Initialize w to 0
	mov rax, 0
	push rax
	; Initialize v to 0
	mov rax, 0
	push rax
.jump223: ; Begin body of loop
	; Compare x to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump225 ; If x >= bound, ...
	mov qword [rsp + 16], 0 ; x = 0
	add qword [rsp + 8], 1 ; w++
.jump225:
	; Compare w to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump226 ; If w >= bound, ...
	mov qword [rsp + 8], 0 ; w = 0
	add qword [rsp + 0], 1 ; v++
.jump226:
	; Compare v to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump224 ; If v >= bound, break
.jump227:
	; Compute loop body
	sub rsp, 16
	; Moving 16 bytes from rbp - -40 to rsp
		mov r10, [rbp - -40 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -40 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 16
	add rax, [rsp + 64]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment x
	add qword [rsp + 16], 1
	jmp .jump223
.jump224: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 24
	; Moving 24 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -56 to rsp
		mov r10, [rbp - -56 + 0]
		mov [rsp + 0], r10
	; Moving 32 bytes from rsp + 32 to rsp + 32
		mov r10, [rsp + 32 + 24]
		mov [rsp + 32 + 24], r10
		mov r10, [rsp + 32 + 16]
		mov [rsp + 32 + 16], r10
		mov r10, [rsp + 32 + 8]
		mov [rsp + 32 + 8], r10
		mov r10, [rsp + 32 + 0]
		mov [rsp + 32 + 0], r10
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump228
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump228:
	cmp rax, [rsp + 24]
	jl .jump229
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump229:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump230
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump230:
	cmp rax, [rsp + 32]
	jl .jump231
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump231:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump232
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump232:
	cmp rax, [rsp + 40]
	jl .jump233
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump233:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 16
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump216
.jump215:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for v
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump234
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump234:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by t
	jno .jump235
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump235:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize v to 0
	mov rax, 0
	push rax
.jump236: ; Begin body of loop
	; Compare v to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump237 ; If v >= bound, break
.jump238:
	; Compute loop body
	sub rsp, 8 ; Align stack
	mov rax, [rel const31] ; 47.4
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment v
	add qword [rsp + 0], 1
	jmp .jump236
.jump237: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
.jump216:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for y
	mov rax, [rel const32] ; 212
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump239
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump239:
	; Computing bound for x
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump240
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump240:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by t
	jno .jump241
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump241:
	imul rdi, [rsp + 0 + 8] ; multiply by 212
	jno .jump242
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump242:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize y to 0
	mov rax, 0
	push rax
	; Initialize x to 0
	mov rax, 0
	push rax
.jump243: ; Begin body of loop
	; Compare y to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump245 ; If y >= bound, ...
	mov qword [rsp + 8], 0 ; y = 0
	add qword [rsp + 0], 1 ; x++
.jump245:
	; Compare x to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump244 ; If x >= bound, break
.jump246:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -56 to rsp
		mov r10, [rbp - -56 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment y
	add qword [rsp + 8], 1
	jmp .jump243
.jump244: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const33] ; 664
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump247
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump247:
	cmp rax, [rsp + 16]
	jl .jump248
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump248:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump249
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump249:
	cmp rax, [rsp + 24]
	jl .jump250
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump250:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump251
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for z
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump253
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump253:
	; Computing bound for y
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for x
	sub rsp, 8
	; Moving 8 bytes from rbp - -40 to rsp
		mov r10, [rbp - -40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump254
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump254:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize x to 0
	mov rax, 0
	push rax
.jump255: ; Begin body of loop
	; Compare x to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump256 ; If x >= bound, break
.jump257:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment x
	add qword [rsp + 0], 1
	jmp .jump255
.jump256: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump258
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump258:
	; Computing bound for x
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump259
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump259:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by q
	jno .jump260
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump260:
imul rdi, [rsp + 0 + 8] ; multiply by (sum[x : l] q)
	jno .jump261
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump261:
	imul rdi, [rsp + 0 + 16] ; multiply by p
	jno .jump262
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump262:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize z to 0
	mov rax, 0
	push rax
	; Initialize y to 0
	mov rax, 0
	push rax
	; Initialize x to 0
	mov rax, 0
	push rax
.jump263: ; Begin body of loop
	; Compare z to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump265 ; If z >= bound, ...
	mov qword [rsp + 16], 0 ; z = 0
	add qword [rsp + 8], 1 ; y++
.jump265:
	; Compare y to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump266 ; If y >= bound, ...
	mov qword [rsp + 8], 0 ; y = 0
	add qword [rsp + 0], 1 ; x++
.jump266:
	; Compare x to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump264 ; If x >= bound, break
.jump267:
	; Compute loop body
	mov rax, [rel const11] ; True
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment z
	add qword [rsp + 16], 1
	jmp .jump263
.jump264: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump252
.jump251:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for z
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for y
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump268
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump268:
	; Computing bound for x
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump269
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump269:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize y to 0
	mov rax, 0
	push rax
	; Initialize x to 0
	mov rax, 0
	push rax
.jump270: ; Begin body of loop
	; Compare y to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump272 ; If y >= bound, ...
	mov qword [rsp + 8], 0 ; y = 0
	add qword [rsp + 0], 1 ; x++
.jump272:
	; Compare x to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump271 ; If x >= bound, break
.jump273:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment y
	add qword [rsp + 8], 1
	jmp .jump270
.jump271: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump274
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump274:
	; Computing bound for y
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump275
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump275:
	; Computing bound for x
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump276
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump276:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by t
	jno .jump277
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump277:
	imul rdi, [rsp + 0 + 8] ; multiply by t
	jno .jump278
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump278:
imul rdi, [rsp + 0 + 16] ; multiply by (sum[x : j, y : q] t)
	jno .jump279
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump279:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize z to 0
	mov rax, 0
	push rax
	; Initialize y to 0
	mov rax, 0
	push rax
	; Initialize x to 0
	mov rax, 0
	push rax
.jump280: ; Begin body of loop
	; Compare z to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump282 ; If z >= bound, ...
	mov qword [rsp + 16], 0 ; z = 0
	add qword [rsp + 8], 1 ; y++
.jump282:
	; Compare y to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump283 ; If y >= bound, ...
	mov qword [rsp + 8], 0 ; y = 0
	add qword [rsp + 0], 1 ; x++
.jump283:
	; Compare x to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump281 ; If x >= bound, break
.jump284:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment z
	add qword [rsp + 16], 1
	jmp .jump280
.jump281: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump252:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for y
	mov rax, [rel const20] ; 917
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump285
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump285:
	; Computing bound for x
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump286
	lea rdi, [rel const27] ; divide by zero
	call _fail_assertion
.jump286:
	cqo
	idiv r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump287
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump287:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by (t / i)
	jno .jump288
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump288:
	imul rdi, [rsp + 0 + 8] ; multiply by 917
	jno .jump289
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump289:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize y to 0
	mov rax, 0
	push rax
	; Initialize x to 0
	mov rax, 0
	push rax
.jump290: ; Begin body of loop
	; Compare y to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump292 ; If y >= bound, ...
	mov qword [rsp + 8], 0 ; y = 0
	add qword [rsp + 0], 1 ; x++
.jump292:
	; Compare x to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump291 ; If x >= bound, break
.jump293:
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for z
	mov rax, [rel const34] ; 29
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump294
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump294:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize z to 0
	mov rax, 0
	push rax
.jump295: ; Begin body of loop
	; Compare z to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump296 ; If z >= bound, break
.jump297:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 160 to rsp
		mov r10, [rbp - 160 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment z
	add qword [rsp + 0], 1
	jmp .jump295
.jump296: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment y
	add qword [rsp + 8], 1
	jmp .jump290
.jump291: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for x
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump298
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump298:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize x to 0
	mov rax, 0
	push rax
.jump299: ; Begin body of loop
	; Compare x to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump300 ; If x >= bound, break
.jump301:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment x
	add qword [rsp + 0], 1
	jmp .jump299
.jump300: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump302
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump302:
	cmp rax, [rsp + 16]
	jl .jump303
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump303:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump304
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump304:
	cmp rax, [rsp + 24]
	jl .jump305
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump305:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const35] ; 223
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump306
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump306:
	cmp rax, [rsp + 24]
	jl .jump307
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump307:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump308
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump308:
	cmp rax, [rsp + 32]
	jl .jump309
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump309:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump310
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump310:
	cmp rax, [rsp + 40]
	jl .jump311
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump311:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump312
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump314
	sub rsp, 16
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for y
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump316
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump316:
	; Computing bound for x
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump317
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump317:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by j
	jno .jump318
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump318:
	imul rdi, [rsp + 0 + 8] ; multiply by t
	jno .jump319
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump319:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize y to 0
	mov rax, 0
	push rax
	; Initialize x to 0
	mov rax, 0
	push rax
.jump320: ; Begin body of loop
	; Compare y to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump322 ; If y >= bound, ...
	mov qword [rsp + 8], 0 ; y = 0
	add qword [rsp + 0], 1 ; x++
.jump322:
	; Compare x to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump321 ; If x >= bound, break
.jump323:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment y
	add qword [rsp + 8], 1
	jmp .jump320
.jump321: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	lea rdi, [rsp + 48]
	call _g
	add rsp, 24
	add rsp, 24
	jmp .jump315
.jump314:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for y
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump324
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump324:
	; Computing bound for x
	mov rax, [rel const5] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump325
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	jmp .jump326
.jump325:
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
.jump326:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump327
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump327:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof {int,bool}
	imul rdi, [rsp + 0 + 0] ; multiply by (if false then p else p)
	jno .jump328
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump328:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump329
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump329:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize y to 0
	mov rax, 0
	push rax
	; Initialize x to 0
	mov rax, 0
	push rax
.jump330: ; Begin body of loop
	; Compare y to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump332 ; If y >= bound, ...
	mov qword [rsp + 8], 0 ; y = 0
	add qword [rsp + 0], 1 ; x++
.jump332:
	; Compare x to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump331 ; If x >= bound, break
.jump333:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -56 to rsp
		mov r10, [rbp - -56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 16
	add rax, [rsp + 48]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment y
	add qword [rsp + 8], 1
	jmp .jump330
.jump331: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump334
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump334:
	cmp rax, [rsp + 16]
	jl .jump335
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump335:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump336
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump336:
	cmp rax, [rsp + 24]
	jl .jump337
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump337:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 16
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump315:
	jmp .jump313
.jump312:
	sub rsp, 8
	; Moving 8 bytes from rbp - -56 to rsp
		mov r10, [rbp - -56 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump338
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -40 to rsp
		mov r10, [rbp - -40 + 0]
		mov [rsp + 0], r10
	jmp .jump339
.jump338:
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
.jump339:
	; Moving 16 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
.jump313:
	mov rax, [rbp - 8] ; Address to write return value into
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 112 ; Local variables
	pop rbp
	ret

o:
_o:
	push rbp
	mov rbp, rsp
	push rdi
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const11] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump432
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for y
	sub rsp, 8
	; Moving 8 bytes from rbp - -48 to rsp
		mov r10, [rbp - -48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump434
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump434:
	; Computing bound for x
	sub rsp, 8
	; Moving 8 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump435
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump435:
	; Computing bound for w
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump436
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump436:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize y to 0
	mov rax, 0
	push rax
	; Initialize x to 0
	mov rax, 0
	push rax
	; Initialize w to 0
	mov rax, 0
	push rax
.jump437: ; Begin body of loop
	; Compare y to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump439 ; If y >= bound, ...
	mov qword [rsp + 16], 0 ; y = 0
	add qword [rsp + 8], 1 ; x++
.jump439:
	; Compare x to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump440 ; If x >= bound, ...
	mov qword [rsp + 8], 0 ; x = 0
	add qword [rsp + 0], 1 ; w++
.jump440:
	; Compare w to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump438 ; If w >= bound, break
.jump441:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 112 to rsp
		mov r10, [r12 - 112 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment y
	add qword [rsp + 16], 1
	jmp .jump437
.jump438: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 112 to rsp
		mov r10, [r12 - 112 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump442
	sub rsp, 8
	; Moving 8 bytes from r12 - 112 to rsp
		mov r10, [r12 - 112 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	jmp .jump443
.jump442:
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	jne .jump444
	mov rax, [rel const11] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
.jump444:
	push rax
.jump443:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for w
	sub rsp, 8
	; Moving 8 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const57] ; 330
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump445
	lea rdi, [rel const27] ; divide by zero
	call _fail_assertion
.jump445:
	cqo
	idiv r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump446
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump446:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize w to 0
	mov rax, 0
	push rax
.jump447: ; Begin body of loop
	; Compare w to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump448 ; If w >= bound, break
.jump449:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump450
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	jmp .jump451
.jump450:
	mov rax, [rel const58] ; 94.79
	push rax
.jump451:
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 16] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 16], xmm0 ; Save sum
	; Increment w
	add qword [rsp + 0], 1
	jmp .jump447
.jump448: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump452
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	pop rax
.jump452:
	push rax
	pop rax
	cmp rax, 0
	je .jump453
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for x
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump455
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump455:
	; Computing bound for w
	sub rsp, 8
	; Moving 8 bytes from r12 - 112 to rsp
		mov r10, [r12 - 112 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump456
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump456:
	; Computing total size of heap memory to allocate
	mov rdi, 0 ; sizeof {}
	imul rdi, [rsp + 0 + 0] ; multiply by m
	jno .jump457
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump457:
	imul rdi, [rsp + 0 + 8] ; multiply by i
	jno .jump458
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump458:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize x to 0
	mov rax, 0
	push rax
	; Initialize w to 0
	mov rax, 0
	push rax
.jump459: ; Begin body of loop
	; Compare x to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump461 ; If x >= bound, ...
	mov qword [rsp + 8], 0 ; x = 0
	add qword [rsp + 0], 1 ; w++
.jump461:
	; Compare w to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump460 ; If w >= bound, break
.jump462:
	; Compute loop body
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 0
	add rax, [rsp + 32]
	; Move body (0 bytes) to index
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	; Increment x
	add qword [rsp + 8], 1
	jmp .jump459
.jump460: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump454
.jump453:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for x
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump463
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump463:
	; Computing bound for w
	mov rax, [rel const59] ; 82
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump464
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump464:
	; Computing total size of heap memory to allocate
	mov rdi, 0 ; sizeof {}
	imul rdi, [rsp + 0 + 0] ; multiply by 82
	jno .jump465
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump465:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump466
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump466:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize x to 0
	mov rax, 0
	push rax
	; Initialize w to 0
	mov rax, 0
	push rax
.jump467: ; Begin body of loop
	; Compare x to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump469 ; If x >= bound, ...
	mov qword [rsp + 8], 0 ; x = 0
	add qword [rsp + 0], 1 ; w++
.jump469:
	; Compare w to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump468 ; If w >= bound, break
.jump470:
	; Compute loop body
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 0
	add rax, [rsp + 32]
	; Move body (0 bytes) to index
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	; Increment x
	add qword [rsp + 8], 1
	jmp .jump467
.jump468: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump454:
	sub rsp, 8
	; Moving 8 bytes from rbp - -48 to rsp
		mov r10, [rbp - -48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump471
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump471:
	cmp rax, [rsp + 16]
	jl .jump472
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump472:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump473
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump473:
	cmp rax, [rsp + 24]
	jl .jump474
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump474:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 0
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 0
	; Moving 0 bytes from rax to rsp
	jmp .jump433
.jump432:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for w
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -48 to rsp
		mov r10, [rbp - -48 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump475
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump475:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof {{},float,bool}
	imul rdi, [rsp + 0 + 0] ; multiply by to_int(to_float(u))
	jno .jump476
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump476:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize w to 0
	mov rax, 0
	push rax
.jump477: ; Begin body of loop
	; Compare w to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump478 ; If w >= bound, break
.jump479:
	; Compute loop body
	sub rsp, 16
	sub rsp, 8 ; Align stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for x
	sub rsp, 8
	; Moving 8 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump480
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump480:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by k
	jno .jump481
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump481:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize x to 0
	mov rax, 0
	push rax
.jump482: ; Begin body of loop
	; Compare x to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump483 ; If x >= bound, break
.jump484:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment x
	add qword [rsp + 0], 1
	jmp .jump482
.jump483: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for z
	mov rax, [rel const60] ; 253
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump485
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump485:
	; Computing bound for y
	sub rsp, 8
	; Moving 8 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump486
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump486:
	; Computing bound for x
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump487
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump487:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by r
	jno .jump488
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump488:
	imul rdi, [rsp + 0 + 8] ; multiply by k
	jno .jump489
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump489:
	imul rdi, [rsp + 0 + 16] ; multiply by 253
	jno .jump490
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump490:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize z to 0
	mov rax, 0
	push rax
	; Initialize y to 0
	mov rax, 0
	push rax
	; Initialize x to 0
	mov rax, 0
	push rax
.jump491: ; Begin body of loop
	; Compare z to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump493 ; If z >= bound, ...
	mov qword [rsp + 16], 0 ; z = 0
	add qword [rsp + 8], 1 ; y++
.jump493:
	; Compare y to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump494 ; If y >= bound, ...
	mov qword [rsp + 8], 0 ; y = 0
	add qword [rsp + 0], 1 ; x++
.jump494:
	; Compare x to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump492 ; If x >= bound, break
.jump495:
	; Compute loop body
	mov rax, [rel const61] ; 70.77
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment z
	add qword [rsp + 16], 1
	jmp .jump491
.jump492: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	lea rdi, [rsp + 56]
	call _o
	add rsp, 32
	add rsp, 16
	add rsp, 8 ; Remove alignment
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 16
	add rax, [rsp + 32]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment w
	add qword [rsp + 0], 1
	jmp .jump477
.jump478: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump496
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump496:
	cmp rax, [rsp + 8]
	jl .jump497
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump497:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 16
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump433:
	mov rax, [rbp - 8] ; Address to write return value into
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32 ; Local variables
	pop rbp
	ret
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for y
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump498
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump498:
	; Computing bound for x
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump499
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump499:
	; Computing bound for w
	sub rsp, 8
	; Moving 8 bytes from rbp - -48 to rsp
		mov r10, [rbp - -48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump500
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump500:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by u
	jno .jump501
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump501:
	imul rdi, [rsp + 0 + 8] ; multiply by q
	jno .jump502
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump502:
	imul rdi, [rsp + 0 + 16] ; multiply by (- {argnum}{0})
	jno .jump503
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump503:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize y to 0
	mov rax, 0
	push rax
	; Initialize x to 0
	mov rax, 0
	push rax
	; Initialize w to 0
	mov rax, 0
	push rax
.jump504: ; Begin body of loop
	; Compare y to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump506 ; If y >= bound, ...
	mov qword [rsp + 16], 0 ; y = 0
	add qword [rsp + 8], 1 ; x++
.jump506:
	; Compare x to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump507 ; If x >= bound, ...
	mov qword [rsp + 8], 0 ; x = 0
	add qword [rsp + 0], 1 ; w++
.jump507:
	; Compare w to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump505 ; If w >= bound, break
.jump508:
	; Compute loop body
	sub rsp, 8 ; Align stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for z
	sub rsp, 8
	; Moving 8 bytes from rbp - -48 to rsp
		mov r10, [rbp - -48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump509
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump509:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize z to 0
	mov rax, 0
	push rax
.jump510: ; Begin body of loop
	; Compare z to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump511 ; If z >= bound, break
.jump512:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 16] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 16], xmm0 ; Save sum
	; Increment z
	add qword [rsp + 0], 1
	jmp .jump510
.jump511: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const62] ; 11.95
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment y
	add qword [rsp + 16], 1
	jmp .jump504
.jump505: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for C
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump513
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump513:
	; Computing bound for B
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump514
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump514:
	; Computing bound for A
	sub rsp, 8
	; Moving 8 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump515
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump515:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof {{},float,bool}
	imul rdi, [rsp + 0 + 0] ; multiply by k
	jno .jump516
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump516:
	imul rdi, [rsp + 0 + 8] ; multiply by z
	jno .jump517
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump517:
	imul rdi, [rsp + 0 + 16] ; multiply by i
	jno .jump518
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump518:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize C to 0
	mov rax, 0
	push rax
	; Initialize B to 0
	mov rax, 0
	push rax
	; Initialize A to 0
	mov rax, 0
	push rax
.jump519: ; Begin body of loop
	; Compare C to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump521 ; If C >= bound, ...
	mov qword [rsp + 16], 0 ; C = 0
	add qword [rsp + 8], 1 ; B++
.jump521:
	; Compare B to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump522 ; If B >= bound, ...
	mov qword [rsp + 8], 0 ; B = 0
	add qword [rsp + 0], 1 ; A++
.jump522:
	; Compare A to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump520 ; If A >= bound, break
.jump523:
	; Compute loop body
	sub rsp, 16
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	mov rax, [rel const11] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	mov rax, [rel const11] ; True
	push rax
	pop rax
	cmp rax, 0
	jne .jump524
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	pop rax
.jump524:
	push rax
	mov rdi, 24
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	push rax
	mov rax, 3
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for F
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump525
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump525:
	; Computing bound for E
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump526
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump526:
	; Computing bound for D
	sub rsp, 8
	; Moving 8 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump527
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump527:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by s
	jno .jump528
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump528:
	imul rdi, [rsp + 0 + 8] ; multiply by C
	jno .jump529
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump529:
	imul rdi, [rsp + 0 + 16] ; multiply by z
	jno .jump530
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump530:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize F to 0
	mov rax, 0
	push rax
	; Initialize E to 0
	mov rax, 0
	push rax
	; Initialize D to 0
	mov rax, 0
	push rax
.jump531: ; Begin body of loop
	; Compare F to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump533 ; If F >= bound, ...
	mov qword [rsp + 16], 0 ; F = 0
	add qword [rsp + 8], 1 ; E++
.jump533:
	; Compare E to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump534 ; If E >= bound, ...
	mov qword [rsp + 8], 0 ; E = 0
	add qword [rsp + 0], 1 ; D++
.jump534:
	; Compare D to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump532 ; If D >= bound, break
.jump535:
	; Compute loop body
	sub rsp, 8 ; Align stack
	mov rax, [rel const63] ; 56.04
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment F
	add qword [rsp + 16], 1
	jmp .jump531
.jump532: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	lea rdi, [rsp + 56]
	call _o
	add rsp, 32
	add rsp, 16
	add rsp, 8 ; Remove alignment
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 16
	add rax, [rsp + 64]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment C
	add qword [rsp + 16], 1
	jmp .jump519
.jump520: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump536
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump537
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	pop rax
.jump537:
	push rax
	pop rax
.jump536:
	push rax
	pop rax
	cmp rax, 0
	je .jump538
	mov rax, [rel const64] ; 26.74
	push rax
	mov rax, [rel const65] ; 65.81
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	sub rsp, 8
	movsd [rsp], xmm0
	jmp .jump539
.jump538:
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
.jump539:
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for B
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump540
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump540:
	; Computing bound for A
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump541
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump541:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by z
	jno .jump542
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump542:
	imul rdi, [rsp + 0 + 8] ; multiply by i
	jno .jump543
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump543:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize B to 0
	mov rax, 0
	push rax
	; Initialize A to 0
	mov rax, 0
	push rax
.jump544: ; Begin body of loop
	; Compare B to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump546 ; If B >= bound, ...
	mov qword [rsp + 8], 0 ; B = 0
	add qword [rsp + 0], 1 ; A++
.jump546:
	; Compare A to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump545 ; If A >= bound, break
.jump547:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment B
	add qword [rsp + 8], 1
	jmp .jump544
.jump545: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 16
	; Moving 16 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	; Moving 24 bytes from rsp + 16 to rsp + 24
		mov r10, [rsp + 16 + 16]
		mov [rsp + 24 + 16], r10
		mov r10, [rsp + 16 + 8]
		mov [rsp + 24 + 8], r10
		mov r10, [rsp + 16 + 0]
		mov [rsp + 24 + 0], r10
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for C
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump548
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump548:
	; Computing bound for B
	sub rsp, 8
	; Moving 8 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump549
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump549:
	; Computing bound for A
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump550
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump550:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize C to 0
	mov rax, 0
	push rax
	; Initialize B to 0
	mov rax, 0
	push rax
	; Initialize A to 0
	mov rax, 0
	push rax
.jump551: ; Begin body of loop
	; Compare C to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump553 ; If C >= bound, ...
	mov qword [rsp + 16], 0 ; C = 0
	add qword [rsp + 8], 1 ; B++
.jump553:
	; Compare B to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump554 ; If B >= bound, ...
	mov qword [rsp + 8], 0 ; B = 0
	add qword [rsp + 0], 1 ; A++
.jump554:
	; Compare A to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump552 ; If A >= bound, break
.jump555:
	; Compute loop body
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 112 to rsp
		mov r10, [r12 - 112 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment C
	add qword [rsp + 16], 1
	jmp .jump551
.jump552: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump556
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump556:
	cmp rax, [rsp + 16]
	jl .jump557
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump557:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump558
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump558:
	cmp rax, [rsp + 24]
	jl .jump559
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump559:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump560
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump560:
	cmp rax, [rsp + 24]
	jl .jump561
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump561:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump562
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump562:
	cmp rax, [rsp + 32]
	jl .jump563
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump563:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump564
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump564:
	cmp rax, [rsp + 40]
	jl .jump565
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump565:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 16
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rbp - 8] ; Address to write return value into
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 80 ; Local variables
	pop rbp
	ret
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump566
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	jmp .jump567
.jump566:
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	sub rsp, 8
	movsd [rsp], xmm0
.jump567:
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump568
	sub rsp, 16
	sub rsp, 16
	; Moving 16 bytes from rbp - -48 to rsp
		mov r10, [rbp - -48 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -48 + 0]
		mov [rsp + 0], r10
	sub rsp, 32
	; Moving 32 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - -16 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Moving 32 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 24]
		mov [rsp + 0 + 24], r10
		mov r10, [rsp + 0 + 16]
		mov [rsp + 0 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	lea rdi, [rsp + 48]
	call _o
	add rsp, 32
	add rsp, 16
	jmp .jump569
.jump568:
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump570
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for B
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump572
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump572:
	; Computing bound for A
	mov rax, [rel const66] ; 845
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump573
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump573:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by 845
	jno .jump574
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump574:
	imul rdi, [rsp + 0 + 8] ; multiply by q
	jno .jump575
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump575:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize B to 0
	mov rax, 0
	push rax
	; Initialize A to 0
	mov rax, 0
	push rax
.jump576: ; Begin body of loop
	; Compare B to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump578 ; If B >= bound, ...
	mov qword [rsp + 8], 0 ; B = 0
	add qword [rsp + 0], 1 ; A++
.jump578:
	; Compare A to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump577 ; If A >= bound, break
.jump579:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment B
	add qword [rsp + 8], 1
	jmp .jump576
.jump577: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump571
.jump570:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for B
	sub rsp, 8
	; Moving 8 bytes from rbp - -48 to rsp
		mov r10, [rbp - -48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump580
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump580:
	; Computing bound for A
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump581
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump581:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by q
	jno .jump582
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump582:
	imul rdi, [rsp + 0 + 8] ; multiply by u
	jno .jump583
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump583:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize B to 0
	mov rax, 0
	push rax
	; Initialize A to 0
	mov rax, 0
	push rax
.jump584: ; Begin body of loop
	; Compare B to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump586 ; If B >= bound, ...
	mov qword [rsp + 8], 0 ; B = 0
	add qword [rsp + 0], 1 ; A++
.jump586:
	; Compare A to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump585 ; If A >= bound, break
.jump587:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment B
	add qword [rsp + 8], 1
	jmp .jump584
.jump585: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump571:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for B
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump588
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump588:
	; Computing bound for A
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump589
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump589:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize B to 0
	mov rax, 0
	push rax
	; Initialize A to 0
	mov rax, 0
	push rax
.jump590: ; Begin body of loop
	; Compare B to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump592 ; If B >= bound, ...
	mov qword [rsp + 8], 0 ; B = 0
	add qword [rsp + 0], 1 ; A++
.jump592:
	; Compare A to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump591 ; If A >= bound, break
.jump593:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment B
	add qword [rsp + 8], 1
	jmp .jump590
.jump591: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump594
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump594:
	cmp rax, [rsp + 16]
	jl .jump595
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump595:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump596
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump596:
	cmp rax, [rsp + 24]
	jl .jump597
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump597:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump598
	sub rsp, 16
	sub rsp, 16
	; Moving 16 bytes from rbp - -48 to rsp
		mov r10, [rbp - -48 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -48 + 0]
		mov [rsp + 0], r10
	; Moving 16 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	sub rsp, 32
	; Moving 32 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - -16 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	lea rdi, [rsp + 48]
	call _o
	add rsp, 32
	add rsp, 16
	jmp .jump599
.jump598:
	mov rax, [rel const5] ; False
	push rax
	sub rsp, 8 ; Align stack
	mov rax, [rel const67] ; 45.37
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	; Moving 0 bytes from rsp + 16 to rsp + 16
	add rsp, 16
.jump599:
.jump569:
	mov rax, [rbp - 8] ; Address to write return value into
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 96 ; Local variables
	pop rbp
	ret

jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp
	sub rsp, 24
	lea rdi, [rsp]
	lea rsi, [rel const0] ; c.png
	call _read_image
	sub rsp, 8 ; Align stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for e
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for e
	mov rax, [rel const1] ; 149
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump1:
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump2
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump2:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
.jump3: ; Begin body of loop
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump5 ; If e >= bound, ...
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
.jump5:
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump4 ; If d >= bound, break
.jump6:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment e
	add qword [rsp + 8], 1
	jmp .jump3
.jump4: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump7
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump7:
	; Computing bound for d
	sub rsp, 8 ; Align stack
	mov rax, [rel const3] ; 31.29
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump8
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump8:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by to_int(31.29)
	jno .jump9
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump9:
imul rdi, [rsp + 0 + 8] ; multiply by (sum[d : argnum, e : 149] e)
	jno .jump10
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump10:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
.jump11: ; Begin body of loop
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump13 ; If e >= bound, ...
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
.jump13:
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump12 ; If d >= bound, break
.jump14:
	; Compute loop body
	mov rax, [rel const5] ; False
	push rax
	mov rax, [rel const5] ; False
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment e
	add qword [rsp + 8], 1
	jmp .jump11
.jump12: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump15
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump15:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump16
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump16:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
.jump17: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump18 ; If d >= bound, break
.jump19:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment d
	add qword [rsp + 0], 1
	jmp .jump17
.jump18: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	mov rax, [rel const6] ; 414
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump20
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump20:
	cmp rax, [rsp + 8]
	jl .jump21
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump21:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const5] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump22
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	jmp .jump23
.jump22:
	mov rax, [rel const5] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump24
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump25
.jump24:
	mov rax, [rel const9] ; 982
	push rax
.jump25:
.jump23:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump26
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
.jump26:
	cmp rax, [rsp + 16]
	jl .jump27
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
.jump27:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump28
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
.jump28:
	cmp rax, [rsp + 24]
	jl .jump29
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
.jump29:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump30
	sub rsp, 8 ; Align stack
	mov rax, [rel const10] ; 65.69
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const11] ; True
	push rax
	sub rsp, 24
	; Moving 24 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	; Moving 24 bytes from rsp + 0 to rsp + 16
		mov r10, [rsp + 0 + 16]
		mov [rsp + 16 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 16 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	jmp .jump31
.jump30:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for f
	mov rax, [rel const12] ; 768
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump32
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump32:
	; Computing bound for e
	mov rax, [rel const13] ; 439
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump33
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump33:
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump34
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump34:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof {{float,float,float,float}[,]}
	imul rdi, [rsp + 0 + 0] ; multiply by (- argnum)
	jno .jump35
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump35:
	imul rdi, [rsp + 0 + 8] ; multiply by 439
	jno .jump36
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump36:
	imul rdi, [rsp + 0 + 16] ; multiply by 768
	jno .jump37
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump37:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize f to 0
	mov rax, 0
	push rax
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
.jump38: ; Begin body of loop
	; Compare f to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump40 ; If f >= bound, ...
	mov qword [rsp + 16], 0 ; f = 0
	add qword [rsp + 8], 1 ; e++
.jump40:
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump41 ; If e >= bound, ...
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
.jump41:
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump39 ; If d >= bound, break
.jump42:
	; Compute loop body
	sub rsp, 24
	; Moving 24 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 24
	add rax, [rsp + 72]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment f
	add qword [rsp + 16], 1
	jmp .jump38
.jump39: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	mov rax, [rel const5] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump43
	mov rax, [rel const5] ; False
	push rax
	pop rax
.jump43:
	push rax
	pop rax
	cmp rax, 0
	je .jump44
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump45
.jump44:
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
.jump45:
	sub rsp, 8 ; Align stack
	mov rax, [rel const14] ; 62.08
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump46
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
.jump46:
	cmp rax, [rsp + 24]
	jl .jump47
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
.jump47:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump48
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
.jump48:
	cmp rax, [rsp + 32]
	jl .jump49
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
.jump49:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump50
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
.jump50:
	cmp rax, [rsp + 40]
	jl .jump51
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
.jump51:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 24
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump31:
	; Moving 24 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 16]
		mov [rsp + 0 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	lea rdi, [rel const15] ; d.png
	call _write_image
	add rsp, 24
	add rsp, 8 ; Remove alignment
	mov rax, [rel const16] ; 28.64
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const17] ; 20.32
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump52
	mov rax, [rel const11] ; True
	push rax
	mov rax, [rel const11] ; True
	push rax
	; Moving 8 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	pop rax
.jump52:
	push rax
	pop rax
	cmp rax, 0
	je .jump53
	mov rax, [rel const11] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump55
	mov rax, [rel const5] ; False
	push rax
	jmp .jump56
.jump55:
	mov rax, [rel const5] ; False
	push rax
.jump56:
	pop rax
	cmp rax, 0
	je .jump57
	mov rax, [rel const11] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump59
	mov rax, [rel const5] ; False
	push rax
	pop rax
.jump59:
	push rax
	jmp .jump58
.jump57:
	mov rax, [rel const18] ; 190
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
.jump58:
	pop rax
	xor rax, 1
	push rax
	sub rsp, 24
	; Moving 24 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rdi, 24
	call _jpl_alloc
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	push rax
	mov rax, 1
	push rax
	mov rax, [rel const11] ; True
	push rax
	pop rax
	cmp rax, 0
	jne .jump60
	mov rax, [rel const11] ; True
	push rax
	pop rax
.jump60:
	push rax
	; Moving 16 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 8]
		mov [rsp + 8 + 8], r10
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	jmp .jump54
.jump53:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for e
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump61
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump61:
	; Computing bound for d
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for e
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump62
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump62:
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump63
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump63:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump64
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump64:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump65
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump65:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
.jump66: ; Begin body of loop
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump68 ; If e >= bound, ...
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
.jump68:
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump67 ; If d >= bound, break
.jump69:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment e
	add qword [rsp + 8], 1
	jmp .jump66
.jump67: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rax, [rel const5] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump70
	mov rax, [rel const19] ; 883
	push rax
	jmp .jump71
.jump70:
	mov rax, [rel const20] ; 917
	push rax
.jump71:
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump72
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump72:
	cmp rax, [rsp + 16]
	jl .jump73
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump73:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump74
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump74:
	cmp rax, [rsp + 24]
	jl .jump75
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump75:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump76
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump76:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof {{float,float,float,float}[,][],bool}
imul rdi, [rsp + 0 + 0] ; multiply by (array[d : argnum, e : argnum] d)[argnum, (if false then 883 else 917)]
	jno .jump77
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump77:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump78
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump78:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
.jump79: ; Begin body of loop
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump81 ; If e >= bound, ...
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
.jump81:
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump80 ; If d >= bound, break
.jump82:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setg al
	and rax, 1
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for f
	mov rax, [rel const21] ; 997
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump83
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump83:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof {float,float,float,float}[,]
	imul rdi, [rsp + 0 + 0] ; multiply by 997
	jno .jump84
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump84:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize f to 0
	mov rax, 0
	push rax
.jump85: ; Begin body of loop
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump86 ; If f >= bound, break
.jump87:
	; Compute loop body
	sub rsp, 24
	; Moving 24 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 24
	add rax, [rsp + 40]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment f
	add qword [rsp + 0], 1
	jmp .jump85
.jump86: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 24
	add rax, [rsp + 56]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment e
	add qword [rsp + 8], 1
	jmp .jump79
.jump80: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	; Moving 24 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 24 to rsp + 24
		mov r10, [rsp + 24 + 0]
		mov [rsp + 24 + 0], r10
	add rsp, 24
	mov rax, [rsp]
	cmp rax, 0
	jg .jump88
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump88:
	; Computing bound for e
	sub rsp, 8 ; Align stack
	mov rax, [rel const22] ; 42.05
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump89
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump89:
	; Computing bound for d
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for f
	mov rax, [rel const23] ; 739
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump90
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump90:
	; Computing bound for e
	mov rax, [rel const24] ; 862
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump91
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump91:
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump92
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump92:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize f to 0
	mov rax, 0
	push rax
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
.jump93: ; Begin body of loop
	; Compare f to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump95 ; If f >= bound, ...
	mov qword [rsp + 16], 0 ; f = 0
	add qword [rsp + 8], 1 ; e++
.jump95:
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump96 ; If e >= bound, ...
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
.jump96:
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump94 ; If d >= bound, break
.jump97:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment f
	add qword [rsp + 16], 1
	jmp .jump93
.jump94: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump98
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump98:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize f to 0
	mov rax, 0
	push rax
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
.jump99: ; Begin body of loop
	; Compare f to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump101 ; If f >= bound, ...
	mov qword [rsp + 16], 0 ; f = 0
	add qword [rsp + 8], 1 ; e++
.jump101:
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump102 ; If e >= bound, ...
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
.jump102:
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump100 ; If d >= bound, break
.jump103:
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump104
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump104:
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump105
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump105:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
.jump106: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump108 ; If h >= bound, ...
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
.jump108:
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump107 ; If g >= bound, break
.jump109:
	; Compute loop body
	mov rax, [rel const11] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump110
	sub rsp, 8
	; Moving 8 bytes from rbp - 144 to rsp
		mov r10, [rbp - 144 + 0]
		mov [rsp + 0], r10
	jmp .jump111
.jump110:
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
.jump111:
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment h
	add qword [rsp + 8], 1
	jmp .jump106
.jump107: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment f
	add qword [rsp + 16], 1
	jmp .jump99
.jump100: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const25] ; 607
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump112
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump112:
	cmp rax, [rsp + 16]
	jl .jump113
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump113:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump114
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump114:
	cmp rax, [rsp + 24]
	jl .jump115
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump115:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 24
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump54:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for j
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const36] ; 239
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump340
	sub rsp, 8 ; Align stack
	lea rdi, [rel const26] ; mod by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump340:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump341
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump341:
	; Computing bound for i
	mov rax, [rel const37] ; 517
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump342
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump342:
	; Computing bound for h
	mov rax, [rel const38] ; 435
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump343
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump343:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by 435
	jno .jump344
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump344:
	imul rdi, [rsp + 0 + 8] ; multiply by 517
	jno .jump345
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump345:
	imul rdi, [rsp + 0 + 16] ; multiply by (239 % e)
	jno .jump346
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump346:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
.jump347: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump349 ; If j >= bound, ...
	mov qword [rsp + 16], 0 ; j = 0
	add qword [rsp + 8], 1 ; i++
.jump349:
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump350 ; If i >= bound, ...
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
.jump350:
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump348 ; If h >= bound, break
.jump351:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment j
	add qword [rsp + 16], 1
	jmp .jump347
.jump348: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	mov rax, [rel const39] ; 65.54
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	sub rsp, 8 ; Align stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for i
	mov rax, [rel const40] ; 298
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump352
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump352:
	; Computing bound for h
	mov rax, [rel const41] ; 193
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump353
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump353:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
.jump354: ; Begin body of loop
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump356 ; If i >= bound, ...
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
.jump356:
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump355 ; If h >= bound, break
.jump357:
	; Compute loop body
	mov rax, [rel const42] ; 61.64
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 32] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 32], xmm0 ; Save sum
	; Increment i
	add qword [rsp + 8], 1
	jmp .jump354
.jump355: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const43] ; 323
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump358
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump358:
	cmp rax, [rsp + 24]
	jl .jump359
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump359:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump360
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump360:
	cmp rax, [rsp + 32]
	jl .jump361
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump361:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump362
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump362:
	cmp rax, [rsp + 40]
	jl .jump363
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump363:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump364
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump364:
	; Computing bound for i
	mov rax, [rel const44] ; 813
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump365
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump365:
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump366
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump366:
	; Computing total size of heap memory to allocate
	mov rdi, 0 ; sizeof {}
	imul rdi, [rsp + 0 + 0] ; multiply by to_int(to_float(argnum))
	jno .jump367
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump367:
	imul rdi, [rsp + 0 + 8] ; multiply by 813
	jno .jump368
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump368:
imul rdi, [rsp + 0 + 16] ; multiply by (array[h : 435, i : 517, j : (239 % e)] argnum)[323, to_int((sum[h : 193, i : 298] 61.64)), to_int(exp(65.54))]
	jno .jump369
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump369:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
.jump370: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump372 ; If j >= bound, ...
	mov qword [rsp + 16], 0 ; j = 0
	add qword [rsp + 8], 1 ; i++
.jump372:
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump373 ; If i >= bound, ...
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
.jump373:
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump371 ; If h >= bound, break
.jump374:
	; Compute loop body
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 0
	add rax, [rsp + 48]
	; Move body (0 bytes) to index
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	; Increment j
	add qword [rsp + 16], 1
	jmp .jump370
.jump371: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	jne .jump375
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
.jump375:
	push rax
	pop rax
	cmp rax, 0
	je .jump376
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for j
	mov rax, [rel const45] ; 811
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump378
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump378:
	; Computing bound for i
	mov rax, [rel const46] ; 992
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump379
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump379:
	; Computing bound for h
	mov rax, [rel const47] ; 19
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump380
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump380:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by 19
	jno .jump381
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump381:
	imul rdi, [rsp + 0 + 8] ; multiply by 992
	jno .jump382
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump382:
	imul rdi, [rsp + 0 + 16] ; multiply by 811
	jno .jump383
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump383:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
.jump384: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump386 ; If j >= bound, ...
	mov qword [rsp + 16], 0 ; j = 0
	add qword [rsp + 8], 1 ; i++
.jump386:
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump387 ; If i >= bound, ...
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
.jump387:
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump385 ; If h >= bound, break
.jump388:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 144 to rsp
		mov r10, [rbp - 144 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment j
	add qword [rsp + 16], 1
	jmp .jump384
.jump385: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump377
.jump376:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump389
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump389:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump390
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump390:
	; Computing bound for h
	mov rax, [rel const48] ; 247
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump391
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump391:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by (- 247)
	jno .jump392
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump392:
	imul rdi, [rsp + 0 + 8] ; multiply by (- e)
	jno .jump393
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump393:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump394
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump394:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
.jump395: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump397 ; If j >= bound, ...
	mov qword [rsp + 16], 0 ; j = 0
	add qword [rsp + 8], 1 ; i++
.jump397:
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump398 ; If i >= bound, ...
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
.jump398:
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump396 ; If h >= bound, break
.jump399:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump400
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump401
.jump400:
	sub rsp, 8
	; Moving 8 bytes from rbp - 144 to rsp
		mov r10, [rbp - 144 + 0]
		mov [rsp + 0], r10
.jump401:
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment j
	add qword [rsp + 16], 1
	jmp .jump395
.jump396: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump377:
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const49] ; 704
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump402
	lea rdi, [rel const26] ; mod by zero
	call _fail_assertion
.jump402:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	mov rax, [rel const50] ; 971
	push rax
	mov rax, [rel const51] ; 556
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	mov rax, [rel const52] ; 419
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump403
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
.jump403:
	cmp rax, [rsp + 24]
	jl .jump404
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
.jump404:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump405
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
.jump405:
	cmp rax, [rsp + 32]
	jl .jump406
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
.jump406:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump407
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
.jump407:
	cmp rax, [rsp + 40]
	jl .jump408
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
.jump408:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	mov rax, [rel const53] ; 36.5
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump409
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
.jump409:
	cmp rax, [rsp + 24]
	jl .jump410
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
.jump410:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump411
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
.jump411:
	cmp rax, [rsp + 32]
	jl .jump412
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
.jump412:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump413
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
.jump413:
	cmp rax, [rsp + 40]
	jl .jump414
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
.jump414:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 0
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 0
	; Moving 0 bytes from rax to rsp
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump415
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump415:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof {float,float,float,float}[,]
	imul rdi, [rsp + 0 + 0] ; multiply by (- argnum)
	jno .jump416
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump416:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
.jump417: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump418 ; If h >= bound, break
.jump419:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump420
	mov rax, [rel const11] ; True
	push rax
	jmp .jump421
.jump420:
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
.jump421:
	pop rax
	cmp rax, 0
	jne .jump422
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump423
	mov rax, [rel const11] ; True
	push rax
	pop rax
.jump423:
	push rax
	pop rax
.jump422:
	push rax
	pop rax
	cmp rax, 0
	je .jump424
	sub rsp, 24
	; Moving 24 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const54] ; 44.36
	push rax
	mov rax, [rel const5] ; False
	push rax
	; Moving 24 bytes from rsp + 16 to rsp + 16
		mov r10, [rsp + 16 + 16]
		mov [rsp + 16 + 16], r10
		mov r10, [rsp + 16 + 8]
		mov [rsp + 16 + 8], r10
		mov r10, [rsp + 16 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	jmp .jump425
.jump424:
	mov rax, [rel const11] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump426
	sub rsp, 24
	; Moving 24 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	jmp .jump427
.jump426:
	mov rax, [rel const11] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump428
	sub rsp, 24
	; Moving 24 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	jmp .jump429
.jump428:
	sub rsp, 24
	; Moving 24 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
.jump429:
.jump427:
.jump425:
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 24
	add rax, [rsp + 40]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment h
	add qword [rsp + 0], 1
	jmp .jump417
.jump418: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump430
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
.jump430:
	cmp rax, [rsp + 8]
	jl .jump431
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
.jump431:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 24
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const55] ; 495
	push rax
	sub rsp, 24
	lea rdi, [rsp]
	lea rsi, [rel const56] ; l.png
	call _read_image
	mov rax, [rel const5] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump600
	mov rax, [rel const5] ; False
	push rax
	jmp .jump601
.jump600:
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
.jump601:
	pop rax
	cmp rax, 0
	je .jump602
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
.jump602:
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	add rsp, 112 ; Local variables
	pop r12
	pop rbp
	ret

