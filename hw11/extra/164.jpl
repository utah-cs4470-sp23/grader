fn a(b[c] : {}[], d[e, f] : float[,], g[h, i] : bool[,]) : int[][,] {
  let j = (if (array[j : argnum] false)[(if false then e else h)] then {{i}, (sum[j : 302, k : argnum] f), c} else {{i}, h, to_int(26.88)}){0}{0}
  return a([(if (! false) then {{}}{0} else b[905]), (if (! false) then {d, {}} else {d, {}}){1}, (array[k : h] b)[664][argnum]], d, {atan(tan(90.11)), (array[k : 858, l : c] false), cos(log(1.55))}{1})
  return a(b, (if (((if true then true else true) || false) && g[(if false then j else c), (- c)]) then (if ((i != h) || (true && false)) then (array[k : e, l : args[f]] cos(39.59)) else (if (! true) then (array[k : f, l : h] 63.97) else d)) else (if (! true) then (array[k : i, l : argnum, m : argnum] d) else (array[k : j, l : c, m : j] d))[(sum[k : (sum[k : 547] 124), l : i] (if false then j else k)), argnum, 321]), g)
  let k = pow(acos(to_float(h)), asin(cos(exp(to_float(i)))))
  return [(if (! (h > c)) then a((array[l : h] {}), d, (array[l : c, m : j] true)) else (if (! false) then (array[l : e, m : h] args) else a(b, d, g)))][c]
}

let b = argnum
assert (sin((- tan(85.22))) >= log({to_float(argnum)}{0})), "c"
let c[d, e, f] = (if true then {(array[c : (- 804), d : argnum, e : to_int(36.26)] d)} else {(array[c : to_int(56.76), d : (- argnum), e : argnum] e)}){0}
fn g(h : {int,int,bool[,]}, i : bool) : bool {
  let j = atan2(to_float(f), exp(asin((array[j : f, k : argnum, l : f] 50.84)[e, to_int(76.4), 28])))
  let k = {log(acos((if (e == f) then 82.39 else j))), log(tan(acos((- j)))), f}
  let l = cos(to_float(e))
  let {{m, {}}, n, o} = {((if (false && i) then d else (sum[m : 617, n : e, o : 588] argnum)) > b), (sum[m : b, n : argnum] j), (if (! (if false then i else i)) then {{c, {}}, k, asin(l)} else {{c, {}}, (if i then k else k), pow(l, j)})}{2}
  return i
}

type h = {{{},int[,,][],{}}[,],float}
fn i({  }) : h {
  let {j} = (if (if true then (array[j : (f + f), k : c[142, f, argnum], l : f] (! true)) else (array[j : 823, k : d, l : f] (j < 417)))[to_int(tan(to_float(b))), to_int((array[j : e] 39.33)[e]), argnum] then {{i({})}, (array[j : e, k : d, l : 940] k)[b, b, (627 / 831)]}{0} else {tan(81.47), {i({})}, (to_float(f) % sin(46.24))}{1})
  let k = acos(64.07)
  assert (if (acos(sin(log(80.23))) <= (k / sqrt(30.33))) then (array[l : (array[l : b, m : argnum] d)[(195 / 947), d], m : (if (d != f) then 682 else f)] (d > f))[to_int(exp(cos(k))), argnum] else true), "l"
  let l = [tan(exp((14.69 / asin(37.25)))), cos(to_float((- to_int(k))))]
  return i((if {(! true)}{0} then {} else (if (l[b] <= 74.36) then [{}][argnum] else (array[m : b, n : 645] {})[b, d])))
}

fn j(k[l, m] : bool[,], { { n : {}, { o[p, q, r] : h[,,] }, { {  }, s : int, t[u, v] : {}[][,] } }, w[x, y, z] : h[,,] }) : int {
  let A[B, C, D] = w
  let E[F, G] = a([(if g({m, D, k}, (v <= f)) then n else {{}}{0})], {(array[E : x, F : s] 77.07)}{0}, (if ({true}{0} || (! (f >= d))) then k else (if false then {k, k, c} else {k, k, c}){0}))
  let H = y
  let I = B
  return r
}

assert {argnum, {{}, b, 51.11}{2}, (array[k : 996, l : d, m : (sum[k : d] b)] (753 < l))}{2}[(if (array[k : e, l : f, m : e] false)[args[e], f, b] then {(- 693)} else {(sum[k : b] 569)}){0}, d, argnum], "k"
fn k(l[m, n] : int[,], o : h[]) : h {
  assert (acos(75.87) > (sum[p : n] asin(40.01))), "p"
  let {{p[q, r], s[t, u, v], {}}} = {(if [true, (n != f), (f == m)][argnum] then (if (tan(68.33) != 73.63) then {(array[p : e, q : f] c), c, {}} else {(array[p : argnum, q : m] c), c, {}}) else {(array[p : b, q : c[b, m, 4]] (array[r : n, s : d, t : m] p)), c, {{}, d}{0}})}
  assert (f <= (array[w : t] (array[x : r, y : e, z : 718] y))[r][(- u), b, f]), "w"
  let w[x, y] = (if {(e > f), i({}), t}{0} then k((array[w : (- u), x : e] (- e)), (array[w : f] i({}))) else (if (! (m == n)) then k(l, o) else k(l, o))){0}
  return i((array[z : (if (false || false) then y else n), A : r, B : to_int(sqrt(96.0))] {})[q, (if false then l else l)[{y, e, false}{1}, x], v])
}

let l[m, n] = {{d, (array[l : e, m : 865] d)}, (array[l : argnum, m : d, n : 469] (b >= d)), true}{0}{1}
let o = tan(atan(atan(to_float(b))))
