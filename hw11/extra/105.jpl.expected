global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: db `b`, 0
const1: dq 1
const2: dq 0
const3: db `non-positive loop bound`, 0
const4: dq 518
const5: db `overflow computing array size`, 0
const6: dq 694
const7: dq 530
const8: dq 851
const9: dq 582
const10: dq 66
const11: dq 987
const12: dq 24.64
const13: dq 4.04
const14: dq 35.86
const15: dq 48.71
const16: dq 78.92
const17: db `negative array index`, 0
const18: db `index too large`, 0
const19: dq 904
const20: dq 374
const21: dq 13.85
const22: dq 55.19
const23: dq 67.59
const24: dq 937
const25: dq 752
const26: dq 726
const27: db `mod by zero`, 0
const28: dq 98.65
const29: dq 40.65
const30: dq 79.03
const31: dq 8.39
const32: dq 36.62
const33: dq 442
const34: dq 21.7
const35: dq 95.85
const36: dq 363
const37: dq 82.55
const38: dq 45.68
const39: dq 863
const40: dq 37.38
const41: dq 89.31
const42: dq 959
const43: dq 49.61
const44: dq 40.46
const45: dq 30.6
const46: db `H`, 0
const47: dq 453
const48: dq 910
const49: dq 50.48

section .text
f:
_f:
	push rbp
	mov rbp, rsp
	push rdi
	sub rsp, 8 ; Align stack
	mov rax, [rel const13] ; 4.04
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const14] ; 35.86
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump42
	sub rsp, 8
	sub rsp, 8 ; Align stack
	lea rdi, [rsp + 8]
	call _f
	add rsp, 8 ; Remove alignment
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	mov rax, [rel const15] ; 48.71
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
	jmp .jump43
.jump42:
	mov rax, [rel const16] ; 78.92
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
.jump43:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump44
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump44:
	; Computing bound for i
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump45
	lea rdi, [rel const17] ; negative array index
	call _fail_assertion
.jump45:
	cmp rax, [rsp + 8]
	jl .jump46
	lea rdi, [rel const18] ; index too large
	call _fail_assertion
.jump46:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump47
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump47:
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump48
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	jmp .jump49
.jump48:
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
.jump49:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump50
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump50:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by (if g then e else c)
	jno .jump51
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump51:
	imul rdi, [rsp + 0 + 8] ; multiply by args[e]
	jno .jump52
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump52:
	imul rdi, [rsp + 0 + 16] ; multiply by (- d)
	jno .jump53
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump53:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
.jump54: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump56 ; If j >= bound, ...
	mov qword [rsp + 16], 0 ; j = 0
	add qword [rsp + 8], 1 ; i++
.jump56:
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump57 ; If i >= bound, ...
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
.jump57:
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump55 ; If h >= bound, break
.jump58:
	; Compute loop body
	mov rax, [rel const19] ; 904
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment j
	add qword [rsp + 16], 1
	jmp .jump54
.jump55: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump59
	lea rdi, [rel const17] ; negative array index
	call _fail_assertion
.jump59:
	cmp rax, [rsp + 24]
	jl .jump60
	lea rdi, [rel const18] ; index too large
	call _fail_assertion
.jump60:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump61
	lea rdi, [rel const17] ; negative array index
	call _fail_assertion
.jump61:
	cmp rax, [rsp + 32]
	jl .jump62
	lea rdi, [rel const18] ; index too large
	call _fail_assertion
.jump62:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump63
	lea rdi, [rel const17] ; negative array index
	call _fail_assertion
.jump63:
	cmp rax, [rsp + 40]
	jl .jump64
	lea rdi, [rel const18] ; index too large
	call _fail_assertion
.jump64:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const20] ; 374
	push rax
	sub rsp, 8 ; Align stack
	mov rax, [rel const21] ; 13.85
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const22] ; 55.19
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const23] ; 67.59
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	; Moving 24 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 16]
		mov [rsp + 8 + 16], r10
		mov r10, [rsp + 8 + 8]
		mov [rsp + 8 + 8], r10
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	; Moving 8 bytes from rsp + 8 to rsp + 16
		mov r10, [rsp + 8 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	lea rdi, [rsp + 0]
	call _f
	mov rax, [rbp - 8] ; Address to write return value into
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 64 ; Local variables
	pop rbp
	ret

y:
_y:
	push rbp
	mov rbp, rsp
	mov rax, [rel const2] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump193
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const37] ; 82.55
	push rax
	; Moving 8 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	jmp .jump194
.jump193:
	mov rax, [rel const38] ; 45.68
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
.jump194:
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	mov rax, [rel const2] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump195
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for B
	sub rsp, 8
	; Moving 8 bytes from r12 - 184 to rsp
		mov r10, [r12 - 184 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump197
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump197:
	; Computing bound for A
	sub rsp, 8
	; Moving 8 bytes from r12 - 152 to rsp
		mov r10, [r12 - 152 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump198
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump198:
	; Computing total size of heap memory to allocate
	mov rdi, 0 ; sizeof {}
	imul rdi, [rsp + 0 + 0] ; multiply by u
	jno .jump199
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump199:
	imul rdi, [rsp + 0 + 8] ; multiply by x
	jno .jump200
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump200:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize B to 0
	mov rax, 0
	push rax
	; Initialize A to 0
	mov rax, 0
	push rax
.jump201: ; Begin body of loop
	; Compare B to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump203 ; If B >= bound, ...
	mov qword [rsp + 8], 0 ; B = 0
	add qword [rsp + 0], 1 ; A++
.jump203:
	; Compare A to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump202 ; If A >= bound, break
.jump204:
	; Compute loop body
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 0
	add rax, [rsp + 32]
	; Move body (0 bytes) to index
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	; Increment B
	add qword [rsp + 8], 1
	jmp .jump201
.jump202: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump196
.jump195:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for B
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump205
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump205:
	; Computing bound for A
	sub rsp, 8
	; Moving 8 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump206
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump206:
	; Computing total size of heap memory to allocate
	mov rdi, 0 ; sizeof {}
	imul rdi, [rsp + 0 + 0] ; multiply by j
	jno .jump207
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump207:
	imul rdi, [rsp + 0 + 8] ; multiply by e
	jno .jump208
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump208:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize B to 0
	mov rax, 0
	push rax
	; Initialize A to 0
	mov rax, 0
	push rax
.jump209: ; Begin body of loop
	; Compare B to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump211 ; If B >= bound, ...
	mov qword [rsp + 8], 0 ; B = 0
	add qword [rsp + 0], 1 ; A++
.jump211:
	; Compare A to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump210 ; If A >= bound, break
.jump212:
	; Compute loop body
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 0
	add rax, [rsp + 32]
	; Move body (0 bytes) to index
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	; Increment B
	add qword [rsp + 8], 1
	jmp .jump209
.jump210: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump196:
	; Moving 24 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 16]
		mov [rsp + 0 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for B
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump213
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump213:
	; Computing bound for A
	sub rsp, 8
	; Moving 8 bytes from r12 - 104 to rsp
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump214
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump214:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize B to 0
	mov rax, 0
	push rax
	; Initialize A to 0
	mov rax, 0
	push rax
.jump215: ; Begin body of loop
	; Compare B to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump217 ; If B >= bound, ...
	mov qword [rsp + 8], 0 ; B = 0
	add qword [rsp + 0], 1 ; A++
.jump217:
	; Compare A to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump216 ; If A >= bound, break
.jump218:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment B
	add qword [rsp + 8], 1
	jmp .jump215
.jump216: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump219
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	jmp .jump220
.jump219:
	mov rax, [rel const1] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump221
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	jmp .jump222
.jump221:
	sub rsp, 8 ; Align stack
	call _y
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	cmp rax, 0
	jne .jump223
	sub rsp, 8 ; Align stack
	call _y
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
.jump223:
	push rax
	pop rax
	cmp rax, 0
	je .jump224
	mov rax, [rel const39] ; 863
	push rax
	jmp .jump225
.jump224:
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
.jump225:
.jump222:
.jump220:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump226
	lea rdi, [rel const17] ; negative array index
	call _fail_assertion
.jump226:
	cmp rax, [rsp + 16]
	jl .jump227
	lea rdi, [rel const18] ; index too large
	call _fail_assertion
.jump227:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump228
	lea rdi, [rel const17] ; negative array index
	call _fail_assertion
.jump228:
	cmp rax, [rsp + 24]
	jl .jump229
	lea rdi, [rel const18] ; index too large
	call _fail_assertion
.jump229:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 0
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 0
	; Moving 0 bytes from rax to rsp
	sub rsp, 16
	; Moving 16 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const40] ; 37.38
	push rax
	mov rax, [rel const41] ; 89.31
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump230
	sub rsp, 8
	; Moving 8 bytes from r12 - 184 to rsp
		mov r10, [r12 - 184 + 0]
		mov [rsp + 0], r10
	jmp .jump231
.jump230:
	sub rsp, 32
	; Moving 32 bytes from r12 - 136 to rsp
		mov r10, [r12 - 136 + 24]
		mov [rsp + 24], r10
		mov r10, [r12 - 136 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 136 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 136 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 160 to rsp
		mov r10, [r12 - 160 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump232
	lea rdi, [rel const17] ; negative array index
	call _fail_assertion
.jump232:
	cmp rax, [rsp + 24]
	jl .jump233
	lea rdi, [rel const18] ; index too large
	call _fail_assertion
.jump233:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump234
	lea rdi, [rel const17] ; negative array index
	call _fail_assertion
.jump234:
	cmp rax, [rsp + 32]
	jl .jump235
	lea rdi, [rel const18] ; index too large
	call _fail_assertion
.jump235:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump236
	lea rdi, [rel const17] ; negative array index
	call _fail_assertion
.jump236:
	cmp rax, [rsp + 40]
	jl .jump237
	lea rdi, [rel const18] ; index too large
	call _fail_assertion
.jump237:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump231:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump238
	lea rdi, [rel const17] ; negative array index
	call _fail_assertion
.jump238:
	cmp rax, [rsp + 8]
	jl .jump239
	lea rdi, [rel const18] ; index too large
	call _fail_assertion
.jump239:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump240
	mov rax, [rel const1] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump242
	sub rsp, 8 ; Align stack
	call _y
	add rsp, 8 ; Remove alignment
	push rax
	jmp .jump243
.jump242:
	sub rsp, 8
	; Moving 8 bytes from r12 - 136 to rsp
		mov r10, [r12 - 136 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setg al
	and rax, 1
	push rax
.jump243:
	pop rax
	cmp rax, 0
	je .jump244
	sub rsp, 16
	; Moving 16 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	; Moving 16 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	jmp .jump245
.jump244:
	sub rsp, 16
	; Moving 16 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rdi, 16
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 1
	push rax
	mov rax, [rel const42] ; 959
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 184 to rsp
		mov r10, [r12 - 184 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump246
	lea rdi, [rel const17] ; negative array index
	call _fail_assertion
.jump246:
	cmp rax, [rsp + 8]
	jl .jump247
	lea rdi, [rel const18] ; index too large
	call _fail_assertion
.jump247:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 16
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump245:
	sub rsp, 32
	; Moving 32 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 24]
		mov [rsp + 24], r10
		mov r10, [r12 - 40 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 40 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	jmp .jump241
.jump240:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for A
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump248
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump248:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by k
	jno .jump249
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump249:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize A to 0
	mov rax, 0
	push rax
.jump250: ; Begin body of loop
	; Compare A to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump251 ; If A >= bound, break
.jump252:
	; Compute loop body
	call _y
	push rax
	pop rax
	xor rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment A
	add qword [rsp + 0], 1
	jmp .jump250
.jump251: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 32
	; Moving 32 bytes from r12 - 136 to rsp
		mov r10, [r12 - 136 + 24]
		mov [rsp + 24], r10
		mov r10, [r12 - 136 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 136 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 136 + 0]
		mov [rsp + 0], r10
.jump241:
	sub rsp, 8 ; Align stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for G
	sub rsp, 8
	; Moving 8 bytes from r12 - 128 to rsp
		mov r10, [r12 - 128 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump253
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump253:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize G to 0
	mov rax, 0
	push rax
.jump254: ; Begin body of loop
	; Compare G to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump255 ; If G >= bound, break
.jump256:
	; Compute loop body
	mov rax, [rel const43] ; 49.61
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 16] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 16], xmm0 ; Save sum
	; Increment G
	add qword [rsp + 0], 1
	jmp .jump254
.jump255: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rel const2] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump257
	mov rax, [rel const44] ; 40.46
	push rax
	jmp .jump258
.jump257:
	mov rax, [rel const45] ; 30.6
	push rax
.jump258:
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for I
	sub rsp, 8
	; Moving 8 bytes from r12 - 192 to rsp
		mov r10, [r12 - 192 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump259
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump259:
	; Computing bound for H
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for H
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump260
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump260:
	; Computing bound for G
	mov rax, [rel const2] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump261
	sub rsp, 8
	; Moving 8 bytes from r12 - 136 to rsp
		mov r10, [r12 - 136 + 0]
		mov [rsp + 0], r10
	jmp .jump262
.jump261:
	sub rsp, 8
	; Moving 8 bytes from r12 - 136 to rsp
		mov r10, [r12 - 136 + 0]
		mov [rsp + 0], r10
.jump262:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump263
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump263:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize H to 0
	mov rax, 0
	push rax
	; Initialize G to 0
	mov rax, 0
	push rax
.jump264: ; Begin body of loop
	; Compare H to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump266 ; If H >= bound, ...
	mov qword [rsp + 8], 0 ; H = 0
	add qword [rsp + 0], 1 ; G++
.jump266:
	; Compare G to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump265 ; If G >= bound, break
.jump267:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment H
	add qword [rsp + 8], 1
	jmp .jump264
.jump265: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump268
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump268:
	; Computing bound for G
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump269
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump269:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize I to 0
	mov rax, 0
	push rax
	; Initialize H to 0
	mov rax, 0
	push rax
	; Initialize G to 0
	mov rax, 0
	push rax
.jump270: ; Begin body of loop
	; Compare I to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump272 ; If I >= bound, ...
	mov qword [rsp + 16], 0 ; I = 0
	add qword [rsp + 8], 1 ; H++
.jump272:
	; Compare H to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump273 ; If H >= bound, ...
	mov qword [rsp + 8], 0 ; H = 0
	add qword [rsp + 0], 1 ; G++
.jump273:
	; Compare G to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump271 ; If G >= bound, break
.jump274:
	; Compute loop body
	sub rsp, 8 ; Align stack
	sub rsp, 8
	sub rsp, 8 ; Align stack
	lea rdi, [rsp + 8]
	call _f
	add rsp, 8 ; Remove alignment
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 48] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment I
	add qword [rsp + 16], 1
	jmp .jump270
.jump271: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	add rsp, 56 ; Local variables
	pop rbp
	ret
	mov rax, [rel const2] ; False
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 152 to rsp
		mov r10, [r12 - 152 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	add rsp, 56 ; Local variables
	pop rbp
	ret

z:
_z:
	push rbp
	mov rbp, rsp
	call _y
	push rax
	pop rax
	cmp rax, 0
	je .jump275
	call _y
	push rax
	pop rax
.jump275:
	push rax
	pop rax
	add rsp, 0 ; Local variables
	pop rbp
	ret
	sub rsp, 8
	; Moving 8 bytes from r12 - 104 to rsp
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const2] ; False
	push rax
	pop rax
	cmp rax, 0
	jne .jump276
	sub rsp, 8 ; Align stack
	lea rdi, [rel const46] ; H
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump276:
	mov rax, [rel const2] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump277
	mov rax, [rel const2] ; False
	push rax
	pop rax
	cmp rax, 0
	jne .jump279
	mov rax, [rel const1] ; True
	push rax
	pop rax
.jump279:
	push rax
	jmp .jump278
.jump277:
	sub rsp, 8
	; Moving 8 bytes from r12 - 136 to rsp
		mov r10, [r12 - 136 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 128 to rsp
		mov r10, [r12 - 128 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setg al
	and rax, 1
	push rax
.jump278:
	pop rax
	cmp rax, 0
	je .jump280
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for I
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for J
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump282
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump282:
	; Computing bound for I
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump283
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump283:
	; Computing bound for H
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump284
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump284:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize J to 0
	mov rax, 0
	push rax
	; Initialize I to 0
	mov rax, 0
	push rax
	; Initialize H to 0
	mov rax, 0
	push rax
.jump285: ; Begin body of loop
	; Compare J to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump287 ; If J >= bound, ...
	mov qword [rsp + 16], 0 ; J = 0
	add qword [rsp + 8], 1 ; I++
.jump287:
	; Compare I to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump288 ; If I >= bound, ...
	mov qword [rsp + 8], 0 ; I = 0
	add qword [rsp + 0], 1 ; H++
.jump288:
	; Compare H to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump286 ; If H >= bound, break
.jump289:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment J
	add qword [rsp + 16], 1
	jmp .jump285
.jump286: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump290
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump290:
	; Computing bound for H
	mov rax, [rel const47] ; 453
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump291
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump291:
	; Computing total size of heap memory to allocate
	mov rdi, 48 ; sizeof {{int[],float,{bool,bool,int}}}
	imul rdi, [rsp + 0 + 0] ; multiply by 453
	jno .jump292
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump292:
imul rdi, [rsp + 0 + 8] ; multiply by (sum[H : k, I : d, J : argnum] j)
	jno .jump293
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump293:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize I to 0
	mov rax, 0
	push rax
	; Initialize H to 0
	mov rax, 0
	push rax
.jump294: ; Begin body of loop
	; Compare I to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump296 ; If I >= bound, ...
	mov qword [rsp + 8], 0 ; I = 0
	add qword [rsp + 0], 1 ; H++
.jump296:
	; Compare H to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump295 ; If H >= bound, break
.jump297:
	; Compute loop body
	sub rsp, 48
	; Moving 48 bytes from rbp - -40 to rsp
		mov r10, [rbp - -40 + 40]
		mov [rsp + 40], r10
		mov r10, [rbp - -40 + 32]
		mov [rsp + 32], r10
		mov r10, [rbp - -40 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - -40 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -40 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -40 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 48]
	imul rax, [rsp + 72] ; No overflow if indices in bounds
	add rax, [rsp + 56]
	imul rax, 48
	add rax, [rsp + 80]
	; Move body (48 bytes) to index
	; Moving 48 bytes from rsp to rax
		mov r10, [rsp + 40]
		mov [rax + 40], r10
		mov r10, [rsp + 32]
		mov [rax + 32], r10
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 48
	; Increment I
	add qword [rsp + 8], 1
	jmp .jump294
.jump295: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump281
.jump280:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for I
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump298
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump298:
	; Computing bound for H
	sub rsp, 8
	; Moving 8 bytes from r12 - 184 to rsp
		mov r10, [r12 - 184 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump299
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump299:
	; Computing total size of heap memory to allocate
	mov rdi, 48 ; sizeof {{int[],float,{bool,bool,int}}}
	imul rdi, [rsp + 0 + 0] ; multiply by x
	jno .jump300
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump300:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump301
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump301:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize I to 0
	mov rax, 0
	push rax
	; Initialize H to 0
	mov rax, 0
	push rax
.jump302: ; Begin body of loop
	; Compare I to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump304 ; If I >= bound, ...
	mov qword [rsp + 8], 0 ; I = 0
	add qword [rsp + 0], 1 ; H++
.jump304:
	; Compare H to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump303 ; If H >= bound, break
.jump305:
	; Compute loop body
	sub rsp, 48
	; Moving 48 bytes from rbp - -40 to rsp
		mov r10, [rbp - -40 + 40]
		mov [rsp + 40], r10
		mov r10, [rbp - -40 + 32]
		mov [rsp + 32], r10
		mov r10, [rbp - -40 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - -40 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -40 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -40 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 48]
	imul rax, [rsp + 72] ; No overflow if indices in bounds
	add rax, [rsp + 56]
	imul rax, 48
	add rax, [rsp + 80]
	; Move body (48 bytes) to index
	; Moving 48 bytes from rsp to rax
		mov r10, [rsp + 40]
		mov [rax + 40], r10
		mov r10, [rsp + 32]
		mov [rax + 32], r10
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 48
	; Increment I
	add qword [rsp + 8], 1
	jmp .jump302
.jump303: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump281:
	sub rsp, 8
	; Moving 8 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 184 to rsp
		mov r10, [r12 - 184 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump306
	lea rdi, [rel const17] ; negative array index
	call _fail_assertion
.jump306:
	cmp rax, [rsp + 16]
	jl .jump307
	lea rdi, [rel const18] ; index too large
	call _fail_assertion
.jump307:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump308
	lea rdi, [rel const17] ; negative array index
	call _fail_assertion
.jump308:
	cmp rax, [rsp + 24]
	jl .jump309
	lea rdi, [rel const18] ; index too large
	call _fail_assertion
.jump309:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 48
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 48
	; Moving 48 bytes from rax to rsp
		mov r10, [rax + 40]
		mov [rsp + 40], r10
		mov r10, [rax + 32]
		mov [rsp + 32], r10
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	; Moving 24 bytes from r12 - 160 to rsp
		mov r10, [r12 - 160 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 160 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 160 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for I
	mov rax, [rel const48] ; 910
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump310
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump310:
	; Computing bound for H
	sub rsp, 8
	; Moving 8 bytes from r12 - 136 to rsp
		mov r10, [r12 - 136 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump311
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump311:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof float[]
	imul rdi, [rsp + 0 + 0] ; multiply by n
	jno .jump312
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump312:
	imul rdi, [rsp + 0 + 8] ; multiply by 910
	jno .jump313
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump313:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize I to 0
	mov rax, 0
	push rax
	; Initialize H to 0
	mov rax, 0
	push rax
.jump314: ; Begin body of loop
	; Compare I to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump316 ; If I >= bound, ...
	mov qword [rsp + 8], 0 ; I = 0
	add qword [rsp + 0], 1 ; H++
.jump316:
	; Compare H to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump315 ; If H >= bound, break
.jump317:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for J
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump318
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump318:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by E
	jno .jump319
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump319:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize J to 0
	mov rax, 0
	push rax
.jump320: ; Begin body of loop
	; Compare J to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump321 ; If J >= bound, break
.jump322:
	; Compute loop body
	mov rax, [rel const49] ; 50.48
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment J
	add qword [rsp + 0], 1
	jmp .jump320
.jump321: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 16
	add rax, [rsp + 48]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment I
	add qword [rsp + 8], 1
	jmp .jump314
.jump315: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Moving 24 bytes from rsp + 0 to rsp + 32
		mov r10, [rsp + 0 + 16]
		mov [rsp + 32 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 32 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 32 + 0], r10
	add rsp, 32
	call _z
	add rsp, 24
	add rsp, 48
	push rax
	pop rax
	add rsp, 24 ; Local variables
	pop rbp
	ret

jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp
	lea rdi, [rel const0] ; b
	sub rsp, 8 ; Align stack
	call _print
	add rsp, 8 ; Remove alignment
	mov rax, [rel const1] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump1
	mov rax, [rel const1] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump3
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const1] ; True
	push rax
	mov rax, [rel const2] ; False
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump5
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump5:
	; Computing bound for c
	mov rax, [rel const4] ; 518
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump6
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump6:
	; Computing bound for b
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump7
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump7:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump8
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump8:
	imul rdi, [rsp + 0 + 8] ; multiply by 518
	jno .jump9
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump9:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump10
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump10:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump11: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump13 ; If d >= bound, ...
	mov qword [rsp + 16], 0 ; d = 0
	add qword [rsp + 8], 1 ; c++
.jump13:
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump14 ; If c >= bound, ...
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
.jump14:
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump12 ; If b >= bound, break
.jump15:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment d
	add qword [rsp + 16], 1
	jmp .jump11
.jump12: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump4
.jump3:
	mov rax, [rel const6] ; 694
	push rax
	mov rdi, 8
	call _jpl_alloc
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const7] ; 530
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for d
	mov rax, [rel const8] ; 851
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump16
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump16:
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump17
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump17:
	; Computing bound for b
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump18
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump18:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump19
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump19:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump20
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump20:
	imul rdi, [rsp + 0 + 16] ; multiply by 851
	jno .jump21
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump21:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump22: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump24 ; If d >= bound, ...
	mov qword [rsp + 16], 0 ; d = 0
	add qword [rsp + 8], 1 ; c++
.jump24:
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump25 ; If c >= bound, ...
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
.jump25:
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump23 ; If b >= bound, break
.jump26:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment d
	add qword [rsp + 16], 1
	jmp .jump22
.jump23: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump4:
	; Moving 32 bytes from rsp + 0 to rsp + 24
		mov r10, [rsp + 0 + 24]
		mov [rsp + 24 + 24], r10
		mov r10, [rsp + 0 + 16]
		mov [rsp + 24 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 24 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 24 + 0], r10
	add rsp, 24
	jmp .jump2
.jump1:
	mov rax, [rel const9] ; 582
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for d
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for b
	mov rax, [rel const10] ; 66
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump27
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump27:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize b to 0
	mov rax, 0
	push rax
.jump28: ; Begin body of loop
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump29 ; If b >= bound, break
.jump30:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment b
	add qword [rsp + 0], 1
	jmp .jump28
.jump29: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump31
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump31:
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump32
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump32:
	; Computing bound for b
	mov rax, [rel const11] ; 987
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump33
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump33:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by 987
	jno .jump34
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump34:
	imul rdi, [rsp + 0 + 8] ; multiply by (- argnum)
	jno .jump35
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump35:
imul rdi, [rsp + 0 + 16] ; multiply by (sum[b : 66] b)
	jno .jump36
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump36:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump37: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump39 ; If d >= bound, ...
	mov qword [rsp + 16], 0 ; d = 0
	add qword [rsp + 8], 1 ; c++
.jump39:
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump40 ; If c >= bound, ...
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
.jump40:
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump38 ; If b >= bound, break
.jump41:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment d
	add qword [rsp + 16], 1
	jmp .jump37
.jump38: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	mov rax, [rel const12] ; 24.64
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	; Moving 32 bytes from rsp + 8 to rsp + 16
		mov r10, [rsp + 8 + 24]
		mov [rsp + 16 + 24], r10
		mov r10, [rsp + 8 + 16]
		mov [rsp + 16 + 16], r10
		mov r10, [rsp + 8 + 8]
		mov [rsp + 16 + 8], r10
		mov r10, [rsp + 8 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
.jump2:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for g
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump65
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump65:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize g to 0
	mov rax, 0
	push rax
.jump66: ; Begin body of loop
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump67 ; If g >= bound, break
.jump68:
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for j
	mov rax, [rel const24] ; 937
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump69
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump69:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump70
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump70:
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump71
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump71:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
.jump72: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump74 ; If j >= bound, ...
	mov qword [rsp + 16], 0 ; j = 0
	add qword [rsp + 8], 1 ; i++
.jump74:
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump75 ; If i >= bound, ...
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
.jump75:
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump73 ; If h >= bound, break
.jump76:
	; Compute loop body
	sub rsp, 32
	; Moving 32 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 40 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 40 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump77
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump77:
	cmp rax, [rsp + 24]
	jl .jump78
	sub rsp, 8 ; Align stack
	lea rdi, [rel const18] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump78:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump79
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump79:
	cmp rax, [rsp + 32]
	jl .jump80
	sub rsp, 8 ; Align stack
	lea rdi, [rel const18] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump80:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump81
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump81:
	cmp rax, [rsp + 40]
	jl .jump82
	sub rsp, 8 ; Align stack
	lea rdi, [rel const18] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump82:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment j
	add qword [rsp + 16], 1
	jmp .jump72
.jump73: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for j
	mov rax, [rel const25] ; 752
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump83
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump83:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump84
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump84:
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump85
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump85:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by e
	jno .jump86
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump86:
	imul rdi, [rsp + 0 + 8] ; multiply by d
	jno .jump87
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump87:
	imul rdi, [rsp + 0 + 16] ; multiply by 752
	jno .jump88
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump88:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
.jump89: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump91 ; If j >= bound, ...
	mov qword [rsp + 16], 0 ; j = 0
	add qword [rsp + 8], 1 ; i++
.jump91:
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump92 ; If i >= bound, ...
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
.jump92:
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump90 ; If h >= bound, break
.jump93:
	; Compute loop body
	mov rax, [rel const26] ; 726
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment j
	add qword [rsp + 16], 1
	jmp .jump89
.jump90: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump94
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump94:
	cmp rax, [rsp + 24]
	jl .jump95
	sub rsp, 8 ; Align stack
	lea rdi, [rel const18] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump95:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump96
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump96:
	cmp rax, [rsp + 32]
	jl .jump97
	sub rsp, 8 ; Align stack
	lea rdi, [rel const18] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump97:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump98
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump98:
	cmp rax, [rsp + 40]
	jl .jump99
	sub rsp, 8 ; Align stack
	lea rdi, [rel const18] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump99:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump100
	sub rsp, 8 ; Align stack
	lea rdi, [rel const27] ; mod by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump100:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment g
	add qword [rsp + 0], 1
	jmp .jump66
.jump67: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump101
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump101:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
imul rdi, [rsp + 0 + 0] ; multiply by (sum[g : e] ((array[h : e, i : d, j : 752] 726)[e, argnum, e] % (sum[h : g, i : (- g), j : 937] b[c, d, h])))
	jno .jump102
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump102:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize g to 0
	mov rax, 0
	push rax
.jump103: ; Begin body of loop
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump104 ; If g >= bound, break
.jump105:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rel const1] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump106
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	jmp .jump107
.jump106:
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
.jump107:
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment g
	add qword [rsp + 0], 1
	jmp .jump103
.jump104: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 32
	; Moving 32 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 40 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 40 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	mov rax, [rel const28] ; 98.65
	push rax
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump108
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump108:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize m to 0
	mov rax, 0
	push rax
.jump109: ; Begin body of loop
	; Compare m to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump110 ; If m >= bound, break
.jump111:
	; Compute loop body
	mov rax, [rel const29] ; 40.65
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 16] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 16], xmm0 ; Save sum
	; Increment m
	add qword [rsp + 0], 1
	jmp .jump109
.jump110: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const30] ; 79.03
	push rax
	sub rsp, 8 ; Align stack
	mov rax, [rel const31] ; 8.39
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const1] ; True
	push rax
	pop rax
	cmp rax, 0
	jne .jump112
	mov rax, [rel const2] ; False
	push rax
	pop rax
.jump112:
	push rax
	pop rax
	cmp rax, 0
	je .jump113
	sub rsp, 32
	; Moving 32 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 40 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 40 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const32] ; 36.62
	push rax
	jmp .jump114
.jump113:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump115
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump115:
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump116
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump116:
	; Computing bound for m
	mov rax, [rel const33] ; 442
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump117
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump117:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by 442
	jno .jump118
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump118:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump119
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump119:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump120
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump120:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
	; Initialize m to 0
	mov rax, 0
	push rax
.jump121: ; Begin body of loop
	; Compare o to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump123 ; If o >= bound, ...
	mov qword [rsp + 16], 0 ; o = 0
	add qword [rsp + 8], 1 ; n++
.jump123:
	; Compare n to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump124 ; If n >= bound, ...
	mov qword [rsp + 8], 0 ; n = 0
	add qword [rsp + 0], 1 ; m++
.jump124:
	; Compare m to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump122 ; If m >= bound, break
.jump125:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment o
	add qword [rsp + 16], 1
	jmp .jump121
.jump122: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8 ; Align stack
	mov rax, [rel const34] ; 21.7
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
.jump114:
	; Moving 32 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 24]
		mov [rsp + 8 + 24], r10
		mov r10, [rsp + 8 + 16]
		mov [rsp + 8 + 16], r10
		mov r10, [rsp + 8 + 8]
		mov [rsp + 8 + 8], r10
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	mov rax, [rel const2] ; False
	push rax
	sub rsp, 32
	; Moving 32 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 40 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 40 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 32 to rsp + 32
		mov r10, [rsp + 32 + 0]
		mov [rsp + 32 + 0], r10
	add rsp, 32
	pop rax
	cmp rax, 0
	jne .jump126
	mov rax, [rel const35] ; 95.85
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
.jump126:
	push rax
	mov rax, [rel const1] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump127
	mov rax, [rel const1] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	jmp .jump128
.jump127:
	mov rax, [rel const1] ; True
	push rax
.jump128:
	pop rax
	cmp rax, 0
	je .jump129
	mov rax, [rel const2] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump130
	mov rax, [rel const1] ; True
	push rax
	pop rax
.jump130:
	push rax
	mov rax, [rel const1] ; True
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
.jump129:
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump131
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setg al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump133
	sub rsp, 8
	; Moving 8 bytes from rbp - 136 to rsp
		mov r10, [rbp - 136 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for t
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump135
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump135:
	; Computing bound for s
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump136
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump136:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by p
	jno .jump137
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump137:
	imul rdi, [rsp + 0 + 8] ; multiply by q
	jno .jump138
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump138:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize t to 0
	mov rax, 0
	push rax
	; Initialize s to 0
	mov rax, 0
	push rax
.jump139: ; Begin body of loop
	; Compare t to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump141 ; If t >= bound, ...
	mov qword [rsp + 8], 0 ; t = 0
	add qword [rsp + 0], 1 ; s++
.jump141:
	; Compare s to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump140 ; If s >= bound, break
.jump142:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment t
	add qword [rsp + 8], 1
	jmp .jump139
.jump140: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Moving 24 bytes from rsp + 0 to rsp + 16
		mov r10, [rsp + 0 + 16]
		mov [rsp + 16 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 16 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	jmp .jump134
.jump133:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for t
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump143
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump143:
	; Computing bound for s
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump144
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump144:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by o
	jno .jump145
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump145:
	imul rdi, [rsp + 0 + 8] ; multiply by d
	jno .jump146
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump146:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize t to 0
	mov rax, 0
	push rax
	; Initialize s to 0
	mov rax, 0
	push rax
.jump147: ; Begin body of loop
	; Compare t to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump149 ; If t >= bound, ...
	mov qword [rsp + 8], 0 ; t = 0
	add qword [rsp + 0], 1 ; s++
.jump149:
	; Compare s to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump148 ; If s >= bound, break
.jump150:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment t
	add qword [rsp + 8], 1
	jmp .jump147
.jump148: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	sub rsp, 32
	; Moving 32 bytes from rbp - 136 to rsp
		mov r10, [rbp - 136 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 136 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 136 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 136 + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 32
	; Moving 32 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 88 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 88 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	; Moving 24 bytes from rsp + 88 to rsp + 88
		mov r10, [rsp + 88 + 16]
		mov [rsp + 88 + 16], r10
		mov r10, [rsp + 88 + 8]
		mov [rsp + 88 + 8], r10
		mov r10, [rsp + 88 + 0]
		mov [rsp + 88 + 0], r10
	add rsp, 88
.jump134:
	jmp .jump132
.jump131:
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump151
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for s
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump153
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump153:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof int[,]
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump154
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump154:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize s to 0
	mov rax, 0
	push rax
.jump155: ; Begin body of loop
	; Compare s to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump156 ; If s >= bound, break
.jump157:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for u
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump158
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump158:
	; Computing bound for t
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump159
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump159:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by d
	jno .jump160
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump160:
	imul rdi, [rsp + 0 + 8] ; multiply by p
	jno .jump161
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump161:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize u to 0
	mov rax, 0
	push rax
	; Initialize t to 0
	mov rax, 0
	push rax
.jump162: ; Begin body of loop
	; Compare u to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump164 ; If u >= bound, ...
	mov qword [rsp + 8], 0 ; u = 0
	add qword [rsp + 0], 1 ; t++
.jump164:
	; Compare t to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump163 ; If t >= bound, break
.jump165:
	; Compute loop body
	mov rax, [rel const36] ; 363
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment u
	add qword [rsp + 8], 1
	jmp .jump162
.jump163: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 24
	add rax, [rsp + 40]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment s
	add qword [rsp + 0], 1
	jmp .jump155
.jump156: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	jmp .jump152
.jump151:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for s
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump166
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump166:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof int[,]
	imul rdi, [rsp + 0 + 0] ; multiply by e
	jno .jump167
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump167:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize s to 0
	mov rax, 0
	push rax
.jump168: ; Begin body of loop
	; Compare s to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump169 ; If s >= bound, break
.jump170:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for u
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump171
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump171:
	; Computing bound for t
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump172
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump172:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by l
	jno .jump173
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump173:
	imul rdi, [rsp + 0 + 8] ; multiply by c
	jno .jump174
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump174:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize u to 0
	mov rax, 0
	push rax
	; Initialize t to 0
	mov rax, 0
	push rax
.jump175: ; Begin body of loop
	; Compare u to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump177 ; If u >= bound, ...
	mov qword [rsp + 8], 0 ; u = 0
	add qword [rsp + 0], 1 ; t++
.jump177:
	; Compare t to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump176 ; If t >= bound, break
.jump178:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment u
	add qword [rsp + 8], 1
	jmp .jump175
.jump176: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 24
	add rax, [rsp + 40]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment s
	add qword [rsp + 0], 1
	jmp .jump168
.jump169: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
.jump152:
	sub rsp, 8
	; Moving 8 bytes from rbp - 136 to rsp
		mov r10, [rbp - 136 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump179
	lea rdi, [rel const17] ; negative array index
	call _fail_assertion
.jump179:
	cmp rax, [rsp + 8]
	jl .jump180
	lea rdi, [rel const18] ; index too large
	call _fail_assertion
.jump180:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 24
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump132:
	call _get_time
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 152 to rsp
		mov r10, [rbp - 152 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const2] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 16
		mov r10, [rsp + 0 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	pop rax
	cmp rax, 0
	je .jump181
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump183
	sub rsp, 24
	; Moving 24 bytes from rbp - 160 to rsp
		mov r10, [rbp - 160 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 160 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 160 + 0]
		mov [rsp + 0], r10
	jmp .jump184
.jump183:
	sub rsp, 24
	; Moving 24 bytes from rbp - 160 to rsp
		mov r10, [rbp - 160 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 160 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 160 + 0]
		mov [rsp + 0], r10
.jump184:
	jmp .jump182
.jump181:
	sub rsp, 8
	lea rdi, [rsp + 0]
	call _f
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for w
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump185
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump185:
	; Computing bound for v
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump186
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump186:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by p
	jno .jump187
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump187:
	imul rdi, [rsp + 0 + 8] ; multiply by h
	jno .jump188
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump188:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize w to 0
	mov rax, 0
	push rax
	; Initialize v to 0
	mov rax, 0
	push rax
.jump189: ; Begin body of loop
	; Compare w to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump191 ; If w >= bound, ...
	mov qword [rsp + 8], 0 ; w = 0
	add qword [rsp + 0], 1 ; v++
.jump191:
	; Compare v to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump190 ; If v >= bound, break
.jump192:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment w
	add qword [rsp + 8], 1
	jmp .jump189
.jump190: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 24
	; Moving 24 bytes from rbp - 160 to rsp
		mov r10, [rbp - 160 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 160 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 160 + 0]
		mov [rsp + 0], r10
	; Moving 24 bytes from rsp + 24 to rsp + 32
		mov r10, [rsp + 24 + 16]
		mov [rsp + 32 + 16], r10
		mov r10, [rsp + 24 + 8]
		mov [rsp + 32 + 8], r10
		mov r10, [rsp + 24 + 0]
		mov [rsp + 32 + 0], r10
	add rsp, 32
.jump182:
	call _get_time
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 24]
	subsd xmm0, xmm1
	call _print_time
	add rsp, 184 ; Local variables
	pop r12
	pop rbp
	ret

