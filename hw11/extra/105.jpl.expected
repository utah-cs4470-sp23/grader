global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: db `b`, 0
const1: dq 1
const2: dq 0
const3: db `non-positive loop bound`, 0
const4: dq 518
const5: db `overflow computing array size`, 0
const6: dq 694
const7: dq 530
const8: dq 851
const9: dq 582
const10: dq 66
const11: dq 987
const12: dq 24.64
const13: dq 4.04
const14: dq 35.86
const15: dq 48.71
const16: dq 78.92
const17: db `negative array index`, 0
const18: db `index too large`, 0
const19: dq 904
const20: dq 374
const21: dq 13.85
const22: dq 55.19
const23: dq 67.59
const24: dq 937
const25: dq 752
const26: dq 726
const27: db `mod by zero`, 0
const28: dq 98.65
const29: dq 40.65
const30: dq 79.03
const31: dq 8.39
const32: dq 36.62
const33: dq 442
const34: dq 21.7
const35: dq 95.85
const36: dq 363
const37: dq 82.55
const38: dq 45.68
const39: dq 863
const40: dq 37.38
const41: dq 89.31
const42: dq 959
const43: dq 49.61
const44: dq 40.46
const45: dq 30.6
const46: db `H`, 0
const47: dq 453
const48: dq 910
const49: dq 50.48

section .text
f:
_f:
	push rbp
	mov rbp, rsp
	push rdi
	sub rsp, 8 ; Align stack
	mov rax, [rel const13] ; 4.04
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const14] ; 35.86
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump38
	sub rsp, 8
	sub rsp, 8 ; Align stack
	lea rdi, [rsp + 8]
	call _f
	add rsp, 8 ; Remove alignment
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	mov rax, [rel const15] ; 48.71
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
	jmp .jump39
.jump38:
	mov rax, [rel const16] ; 78.92
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
.jump39:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump40
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump40:
	; Computing bound for i
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump41
	lea rdi, [rel const17] ; negative array index
	call _fail_assertion
.jump41:
	cmp rax, [rsp + 8]
	jl .jump42
	lea rdi, [rel const18] ; index too large
	call _fail_assertion
.jump42:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump43
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump43:
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump44
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	jmp .jump45
.jump44:
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
.jump45:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump46
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump46:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by (if g then e else c)
	jno .jump47
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump47:
	imul rdi, [rsp + 0 + 8] ; multiply by args[e]
	jno .jump48
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump48:
	imul rdi, [rsp + 0 + 16] ; multiply by (- d)
	jno .jump49
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump49:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
.jump50: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const19] ; 904
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment j
	add qword [rsp + 16], 1
	; Compare j to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump50 ; If j < bound, next iter
	mov qword [rsp + 16], 0 ; j = 0
	add qword [rsp + 8], 1 ; i++
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump50 ; If i < bound, next iter
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump50 ; If h < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump54
	lea rdi, [rel const17] ; negative array index
	call _fail_assertion
.jump54:
	cmp rax, [rsp + 24]
	jl .jump55
	lea rdi, [rel const18] ; index too large
	call _fail_assertion
.jump55:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump56
	lea rdi, [rel const17] ; negative array index
	call _fail_assertion
.jump56:
	cmp rax, [rsp + 32]
	jl .jump57
	lea rdi, [rel const18] ; index too large
	call _fail_assertion
.jump57:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump58
	lea rdi, [rel const17] ; negative array index
	call _fail_assertion
.jump58:
	cmp rax, [rsp + 40]
	jl .jump59
	lea rdi, [rel const18] ; index too large
	call _fail_assertion
.jump59:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const20] ; 374
	push rax
	sub rsp, 8 ; Align stack
	mov rax, [rel const21] ; 13.85
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const22] ; 55.19
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const23] ; 67.59
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	; Moving 24 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 16]
		mov [rsp + 8 + 16], r10
		mov r10, [rsp + 8 + 8]
		mov [rsp + 8 + 8], r10
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	; Moving 8 bytes from rsp + 8 to rsp + 16
		mov r10, [rsp + 8 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	lea rdi, [rsp + 0]
	call _f
	mov rax, [rbp - 8] ; Address to write return value into
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 64 ; Local variables
	pop rbp
	ret

y:
_y:
	push rbp
	mov rbp, rsp
	mov rax, [rel const2] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump175
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const37] ; 82.55
	push rax
	; Moving 8 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	jmp .jump176
.jump175:
	mov rax, [rel const38] ; 45.68
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
.jump176:
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	mov rax, [rel const2] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump177
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for B
	sub rsp, 8
	; Moving 8 bytes from r12 - 184 to rsp
		mov r10, [r12 - 184 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump179
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump179:
	; Computing bound for A
	sub rsp, 8
	; Moving 8 bytes from r12 - 152 to rsp
		mov r10, [r12 - 152 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump180
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump180:
	; Computing total size of heap memory to allocate
	mov rdi, 0 ; sizeof {}
	imul rdi, [rsp + 0 + 0] ; multiply by u
	jno .jump181
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump181:
	imul rdi, [rsp + 0 + 8] ; multiply by x
	jno .jump182
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump182:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize B to 0
	mov rax, 0
	push rax
	; Initialize A to 0
	mov rax, 0
	push rax
.jump183: ; Begin body of loop
	; Compute loop body
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 0
	add rax, [rsp + 32]
	; Move body (0 bytes) to index
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	; Increment B
	add qword [rsp + 8], 1
	; Compare B to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump183 ; If B < bound, next iter
	mov qword [rsp + 8], 0 ; B = 0
	add qword [rsp + 0], 1 ; A++
	; Compare A to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump183 ; If A < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump178
.jump177:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for B
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump186
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump186:
	; Computing bound for A
	sub rsp, 8
	; Moving 8 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump187
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump187:
	; Computing total size of heap memory to allocate
	mov rdi, 0 ; sizeof {}
	imul rdi, [rsp + 0 + 0] ; multiply by j
	jno .jump188
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump188:
	imul rdi, [rsp + 0 + 8] ; multiply by e
	jno .jump189
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump189:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize B to 0
	mov rax, 0
	push rax
	; Initialize A to 0
	mov rax, 0
	push rax
.jump190: ; Begin body of loop
	; Compute loop body
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 0
	add rax, [rsp + 32]
	; Move body (0 bytes) to index
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	; Increment B
	add qword [rsp + 8], 1
	; Compare B to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump190 ; If B < bound, next iter
	mov qword [rsp + 8], 0 ; B = 0
	add qword [rsp + 0], 1 ; A++
	; Compare A to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump190 ; If A < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump178:
	; Moving 24 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 16]
		mov [rsp + 0 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for B
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump193
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump193:
	; Computing bound for A
	sub rsp, 8
	; Moving 8 bytes from r12 - 104 to rsp
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump194
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump194:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize B to 0
	mov rax, 0
	push rax
	; Initialize A to 0
	mov rax, 0
	push rax
.jump195: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment B
	add qword [rsp + 8], 1
	; Compare B to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump195 ; If B < bound, next iter
	mov qword [rsp + 8], 0 ; B = 0
	add qword [rsp + 0], 1 ; A++
	; Compare A to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump195 ; If A < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump198
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	jmp .jump199
.jump198:
	mov rax, [rel const1] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump200
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	jmp .jump201
.jump200:
	sub rsp, 8 ; Align stack
	call _y
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	cmp rax, 0
	jne .jump202
	sub rsp, 8 ; Align stack
	call _y
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
.jump202:
	push rax
	pop rax
	cmp rax, 0
	je .jump203
	mov rax, [rel const39] ; 863
	push rax
	jmp .jump204
.jump203:
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
.jump204:
.jump201:
.jump199:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump205
	lea rdi, [rel const17] ; negative array index
	call _fail_assertion
.jump205:
	cmp rax, [rsp + 16]
	jl .jump206
	lea rdi, [rel const18] ; index too large
	call _fail_assertion
.jump206:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump207
	lea rdi, [rel const17] ; negative array index
	call _fail_assertion
.jump207:
	cmp rax, [rsp + 24]
	jl .jump208
	lea rdi, [rel const18] ; index too large
	call _fail_assertion
.jump208:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 0
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 0
	; Moving 0 bytes from rax to rsp
	sub rsp, 16
	; Moving 16 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const40] ; 37.38
	push rax
	mov rax, [rel const41] ; 89.31
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump209
	sub rsp, 8
	; Moving 8 bytes from r12 - 184 to rsp
		mov r10, [r12 - 184 + 0]
		mov [rsp + 0], r10
	jmp .jump210
.jump209:
	sub rsp, 32
	; Moving 32 bytes from r12 - 136 to rsp
		mov r10, [r12 - 136 + 24]
		mov [rsp + 24], r10
		mov r10, [r12 - 136 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 136 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 136 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 160 to rsp
		mov r10, [r12 - 160 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump211
	lea rdi, [rel const17] ; negative array index
	call _fail_assertion
.jump211:
	cmp rax, [rsp + 24]
	jl .jump212
	lea rdi, [rel const18] ; index too large
	call _fail_assertion
.jump212:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump213
	lea rdi, [rel const17] ; negative array index
	call _fail_assertion
.jump213:
	cmp rax, [rsp + 32]
	jl .jump214
	lea rdi, [rel const18] ; index too large
	call _fail_assertion
.jump214:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump215
	lea rdi, [rel const17] ; negative array index
	call _fail_assertion
.jump215:
	cmp rax, [rsp + 40]
	jl .jump216
	lea rdi, [rel const18] ; index too large
	call _fail_assertion
.jump216:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump210:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump217
	lea rdi, [rel const17] ; negative array index
	call _fail_assertion
.jump217:
	cmp rax, [rsp + 8]
	jl .jump218
	lea rdi, [rel const18] ; index too large
	call _fail_assertion
.jump218:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump219
	mov rax, [rel const1] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump221
	sub rsp, 8 ; Align stack
	call _y
	add rsp, 8 ; Remove alignment
	push rax
	jmp .jump222
.jump221:
	sub rsp, 8
	; Moving 8 bytes from r12 - 136 to rsp
		mov r10, [r12 - 136 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setg al
	and rax, 1
	push rax
.jump222:
	pop rax
	cmp rax, 0
	je .jump223
	sub rsp, 16
	; Moving 16 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	; Moving 16 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	jmp .jump224
.jump223:
	sub rsp, 16
	; Moving 16 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rdi, 16
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 1
	push rax
	mov rax, [rel const42] ; 959
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 184 to rsp
		mov r10, [r12 - 184 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump225
	lea rdi, [rel const17] ; negative array index
	call _fail_assertion
.jump225:
	cmp rax, [rsp + 8]
	jl .jump226
	lea rdi, [rel const18] ; index too large
	call _fail_assertion
.jump226:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 16
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump224:
	sub rsp, 32
	; Moving 32 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 24]
		mov [rsp + 24], r10
		mov r10, [r12 - 40 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 40 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	jmp .jump220
.jump219:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for A
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump227
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump227:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by k
	jno .jump228
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump228:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize A to 0
	mov rax, 0
	push rax
.jump229: ; Begin body of loop
	; Compute loop body
	call _y
	push rax
	pop rax
	xor rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment A
	add qword [rsp + 0], 1
	; Compare A to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump229 ; If A < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 32
	; Moving 32 bytes from r12 - 136 to rsp
		mov r10, [r12 - 136 + 24]
		mov [rsp + 24], r10
		mov r10, [r12 - 136 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 136 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 136 + 0]
		mov [rsp + 0], r10
.jump220:
	sub rsp, 8 ; Align stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for G
	sub rsp, 8
	; Moving 8 bytes from r12 - 128 to rsp
		mov r10, [r12 - 128 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump231
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump231:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize G to 0
	mov rax, 0
	push rax
.jump232: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const43] ; 49.61
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	addsd xmm0, [rsp + 16] ; Load sum
	movsd [rsp + 16], xmm0 ; Save sum
	; Increment G
	add qword [rsp + 0], 1
	; Compare G to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump232 ; If G < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rel const2] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump234
	mov rax, [rel const44] ; 40.46
	push rax
	jmp .jump235
.jump234:
	mov rax, [rel const45] ; 30.6
	push rax
.jump235:
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for I
	sub rsp, 8
	; Moving 8 bytes from r12 - 192 to rsp
		mov r10, [r12 - 192 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump236
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump236:
	; Computing bound for H
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for H
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump237
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump237:
	; Computing bound for G
	mov rax, [rel const2] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump238
	sub rsp, 8
	; Moving 8 bytes from r12 - 136 to rsp
		mov r10, [r12 - 136 + 0]
		mov [rsp + 0], r10
	jmp .jump239
.jump238:
	sub rsp, 8
	; Moving 8 bytes from r12 - 136 to rsp
		mov r10, [r12 - 136 + 0]
		mov [rsp + 0], r10
.jump239:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump240
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump240:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize H to 0
	mov rax, 0
	push rax
	; Initialize G to 0
	mov rax, 0
	push rax
.jump241: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment H
	add qword [rsp + 8], 1
	; Compare H to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump241 ; If H < bound, next iter
	mov qword [rsp + 8], 0 ; H = 0
	add qword [rsp + 0], 1 ; G++
	; Compare G to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump241 ; If G < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump244
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump244:
	; Computing bound for G
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump245
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump245:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize I to 0
	mov rax, 0
	push rax
	; Initialize H to 0
	mov rax, 0
	push rax
	; Initialize G to 0
	mov rax, 0
	push rax
.jump246: ; Begin body of loop
	; Compute loop body
	sub rsp, 8 ; Align stack
	sub rsp, 8
	sub rsp, 8 ; Align stack
	lea rdi, [rsp + 8]
	call _f
	add rsp, 8 ; Remove alignment
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	addsd xmm0, [rsp + 48] ; Load sum
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment I
	add qword [rsp + 16], 1
	; Compare I to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump246 ; If I < bound, next iter
	mov qword [rsp + 16], 0 ; I = 0
	add qword [rsp + 8], 1 ; H++
	; Compare H to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump246 ; If H < bound, next iter
	mov qword [rsp + 8], 0 ; H = 0
	add qword [rsp + 0], 1 ; G++
	; Compare G to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump246 ; If G < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	add rsp, 56 ; Local variables
	pop rbp
	ret
	mov rax, [rel const2] ; False
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 152 to rsp
		mov r10, [r12 - 152 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	add rsp, 56 ; Local variables
	pop rbp
	ret

z:
_z:
	push rbp
	mov rbp, rsp
	call _y
	push rax
	pop rax
	cmp rax, 0
	je .jump250
	call _y
	push rax
	pop rax
.jump250:
	push rax
	pop rax
	add rsp, 0 ; Local variables
	pop rbp
	ret
	sub rsp, 8
	; Moving 8 bytes from r12 - 104 to rsp
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const2] ; False
	push rax
	pop rax
	cmp rax, 0
	jne .jump251
	sub rsp, 8 ; Align stack
	lea rdi, [rel const46] ; H
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump251:
	mov rax, [rel const2] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump252
	mov rax, [rel const2] ; False
	push rax
	pop rax
	cmp rax, 0
	jne .jump254
	mov rax, [rel const1] ; True
	push rax
	pop rax
.jump254:
	push rax
	jmp .jump253
.jump252:
	sub rsp, 8
	; Moving 8 bytes from r12 - 136 to rsp
		mov r10, [r12 - 136 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 128 to rsp
		mov r10, [r12 - 128 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setg al
	and rax, 1
	push rax
.jump253:
	pop rax
	cmp rax, 0
	je .jump255
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for I
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for J
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump257
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump257:
	; Computing bound for I
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump258
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump258:
	; Computing bound for H
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump259
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump259:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize J to 0
	mov rax, 0
	push rax
	; Initialize I to 0
	mov rax, 0
	push rax
	; Initialize H to 0
	mov rax, 0
	push rax
.jump260: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment J
	add qword [rsp + 16], 1
	; Compare J to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump260 ; If J < bound, next iter
	mov qword [rsp + 16], 0 ; J = 0
	add qword [rsp + 8], 1 ; I++
	; Compare I to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump260 ; If I < bound, next iter
	mov qword [rsp + 8], 0 ; I = 0
	add qword [rsp + 0], 1 ; H++
	; Compare H to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump260 ; If H < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump264
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump264:
	; Computing bound for H
	mov rax, [rel const47] ; 453
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump265
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump265:
	; Computing total size of heap memory to allocate
	mov rdi, 48 ; sizeof {{int[],float,{bool,bool,int}}}
	imul rdi, [rsp + 0 + 0] ; multiply by 453
	jno .jump266
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump266:
imul rdi, [rsp + 0 + 8] ; multiply by (sum[H : k, I : d, J : argnum] j)
	jno .jump267
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump267:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize I to 0
	mov rax, 0
	push rax
	; Initialize H to 0
	mov rax, 0
	push rax
.jump268: ; Begin body of loop
	; Compute loop body
	sub rsp, 48
	; Moving 48 bytes from rbp - -40 to rsp
		mov r10, [rbp - -40 + 40]
		mov [rsp + 40], r10
		mov r10, [rbp - -40 + 32]
		mov [rsp + 32], r10
		mov r10, [rbp - -40 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - -40 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -40 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -40 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 48]
	imul rax, [rsp + 72] ; No overflow if indices in bounds
	add rax, [rsp + 56]
	imul rax, 48
	add rax, [rsp + 80]
	; Move body (48 bytes) to index
	; Moving 48 bytes from rsp to rax
		mov r10, [rsp + 40]
		mov [rax + 40], r10
		mov r10, [rsp + 32]
		mov [rax + 32], r10
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 48
	; Increment I
	add qword [rsp + 8], 1
	; Compare I to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump268 ; If I < bound, next iter
	mov qword [rsp + 8], 0 ; I = 0
	add qword [rsp + 0], 1 ; H++
	; Compare H to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump268 ; If H < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump256
.jump255:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for I
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump271
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump271:
	; Computing bound for H
	sub rsp, 8
	; Moving 8 bytes from r12 - 184 to rsp
		mov r10, [r12 - 184 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump272
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump272:
	; Computing total size of heap memory to allocate
	mov rdi, 48 ; sizeof {{int[],float,{bool,bool,int}}}
	imul rdi, [rsp + 0 + 0] ; multiply by x
	jno .jump273
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump273:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump274
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump274:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize I to 0
	mov rax, 0
	push rax
	; Initialize H to 0
	mov rax, 0
	push rax
.jump275: ; Begin body of loop
	; Compute loop body
	sub rsp, 48
	; Moving 48 bytes from rbp - -40 to rsp
		mov r10, [rbp - -40 + 40]
		mov [rsp + 40], r10
		mov r10, [rbp - -40 + 32]
		mov [rsp + 32], r10
		mov r10, [rbp - -40 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - -40 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -40 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -40 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 48]
	imul rax, [rsp + 72] ; No overflow if indices in bounds
	add rax, [rsp + 56]
	imul rax, 48
	add rax, [rsp + 80]
	; Move body (48 bytes) to index
	; Moving 48 bytes from rsp to rax
		mov r10, [rsp + 40]
		mov [rax + 40], r10
		mov r10, [rsp + 32]
		mov [rax + 32], r10
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 48
	; Increment I
	add qword [rsp + 8], 1
	; Compare I to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump275 ; If I < bound, next iter
	mov qword [rsp + 8], 0 ; I = 0
	add qword [rsp + 0], 1 ; H++
	; Compare H to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump275 ; If H < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump256:
	sub rsp, 8
	; Moving 8 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 184 to rsp
		mov r10, [r12 - 184 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump278
	lea rdi, [rel const17] ; negative array index
	call _fail_assertion
.jump278:
	cmp rax, [rsp + 16]
	jl .jump279
	lea rdi, [rel const18] ; index too large
	call _fail_assertion
.jump279:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump280
	lea rdi, [rel const17] ; negative array index
	call _fail_assertion
.jump280:
	cmp rax, [rsp + 24]
	jl .jump281
	lea rdi, [rel const18] ; index too large
	call _fail_assertion
.jump281:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 48
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 48
	; Moving 48 bytes from rax to rsp
		mov r10, [rax + 40]
		mov [rsp + 40], r10
		mov r10, [rax + 32]
		mov [rsp + 32], r10
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	; Moving 24 bytes from r12 - 160 to rsp
		mov r10, [r12 - 160 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 160 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 160 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for I
	mov rax, [rel const48] ; 910
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump282
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump282:
	; Computing bound for H
	sub rsp, 8
	; Moving 8 bytes from r12 - 136 to rsp
		mov r10, [r12 - 136 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump283
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump283:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof float[]
	imul rdi, [rsp + 0 + 0] ; multiply by n
	jno .jump284
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump284:
	imul rdi, [rsp + 0 + 8] ; multiply by 910
	jno .jump285
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump285:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize I to 0
	mov rax, 0
	push rax
	; Initialize H to 0
	mov rax, 0
	push rax
.jump286: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for J
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump287
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump287:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by E
	jno .jump288
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump288:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize J to 0
	mov rax, 0
	push rax
.jump289: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const49] ; 50.48
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment J
	add qword [rsp + 0], 1
	; Compare J to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump289 ; If J < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 16
	add rax, [rsp + 48]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment I
	add qword [rsp + 8], 1
	; Compare I to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump286 ; If I < bound, next iter
	mov qword [rsp + 8], 0 ; I = 0
	add qword [rsp + 0], 1 ; H++
	; Compare H to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump286 ; If H < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Moving 24 bytes from rsp + 0 to rsp + 32
		mov r10, [rsp + 0 + 16]
		mov [rsp + 32 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 32 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 32 + 0], r10
	add rsp, 32
	call _z
	add rsp, 24
	add rsp, 48
	push rax
	pop rax
	add rsp, 24 ; Local variables
	pop rbp
	ret

jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp
	lea rdi, [rel const0] ; b
	sub rsp, 8 ; Align stack
	call _print
	add rsp, 8 ; Remove alignment
	mov rax, [rel const1] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump1
	mov rax, [rel const1] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump3
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const1] ; True
	push rax
	mov rax, [rel const2] ; False
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump5
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump5:
	; Computing bound for c
	mov rax, [rel const4] ; 518
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump6
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump6:
	; Computing bound for b
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump7
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump7:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump8
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump8:
	imul rdi, [rsp + 0 + 8] ; multiply by 518
	jno .jump9
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump9:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump10
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump10:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump11: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment d
	add qword [rsp + 16], 1
	; Compare d to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump11 ; If d < bound, next iter
	mov qword [rsp + 16], 0 ; d = 0
	add qword [rsp + 8], 1 ; c++
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump11 ; If c < bound, next iter
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump11 ; If b < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump4
.jump3:
	mov rax, [rel const6] ; 694
	push rax
	mov rdi, 8
	call _jpl_alloc
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const7] ; 530
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for d
	mov rax, [rel const8] ; 851
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump15
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump15:
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump16
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump16:
	; Computing bound for b
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump17
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump17:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump18
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump18:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump19
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump19:
	imul rdi, [rsp + 0 + 16] ; multiply by 851
	jno .jump20
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump20:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump21: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment d
	add qword [rsp + 16], 1
	; Compare d to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump21 ; If d < bound, next iter
	mov qword [rsp + 16], 0 ; d = 0
	add qword [rsp + 8], 1 ; c++
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump21 ; If c < bound, next iter
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump21 ; If b < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump4:
	; Moving 32 bytes from rsp + 0 to rsp + 24
		mov r10, [rsp + 0 + 24]
		mov [rsp + 24 + 24], r10
		mov r10, [rsp + 0 + 16]
		mov [rsp + 24 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 24 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 24 + 0], r10
	add rsp, 24
	jmp .jump2
.jump1:
	mov rax, [rel const9] ; 582
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for d
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for b
	mov rax, [rel const10] ; 66
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump25
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump25:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize b to 0
	mov rax, 0
	push rax
.jump26: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment b
	add qword [rsp + 0], 1
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump26 ; If b < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump28
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump28:
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump29
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump29:
	; Computing bound for b
	mov rax, [rel const11] ; 987
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump30
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump30:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by 987
	jno .jump31
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump31:
	imul rdi, [rsp + 0 + 8] ; multiply by (- argnum)
	jno .jump32
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump32:
imul rdi, [rsp + 0 + 16] ; multiply by (sum[b : 66] b)
	jno .jump33
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump33:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump34: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment d
	add qword [rsp + 16], 1
	; Compare d to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump34 ; If d < bound, next iter
	mov qword [rsp + 16], 0 ; d = 0
	add qword [rsp + 8], 1 ; c++
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump34 ; If c < bound, next iter
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump34 ; If b < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	mov rax, [rel const12] ; 24.64
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	; Moving 32 bytes from rsp + 8 to rsp + 16
		mov r10, [rsp + 8 + 24]
		mov [rsp + 16 + 24], r10
		mov r10, [rsp + 8 + 16]
		mov [rsp + 16 + 16], r10
		mov r10, [rsp + 8 + 8]
		mov [rsp + 16 + 8], r10
		mov r10, [rsp + 8 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
.jump2:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for g
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump60
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump60:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize g to 0
	mov rax, 0
	push rax
.jump61: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for j
	mov rax, [rel const24] ; 937
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump62
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump62:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump63
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump63:
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump64
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump64:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
.jump65: ; Begin body of loop
	; Compute loop body
	sub rsp, 32
	; Moving 32 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 40 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 40 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump66
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump66:
	cmp rax, [rsp + 24]
	jl .jump67
	sub rsp, 8 ; Align stack
	lea rdi, [rel const18] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump67:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump68
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump68:
	cmp rax, [rsp + 32]
	jl .jump69
	sub rsp, 8 ; Align stack
	lea rdi, [rel const18] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump69:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump70
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump70:
	cmp rax, [rsp + 40]
	jl .jump71
	sub rsp, 8 ; Align stack
	lea rdi, [rel const18] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump71:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment j
	add qword [rsp + 16], 1
	; Compare j to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump65 ; If j < bound, next iter
	mov qword [rsp + 16], 0 ; j = 0
	add qword [rsp + 8], 1 ; i++
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump65 ; If i < bound, next iter
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump65 ; If h < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for j
	mov rax, [rel const25] ; 752
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump75
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump75:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump76
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump76:
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump77
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump77:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by e
	jno .jump78
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump78:
	imul rdi, [rsp + 0 + 8] ; multiply by d
	jno .jump79
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump79:
	imul rdi, [rsp + 0 + 16] ; multiply by 752
	jno .jump80
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump80:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
.jump81: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const26] ; 726
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment j
	add qword [rsp + 16], 1
	; Compare j to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump81 ; If j < bound, next iter
	mov qword [rsp + 16], 0 ; j = 0
	add qword [rsp + 8], 1 ; i++
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump81 ; If i < bound, next iter
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump81 ; If h < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump85
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump85:
	cmp rax, [rsp + 24]
	jl .jump86
	sub rsp, 8 ; Align stack
	lea rdi, [rel const18] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump86:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump87
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump87:
	cmp rax, [rsp + 32]
	jl .jump88
	sub rsp, 8 ; Align stack
	lea rdi, [rel const18] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump88:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump89
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump89:
	cmp rax, [rsp + 40]
	jl .jump90
	sub rsp, 8 ; Align stack
	lea rdi, [rel const18] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump90:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump91
	sub rsp, 8 ; Align stack
	lea rdi, [rel const27] ; mod by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump91:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment g
	add qword [rsp + 0], 1
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump61 ; If g < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump93
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump93:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
imul rdi, [rsp + 0 + 0] ; multiply by (sum[g : e] ((array[h : e, i : d, j : 752] 726)[e, argnum, e] % (sum[h : g, i : (- g), j : 937] b[c, d, h])))
	jno .jump94
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump94:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize g to 0
	mov rax, 0
	push rax
.jump95: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rel const1] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump96
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	jmp .jump97
.jump96:
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
.jump97:
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment g
	add qword [rsp + 0], 1
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump95 ; If g < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 32
	; Moving 32 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 40 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 40 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	mov rax, [rel const28] ; 98.65
	push rax
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump99
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump99:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize m to 0
	mov rax, 0
	push rax
.jump100: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const29] ; 40.65
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	addsd xmm0, [rsp + 16] ; Load sum
	movsd [rsp + 16], xmm0 ; Save sum
	; Increment m
	add qword [rsp + 0], 1
	; Compare m to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump100 ; If m < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const30] ; 79.03
	push rax
	sub rsp, 8 ; Align stack
	mov rax, [rel const31] ; 8.39
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const1] ; True
	push rax
	pop rax
	cmp rax, 0
	jne .jump102
	mov rax, [rel const2] ; False
	push rax
	pop rax
.jump102:
	push rax
	pop rax
	cmp rax, 0
	je .jump103
	sub rsp, 32
	; Moving 32 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 40 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 40 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const32] ; 36.62
	push rax
	jmp .jump104
.jump103:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump105
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump105:
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump106
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump106:
	; Computing bound for m
	mov rax, [rel const33] ; 442
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump107
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump107:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by 442
	jno .jump108
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump108:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump109
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump109:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump110
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump110:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
	; Initialize m to 0
	mov rax, 0
	push rax
.jump111: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment o
	add qword [rsp + 16], 1
	; Compare o to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump111 ; If o < bound, next iter
	mov qword [rsp + 16], 0 ; o = 0
	add qword [rsp + 8], 1 ; n++
	; Compare n to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump111 ; If n < bound, next iter
	mov qword [rsp + 8], 0 ; n = 0
	add qword [rsp + 0], 1 ; m++
	; Compare m to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump111 ; If m < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8 ; Align stack
	mov rax, [rel const34] ; 21.7
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
.jump104:
	; Moving 32 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 24]
		mov [rsp + 8 + 24], r10
		mov r10, [rsp + 8 + 16]
		mov [rsp + 8 + 16], r10
		mov r10, [rsp + 8 + 8]
		mov [rsp + 8 + 8], r10
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	mov rax, [rel const2] ; False
	push rax
	sub rsp, 32
	; Moving 32 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 40 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 40 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 32 to rsp + 32
		mov r10, [rsp + 32 + 0]
		mov [rsp + 32 + 0], r10
	add rsp, 32
	pop rax
	cmp rax, 0
	jne .jump115
	mov rax, [rel const35] ; 95.85
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
.jump115:
	push rax
	mov rax, [rel const1] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump116
	mov rax, [rel const1] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	jmp .jump117
.jump116:
	mov rax, [rel const1] ; True
	push rax
.jump117:
	pop rax
	cmp rax, 0
	je .jump118
	mov rax, [rel const2] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump119
	mov rax, [rel const1] ; True
	push rax
	pop rax
.jump119:
	push rax
	mov rax, [rel const1] ; True
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
.jump118:
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump120
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setg al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump122
	sub rsp, 8
	; Moving 8 bytes from rbp - 136 to rsp
		mov r10, [rbp - 136 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for t
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump124
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump124:
	; Computing bound for s
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump125
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump125:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by p
	jno .jump126
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump126:
	imul rdi, [rsp + 0 + 8] ; multiply by q
	jno .jump127
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump127:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize t to 0
	mov rax, 0
	push rax
	; Initialize s to 0
	mov rax, 0
	push rax
.jump128: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment t
	add qword [rsp + 8], 1
	; Compare t to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump128 ; If t < bound, next iter
	mov qword [rsp + 8], 0 ; t = 0
	add qword [rsp + 0], 1 ; s++
	; Compare s to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump128 ; If s < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Moving 24 bytes from rsp + 0 to rsp + 16
		mov r10, [rsp + 0 + 16]
		mov [rsp + 16 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 16 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	jmp .jump123
.jump122:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for t
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump131
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump131:
	; Computing bound for s
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump132
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump132:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by o
	jno .jump133
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump133:
	imul rdi, [rsp + 0 + 8] ; multiply by d
	jno .jump134
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
.jump134:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize t to 0
	mov rax, 0
	push rax
	; Initialize s to 0
	mov rax, 0
	push rax
.jump135: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment t
	add qword [rsp + 8], 1
	; Compare t to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump135 ; If t < bound, next iter
	mov qword [rsp + 8], 0 ; t = 0
	add qword [rsp + 0], 1 ; s++
	; Compare s to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump135 ; If s < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	sub rsp, 32
	; Moving 32 bytes from rbp - 136 to rsp
		mov r10, [rbp - 136 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 136 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 136 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 136 + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 32
	; Moving 32 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 88 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 88 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	; Moving 24 bytes from rsp + 88 to rsp + 88
		mov r10, [rsp + 88 + 16]
		mov [rsp + 88 + 16], r10
		mov r10, [rsp + 88 + 8]
		mov [rsp + 88 + 8], r10
		mov r10, [rsp + 88 + 0]
		mov [rsp + 88 + 0], r10
	add rsp, 88
.jump123:
	jmp .jump121
.jump120:
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump138
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for s
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump140
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump140:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof int[,]
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump141
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump141:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize s to 0
	mov rax, 0
	push rax
.jump142: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for u
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump143
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump143:
	; Computing bound for t
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump144
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump144:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by d
	jno .jump145
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump145:
	imul rdi, [rsp + 0 + 8] ; multiply by p
	jno .jump146
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump146:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize u to 0
	mov rax, 0
	push rax
	; Initialize t to 0
	mov rax, 0
	push rax
.jump147: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const36] ; 363
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment u
	add qword [rsp + 8], 1
	; Compare u to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump147 ; If u < bound, next iter
	mov qword [rsp + 8], 0 ; u = 0
	add qword [rsp + 0], 1 ; t++
	; Compare t to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump147 ; If t < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 24
	add rax, [rsp + 40]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment s
	add qword [rsp + 0], 1
	; Compare s to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump142 ; If s < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	jmp .jump139
.jump138:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for s
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump151
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump151:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof int[,]
	imul rdi, [rsp + 0 + 0] ; multiply by e
	jno .jump152
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump152:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize s to 0
	mov rax, 0
	push rax
.jump153: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for u
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump154
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump154:
	; Computing bound for t
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump155
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump155:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by l
	jno .jump156
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump156:
	imul rdi, [rsp + 0 + 8] ; multiply by c
	jno .jump157
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump157:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize u to 0
	mov rax, 0
	push rax
	; Initialize t to 0
	mov rax, 0
	push rax
.jump158: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment u
	add qword [rsp + 8], 1
	; Compare u to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump158 ; If u < bound, next iter
	mov qword [rsp + 8], 0 ; u = 0
	add qword [rsp + 0], 1 ; t++
	; Compare t to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump158 ; If t < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 24
	add rax, [rsp + 40]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment s
	add qword [rsp + 0], 1
	; Compare s to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump153 ; If s < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
.jump139:
	sub rsp, 8
	; Moving 8 bytes from rbp - 136 to rsp
		mov r10, [rbp - 136 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump162
	lea rdi, [rel const17] ; negative array index
	call _fail_assertion
.jump162:
	cmp rax, [rsp + 8]
	jl .jump163
	lea rdi, [rel const18] ; index too large
	call _fail_assertion
.jump163:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 24
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump121:
	call _get_time
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 152 to rsp
		mov r10, [rbp - 152 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const2] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 16
		mov r10, [rsp + 0 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	pop rax
	cmp rax, 0
	je .jump164
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump166
	sub rsp, 24
	; Moving 24 bytes from rbp - 160 to rsp
		mov r10, [rbp - 160 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 160 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 160 + 0]
		mov [rsp + 0], r10
	jmp .jump167
.jump166:
	sub rsp, 24
	; Moving 24 bytes from rbp - 160 to rsp
		mov r10, [rbp - 160 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 160 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 160 + 0]
		mov [rsp + 0], r10
.jump167:
	jmp .jump165
.jump164:
	sub rsp, 8
	lea rdi, [rsp + 0]
	call _f
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for w
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump168
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump168:
	; Computing bound for v
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump169
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump169:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by p
	jno .jump170
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump170:
	imul rdi, [rsp + 0 + 8] ; multiply by h
	jno .jump171
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump171:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize w to 0
	mov rax, 0
	push rax
	; Initialize v to 0
	mov rax, 0
	push rax
.jump172: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment w
	add qword [rsp + 8], 1
	; Compare w to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump172 ; If w < bound, next iter
	mov qword [rsp + 8], 0 ; w = 0
	add qword [rsp + 0], 1 ; v++
	; Compare v to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump172 ; If v < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 24
	; Moving 24 bytes from rbp - 160 to rsp
		mov r10, [rbp - 160 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 160 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 160 + 0]
		mov [rsp + 0], r10
	; Moving 24 bytes from rsp + 24 to rsp + 32
		mov r10, [rsp + 24 + 16]
		mov [rsp + 32 + 16], r10
		mov r10, [rsp + 24 + 8]
		mov [rsp + 32 + 8], r10
		mov r10, [rsp + 24 + 0]
		mov [rsp + 32 + 0], r10
	add rsp, 32
.jump165:
	call _get_time
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 24]
	subsd xmm0, xmm1
	call _print_time
	add rsp, 184 ; Local variables
	pop r12
	pop rbp
	ret

