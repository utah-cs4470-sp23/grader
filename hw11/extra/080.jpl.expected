global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: db `non-positive loop bound`, 0
const1: dq 0
const2: dq 175
const3: dq 644
const4: dq 997
const5: dq 740
const6: db `mod by zero`, 0
const7: dq 82
const8: dq 63.49
const9: dq 211
const10: db `overflow computing array size`, 0
const11: dq 1
const12: dq 849
const13: dq 792
const14: db `negative array index`, 0
const15: db `index too large`, 0
const16: db `(IntType)`, 0
const17: dq 544
const18: dq 27.03
const19: dq 928
const20: dq 101
const21: db `(FloatType)`, 0
const22: dq 932
const23: dq 402
const24: dq 652
const25: dq 471
const26: dq 549
const27: dq 91.07
const28: dq 90.92
const29: dq 154
const30: dq 838
const31: dq 62.38
const32: dq 49.88
const33: db `e.png`, 0
const34: dq 55.71
const35: dq 134
const36: db `divide by zero`, 0
const37: dq 299
const38: dq 80.07
const39: dq 231
const40: dq 52.78
const41: dq 745
const42: dq 460
const43: dq 1.82
const44: dq 31.29
const45: dq 13.39
const46: dq 99.2
const47: dq 826
const48: dq 8.47
const49: dq 140
const50: dq 90.63
const51: dq 77.18
const52: dq 23.69
const53: dq 74.04
const54: dq 561
const55: dq 771
const56: dq 93.72
const57: dq 5.59
const58: db `r`, 0
const59: dq 98.69
const60: dq 45.19
const61: dq 33.63
const62: dq 235
const63: dq 91.85
const64: dq 284
const65: dq 7.81

section .text
f:
_f:
	push rbp
	mov rbp, rsp
	push rdi
	push rsi
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for j
	mov rax, [rel const1] ; False
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	pop rax
	cmp rax, 0
	je .jump95
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump97
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	jmp .jump98
.jump97:
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
.jump98:
	jmp .jump96
.jump95:
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
.jump96:
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	mov rax, [rsp]
	cmp rax, 0
	jg .jump99
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump99:
	; Computing bound for i
	mov rax, [rel const34] ; 55.71
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump100
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump100:
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const35] ; 134
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump101
	sub rsp, 8 ; Align stack
	lea rdi, [rel const36] ; divide by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump101:
	cqo
	idiv r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump102
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; mod by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump102:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump103
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump103:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by (- (- (d % (134 / argnum))))
	jno .jump104
	lea rdi, [rel const10] ; overflow computing array size
	call _fail_assertion
.jump104:
	imul rdi, [rsp + 0 + 8] ; multiply by to_int(cos(asin(exp(55.71))))
	jno .jump105
	lea rdi, [rel const10] ; overflow computing array size
	call _fail_assertion
.jump105:
	imul rdi, [rsp + 0 + 16] ; multiply by (if {false, {}}{0} then (if g then {c} else {argnum}) else {argnum}){0}
	jno .jump106
	lea rdi, [rel const10] ; overflow computing array size
	call _fail_assertion
.jump106:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
.jump107: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump109 ; If j >= bound, ...
	mov qword [rsp + 16], 0 ; j = 0
	add qword [rsp + 8], 1 ; i++
.jump109:
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump110 ; If i >= bound, ...
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
.jump110:
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump108 ; If h >= bound, break
.jump111:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment j
	add qword [rsp + 16], 1
	jmp .jump107
.jump108: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for j
	mov rax, [rel const37] ; 299
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump112
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump112:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	mov rax, [rsp]
	cmp rax, 0
	jg .jump113
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump113:
	; Computing total size of heap memory to allocate
	mov rdi, 136 ; sizeof {{bool[,],float[,]},{int[],{int,int[]},float[,]},float[,]}
	imul rdi, [rsp + 0 + 0] ; multiply by {c}{0}
	jno .jump114
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump114:
	imul rdi, [rsp + 0 + 8] ; multiply by 299
	jno .jump115
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump115:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
.jump116: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump118 ; If j >= bound, ...
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
.jump118:
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump117 ; If i >= bound, break
.jump119:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	; Moving 24 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 48 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	; Moving 24 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 16]
		mov [rsp + 8 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 8 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	mov rax, [rel const11] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump120
	sub rsp, 24
	; Moving 24 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 48 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	jmp .jump121
.jump120:
	sub rsp, 24
	; Moving 24 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 48 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
.jump121:
	sub rsp, 16
	; Moving 16 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump122
	sub rsp, 24
	; Moving 24 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 48 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	jmp .jump123
.jump122:
	sub rsp, 24
	; Moving 24 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 48 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
.jump123:
	sub rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rsi
	lea rdi, [rsp + 0]
	call _f
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 152] ; No overflow if indices in bounds
	add rax, [rsp + 136]
	imul rax, [rsp + 160] ; No overflow if indices in bounds
	add rax, [rsp + 144]
	imul rax, 136
	add rax, [rsp + 168]
	; Move body (136 bytes) to index
	; Moving 136 bytes from rsp to rax
		mov r10, [rsp + 128]
		mov [rax + 128], r10
		mov r10, [rsp + 120]
		mov [rax + 120], r10
		mov r10, [rsp + 112]
		mov [rax + 112], r10
		mov r10, [rsp + 104]
		mov [rax + 104], r10
		mov r10, [rsp + 96]
		mov [rax + 96], r10
		mov r10, [rsp + 88]
		mov [rax + 88], r10
		mov r10, [rsp + 80]
		mov [rax + 80], r10
		mov r10, [rsp + 72]
		mov [rax + 72], r10
		mov r10, [rsp + 64]
		mov [rax + 64], r10
		mov r10, [rsp + 56]
		mov [rax + 56], r10
		mov r10, [rsp + 48]
		mov [rax + 48], r10
		mov r10, [rsp + 40]
		mov [rax + 40], r10
		mov r10, [rsp + 32]
		mov [rax + 32], r10
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 136
	; Increment j
	add qword [rsp + 8], 1
	jmp .jump116
.jump117: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump124
	sub rsp, 8 ; Align stack
	mov rax, [rel const38] ; 80.07
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for i
	mov rax, [rel const39] ; 231
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump126
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump126:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
.jump127: ; Begin body of loop
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump128 ; If i >= bound, break
.jump129:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment i
	add qword [rsp + 0], 1
	jmp .jump127
.jump128: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	jmp .jump125
.jump124:
	mov rax, [rel const40] ; 52.78
	push rax
	mov rax, [rel const41] ; 745
	push rax
.jump125:
	; Moving 8 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump130
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump130:
	cmp rax, [rsp + 16]
	jl .jump131
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump131:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump132
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump132:
	cmp rax, [rsp + 24]
	jl .jump133
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump133:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 136
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 136
	; Moving 136 bytes from rax to rsp
		mov r10, [rax + 128]
		mov [rsp + 128], r10
		mov r10, [rax + 120]
		mov [rsp + 120], r10
		mov r10, [rax + 112]
		mov [rsp + 112], r10
		mov r10, [rax + 104]
		mov [rsp + 104], r10
		mov r10, [rax + 96]
		mov [rsp + 96], r10
		mov r10, [rax + 88]
		mov [rsp + 88], r10
		mov r10, [rax + 80]
		mov [rsp + 80], r10
		mov r10, [rax + 72]
		mov [rsp + 72], r10
		mov r10, [rax + 64]
		mov [rsp + 64], r10
		mov r10, [rax + 56]
		mov [rsp + 56], r10
		mov r10, [rax + 48]
		mov [rsp + 48], r10
		mov r10, [rax + 40]
		mov [rsp + 40], r10
		mov r10, [rax + 32]
		mov [rsp + 32], r10
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	; Moving 0 bytes from rsp + 24 to rsp + 24
	add rsp, 24
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for y
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for z
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump134
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump134:
	; Computing bound for y
	sub rsp, 16
	; Moving 16 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 184 to rsp
		mov r10, [rbp - 184 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump135
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump135:
	cmp rax, [rsp + 8]
	jl .jump136
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump136:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump137
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump137:
	; Computing bound for x
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for x
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump138
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump138:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize x to 0
	mov rax, 0
	push rax
.jump139: ; Begin body of loop
	; Compare x to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump140 ; If x >= bound, break
.jump141:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment x
	add qword [rsp + 0], 1
	jmp .jump139
.jump140: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump142
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump142:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize z to 0
	mov rax, 0
	push rax
	; Initialize y to 0
	mov rax, 0
	push rax
	; Initialize x to 0
	mov rax, 0
	push rax
.jump143: ; Begin body of loop
	; Compare z to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump145 ; If z >= bound, ...
	mov qword [rsp + 16], 0 ; z = 0
	add qword [rsp + 8], 1 ; y++
.jump145:
	; Compare y to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump146 ; If y >= bound, ...
	mov qword [rsp + 8], 0 ; y = 0
	add qword [rsp + 0], 1 ; x++
.jump146:
	; Compare x to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump144 ; If x >= bound, break
.jump147:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 248 to rsp
		mov r10, [rbp - 248 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment z
	add qword [rsp + 16], 1
	jmp .jump143
.jump144: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump148
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump148:
	; Computing bound for x
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump149
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump149:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof int[,]
	imul rdi, [rsp + 0 + 0] ; multiply by p
	jno .jump150
	lea rdi, [rel const10] ; overflow computing array size
	call _fail_assertion
.jump150:
imul rdi, [rsp + 0 + 8] ; multiply by (sum[x : (sum[x : t] p), y : a[j], z : v] x)
	jno .jump151
	lea rdi, [rel const10] ; overflow computing array size
	call _fail_assertion
.jump151:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize y to 0
	mov rax, 0
	push rax
	; Initialize x to 0
	mov rax, 0
	push rax
.jump152: ; Begin body of loop
	; Compare y to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump154 ; If y >= bound, ...
	mov qword [rsp + 8], 0 ; y = 0
	add qword [rsp + 0], 1 ; x++
.jump154:
	; Compare x to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump153 ; If x >= bound, break
.jump155:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for A
	sub rsp, 8
	; Moving 8 bytes from rbp - 184 to rsp
		mov r10, [rbp - 184 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump156
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump156:
	; Computing bound for z
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump157
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump157:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump158
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump158:
	imul rdi, [rsp + 0 + 8] ; multiply by j
	jno .jump159
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump159:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize A to 0
	mov rax, 0
	push rax
	; Initialize z to 0
	mov rax, 0
	push rax
.jump160: ; Begin body of loop
	; Compare A to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump162 ; If A >= bound, ...
	mov qword [rsp + 8], 0 ; A = 0
	add qword [rsp + 0], 1 ; z++
.jump162:
	; Compare z to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump161 ; If z >= bound, break
.jump163:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment A
	add qword [rsp + 8], 1
	jmp .jump160
.jump161: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 24
	; Moving 24 bytes from rbp - 184 to rsp
		mov r10, [rbp - 184 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 184 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 184 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 184 to rsp
		mov r10, [rbp - 184 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const42] ; 460
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump164
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump164:
	cmp rax, [rsp + 16]
	jl .jump165
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump165:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump166
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump166:
	cmp rax, [rsp + 24]
	jl .jump167
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump167:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Moving 24 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 16]
		mov [rsp + 8 + 16], r10
		mov r10, [rsp + 8 + 8]
		mov [rsp + 8 + 8], r10
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 24
	add rax, [rsp + 56]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment y
	add qword [rsp + 8], 1
	jmp .jump152
.jump153: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 184 to rsp
		mov r10, [rbp - 184 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump168
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump168:
	cmp rax, [rsp + 16]
	jl .jump169
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump169:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump170
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump170:
	cmp rax, [rsp + 24]
	jl .jump171
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump171:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 24
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for B
	sub rsp, 8
	; Moving 8 bytes from rbp - 184 to rsp
		mov r10, [rbp - 184 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump172
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump172:
	; Computing bound for A
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump173
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump173:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by w
	jno .jump174
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump174:
	imul rdi, [rsp + 0 + 8] ; multiply by (- j)
	jno .jump175
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump175:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize B to 0
	mov rax, 0
	push rax
	; Initialize A to 0
	mov rax, 0
	push rax
.jump176: ; Begin body of loop
	; Compare B to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump178 ; If B >= bound, ...
	mov qword [rsp + 8], 0 ; B = 0
	add qword [rsp + 0], 1 ; A++
.jump178:
	; Compare A to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump177 ; If A >= bound, break
.jump179:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 184 to rsp
		mov r10, [rbp - 184 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment B
	add qword [rsp + 8], 1
	jmp .jump176
.jump177: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rax, [rbp - 8] ; Address to write return value into
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 232 ; Local variables
	pop rbp
	ret

r:
_r:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	; Moving 8 bytes from r12 - 128 to rsp
		mov r10, [r12 - 128 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump274
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setg al
	and rax, 1
	push rax
	jmp .jump275
.jump274:
	mov rax, [rel const59] ; 98.69
	push rax
	mov rax, [rel const60] ; 45.19
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const61] ; 33.63
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump276
	call _r
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	pop rax
.jump276:
	push rax
	pop rax
	cmp rax, 0
	je .jump277
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 152 to rsp
		mov r10, [r12 - 152 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	jne .jump279
	mov rax, [rel const11] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
.jump279:
	push rax
	sub rsp, 8 ; Align stack
	call _r
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	jmp .jump278
.jump277:
	mov rax, [rel const11] ; True
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	pop rax
	xor rax, 1
	push rax
.jump278:
.jump275:
	pop rax
	add rsp, 0 ; Local variables
	pop rbp
	ret
	sub rsp, 16
	; Moving 16 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const11] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump280
	sub rsp, 8
	; Moving 8 bytes from r12 - 152 to rsp
		mov r10, [r12 - 152 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 128 to rsp
		mov r10, [r12 - 128 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump281
	sub rsp, 8 ; Align stack
	lea rdi, [rel const36] ; divide by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump281:
	cqo
	idiv r10
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
.jump280:
	push rax
	pop rax
	cmp rax, 0
	jne .jump282
	mov rax, [rel const11] ; True
	push rax
	pop rax
.jump282:
	push rax
	pop rax
	cmp rax, 0
	je .jump283
	mov rax, [rel const11] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump285
	mov rax, [rel const1] ; False
	push rax
	jmp .jump286
.jump285:
	call _r
	push rax
.jump286:
	pop rax
	xor rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump287
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump288
.jump287:
	mov rax, [rel const1] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump289
	sub rsp, 16
	; Moving 16 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	jmp .jump290
.jump289:
	mov rax, [rel const11] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump291
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump292
.jump291:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for u
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump293
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump293:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by d
	jno .jump294
	lea rdi, [rel const10] ; overflow computing array size
	call _fail_assertion
.jump294:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize u to 0
	mov rax, 0
	push rax
.jump295: ; Begin body of loop
	; Compare u to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump296 ; If u >= bound, break
.jump297:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment u
	add qword [rsp + 0], 1
	jmp .jump295
.jump296: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
.jump292:
.jump290:
.jump288:
	jmp .jump284
.jump283:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for u
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump298
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump298:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by m
	jno .jump299
	lea rdi, [rel const10] ; overflow computing array size
	call _fail_assertion
.jump299:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize u to 0
	mov rax, 0
	push rax
.jump300: ; Begin body of loop
	; Compare u to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump301 ; If u >= bound, break
.jump302:
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for x
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump303
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump303:
	; Computing bound for w
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump304
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump304:
	; Computing bound for v
	mov rax, [rel const11] ; True
	push rax
	sub rsp, 8 ; Align stack
	call _r
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump305
	sub rsp, 8
	; Moving 8 bytes from r12 - 144 to rsp
		mov r10, [r12 - 144 + 0]
		mov [rsp + 0], r10
	jmp .jump306
.jump305:
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
.jump306:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump307
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump307:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize x to 0
	mov rax, 0
	push rax
	; Initialize w to 0
	mov rax, 0
	push rax
	; Initialize v to 0
	mov rax, 0
	push rax
.jump308: ; Begin body of loop
	; Compare x to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump310 ; If x >= bound, ...
	mov qword [rsp + 16], 0 ; x = 0
	add qword [rsp + 8], 1 ; w++
.jump310:
	; Compare w to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump311 ; If w >= bound, ...
	mov qword [rsp + 8], 0 ; w = 0
	add qword [rsp + 0], 1 ; v++
.jump311:
	; Compare v to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump309 ; If v >= bound, break
.jump312:
	; Compute loop body
	mov rax, [rel const62] ; 235
	push rax
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment x
	add qword [rsp + 16], 1
	jmp .jump308
.jump309: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment u
	add qword [rsp + 0], 1
	jmp .jump300
.jump301: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
.jump284:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for y
	sub rsp, 8
	; Moving 8 bytes from r12 - 144 to rsp
		mov r10, [r12 - 144 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump313
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump313:
	; Computing bound for x
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump314
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump314:
	; Computing bound for w
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump315
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump315:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by v
	jno .jump316
	lea rdi, [rel const10] ; overflow computing array size
	call _fail_assertion
.jump316:
	imul rdi, [rsp + 0 + 8] ; multiply by d
	jno .jump317
	lea rdi, [rel const10] ; overflow computing array size
	call _fail_assertion
.jump317:
	imul rdi, [rsp + 0 + 16] ; multiply by p
	jno .jump318
	lea rdi, [rel const10] ; overflow computing array size
	call _fail_assertion
.jump318:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize y to 0
	mov rax, 0
	push rax
	; Initialize x to 0
	mov rax, 0
	push rax
	; Initialize w to 0
	mov rax, 0
	push rax
.jump319: ; Begin body of loop
	; Compare y to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump321 ; If y >= bound, ...
	mov qword [rsp + 16], 0 ; y = 0
	add qword [rsp + 8], 1 ; x++
.jump321:
	; Compare x to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump322 ; If x >= bound, ...
	mov qword [rsp + 8], 0 ; x = 0
	add qword [rsp + 0], 1 ; w++
.jump322:
	; Compare w to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump320 ; If w >= bound, break
.jump323:
	; Compute loop body
	sub rsp, 8 ; Align stack
	mov rax, [rel const63] ; 91.85
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment y
	add qword [rsp + 16], 1
	jmp .jump319
.jump320: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	; Moving 32 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 24]
		mov [rsp + 8 + 24], r10
		mov r10, [rsp + 8 + 16]
		mov [rsp + 8 + 16], r10
		mov r10, [rsp + 8 + 8]
		mov [rsp + 8 + 8], r10
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for C
	mov rax, [rel const64] ; 284
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump324
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump324:
	; Computing bound for B
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump325
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump325:
	; Computing bound for A
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump326
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump326:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof float[,]
	imul rdi, [rsp + 0 + 0] ; multiply by d
	jno .jump327
	lea rdi, [rel const10] ; overflow computing array size
	call _fail_assertion
.jump327:
	imul rdi, [rsp + 0 + 8] ; multiply by y
	jno .jump328
	lea rdi, [rel const10] ; overflow computing array size
	call _fail_assertion
.jump328:
	imul rdi, [rsp + 0 + 16] ; multiply by 284
	jno .jump329
	lea rdi, [rel const10] ; overflow computing array size
	call _fail_assertion
.jump329:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize C to 0
	mov rax, 0
	push rax
	; Initialize B to 0
	mov rax, 0
	push rax
	; Initialize A to 0
	mov rax, 0
	push rax
.jump330: ; Begin body of loop
	; Compare C to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump332 ; If C >= bound, ...
	mov qword [rsp + 16], 0 ; C = 0
	add qword [rsp + 8], 1 ; B++
.jump332:
	; Compare B to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump333 ; If B >= bound, ...
	mov qword [rsp + 8], 0 ; B = 0
	add qword [rsp + 0], 1 ; A++
.jump333:
	; Compare A to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump331 ; If A >= bound, break
.jump334:
	; Compute loop body
	sub rsp, 24
	; Moving 24 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 48 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 24
	add rax, [rsp + 72]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment C
	add qword [rsp + 16], 1
	jmp .jump330
.jump331: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump335
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump335:
	cmp rax, [rsp + 24]
	jl .jump336
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump336:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump337
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump337:
	cmp rax, [rsp + 32]
	jl .jump338
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump338:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump339
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump339:
	cmp rax, [rsp + 40]
	jl .jump340
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump340:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 24
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump341
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump341:
	cmp rax, [rsp + 16]
	jl .jump342
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump342:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump343
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump343:
	cmp rax, [rsp + 24]
	jl .jump344
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump344:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 32
	; Moving 32 bytes from r12 - 104 to rsp
		mov r10, [r12 - 104 + 24]
		mov [rsp + 24], r10
		mov r10, [r12 - 104 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 104 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 128 to rsp
		mov r10, [r12 - 128 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump345
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump345:
	cmp rax, [rsp + 24]
	jl .jump346
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump346:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump347
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump347:
	cmp rax, [rsp + 32]
	jl .jump348
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump348:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump349
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump349:
	cmp rax, [rsp + 40]
	jl .jump350
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump350:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const65] ; 7.81
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	pop rax
	add rsp, 64 ; Local variables
	pop rbp
	ret

jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for b
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump1:
	; Computing bound for b
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump2
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump2:
	; Computing bound for a
	mov rax, [rel const1] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump3
	mov rax, [rel const2] ; 175
	push rax
	jmp .jump4
.jump3:
	mov rax, [rel const3] ; 644
	push rax
.jump4:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump5
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump5:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
	; Initialize a to 0
	mov rax, 0
	push rax
.jump6: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump8 ; If c >= bound, ...
	mov qword [rsp + 16], 0 ; c = 0
	add qword [rsp + 8], 1 ; b++
.jump8:
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump9 ; If b >= bound, ...
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
.jump9:
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump7 ; If a >= bound, break
.jump10:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment c
	add qword [rsp + 16], 1
	jmp .jump6
.jump7: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump11
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump11:
	; Computing bound for a
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for a
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump12
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump12:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize a to 0
	mov rax, 0
	push rax
.jump13: ; Begin body of loop
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump14 ; If a >= bound, break
.jump15:
	; Compute loop body
	mov rax, [rel const4] ; 997
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment a
	add qword [rsp + 0], 1
	jmp .jump13
.jump14: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump16
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump16:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize b to 0
	mov rax, 0
	push rax
	; Initialize a to 0
	mov rax, 0
	push rax
.jump17: ; Begin body of loop
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump19 ; If b >= bound, ...
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
.jump19:
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump18 ; If a >= bound, break
.jump20:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment b
	add qword [rsp + 8], 1
	jmp .jump17
.jump18: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rel const5] ; 740
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump21
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; mod by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump21:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const7] ; 82
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump22
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; mod by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump22:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump23
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump23:
	; Computing bound for b
	mov rax, [rel const8] ; 63.49
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump24
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump24:
	; Computing bound for a
	mov rax, [rel const9] ; 211
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump25
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump25:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by (- 211)
	jno .jump26
	lea rdi, [rel const10] ; overflow computing array size
	call _fail_assertion
.jump26:
	imul rdi, [rsp + 0 + 8] ; multiply by to_int(63.49)
	jno .jump27
	lea rdi, [rel const10] ; overflow computing array size
	call _fail_assertion
.jump27:
	imul rdi, [rsp + 0 + 16] ; multiply by (82 % argnum)
	jno .jump28
	lea rdi, [rel const10] ; overflow computing array size
	call _fail_assertion
.jump28:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
	; Initialize a to 0
	mov rax, 0
	push rax
.jump29: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump31 ; If c >= bound, ...
	mov qword [rsp + 16], 0 ; c = 0
	add qword [rsp + 8], 1 ; b++
.jump31:
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump32 ; If b >= bound, ...
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
.jump32:
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump30 ; If a >= bound, break
.jump33:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment c
	add qword [rsp + 16], 1
	jmp .jump29
.jump30: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rel const11] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump34
	mov rax, [rel const12] ; 849
	push rax
	jmp .jump35
.jump34:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for b
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump36
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump36:
	; Computing bound for a
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump37
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump37:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize b to 0
	mov rax, 0
	push rax
	; Initialize a to 0
	mov rax, 0
	push rax
.jump38: ; Begin body of loop
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump40 ; If b >= bound, ...
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
.jump40:
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump39 ; If a >= bound, break
.jump41:
	; Compute loop body
	mov rax, [rel const13] ; 792
	push rax
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment b
	add qword [rsp + 8], 1
	jmp .jump38
.jump39: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
.jump35:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump42
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump42:
	cmp rax, [rsp + 24]
	jl .jump43
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump43:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump44
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump44:
	cmp rax, [rsp + 32]
	jl .jump45
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump45:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump46
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump46:
	cmp rax, [rsp + 40]
	jl .jump47
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump47:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	lea rdi, [rel const16] ; (IntType)
	lea rsi, [rsp]
	call _show
	add rsp, 8
	sub rsp, 8 ; Align stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for a
	mov rax, [rel const17] ; 544
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump48
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump48:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize a to 0
	mov rax, 0
	push rax
.jump49: ; Begin body of loop
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump50 ; If a >= bound, break
.jump51:
	; Compute loop body
	sub rsp, 8 ; Align stack
	mov rax, [rel const18] ; 27.03
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 16] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 16], xmm0 ; Save sum
	; Increment a
	add qword [rsp + 0], 1
	jmp .jump49
.jump50: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	sub rsp, 8 ; Align stack
	mov rax, [rel const1] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump52
	mov rax, [rel const19] ; 928
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	jmp .jump53
.jump52:
	mov rax, [rel const20] ; 101
	push rax
	pop rax
	neg rax
	push rax
.jump53:
	pop rdi
	call _to_float
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	lea rdi, [rel const21] ; (FloatType)
	lea rsi, [rsp]
	call _show
	add rsp, 8
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const1] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump54
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	jmp .jump55
.jump54:
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const22] ; 932
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
.jump55:
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump56
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for c
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for b
	mov rax, [rel const23] ; 402
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump58
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump58:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize b to 0
	mov rax, 0
	push rax
.jump59: ; Begin body of loop
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump60 ; If b >= bound, break
.jump61:
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for d
	mov rax, [rel const24] ; 652
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump62
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump62:
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump63
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump63:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump64: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump66 ; If d >= bound, ...
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
.jump66:
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump65 ; If c >= bound, break
.jump67:
	; Compute loop body
	mov rax, [rel const25] ; 471
	push rax
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment d
	add qword [rsp + 8], 1
	jmp .jump64
.jump65: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment b
	add qword [rsp + 0], 1
	jmp .jump59
.jump60: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump68
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump68:
	; Computing bound for c
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const26] ; 549
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump69
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump69:
	cmp rax, [rsp + 8]
	jl .jump70
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump70:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump71
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump71:
	; Computing bound for b
	mov rax, [rel const27] ; 91.07
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump72
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump72:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump73: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump75 ; If d >= bound, ...
	mov qword [rsp + 16], 0 ; d = 0
	add qword [rsp + 8], 1 ; c++
.jump75:
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump76 ; If c >= bound, ...
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
.jump76:
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump74 ; If b >= bound, break
.jump77:
	; Compute loop body
	mov rax, [rel const28] ; 90.92
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment d
	add qword [rsp + 16], 1
	jmp .jump73
.jump74: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump78
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump78:
	; Computing bound for b
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump79
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; mod by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump79:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const29] ; 154
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump80
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump80:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by ((- 154) * (argnum % argnum))
	jno .jump81
	lea rdi, [rel const10] ; overflow computing array size
	call _fail_assertion
.jump81:
imul rdi, [rsp + 0 + 8] ; multiply by ((sum[b : to_int(91.07), c : args[549], d : argnum] to_int(90.92)) + (sum[b : (- 402)] (sum[c : b, d : 652] 471)))
	jno .jump82
	lea rdi, [rel const10] ; overflow computing array size
	call _fail_assertion
.jump82:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump83: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump85 ; If c >= bound, ...
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
.jump85:
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump84 ; If b >= bound, break
.jump86:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment c
	add qword [rsp + 8], 1
	jmp .jump83
.jump84: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump57
.jump56:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump87
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump87:
	; Computing bound for b
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const30] ; 838
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	mov rax, [rsp]
	cmp rax, 0
	jg .jump88
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump88:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by {{}, (838 + argnum)}{1}
	jno .jump89
	lea rdi, [rel const10] ; overflow computing array size
	call _fail_assertion
.jump89:
	imul rdi, [rsp + 0 + 8] ; multiply by (- to_int(to_float(argnum)))
	jno .jump90
	lea rdi, [rel const10] ; overflow computing array size
	call _fail_assertion
.jump90:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump91: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump93 ; If c >= bound, ...
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
.jump93:
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump92 ; If b >= bound, break
.jump94:
	; Compute loop body
	mov rax, [rel const31] ; 62.38
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const32] ; 49.88
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment c
	add qword [rsp + 8], 1
	jmp .jump91
.jump92: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump57:
	sub rsp, 24
	lea rdi, [rsp]
	sub rsp, 8 ; Align stack
	lea rsi, [rel const33] ; e.png
	call _read_image
	add rsp, 8 ; Remove alignment
	sub rsp, 8 ; Align stack
	mov rax, [rel const43] ; 1.82
	push rax
	mov rax, [rel const44] ; 31.29
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const45] ; 13.39
	push rax
	sub rsp, 16
	; Moving 16 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 16 to rsp + 24
		mov r10, [rsp + 16 + 0]
		mov [rsp + 24 + 0], r10
	add rsp, 24
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump180
	mov rax, [rel const11] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump181
	mov rax, [rel const11] ; True
	push rax
	jmp .jump182
.jump181:
	mov rax, [rel const11] ; True
	push rax
.jump182:
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	pop rax
.jump180:
	push rax
	pop rax
	cmp rax, 0
	je .jump183
	sub rsp, 8 ; Align stack
	mov rax, [rel const46] ; 99.2
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump185
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump187
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump187:
	; Computing bound for h
	mov rax, [rel const47] ; 826
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump188
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump188:
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump189
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump189:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by c
	jno .jump190
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump190:
	imul rdi, [rsp + 0 + 8] ; multiply by 826
	jno .jump191
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump191:
	imul rdi, [rsp + 0 + 16] ; multiply by d
	jno .jump192
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump192:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
.jump193: ; Begin body of loop
	; Compare i to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump195 ; If i >= bound, ...
	mov qword [rsp + 16], 0 ; i = 0
	add qword [rsp + 8], 1 ; h++
.jump195:
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump196 ; If h >= bound, ...
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
.jump196:
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump194 ; If g >= bound, break
.jump197:
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump198
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump198:
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from rbp - 112 to rsp
		mov r10, [rbp - 112 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump199
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump199:
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump200
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump200:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize l to 0
	mov rax, 0
	push rax
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
.jump201: ; Begin body of loop
	; Compare l to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump203 ; If l >= bound, ...
	mov qword [rsp + 16], 0 ; l = 0
	add qword [rsp + 8], 1 ; k++
.jump203:
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump204 ; If k >= bound, ...
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
.jump204:
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump202 ; If j >= bound, break
.jump205:
	; Compute loop body
	sub rsp, 8 ; Align stack
	mov rax, [rel const48] ; 8.47
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 48] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment l
	add qword [rsp + 16], 1
	jmp .jump201
.jump202: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment i
	add qword [rsp + 16], 1
	jmp .jump193
.jump194: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump186
.jump185:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump206
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; mod by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump206:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump207
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump207:
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump208
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump208:
	; Computing bound for g
	mov rax, [rel const49] ; 140
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump209
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump209:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by 140
	jno .jump210
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump210:
	imul rdi, [rsp + 0 + 8] ; multiply by d
	jno .jump211
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump211:
	imul rdi, [rsp + 0 + 16] ; multiply by ((d % c) * argnum)
	jno .jump212
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump212:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
.jump213: ; Begin body of loop
	; Compare i to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump215 ; If i >= bound, ...
	mov qword [rsp + 16], 0 ; i = 0
	add qword [rsp + 8], 1 ; h++
.jump215:
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump216 ; If h >= bound, ...
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
.jump216:
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump214 ; If g >= bound, break
.jump217:
	; Compute loop body
	mov rax, [rel const50] ; 90.63
	push rax
	mov rax, [rel const51] ; 77.18
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const52] ; 23.69
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment i
	add qword [rsp + 16], 1
	jmp .jump213
.jump214: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump186:
	jmp .jump184
.jump183:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump218
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump218:
	; Computing bound for h
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump219
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump219:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize g to 0
	mov rax, 0
	push rax
.jump220: ; Begin body of loop
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump221 ; If g >= bound, break
.jump222:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 112 to rsp
		mov r10, [rbp - 112 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment g
	add qword [rsp + 0], 1
	jmp .jump220
.jump221: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump223
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump223:
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump224
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump224:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof float[,,]
	imul rdi, [rsp + 0 + 0] ; multiply by c
	jno .jump225
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump225:
imul rdi, [rsp + 0 + 8] ; multiply by (sum[g : d] (- g))
	jno .jump226
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump226:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump227
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump227:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
.jump228: ; Begin body of loop
	; Compare i to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump230 ; If i >= bound, ...
	mov qword [rsp + 16], 0 ; i = 0
	add qword [rsp + 8], 1 ; h++
.jump230:
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump231 ; If h >= bound, ...
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
.jump231:
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump229 ; If g >= bound, break
.jump232:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump233
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump233:
	; Computing bound for k
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump234
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump234:
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump235
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump235:
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - 112 to rsp
		mov r10, [rbp - 112 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump236
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump236:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize l to 0
	mov rax, 0
	push rax
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
.jump237: ; Begin body of loop
	; Compare l to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump239 ; If l >= bound, ...
	mov qword [rsp + 16], 0 ; l = 0
	add qword [rsp + 8], 1 ; k++
.jump239:
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump240 ; If k >= bound, ...
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
.jump240:
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump238 ; If j >= bound, break
.jump241:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment l
	add qword [rsp + 16], 1
	jmp .jump237
.jump238: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump242
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump242:
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump243
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump243:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by (- d)
	jno .jump244
	lea rdi, [rel const10] ; overflow computing array size
	call _fail_assertion
.jump244:
imul rdi, [rsp + 0 + 8] ; multiply by (sum[j : i, k : argnum, l : d] h)
	jno .jump245
	lea rdi, [rel const10] ; overflow computing array size
	call _fail_assertion
.jump245:
	imul rdi, [rsp + 0 + 16] ; multiply by h
	jno .jump246
	lea rdi, [rel const10] ; overflow computing array size
	call _fail_assertion
.jump246:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize l to 0
	mov rax, 0
	push rax
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
.jump247: ; Begin body of loop
	; Compare l to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump249 ; If l >= bound, ...
	mov qword [rsp + 16], 0 ; l = 0
	add qword [rsp + 8], 1 ; k++
.jump249:
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump250 ; If k >= bound, ...
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
.jump250:
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump248 ; If j >= bound, break
.jump251:
	; Compute loop body
	mov rax, [rel const53] ; 74.04
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment l
	add qword [rsp + 16], 1
	jmp .jump247
.jump248: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, [rsp + 72] ; No overflow if indices in bounds
	add rax, [rsp + 48]
	imul rax, 32
	add rax, [rsp + 80]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment i
	add qword [rsp + 16], 1
	jmp .jump228
.jump229: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const11] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump252
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	jmp .jump253
.jump252:
	mov rax, [rel const54] ; 561
	push rax
.jump253:
	mov rax, [rel const55] ; 771
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump254
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump254:
	cmp rax, [rsp + 24]
	jl .jump255
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump255:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump256
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump256:
	cmp rax, [rsp + 32]
	jl .jump257
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump257:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump258
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump258:
	cmp rax, [rsp + 40]
	jl .jump259
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump259:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 32
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 32
	; Moving 32 bytes from rax to rsp
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump184:
	sub rsp, 24
	; Moving 24 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 72 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump260
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump260:
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump261
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump261:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
.jump262: ; Begin body of loop
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump264 ; If o >= bound, ...
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
.jump264:
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump263 ; If n >= bound, break
.jump265:
	; Compute loop body
	mov rax, [rel const56] ; 93.72
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 32] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 32], xmm0 ; Save sum
	; Increment o
	add qword [rsp + 8], 1
	jmp .jump262
.jump263: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	sub rsp, 8 ; Align stack
	mov rax, [rel const57] ; 5.59
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump266
	mov rax, [rel const1] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump268
	mov rax, [rel const11] ; True
	push rax
	jmp .jump269
.jump268:
	mov rax, [rel const11] ; True
	push rax
.jump269:
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	jmp .jump267
.jump266:
	mov rax, [rel const1] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump270
	mov rax, [rel const1] ; False
	push rax
	jmp .jump271
.jump270:
	mov rax, [rel const1] ; False
	push rax
.jump271:
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
.jump267:
	; Moving 8 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	pop rax
	cmp rax, 0
	je .jump272
	sub rsp, 16
	; Moving 16 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	; Moving 24 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 48 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	; Moving 48 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 40]
		mov [rsp + 0 + 40], r10
		mov r10, [rsp + 0 + 32]
		mov [rsp + 0 + 32], r10
		mov r10, [rsp + 0 + 24]
		mov [rsp + 0 + 24], r10
		mov r10, [rsp + 0 + 16]
		mov [rsp + 0 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	; Moving 24 bytes from rsp + 0 to rsp + 24
		mov r10, [rsp + 0 + 16]
		mov [rsp + 24 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 24 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 24 + 0], r10
	add rsp, 24
	jmp .jump273
.jump272:
	sub rsp, 24
	; Moving 24 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 48 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
.jump273:
	lea rdi, [rel const58] ; r
	sub rsp, 8 ; Align stack
	call _print
	add rsp, 8 ; Remove alignment
	add rsp, 144 ; Local variables
	pop r12
	pop rbp
	ret

