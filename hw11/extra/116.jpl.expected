global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: db `non-positive loop bound`, 0
const1: dq 561
const2: dq 78.77
const3: dq 103
const4: dq 773
const5: dq 50.51
const6: dq 0
const7: dq 1
const8: dq 101
const9: dq 21
const10: dq 528
const11: db `overflow computing array size`, 0
const12: dq 187
const13: db `negative array index`, 0
const14: db `index too large`, 0
const15: dq 76
const16: dq 274
const17: dq 956
const18: dq 475
const19: dq 857
const20: dq 614
const21: dq 60
const22: dq 965
const23: dq 742
const24: dq 208
const25: dq 520
const26: dq 64.71
const27: db `divide by zero`, 0
const28: dq 347
const29: dq 442
const30: dq 214
const31: dq 68.5
const32: dq 70
const33: dq 739
const34: dq 93.43
const35: dq 17.33
const36: dq 142
const37: dq 842
const38: dq 243
const39: dq 139
const40: db `mod by zero`, 0
const41: dq 29.33
const42: dq 39.65
const43: dq 83.87
const44: dq 48.29
const45: dq 18.38
const46: dq 12
const47: dq 731
const48: dq 785
const49: dq 638
const50: dq 72
const51: dq 916
const52: dq 12.9
const53: dq 465
const54: dq 48.02
const55: dq 34.88
const56: dq 75.6
const57: dq 876
const58: dq 82.58
const59: dq 149
const60: dq 54.96
const61: dq 894
const62: dq 959
const63: dq 51.4
const64: dq 901
const65: dq 974
const66: dq 833
const67: db `(ArrayType (IntType) 1)`, 0
const68: dq 583
const69: dq 446
const70: dq 42.69
const71: db `h`, 0
const72: dq 939

section .text
a:
_a:
	push rbp
	mov rbp, rsp
	push rdi
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump1:
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const1] ; 561
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump2
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump2:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump3: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump5 ; If d >= bound, ...
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
.jump5:
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump4 ; If c >= bound, break
.jump6:
	; Compute loop body
	mov rax, [rel const2] ; 78.77
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 32] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 32], xmm0 ; Save sum
	; Increment d
	add qword [rsp + 8], 1
	jmp .jump3
.jump4: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for d
	mov rax, [rel const3] ; 103
	push rax
	mov rax, [rsp]
	; Computing bound for c
	mov rax, [rel const4] ; 773
	push rax
	mov rax, [rsp]
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump7: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump9 ; If d >= bound, ...
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
.jump9:
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump8 ; If c >= bound, break
.jump10:
	; Compute loop body
	mov rax, [rel const5] ; 50.51
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 32] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 32], xmm0 ; Save sum
	; Increment d
	add qword [rsp + 8], 1
	jmp .jump7
.jump8: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump11
	mov rax, [rel const6] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump13
	mov rax, [rel const7] ; True
	push rax
	jmp .jump14
.jump13:
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
.jump14:
	pop rax
	cmp rax, 0
	je .jump15
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	jmp .jump16
.jump15:
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
.jump16:
	pop rax
	cmp rax, 0
	je .jump17
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for e
	mov rax, [rel const8] ; 101
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump19
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump19:
	; Computing bound for d
	mov rax, [rel const7] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump20
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump21
.jump20:
	mov rax, [rel const9] ; 21
	push rax
.jump21:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump22
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump22:
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump23
	mov rax, [rel const10] ; 528
	push rax
	jmp .jump24
.jump23:
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
.jump24:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump25
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump25:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof {{},int,{}}
	imul rdi, [rsp + 0 + 0] ; multiply by (if b then 528 else argnum)
	jno .jump26
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump26:
	imul rdi, [rsp + 0 + 8] ; multiply by (if true then argnum else 21)
	jno .jump27
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump27:
	imul rdi, [rsp + 0 + 16] ; multiply by (- 101)
	jno .jump28
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump28:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump29: ; Begin body of loop
	; Compare e to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump31 ; If e >= bound, ...
	mov qword [rsp + 16], 0 ; e = 0
	add qword [rsp + 8], 1 ; d++
.jump31:
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump32 ; If d >= bound, ...
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
.jump32:
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump30 ; If c >= bound, break
.jump33:
	; Compute loop body
	mov rax, [rel const3] ; 103
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment e
	add qword [rsp + 16], 1
	jmp .jump29
.jump30: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump18
.jump17:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for e
	mov rax, [rel const12] ; 187
	push rax
	mov rax, [rsp]
	; Computing bound for d
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump34
	lea rdi, [rel const13] ; negative array index
	call _fail_assertion
.jump34:
	cmp rax, [rsp + 8]
	jl .jump35
	lea rdi, [rel const14] ; index too large
	call _fail_assertion
.jump35:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump36
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump36:
	; Computing bound for c
	mov rax, [rel const15] ; 76
	push rax
	mov rax, [rsp]
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof {{},int,{}}
	imul rdi, [rsp + 0 + 0] ; multiply by 76
	jno .jump37
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump37:
	imul rdi, [rsp + 0 + 8] ; multiply by args[argnum]
	jno .jump38
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump38:
	imul rdi, [rsp + 0 + 16] ; multiply by 187
	jno .jump39
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump39:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump40: ; Begin body of loop
	; Compare e to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump42 ; If e >= bound, ...
	mov qword [rsp + 16], 0 ; e = 0
	add qword [rsp + 8], 1 ; d++
.jump42:
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump43 ; If d >= bound, ...
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
.jump43:
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump41 ; If c >= bound, break
.jump44:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment e
	add qword [rsp + 16], 1
	jmp .jump40
.jump41: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump18:
	jmp .jump12
.jump11:
	mov rax, [rel const7] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump45
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for e
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump47
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump47:
	; Computing bound for d
	mov rax, [rel const7] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump48
	mov rax, [rel const16] ; 274
	push rax
	jmp .jump49
.jump48:
	mov rax, [rel const17] ; 956
	push rax
.jump49:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump50
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump50:
	; Computing bound for c
	mov rax, [rel const18] ; 475
	push rax
	mov rax, [rsp]
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof {{},int,{}}
	imul rdi, [rsp + 0 + 0] ; multiply by 475
	jno .jump51
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump51:
	imul rdi, [rsp + 0 + 8] ; multiply by (if true then 274 else 956)
	jno .jump52
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump52:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump53
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump53:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump54: ; Begin body of loop
	; Compare e to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump56 ; If e >= bound, ...
	mov qword [rsp + 16], 0 ; e = 0
	add qword [rsp + 8], 1 ; d++
.jump56:
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump57 ; If d >= bound, ...
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
.jump57:
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump55 ; If c >= bound, break
.jump58:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment e
	add qword [rsp + 16], 1
	jmp .jump54
.jump55: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump46
.jump45:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for e
	mov rax, [rel const19] ; 857
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump59
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump59:
	; Computing bound for d
	mov rax, [rel const20] ; 614
	push rax
	mov rax, [rsp]
	; Computing bound for c
	mov rax, [rel const21] ; 60
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump60
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump60:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof {{},int,{}}
	imul rdi, [rsp + 0 + 0] ; multiply by (- 60)
	jno .jump61
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump61:
	imul rdi, [rsp + 0 + 8] ; multiply by 614
	jno .jump62
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump62:
	imul rdi, [rsp + 0 + 16] ; multiply by (- 857)
	jno .jump63
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump63:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump64: ; Begin body of loop
	; Compare e to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump66 ; If e >= bound, ...
	mov qword [rsp + 16], 0 ; e = 0
	add qword [rsp + 8], 1 ; d++
.jump66:
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump67 ; If d >= bound, ...
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
.jump67:
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump65 ; If c >= bound, break
.jump68:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment e
	add qword [rsp + 16], 1
	jmp .jump64
.jump65: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump46:
.jump12:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for e
	mov rax, [rel const22] ; 965
	push rax
	mov rax, [rsp]
	; Computing bound for d
	mov rax, [rel const23] ; 742
	push rax
	mov rax, [rel const7] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	; Moving 8 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	mov rax, [rsp]
	cmp rax, 0
	jg .jump69
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump69:
	; Computing bound for c
	mov rax, [rel const7] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump70
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump72
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump72:
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump73
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump73:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump74
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump74:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump75
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump75:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump76: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump78 ; If d >= bound, ...
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
.jump78:
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump77 ; If c >= bound, break
.jump79:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment d
	add qword [rsp + 8], 1
	jmp .jump76
.jump77: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump80
	mov rax, [rel const24] ; 208
	push rax
	jmp .jump81
.jump80:
	mov rax, [rel const25] ; 520
	push rax
.jump81:
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump82
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump82:
	cmp rax, [rsp + 16]
	jl .jump83
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump83:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump84
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump84:
	cmp rax, [rsp + 24]
	jl .jump85
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump85:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump71
.jump70:
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
.jump71:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump86
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump86:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump87: ; Begin body of loop
	; Compare e to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump89 ; If e >= bound, ...
	mov qword [rsp + 16], 0 ; e = 0
	add qword [rsp + 8], 1 ; d++
.jump89:
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump90 ; If d >= bound, ...
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
.jump90:
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump88 ; If c >= bound, break
.jump91:
	; Compute loop body
	mov rax, [rel const26] ; 64.71
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump92
	lea rdi, [rel const27] ; divide by zero
	call _fail_assertion
.jump92:
	cqo
	idiv r10
	push rax
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment e
	add qword [rsp + 16], 1
	jmp .jump87
.jump88: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump93
	lea rdi, [rel const13] ; negative array index
	call _fail_assertion
.jump93:
	cmp rax, [rsp + 24]
	jl .jump94
	lea rdi, [rel const14] ; index too large
	call _fail_assertion
.jump94:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump95
	lea rdi, [rel const13] ; negative array index
	call _fail_assertion
.jump95:
	cmp rax, [rsp + 32]
	jl .jump96
	lea rdi, [rel const14] ; index too large
	call _fail_assertion
.jump96:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump97
	lea rdi, [rel const13] ; negative array index
	call _fail_assertion
.jump97:
	cmp rax, [rsp + 40]
	jl .jump98
	lea rdi, [rel const14] ; index too large
	call _fail_assertion
.jump98:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump99
	mov rax, [rel const6] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump101
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump103
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump103:
	; Computing bound for e
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump104
	mov rax, [rel const28] ; 347
	push rax
	jmp .jump105
.jump104:
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
.jump105:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump106
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump106:
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump107
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump107:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by c
	jno .jump108
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump108:
	imul rdi, [rsp + 0 + 8] ; multiply by (if b then 347 else argnum)
	jno .jump109
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump109:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump110
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump110:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize f to 0
	mov rax, 0
	push rax
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
.jump111: ; Begin body of loop
	; Compare f to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump113 ; If f >= bound, ...
	mov qword [rsp + 16], 0 ; f = 0
	add qword [rsp + 8], 1 ; e++
.jump113:
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump114 ; If e >= bound, ...
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
.jump114:
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump112 ; If d >= bound, break
.jump115:
	; Compute loop body
	mov rax, [rel const29] ; 442
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment f
	add qword [rsp + 16], 1
	jmp .jump111
.jump112: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump102
.jump101:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for f
	mov rax, [rel const30] ; 214
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump116
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump116:
	; Computing bound for e
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump117
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump117:
	; Computing bound for d
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump118
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump118:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
.jump119: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump120 ; If d >= bound, break
.jump121:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment d
	add qword [rsp + 0], 1
	jmp .jump119
.jump120: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump122
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump122:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
imul rdi, [rsp + 0 + 0] ; multiply by (sum[d : argnum] c)
	jno .jump123
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump123:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump124
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump124:
	imul rdi, [rsp + 0 + 16] ; multiply by (- 214)
	jno .jump125
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump125:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize f to 0
	mov rax, 0
	push rax
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
.jump126: ; Begin body of loop
	; Compare f to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump128 ; If f >= bound, ...
	mov qword [rsp + 16], 0 ; f = 0
	add qword [rsp + 8], 1 ; e++
.jump128:
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump129 ; If e >= bound, ...
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
.jump129:
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump127 ; If d >= bound, break
.jump130:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment f
	add qword [rsp + 16], 1
	jmp .jump126
.jump127: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump102:
	mov rax, [rel const31] ; 68.5
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	jmp .jump100
.jump99:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for f
	mov rax, [rel const32] ; 70
	push rax
	mov rax, [rsp]
	; Computing bound for e
	mov rax, [rel const33] ; 739
	push rax
	mov rax, [rsp]
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump131
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump131:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by c
	jno .jump132
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump132:
	imul rdi, [rsp + 0 + 8] ; multiply by 739
	jno .jump133
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump133:
	imul rdi, [rsp + 0 + 16] ; multiply by 70
	jno .jump134
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump134:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize f to 0
	mov rax, 0
	push rax
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
.jump135: ; Begin body of loop
	; Compare f to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump137 ; If f >= bound, ...
	mov qword [rsp + 16], 0 ; f = 0
	add qword [rsp + 8], 1 ; e++
.jump137:
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump138 ; If e >= bound, ...
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
.jump138:
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump136 ; If d >= bound, break
.jump139:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment f
	add qword [rsp + 16], 1
	jmp .jump135
.jump136: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	mov rax, [rel const34] ; 93.43
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	; Moving 40 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 32]
		mov [rsp + 0 + 32], r10
		mov r10, [rsp + 0 + 24]
		mov [rsp + 0 + 24], r10
		mov r10, [rsp + 0 + 16]
		mov [rsp + 0 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
.jump100:
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _a
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump140
	mov rax, [rel const7] ; True
	push rax
	mov rax, [rel const6] ; False
	push rax
	mov rdi, 16
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
	jmp .jump141
.jump140:
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	mov rdi, 8
	call _jpl_alloc
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
.jump141:
	mov rax, [rel const7] ; True
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _a
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump142
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	jmp .jump143
.jump142:
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
.jump143:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump144
	lea rdi, [rel const13] ; negative array index
	call _fail_assertion
.jump144:
	cmp rax, [rsp + 8]
	jl .jump145
	lea rdi, [rel const14] ; index too large
	call _fail_assertion
.jump145:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump146
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump148
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump148:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump149
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump149:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by h
	jno .jump150
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump150:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump151
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump151:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
.jump152: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump154 ; If j >= bound, ...
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
.jump154:
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump153 ; If i >= bound, break
.jump155:
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump156
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump156:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump157
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump157:
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rdi, 8
	call _jpl_alloc
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump158
	lea rdi, [rel const13] ; negative array index
	call _fail_assertion
.jump158:
	cmp rax, [rsp + 8]
	jl .jump159
	lea rdi, [rel const14] ; index too large
	call _fail_assertion
.jump159:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump160
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump160:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
	; Initialize k to 0
	mov rax, 0
	push rax
.jump161: ; Begin body of loop
	; Compare m to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump163 ; If m >= bound, ...
	mov qword [rsp + 16], 0 ; m = 0
	add qword [rsp + 8], 1 ; l++
.jump163:
	; Compare l to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump164 ; If l >= bound, ...
	mov qword [rsp + 8], 0 ; l = 0
	add qword [rsp + 0], 1 ; k++
.jump164:
	; Compare k to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump162 ; If k >= bound, break
.jump165:
	; Compute loop body
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 48] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment m
	add qword [rsp + 16], 1
	jmp .jump161
.jump162: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment j
	add qword [rsp + 8], 1
	jmp .jump152
.jump153: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump147
.jump146:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for j
	mov rax, [rel const35] ; 17.33
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump166
	lea rdi, [rel const27] ; divide by zero
	call _fail_assertion
.jump166:
	cqo
	idiv r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump167
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump167:
	; Computing bound for i
	mov rax, [rel const36] ; 142
	push rax
	mov rax, [rsp]
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by 142
	jno .jump168
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump168:
	imul rdi, [rsp + 0 + 8] ; multiply by (h / to_int(cos(17.33)))
	jno .jump169
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump169:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
.jump170: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump172 ; If j >= bound, ...
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
.jump172:
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump171 ; If i >= bound, break
.jump173:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment j
	add qword [rsp + 8], 1
	jmp .jump170
.jump171: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump147:
	mov rax, [rel const6] ; False
	push rax
	mov rax, [rel const6] ; False
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump174
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for m
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for l
	mov rax, [rel const37] ; 842
	push rax
	mov rax, [rsp]
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize l to 0
	mov rax, 0
	push rax
.jump176: ; Begin body of loop
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump177 ; If l >= bound, break
.jump178:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment l
	add qword [rsp + 0], 1
	jmp .jump176
.jump177: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump179
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump179:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump180
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump180:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof int[,,][,,]
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump181
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump181:
imul rdi, [rsp + 0 + 8] ; multiply by (sum[l : 842] argnum)
	jno .jump182
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump182:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump183: ; Begin body of loop
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump185 ; If m >= bound, ...
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
.jump185:
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump184 ; If l >= bound, break
.jump186:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump187
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump187:
	; Computing bound for o
	mov rax, [rel const38] ; 243
	push rax
	mov rax, [rsp]
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump188
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump188:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof int[,,]
	imul rdi, [rsp + 0 + 0] ; multiply by f
	jno .jump189
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump189:
	imul rdi, [rsp + 0 + 8] ; multiply by 243
	jno .jump190
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump190:
	imul rdi, [rsp + 0 + 16] ; multiply by f
	jno .jump191
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump191:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
.jump192: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump194 ; If p >= bound, ...
	mov qword [rsp + 16], 0 ; p = 0
	add qword [rsp + 8], 1 ; o++
.jump194:
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump195 ; If o >= bound, ...
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
.jump195:
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump193 ; If n >= bound, break
.jump196:
	; Compute loop body
	sub rsp, 32
	; Moving 32 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 48 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 48 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, [rsp + 72] ; No overflow if indices in bounds
	add rax, [rsp + 48]
	shl rax, 5
	add rax, [rsp + 80]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment p
	add qword [rsp + 16], 1
	jmp .jump192
.jump193: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	shl rax, 5
	add rax, [rsp + 64]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment m
	add qword [rsp + 8], 1
	jmp .jump183
.jump184: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump175
.jump174:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for m
	mov rax, [rel const39] ; 139
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump197
	sub rsp, 8 ; Align stack
	lea rdi, [rel const40] ; mod by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump197:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump198
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump198:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump199
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump199:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof int[,,][,,]
	imul rdi, [rsp + 0 + 0] ; multiply by k
	jno .jump200
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump200:
	imul rdi, [rsp + 0 + 8] ; multiply by (k % 139)
	jno .jump201
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump201:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump202: ; Begin body of loop
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump204 ; If m >= bound, ...
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
.jump204:
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump203 ; If l >= bound, break
.jump205:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump206
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump206:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump207
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump207:
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - 112 to rsp
		mov r10, [rbp - 112 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump208
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump208:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof int[,,]
	imul rdi, [rsp + 0 + 0] ; multiply by m
	jno .jump209
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump209:
	imul rdi, [rsp + 0 + 8] ; multiply by c
	jno .jump210
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump210:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump211
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump211:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
.jump212: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump214 ; If p >= bound, ...
	mov qword [rsp + 16], 0 ; p = 0
	add qword [rsp + 8], 1 ; o++
.jump214:
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump215 ; If o >= bound, ...
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
.jump215:
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump213 ; If n >= bound, break
.jump216:
	; Compute loop body
	sub rsp, 32
	; Moving 32 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 48 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 48 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, [rsp + 72] ; No overflow if indices in bounds
	add rax, [rsp + 48]
	shl rax, 5
	add rax, [rsp + 80]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment p
	add qword [rsp + 16], 1
	jmp .jump212
.jump213: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	shl rax, 5
	add rax, [rsp + 64]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment m
	add qword [rsp + 8], 1
	jmp .jump202
.jump203: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump175:
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump217
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump217:
	cmp rax, [rsp + 16]
	jl .jump218
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump218:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump219
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump219:
	cmp rax, [rsp + 24]
	jl .jump220
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump220:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 5
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 32
	; Moving 32 bytes from rax to rsp
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump221
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump221:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump222
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump222:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump223: ; Begin body of loop
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump225 ; If m >= bound, ...
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
.jump225:
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump224 ; If l >= bound, break
.jump226:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment m
	add qword [rsp + 8], 1
	jmp .jump223
.jump224: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump227
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump227:
	cmp rax, [rsp + 24]
	jl .jump228
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump228:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump229
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump229:
	cmp rax, [rsp + 32]
	jl .jump230
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump230:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump231
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump231:
	cmp rax, [rsp + 40]
	jl .jump232
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump232:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 5
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 32
	; Moving 32 bytes from rax to rsp
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump233
	mov rax, [rel const6] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump235
	mov rax, [rel const6] ; False
	push rax
	pop rax
.jump235:
	push rax
	pop rax
	cmp rax, 0
	je .jump236
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump238
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump238:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by o
	jno .jump239
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump239:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
.jump240: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump241 ; If p >= bound, break
.jump242:
	; Compute loop body
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _a
	add rsp, 8 ; Remove alignment
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment p
	add qword [rsp + 0], 1
	jmp .jump240
.jump241: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump243
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump243:
	cmp rax, [rsp + 8]
	jl .jump244
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump244:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump237
.jump236:
	mov rax, [rel const6] ; False
	push rax
.jump237:
	jmp .jump234
.jump233:
	mov rax, [rel const7] ; True
	push rax
.jump234:
	pop rax
	add rsp, 112 ; Local variables
	pop rbp
	ret

e:
_e:
	push rbp
	mov rbp, rsp
	mov rax, [rel const54] ; 48.02
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const55] ; 34.88
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const6] ; False
	push rax
	mov rax, [rel const6] ; False
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const56] ; 75.6
	push rax
	; Moving 16 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 8]
		mov [rsp + 8 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	sub rsp, 8 ; Align stack
	mov rax, [rel const7] ; True
	push rax
	pop rdi
	call _a
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	cmp rax, 0
	jne .jump277
	mov rax, [rel const6] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
.jump277:
	push rax
	pop rax
	cmp rax, 0
	je .jump278
	sub rsp, 24
	; Moving 24 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 40 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - -56 to rsp
		mov r10, [rbp - -56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump280
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump280:
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump281
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump281:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump282
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump282:
	imul rdi, [rsp + 0 + 8] ; multiply by l
	jno .jump283
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump283:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
.jump284: ; Begin body of loop
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump286 ; If o >= bound, ...
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
.jump286:
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump285 ; If n >= bound, break
.jump287:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment o
	add qword [rsp + 8], 1
	jmp .jump284
.jump285: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump288
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump288:
	; Computing bound for n
	mov rax, [rel const57] ; 876
	push rax
	mov rax, [rsp]
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by 876
	jno .jump289
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump289:
	imul rdi, [rsp + 0 + 8] ; multiply by h
	jno .jump290
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump290:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
.jump291: ; Begin body of loop
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump293 ; If o >= bound, ...
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
.jump293:
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump292 ; If n >= bound, break
.jump294:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -72 to rsp
		mov r10, [rbp - -72 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment o
	add qword [rsp + 8], 1
	jmp .jump291
.jump292: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rdi, 72
	call _jpl_alloc
	; Moving 72 bytes from rsp to rax
		mov r10, [rsp + 64]
		mov [rax + 64], r10
		mov r10, [rsp + 56]
		mov [rax + 56], r10
		mov r10, [rsp + 48]
		mov [rax + 48], r10
		mov r10, [rsp + 40]
		mov [rax + 40], r10
		mov r10, [rsp + 32]
		mov [rax + 32], r10
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 72
	push rax
	mov rax, 3
	push rax
	jmp .jump279
.jump278:
	sub rsp, 24
	; Moving 24 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 40 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	; Moving 24 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 40 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rdi, 48
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 48 bytes from rsp to rax
		mov r10, [rsp + 40]
		mov [rax + 40], r10
		mov r10, [rsp + 32]
		mov [rax + 32], r10
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 48
	push rax
	mov rax, 2
	push rax
.jump279:
	sub rsp, 16
	; Moving 16 bytes from rbp - -56 to rsp
		mov r10, [rbp - -56 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump295
	sub rsp, 8
	; Moving 8 bytes from rbp - -40 to rsp
		mov r10, [rbp - -40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump296
.jump295:
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from rbp - -56 to rsp
		mov r10, [rbp - -56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump297
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump297:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump298
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump298:
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump299
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump299:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
.jump300: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump302 ; If p >= bound, ...
	mov qword [rsp + 16], 0 ; p = 0
	add qword [rsp + 8], 1 ; o++
.jump302:
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump303 ; If o >= bound, ...
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
.jump303:
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump301 ; If n >= bound, break
.jump304:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -40 to rsp
		mov r10, [rbp - -40 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment p
	add qword [rsp + 16], 1
	jmp .jump300
.jump301: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
.jump296:
	sub rsp, 8 ; Align stack
	sub rsp, 32
	; Moving 32 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - -24 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -24 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -40 to rsp
		mov r10, [rbp - -40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -56 to rsp
		mov r10, [rbp - -56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump305
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump305:
	cmp rax, [rsp + 24]
	jl .jump306
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump306:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump307
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump307:
	cmp rax, [rsp + 32]
	jl .jump308
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump308:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump309
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump309:
	cmp rax, [rsp + 40]
	jl .jump310
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump310:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const7] ; True
	push rax
	pop rdi
	call _a
	push rax
	pop rax
	cmp rax, 0
	je .jump311
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -72 to rsp
		mov r10, [rbp - -72 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	jmp .jump312
.jump311:
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const6] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump313
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	jmp .jump314
.jump313:
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
.jump314:
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
.jump312:
	pop rax
	cmp rax, 0
	je .jump315
	mov rax, [rel const6] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump317
	mov rax, [rel const6] ; False
	push rax
	pop rax
.jump317:
	push rax
	pop rax
	cmp rax, 0
	je .jump318
	mov rax, [rel const6] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump320
	mov rax, [rel const7] ; True
	push rax
	pop rax
.jump320:
	push rax
	jmp .jump319
.jump318:
	sub rsp, 8
	; Moving 8 bytes from rbp - -40 to rsp
		mov r10, [rbp - -40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -56 to rsp
		mov r10, [rbp - -56 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
.jump319:
	mov rax, [rel const7] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump321
	mov rax, [rel const58] ; 82.58
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	jmp .jump322
.jump321:
	mov rax, [rel const6] ; False
	push rax
	pop rax
	cmp rax, 0
	jne .jump323
	mov rax, [rel const7] ; True
	push rax
	pop rax
.jump323:
	push rax
.jump322:
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	mov rdi, 24
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	push rax
	mov rax, 3
	push rax
	jmp .jump316
.jump315:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for n
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -72 to rsp
		mov r10, [rbp - -72 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump324
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump324:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
.jump325: ; Begin body of loop
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump326 ; If n >= bound, break
.jump327:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment n
	add qword [rsp + 0], 1
	jmp .jump325
.jump326: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump328
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump328:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
imul rdi, [rsp + 0 + 0] ; multiply by (sum[n : (m * argnum)] i)
	jno .jump329
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump329:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
.jump330: ; Begin body of loop
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump331 ; If n >= bound, break
.jump332:
	; Compute loop body
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -72 to rsp
		mov r10, [rbp - -72 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment n
	add qword [rsp + 0], 1
	jmp .jump330
.jump331: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
.jump316:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for B
	sub rsp, 8
	; Moving 8 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump333
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump333:
	; Computing bound for A
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for B
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for B
	sub rsp, 8
	; Moving 8 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump334
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump334:
	; Computing bound for A
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump335
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump335:
	; Computing bound for z
	sub rsp, 8
	; Moving 8 bytes from rbp - -40 to rsp
		mov r10, [rbp - -40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump336
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump336:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize B to 0
	mov rax, 0
	push rax
	; Initialize A to 0
	mov rax, 0
	push rax
	; Initialize z to 0
	mov rax, 0
	push rax
.jump337: ; Begin body of loop
	; Compare B to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump339 ; If B >= bound, ...
	mov qword [rsp + 16], 0 ; B = 0
	add qword [rsp + 8], 1 ; A++
.jump339:
	; Compare A to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump340 ; If A >= bound, ...
	mov qword [rsp + 8], 0 ; A = 0
	add qword [rsp + 0], 1 ; z++
.jump340:
	; Compare z to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump338 ; If z >= bound, break
.jump341:
	; Compute loop body
	mov rax, [rel const59] ; 149
	push rax
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment B
	add qword [rsp + 16], 1
	jmp .jump337
.jump338: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump342
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump342:
	; Computing bound for A
	sub rsp, 8
	; Moving 8 bytes from rbp - -40 to rsp
		mov r10, [rbp - -40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump343
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump343:
	; Computing bound for z
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump344
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump344:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize B to 0
	mov rax, 0
	push rax
	; Initialize A to 0
	mov rax, 0
	push rax
	; Initialize z to 0
	mov rax, 0
	push rax
.jump345: ; Begin body of loop
	; Compare B to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump347 ; If B >= bound, ...
	mov qword [rsp + 16], 0 ; B = 0
	add qword [rsp + 8], 1 ; A++
.jump347:
	; Compare A to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump348 ; If A >= bound, ...
	mov qword [rsp + 8], 0 ; A = 0
	add qword [rsp + 0], 1 ; z++
.jump348:
	; Compare z to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump346 ; If z >= bound, break
.jump349:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 48] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment B
	add qword [rsp + 16], 1
	jmp .jump345
.jump346: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump350
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump350:
	; Computing bound for z
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump351
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump351:
	; Computing total size of heap memory to allocate
	mov rdi, 40 ; sizeof {float,int[,],int}
	imul rdi, [rsp + 0 + 0] ; multiply by t
	jno .jump352
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump352:
imul rdi, [rsp + 0 + 8] ; multiply by to_int((sum[z : (- v), A : j, B : (sum[z : j, A : h, B : i] 149)] w))
	jno .jump353
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump353:
	imul rdi, [rsp + 0 + 16] ; multiply by i
	jno .jump354
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump354:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize B to 0
	mov rax, 0
	push rax
	; Initialize A to 0
	mov rax, 0
	push rax
	; Initialize z to 0
	mov rax, 0
	push rax
.jump355: ; Begin body of loop
	; Compare B to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump357 ; If B >= bound, ...
	mov qword [rsp + 16], 0 ; B = 0
	add qword [rsp + 8], 1 ; A++
.jump357:
	; Compare A to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump358 ; If A >= bound, ...
	mov qword [rsp + 8], 0 ; A = 0
	add qword [rsp + 0], 1 ; z++
.jump358:
	; Compare z to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump356 ; If z >= bound, break
.jump359:
	; Compute loop body
	sub rsp, 8 ; Align stack
	mov rax, [rel const6] ; False
	push rax
	pop rdi
	call _a
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	cmp rax, 0
	je .jump360
	mov rax, [rel const6] ; False
	push rax
	pop rax
	cmp rax, 0
	jne .jump362
	mov rax, [rel const6] ; False
	push rax
	pop rax
.jump362:
	push rax
	jmp .jump361
.jump360:
	mov rax, [rel const60] ; 54.96
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
.jump361:
	pop rax
	cmp rax, 0
	je .jump363
	sub rsp, 8
	; Moving 8 bytes from rbp - -40 to rsp
		mov r10, [rbp - -40 + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	; Moving 24 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 40 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	jmp .jump364
.jump363:
	sub rsp, 8
	; Moving 8 bytes from rbp - -72 to rsp
		mov r10, [rbp - -72 + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	; Moving 24 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 40 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
.jump364:
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, [rsp + 72] ; No overflow if indices in bounds
	add rax, [rsp + 48]
	imul rax, [rsp + 80] ; No overflow if indices in bounds
	add rax, [rsp + 56]
	imul rax, 40
	add rax, [rsp + 88]
	; Move body (40 bytes) to index
	; Moving 40 bytes from rsp to rax
		mov r10, [rsp + 32]
		mov [rax + 32], r10
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 40
	; Increment B
	add qword [rsp + 16], 1
	jmp .jump355
.jump356: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump365
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump365:
	cmp rax, [rsp + 24]
	jl .jump366
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump366:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump367
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump367:
	cmp rax, [rsp + 32]
	jl .jump368
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump368:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump369
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump369:
	cmp rax, [rsp + 40]
	jl .jump370
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump370:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 40
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 40
	; Moving 40 bytes from rax to rsp
		mov r10, [rax + 32]
		mov [rsp + 32], r10
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 136 to rsp
		mov r10, [rbp - 136 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 144 to rsp
		mov r10, [rbp - 144 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 152 ; Local variables
	pop rbp
	ret

jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp
	sub rsp, 8 ; Align stack
	mov rax, [rel const41] ; 29.33
	push rax
	mov rax, [rel const42] ; 39.65
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const43] ; 83.87
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const44] ; 48.29
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const7] ; True
	push rax
	mov rax, [rel const45] ; 18.38
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 24
		mov r10, [rsp + 0 + 0]
		mov [rsp + 24 + 0], r10
	add rsp, 24
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const6] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump245
	mov rax, [rel const6] ; False
	push rax
	pop rax
	cmp rax, 0
	jne .jump247
	mov rax, [rel const7] ; True
	push rax
	pop rax
.jump247:
	push rax
	pop rax
	xor rax, 1
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for d
	mov rax, [rel const46] ; 12
	push rax
	mov rax, [rsp]
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump248
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump248:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump249
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump249:
	imul rdi, [rsp + 0 + 8] ; multiply by 12
	jno .jump250
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump250:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump251: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump253 ; If d >= bound, ...
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
.jump253:
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump252 ; If c >= bound, break
.jump254:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment d
	add qword [rsp + 8], 1
	jmp .jump251
.jump252: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Moving 24 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 16]
		mov [rsp + 8 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 8 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	jmp .jump246
.jump245:
	mov rax, [rel const7] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump255
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for d
	mov rax, [rel const47] ; 731
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump257
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump257:
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump258
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump258:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump259
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump259:
	imul rdi, [rsp + 0 + 8] ; multiply by (argnum + 731)
	jno .jump260
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump260:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump261: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump263 ; If d >= bound, ...
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
.jump263:
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump262 ; If c >= bound, break
.jump264:
	; Compute loop body
	mov rax, [rel const48] ; 785
	push rax
	mov rax, [rel const49] ; 638
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump265
	sub rsp, 8 ; Align stack
	lea rdi, [rel const40] ; mod by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump265:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment d
	add qword [rsp + 8], 1
	jmp .jump261
.jump262: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump256
.jump255:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for d
	mov rax, [rel const50] ; 72
	push rax
	mov rax, [rsp]
	; Computing bound for c
	mov rax, [rel const51] ; 916
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump266
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump266:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by (argnum - 916)
	jno .jump267
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump267:
	imul rdi, [rsp + 0 + 8] ; multiply by 72
	jno .jump268
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump268:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump269: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump271 ; If d >= bound, ...
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
.jump271:
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump270 ; If c >= bound, break
.jump272:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment d
	add qword [rsp + 8], 1
	jmp .jump269
.jump270: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump256:
.jump246:
	sub rsp, 8 ; Align stack
	mov rax, [rel const52] ; 12.9
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const7] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump273
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	jmp .jump274
.jump273:
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
.jump274:
	mov rdi, 24
	call _jpl_alloc
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	push rax
	mov rax, 3
	push rax
	mov rax, [rel const53] ; 465
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump275
	lea rdi, [rel const13] ; negative array index
	call _fail_assertion
.jump275:
	cmp rax, [rsp + 8]
	jl .jump276
	lea rdi, [rel const14] ; index too large
	call _fail_assertion
.jump276:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for f
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for g
	mov rax, [rel const61] ; 894
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump371
	lea rdi, [rel const27] ; divide by zero
	call _fail_assertion
.jump371:
	cqo
	idiv r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump372
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump372:
	; Computing bound for f
	mov rax, [rel const62] ; 959
	push rax
	mov rax, [rsp]
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
.jump373: ; Begin body of loop
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump375 ; If g >= bound, ...
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
.jump375:
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump374 ; If f >= bound, break
.jump376:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment g
	add qword [rsp + 8], 1
	jmp .jump373
.jump374: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rel const63] ; 51.4
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rdi, 16
	call _jpl_alloc
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
	mov rax, [rel const64] ; 901
	push rax
	mov rax, [rel const65] ; 974
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump377
	lea rdi, [rel const40] ; mod by zero
	call _fail_assertion
.jump377:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump378
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump378:
	cmp rax, [rsp + 8]
	jl .jump379
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump379:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump380
	sub rsp, 8 ; Align stack
	lea rdi, [rel const27] ; divide by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump380:
	cqo
	idiv r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump381
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump381:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize f to 0
	mov rax, 0
	push rax
.jump382: ; Begin body of loop
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump383 ; If f >= bound, break
.jump384:
	; Compute loop body
	mov rax, [rel const66] ; 833
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment f
	add qword [rsp + 0], 1
	jmp .jump382
.jump383: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	sub rsp, 8 ; Align stack
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	lea rdi, [rel const67] ; (ArrayType (IntType) 1)
	lea rsi, [rsp]
	call _show
	add rsp, 16
	add rsp, 8 ; Remove alignment
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump385
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump385:
	; Computing bound for g
	mov rax, [rel const68] ; 583
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump386
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump386:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by (f - 583)
	jno .jump387
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump387:
	imul rdi, [rsp + 0 + 8] ; multiply by f
	jno .jump388
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump388:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
.jump389: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump391 ; If h >= bound, ...
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
.jump391:
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump390 ; If g >= bound, break
.jump392:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	sub rsp, 8
	movsd [rsp], xmm0
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment h
	add qword [rsp + 8], 1
	jmp .jump389
.jump390: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const7] ; True
	push rax
	mov rax, [rel const6] ; False
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 16
		mov r10, [rsp + 0 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	pop rax
	cmp rax, 0
	je .jump393
	sub rsp, 24
	; Moving 24 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 40 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for i
	mov rax, [rel const69] ; 446
	push rax
	mov rax, [rsp]
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump395
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump395:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
.jump396: ; Begin body of loop
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump398 ; If i >= bound, ...
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
.jump398:
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump397 ; If h >= bound, break
.jump399:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 144 to rsp
		mov r10, [rbp - 144 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment i
	add qword [rsp + 8], 1
	jmp .jump396
.jump397: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 32
		mov r10, [rsp + 0 + 0]
		mov [rsp + 32 + 0], r10
	add rsp, 32
	jmp .jump394
.jump393:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for i
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump400
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump400:
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump401
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump401:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump402
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump402:
	imul rdi, [rsp + 0 + 8] ; multiply by to_int(d)
	jno .jump403
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump403:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
.jump404: ; Begin body of loop
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump406 ; If i >= bound, ...
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
.jump406:
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump405 ; If h >= bound, break
.jump407:
	; Compute loop body
	mov rax, [rel const7] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment i
	add qword [rsp + 8], 1
	jmp .jump404
.jump405: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rel const70] ; 42.69
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump408
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump408:
	cmp rax, [rsp + 16]
	jl .jump409
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump409:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump410
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump410:
	cmp rax, [rsp + 24]
	jl .jump411
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump411:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump394:
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	jne .jump412
	lea rdi, [rel const71] ; h
	call _fail_assertion
.jump412:
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for j
	mov rax, [rel const72] ; 939
	push rax
	mov rax, [rsp]
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump413
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump413:
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump414
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump414:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
.jump415: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump417 ; If j >= bound, ...
	mov qword [rsp + 16], 0 ; j = 0
	add qword [rsp + 8], 1 ; i++
.jump417:
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump418 ; If i >= bound, ...
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
.jump418:
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump416 ; If h >= bound, break
.jump419:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 48] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment j
	add qword [rsp + 16], 1
	jmp .jump415
.jump416: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	sub rsp, 24
	; Moving 24 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 80 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Moving 24 bytes from rsp + 24 to rsp + 24
		mov r10, [rsp + 24 + 16]
		mov [rsp + 24 + 16], r10
		mov r10, [rsp + 24 + 8]
		mov [rsp + 24 + 8], r10
		mov r10, [rsp + 24 + 0]
		mov [rsp + 24 + 0], r10
	add rsp, 24
	; Moving 24 bytes from rsp + 24 to rsp + 24
		mov r10, [rsp + 24 + 16]
		mov [rsp + 24 + 16], r10
		mov r10, [rsp + 24 + 8]
		mov [rsp + 24 + 8], r10
		mov r10, [rsp + 24 + 0]
		mov [rsp + 24 + 0], r10
	add rsp, 24
	; Moving 16 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 8]
		mov [rsp + 8 + 8], r10
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	add rsp, 96 ; Local variables
	pop r12
	pop rbp
	ret

