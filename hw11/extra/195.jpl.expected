global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: db `non-positive loop bound`, 0
const1: dq 170
const2: dq 691
const3: db `divide by zero`, 0
const4: db `overflow computing array size`, 0
const5: dq 768
const6: dq 157
const7: dq 380
const8: dq 78.34
const9: dq 0
const10: dq 1
const11: dq 29
const12: dq 108
const13: dq 656
const14: db `negative array index`, 0
const15: db `index too large`, 0
const16: dq 649
const17: dq 201
const18: dq 41
const19: dq 283
const20: db `c`, 0
const21: dq 982
const22: dq 643
const23: dq 689
const24: dq 533
const25: dq 33
const26: dq 59
const27: dq 374
const28: dq 99.6
const29: dq 9.57
const30: dq 92.58
const31: dq 28.99
const32: dq 763
const33: dq 472
const34: dq 855
const35: db `j`, 0
const36: dq 569
const37: dq 74.31
const38: dq 767
const39: db `r`, 0
const40: dq 35.04
const41: dq 58.07
const42: dq 5.58
const43: dq 85
const44: dq 87.4
const45: dq 95.38
const46: dq 38.56
const47: dq 316
const48: db `mod by zero`, 0
const49: dq 521
const50: dq 89.22
const51: dq 942
const52: dq 746
const53: dq 37.07
const54: dq 75.25
const55: dq 85.41
const56: dq 52.14
const57: dq 81.44
const58: dq 35.08
const59: dq 208
const60: dq 392
const61: dq 382
const62: dq 10
const63: dq 329
const64: dq 442
const65: dq 36.72
const66: dq 6.61
const67: dq 6.35
const68: dq 623
const69: dq 943
const70: dq 939
const71: dq 154
const72: dq 732
const73: dq 727
const74: dq 60.05
const75: dq 74.02
const76: dq 7.93
const77: dq 55.8
const78: db `g.png`, 0
const79: dq 735
const80: dq 354
const81: dq 823
const82: dq 558
const83: dq 97.87
const84: dq 35.92
const85: dq 51.95
const86: db `q`, 0
const87: dq 49.96
const88: dq 72.43
const89: db `i`, 0
const90: dq 434
const91: dq 718
const92: dq 455
const93: dq 224
const94: dq 640
const95: dq 935
const96: dq 82.62
const97: dq 620
const98: db `p`, 0

section .text
d:
_d:
	push rbp
	mov rbp, rsp
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump88
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for h
	mov rax, [rel const21] ; 982
	push rax
	mov rax, [rsp]
	; Computing bound for g
	mov rax, [rel const22] ; 643
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump90
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump90:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by (b + 643)
	jno .jump91
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump91:
	imul rdi, [rsp + 0 + 8] ; multiply by 982
	jno .jump92
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump92:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
.jump93: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump95 ; If h >= bound, ...
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
.jump95:
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump94 ; If g >= bound, break
.jump96:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment h
	add qword [rsp + 8], 1
	jmp .jump93
.jump94: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump89
.jump88:
	mov rax, [rel const23] ; 689
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump97
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump99
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump99:
	; Computing bound for g
	mov rax, [rel const24] ; 533
	push rax
	mov rax, [rsp]
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by 533
	jno .jump100
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump100:
	imul rdi, [rsp + 0 + 8] ; multiply by b
	jno .jump101
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump101:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
.jump102: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump104 ; If h >= bound, ...
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
.jump104:
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump103 ; If g >= bound, break
.jump105:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment h
	add qword [rsp + 8], 1
	jmp .jump102
.jump103: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump98
.jump97:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump106
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump106:
	; Computing bound for g
	mov rax, [rel const25] ; 33
	push rax
	mov rax, [rsp]
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by 33
	jno .jump107
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump107:
	imul rdi, [rsp + 0 + 8] ; multiply by b
	jno .jump108
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump108:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
.jump109: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump111 ; If h >= bound, ...
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
.jump111:
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump110 ; If g >= bound, break
.jump112:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment h
	add qword [rsp + 8], 1
	jmp .jump109
.jump110: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump98:
.jump89:
	mov rax, [rel const26] ; 59
	push rax
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump113
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; divide by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump113:
	cqo
	idiv r10
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump114
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump114:
	cmp rax, [rsp + 8]
	jl .jump115
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump115:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump116
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump116:
	cmp rax, [rsp + 16]
	jl .jump117
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump117:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump118
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump118:
	cmp rax, [rsp + 24]
	jl .jump119
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump119:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump120
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump120:
	; Computing bound for g
	mov rax, [rel const27] ; 374
	push rax
	mov rax, [rsp]
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by 374
	jno .jump121
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump121:
imul rdi, [rsp + 0 + 8] ; multiply by (if (! c) then (array[g : (b + 643), h : 982] argnum) else (if (argnum <= 689) then (array[g : 533, h : b] argnum) else (array[g : 33, h : b] h)))[(- args[(b / argnum)]), 59]
	jno .jump122
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump122:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
.jump123: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump125 ; If h >= bound, ...
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
.jump125:
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump124 ; If g >= bound, break
.jump126:
	; Compute loop body
	sub rsp, 8 ; Align stack
	mov rax, [rel const10] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump127
	mov rax, [rel const28] ; 99.6
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	jmp .jump128
.jump127:
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump129
	mov rax, [rel const29] ; 9.57
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	jmp .jump130
.jump129:
	mov rax, [rel const30] ; 92.58
	push rax
.jump130:
.jump128:
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment h
	add qword [rsp + 8], 1
	jmp .jump123
.jump124: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const10] ; True
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	mov rax, [rel const9] ; False
	push rax
	mov rdi, 24
	call _jpl_alloc
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	push rax
	mov rax, 3
	push rax
	; Moving 16 bytes from rsp + 0 to rsp + 16
		mov r10, [rsp + 0 + 8]
		mov [rsp + 16 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	sub rsp, 8 ; Align stack
	mov rax, [rel const31] ; 28.99
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for k
	mov rax, [rel const32] ; 763
	push rax
	mov rax, [rsp]
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump131
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump131:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by h
	jno .jump132
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump132:
	imul rdi, [rsp + 0 + 8] ; multiply by 763
	jno .jump133
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump133:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
.jump134: ; Begin body of loop
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump136 ; If k >= bound, ...
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
.jump136:
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump135 ; If j >= bound, break
.jump137:
	; Compute loop body
	mov rax, [rel const33] ; 472
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment k
	add qword [rsp + 8], 1
	jmp .jump134
.jump135: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rax, [rel const9] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 32
		mov r10, [rsp + 0 + 0]
		mov [rsp + 32 + 0], r10
	add rsp, 32
	pop rax
	cmp rax, 0
	je .jump138
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	jne .jump140
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
.jump140:
	push rax
	pop rax
	cmp rax, 0
	je .jump141
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	jmp .jump142
.jump141:
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
.jump142:
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	jmp .jump139
.jump138:
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump143
	mov rax, [rel const10] ; True
	push rax
	pop rax
.jump143:
	push rax
	pop rax
	cmp rax, 0
	je .jump144
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for j
	mov rax, [rel const34] ; 855
	push rax
	mov rax, [rsp]
	mov rdi, 6840
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
.jump146: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump147 ; If j >= bound, break
.jump148:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment j
	add qword [rsp + 0], 1
	jmp .jump146
.jump147: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	jmp .jump145
.jump144:
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rdi, 16
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
.jump145:
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump149
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump149:
	cmp rax, [rsp + 8]
	jl .jump150
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump150:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump139:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump151
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump151:
	cmp rax, [rsp + 8]
	jl .jump152
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump152:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	jne .jump153
	sub rsp, 8 ; Align stack
	lea rdi, [rel const35] ; j
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump153:
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	jne .jump154
	sub rsp, 8 ; Align stack
	lea rdi, [rel const35] ; j
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump154:
	sub rsp, 32
	; Moving 32 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - -16 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const36] ; 569
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump155
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump155:
	cmp rax, [rsp + 24]
	jl .jump156
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump156:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump157
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump157:
	cmp rax, [rsp + 32]
	jl .jump158
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump158:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump159
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump159:
	cmp rax, [rsp + 40]
	jl .jump160
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump160:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	add rsp, 24 ; Local variables
	pop rbp
	ret
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	add rsp, 24 ; Local variables
	pop rbp
	ret

e:
_e:
	push rbp
	mov rbp, rsp
	mov rax, [rel const37] ; 74.31
	push rax
	mov rdi, 8
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	; Moving 24 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 16]
		mov [rsp + 0 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	mov rax, [rel const10] ; True
	push rax
	mov rax, [rel const9] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump161
	mov rax, [rel const38] ; 767
	push rax
	jmp .jump162
.jump161:
	sub rsp, 8
	; Moving 8 bytes from rbp - -40 to rsp
		mov r10, [rbp - -40 + 0]
		mov [rsp + 0], r10
.jump162:
	sub rsp, 8
	; Moving 8 bytes from rbp - -48 to rsp
		mov r10, [rbp - -48 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	; Moving 32 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 24]
		mov [rsp + 8 + 24], r10
		mov r10, [rsp + 0 + 16]
		mov [rsp + 8 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 8 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	; Moving 16 bytes from rsp + 0 to rsp + 16
		mov r10, [rsp + 0 + 8]
		mov [rsp + 16 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump163
	sub rsp, 8
	; Moving 8 bytes from rbp - -56 to rsp
		mov r10, [rbp - -56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -48 to rsp
		mov r10, [rbp - -48 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump165
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rdi, 8
	call _jpl_alloc
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const9] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	jmp .jump166
.jump165:
	mov rax, [rel const9] ; False
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rdi, 24
	call _jpl_alloc
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	push rax
	mov rax, 3
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	jne .jump167
	mov rax, [rel const9] ; False
	push rax
	pop rax
.jump167:
	push rax
.jump166:
	jmp .jump164
.jump163:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for r
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump168
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump168:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by h
	jno .jump169
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump169:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize r to 0
	mov rax, 0
	push rax
.jump170: ; Begin body of loop
	; Compare r to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump171 ; If r >= bound, break
.jump172:
	; Compute loop body
	mov rax, [rel const10] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump173
	mov rax, [rel const10] ; True
	push rax
	jmp .jump174
.jump173:
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
.jump174:
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment r
	add qword [rsp + 0], 1
	jmp .jump170
.jump171: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const9] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
.jump164:
	; Moving 8 bytes from rsp + 0 to rsp + 24
		mov r10, [rsp + 0 + 0]
		mov [rsp + 24 + 0], r10
	add rsp, 24
	pop rax
	cmp rax, 0
	jne .jump175
	sub rsp, 8 ; Align stack
	lea rdi, [rel const39] ; r
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump175:
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	jne .jump176
	mov rax, [rel const40] ; 35.04
	push rax
	mov rax, [rel const41] ; 58.07
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const42] ; 5.58
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
.jump176:
	push rax
	pop rax
	cmp rax, 0
	je .jump177
	mov rax, [rel const43] ; 85
	push rax
	mov rax, [rel const9] ; False
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for t
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump179
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump179:
	; Computing bound for s
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump180
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump180:
	; Computing bound for r
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump181
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump181:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by h
	jno .jump182
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump182:
	imul rdi, [rsp + 0 + 8] ; multiply by b
	jno .jump183
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump183:
	imul rdi, [rsp + 0 + 16] ; multiply by o
	jno .jump184
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump184:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize t to 0
	mov rax, 0
	push rax
	; Initialize s to 0
	mov rax, 0
	push rax
	; Initialize r to 0
	mov rax, 0
	push rax
.jump185: ; Begin body of loop
	; Compare t to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump187 ; If t >= bound, ...
	mov qword [rsp + 16], 0 ; t = 0
	add qword [rsp + 8], 1 ; s++
.jump187:
	; Compare s to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump188 ; If s >= bound, ...
	mov qword [rsp + 8], 0 ; s = 0
	add qword [rsp + 0], 1 ; r++
.jump188:
	; Compare r to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump186 ; If r >= bound, break
.jump189:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -48 to rsp
		mov r10, [rbp - -48 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment t
	add qword [rsp + 16], 1
	jmp .jump185
.jump186: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump178
.jump177:
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const9] ; False
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for t
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump190
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump190:
	; Computing bound for s
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump191
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump191:
	; Computing bound for r
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump192
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump192:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by o
	jno .jump193
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump193:
	imul rdi, [rsp + 0 + 8] ; multiply by b
	jno .jump194
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump194:
	imul rdi, [rsp + 0 + 16] ; multiply by o
	jno .jump195
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump195:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize t to 0
	mov rax, 0
	push rax
	; Initialize s to 0
	mov rax, 0
	push rax
	; Initialize r to 0
	mov rax, 0
	push rax
.jump196: ; Begin body of loop
	; Compare t to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump198 ; If t >= bound, ...
	mov qword [rsp + 16], 0 ; t = 0
	add qword [rsp + 8], 1 ; s++
.jump198:
	; Compare s to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump199 ; If s >= bound, ...
	mov qword [rsp + 8], 0 ; s = 0
	add qword [rsp + 0], 1 ; r++
.jump199:
	; Compare r to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump197 ; If r >= bound, break
.jump200:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment t
	add qword [rsp + 16], 1
	jmp .jump196
.jump197: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump178:
	call _d
	add rsp, 48
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -40 to rsp
		mov r10, [rbp - -40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setg al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump201
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
.jump201:
	push rax
	pop rax
	add rsp, 48 ; Local variables
	pop rbp
	ret

f:
_f:
	push rbp
	mov rbp, rsp
	push rdi
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const44] ; 87.4
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const9] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump202
	mov rax, [rel const9] ; False
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump204
	mov rax, [rel const45] ; 95.38
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for j
	mov rax, [rel const24] ; 533
	push rax
	mov rax, [rsp]
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump206
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump206:
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump207
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump207:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump208
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump208:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump209
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump209:
	imul rdi, [rsp + 0 + 16] ; multiply by 533
	jno .jump210
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump210:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
.jump211: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump213 ; If j >= bound, ...
	mov qword [rsp + 16], 0 ; j = 0
	add qword [rsp + 8], 1 ; i++
.jump213:
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump214 ; If i >= bound, ...
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
.jump214:
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump212 ; If h >= bound, break
.jump215:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment j
	add qword [rsp + 16], 1
	jmp .jump211
.jump212: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump205
.jump204:
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	sub rsp, 8
	movsd [rsp], xmm0
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump216
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump216:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump217
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump217:
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump218
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump218:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by b
	jno .jump219
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump219:
	imul rdi, [rsp + 0 + 8] ; multiply by b
	jno .jump220
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump220:
	imul rdi, [rsp + 0 + 16] ; multiply by b
	jno .jump221
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump221:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
.jump222: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump224 ; If j >= bound, ...
	mov qword [rsp + 16], 0 ; j = 0
	add qword [rsp + 8], 1 ; i++
.jump224:
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump225 ; If i >= bound, ...
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
.jump225:
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump223 ; If h >= bound, break
.jump226:
	; Compute loop body
	mov rax, [rel const46] ; 38.56
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment j
	add qword [rsp + 16], 1
	jmp .jump222
.jump223: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump205:
	; Moving 32 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 24]
		mov [rsp + 8 + 24], r10
		mov r10, [rsp + 0 + 16]
		mov [rsp + 8 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 8 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	jmp .jump203
.jump202:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for i
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump227
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump227:
	cmp rax, [rsp + 8]
	jl .jump228
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump228:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump229
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump229:
	; Computing bound for h
	mov rax, [rel const47] ; 316
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump230
	lea rdi, [rel const48] ; mod by zero
	call _fail_assertion
.jump230:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump231
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump231:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof float[,,]
	imul rdi, [rsp + 0 + 0] ; multiply by (argnum % 316)
	jno .jump232
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump232:
	imul rdi, [rsp + 0 + 8] ; multiply by (- args[b])
	jno .jump233
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump233:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
.jump234: ; Begin body of loop
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump236 ; If i >= bound, ...
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
.jump236:
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump235 ; If h >= bound, break
.jump237:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump238
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump238:
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump239
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump239:
	; Computing bound for j
	mov rax, [rel const49] ; 521
	push rax
	mov rax, [rsp]
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by 521
	jno .jump240
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump240:
	imul rdi, [rsp + 0 + 8] ; multiply by (- h)
	jno .jump241
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump241:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump242
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump242:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize l to 0
	mov rax, 0
	push rax
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
.jump243: ; Begin body of loop
	; Compare l to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump245 ; If l >= bound, ...
	mov qword [rsp + 16], 0 ; l = 0
	add qword [rsp + 8], 1 ; k++
.jump245:
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump246 ; If k >= bound, ...
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
.jump246:
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump244 ; If j >= bound, break
.jump247:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump248
	mov rax, [rel const50] ; 89.22
	push rax
	jmp .jump249
.jump248:
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
.jump249:
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment l
	add qword [rsp + 16], 1
	jmp .jump243
.jump244: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	shl rax, 5
	add rax, [rsp + 64]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment i
	add qword [rsp + 8], 1
	jmp .jump234
.jump235: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for i
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for h
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump250
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump250:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
.jump251: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump252 ; If h >= bound, break
.jump253:
	; Compute loop body
	mov rax, [rel const51] ; 942
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment h
	add qword [rsp + 0], 1
	jmp .jump251
.jump252: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump254
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump254:
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump255
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump255:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
.jump256: ; Begin body of loop
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump258 ; If i >= bound, ...
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
.jump258:
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump257 ; If h >= bound, break
.jump259:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment i
	add qword [rsp + 8], 1
	jmp .jump256
.jump257: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rel const52] ; 746
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump260
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump260:
	cmp rax, [rsp + 16]
	jl .jump261
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump261:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump262
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump262:
	cmp rax, [rsp + 24]
	jl .jump263
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump263:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 5
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 32
	; Moving 32 bytes from rax to rsp
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump203:
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	mov rax, [rel const10] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump264
	mov rax, [rel const53] ; 37.07
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	jmp .jump265
.jump264:
	mov rax, [rel const54] ; 75.25
	push rax
.jump265:
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setg al
	and rax, 1
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump266
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump266:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof float[,]
	imul rdi, [rsp + 0 + 0] ; multiply by j
	jno .jump267
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump267:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
.jump268: ; Begin body of loop
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump269 ; If n >= bound, break
.jump270:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump271
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump271:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump272
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump272:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by l
	jno .jump273
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump273:
	imul rdi, [rsp + 0 + 8] ; multiply by (n * l)
	jno .jump274
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump274:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
.jump275: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump277 ; If p >= bound, ...
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
.jump277:
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump276 ; If o >= bound, break
.jump278:
	; Compute loop body
	mov rax, [rel const55] ; 85.41
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment p
	add qword [rsp + 8], 1
	jmp .jump275
.jump276: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 24
	add rax, [rsp + 40]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment n
	add qword [rsp + 0], 1
	jmp .jump268
.jump269: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump279
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump279:
	cmp rax, [rsp + 8]
	jl .jump280
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump280:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 24
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const9] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump281
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const10] ; True
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
.jump281:
	push rax
	pop rax
	cmp rax, 0
	je .jump282
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	jmp .jump283
.jump282:
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump284
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	jmp .jump285
.jump284:
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
.jump285:
	pop rax
	cmp rax, 0
	je .jump286
	mov rax, [rel const10] ; True
	push rax
	jmp .jump287
.jump286:
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
.jump287:
.jump283:
	pop rax
	cmp rax, 0
	je .jump288
	sub rsp, 8 ; Align stack
	mov rax, [rel const56] ; 52.14
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump290
	mov rax, [rel const10] ; True
	push rax
	pop rax
	cmp rax, 0
	jne .jump292
	mov rax, [rel const10] ; True
	push rax
	pop rax
.jump292:
	push rax
	jmp .jump291
.jump290:
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump293
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	jmp .jump294
.jump293:
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
.jump294:
.jump291:
	mov rax, [rel const57] ; 81.44
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	jmp .jump289
.jump288:
	mov rax, [rel const58] ; 35.08
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 48
	lea rdi, [rsp + 0]
	call _f
	; Moving 24 bytes from rsp + 0 to rsp + 24
		mov r10, [rsp + 0 + 16]
		mov [rsp + 24 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 24 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 24 + 0], r10
	add rsp, 24
	; Moving 24 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 16]
		mov [rsp + 8 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 8 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
.jump289:
	mov rax, [rbp - 8] ; Address to write return value into
	; Moving 48 bytes from rsp to rax
		mov r10, [rsp + 40]
		mov [rax + 40], r10
		mov r10, [rsp + 32]
		mov [rax + 32], r10
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 112 ; Local variables
	pop rbp
	ret

g:
_g:
	push rbp
	mov rbp, rsp
	push rdi
	sub rsp, 48
	sub rsp, 8 ; Align stack
	lea rdi, [rsp + 8]
	call _f
	add rsp, 8 ; Remove alignment
	; Moving 24 bytes from rsp + 0 to rsp + 24
		mov r10, [rsp + 0 + 16]
		mov [rsp + 24 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 24 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 24 + 0], r10
	add rsp, 24
	mov rdi, 24
	call _jpl_alloc
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	push rax
	mov rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump393
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump393:
	cmp rax, [rsp + 8]
	jl .jump394
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump394:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 24
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 8 to rsp + 16
		mov r10, [rsp + 8 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	pop rax
	cmp rax, 0
	je .jump395
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump397
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump397:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof {int[,],int}
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump398
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump398:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
.jump399: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump400 ; If h >= bound, break
.jump401:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	lea rdi, [rsp + 0]
	call _g
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	shl rax, 5
	add rax, [rsp + 48]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment h
	add qword [rsp + 0], 1
	jmp .jump399
.jump400: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	mov rax, [rel const10] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump402
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump403
.jump402:
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
.jump403:
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump404
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump404:
	cmp rax, [rsp + 8]
	jl .jump405
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump405:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump406
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump406:
	cmp rax, [rsp + 8]
	jl .jump407
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump407:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 5
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 32
	; Moving 32 bytes from rax to rsp
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Moving 24 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 16]
		mov [rsp + 8 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 8 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	jmp .jump396
.jump395:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump408
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump408:
	; Computing bound for h
	mov rax, [rel const79] ; 735
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump409
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump409:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by (- 735)
	jno .jump410
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump410:
	imul rdi, [rsp + 0 + 8] ; multiply by (argnum + {argnum}{0})
	jno .jump411
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump411:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
.jump412: ; Begin body of loop
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump414 ; If i >= bound, ...
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
.jump414:
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump413 ; If h >= bound, break
.jump415:
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump416
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump416:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
.jump417: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump418 ; If j >= bound, break
.jump419:
	; Compute loop body
	mov rax, [rel const80] ; 354
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment j
	add qword [rsp + 0], 1
	jmp .jump417
.jump418: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rel const9] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump420
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump421
.jump420:
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
.jump421:
	sub rsp, 16
	; Moving 16 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump422
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump422:
	cmp rax, [rsp + 8]
	jl .jump423
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump423:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump424
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump424:
	cmp rax, [rsp + 8]
	jl .jump425
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump425:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment i
	add qword [rsp + 8], 1
	jmp .jump412
.jump413: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump396:
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const9] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump426
	sub rsp, 24
	; Moving 24 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump427
.jump426:
	sub rsp, 24
	lea rdi, [rsp + 0]
	call _g
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
.jump427:
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	; Moving 40 bytes from rsp + 8 to rsp + 16
		mov r10, [rsp + 8 + 32]
		mov [rsp + 16 + 32], r10
		mov r10, [rsp + 8 + 24]
		mov [rsp + 16 + 24], r10
		mov r10, [rsp + 8 + 16]
		mov [rsp + 16 + 16], r10
		mov r10, [rsp + 8 + 8]
		mov [rsp + 16 + 8], r10
		mov r10, [rsp + 8 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	; Moving 16 bytes from rsp + 0 to rsp + 24
		mov r10, [rsp + 0 + 8]
		mov [rsp + 24 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 24 + 0], r10
	add rsp, 24
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for o
	sub rsp, 8 ; Align stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for o
	mov rax, [rel const81] ; 823
	push rax
	mov rax, [rsp]
	; Computing bound for n
	mov rax, [rel const82] ; 558
	push rax
	mov rax, [rsp]
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump428
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump428:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
	; Initialize m to 0
	mov rax, 0
	push rax
.jump429: ; Begin body of loop
	; Compare o to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump431 ; If o >= bound, ...
	mov qword [rsp + 16], 0 ; o = 0
	add qword [rsp + 8], 1 ; n++
.jump431:
	; Compare n to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump432 ; If n >= bound, ...
	mov qword [rsp + 8], 0 ; n = 0
	add qword [rsp + 0], 1 ; m++
.jump432:
	; Compare m to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump430 ; If m >= bound, break
.jump433:
	; Compute loop body
	mov rax, [rel const83] ; 97.87
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 48] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment o
	add qword [rsp + 16], 1
	jmp .jump429
.jump430: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump434
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump434:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize m to 0
	mov rax, 0
	push rax
.jump435: ; Begin body of loop
	; Compare m to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump436 ; If m >= bound, break
.jump437:
	; Compute loop body
	mov rax, [rel const84] ; 35.92
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 16] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 16], xmm0 ; Save sum
	; Increment m
	add qword [rsp + 0], 1
	jmp .jump435
.jump436: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump438
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump438:
	; Computing bound for n
	sub rsp, 16
	; Moving 16 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump439
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	jmp .jump440
.jump439:
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump441
	lea rdi, [rel const3] ; divide by zero
	call _fail_assertion
.jump441:
	cqo
	idiv r10
	push rax
.jump440:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump442
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump442:
	cmp rax, [rsp + 8]
	jl .jump443
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump443:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump444
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump444:
	; Computing bound for m
	sub rsp, 8 ; Align stack
	mov rax, [rel const85] ; 51.95
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump445
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump445:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by to_int(51.95)
	jno .jump446
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump446:
	imul rdi, [rsp + 0 + 8] ; multiply by a[(if c then (- b) else (argnum / j))]
	jno .jump447
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump447:
imul rdi, [rsp + 0 + 16] ; multiply by to_int((- atan2((sum[m : argnum] 35.92), (sum[m : l, n : 558, o : 823] 97.87))))
	jno .jump448
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump448:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
	; Initialize m to 0
	mov rax, 0
	push rax
.jump449: ; Begin body of loop
	; Compare o to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump451 ; If o >= bound, ...
	mov qword [rsp + 16], 0 ; o = 0
	add qword [rsp + 8], 1 ; n++
.jump451:
	; Compare n to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump452 ; If n >= bound, ...
	mov qword [rsp + 8], 0 ; n = 0
	add qword [rsp + 0], 1 ; m++
.jump452:
	; Compare m to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump450 ; If m >= bound, break
.jump453:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment o
	add qword [rsp + 16], 1
	jmp .jump449
.jump450: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump454
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
.jump454:
	push rax
	pop rax
	cmp rax, 0
	jne .jump455
	lea rdi, [rel const86] ; q
	call _fail_assertion
.jump455:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for r
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	mov rax, [rsp]
	cmp rax, 0
	jg .jump456
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump456:
	; Computing bound for q
	mov rax, [rel const10] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump457
	mov rax, [rel const10] ; True
	push rax
	pop rax
.jump457:
	push rax
	pop rax
	cmp rax, 0
	je .jump458
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const9] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump460
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	jmp .jump461
.jump460:
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
.jump461:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump462
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump462:
	cmp rax, [rsp + 8]
	jl .jump463
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump463:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump459
.jump458:
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
.jump459:
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump464
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump464:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by (- (if (true && true) then args[(if false then p else o)] else p))
	jno .jump465
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump465:
	imul rdi, [rsp + 0 + 8] ; multiply by {n}{0}
	jno .jump466
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump466:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize r to 0
	mov rax, 0
	push rax
	; Initialize q to 0
	mov rax, 0
	push rax
.jump467: ; Begin body of loop
	; Compare r to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump469 ; If r >= bound, ...
	mov qword [rsp + 8], 0 ; r = 0
	add qword [rsp + 0], 1 ; q++
.jump469:
	; Compare q to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump468 ; If q >= bound, break
.jump470:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment r
	add qword [rsp + 8], 1
	jmp .jump467
.jump468: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rax, [rbp - 8] ; Address to write return value into
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 104 ; Local variables
	pop rbp
	ret

i:
_i:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump479
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump481
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump481:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump482
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump482:
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump483
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump483:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump484
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump484:
	imul rdi, [rsp + 0 + 8] ; multiply by m
	jno .jump485
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump485:
	imul rdi, [rsp + 0 + 16] ; multiply by m
	jno .jump486
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump486:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
.jump487: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump489 ; If p >= bound, ...
	mov qword [rsp + 16], 0 ; p = 0
	add qword [rsp + 8], 1 ; o++
.jump489:
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump490 ; If o >= bound, ...
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
.jump490:
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump488 ; If n >= bound, break
.jump491:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment p
	add qword [rsp + 16], 1
	jmp .jump487
.jump488: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump480
.jump479:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump492
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump492:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump493
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump493:
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump494
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump494:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by k
	jno .jump495
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump495:
	imul rdi, [rsp + 0 + 8] ; multiply by l
	jno .jump496
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump496:
	imul rdi, [rsp + 0 + 16] ; multiply by b
	jno .jump497
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump497:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
.jump498: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump500 ; If p >= bound, ...
	mov qword [rsp + 16], 0 ; p = 0
	add qword [rsp + 8], 1 ; o++
.jump500:
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump501 ; If o >= bound, ...
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
.jump501:
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump499 ; If n >= bound, break
.jump502:
	; Compute loop body
	mov rax, [rel const9] ; False
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment p
	add qword [rsp + 16], 1
	jmp .jump498
.jump499: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump480:
	; Moving 32 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 24]
		mov [rsp + 0 + 24], r10
		mov r10, [rsp + 0 + 16]
		mov [rsp + 0 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for n
	sub rsp, 8 ; Align stack
	mov rax, [rel const90] ; 434
	push rax
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump503
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump503:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
.jump504: ; Begin body of loop
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump505 ; If n >= bound, break
.jump506:
	; Compute loop body
	sub rsp, 16
	; Moving 16 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump507
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump507:
	cmp rax, [rsp + 8]
	jl .jump508
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump508:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment n
	add qword [rsp + 0], 1
	jmp .jump504
.jump505: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rel const10] ; True
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	mov rax, [rel const9] ; False
	push rax
	pop rax
	cmp rax, 0
	jne .jump509
	mov rax, [rel const9] ; False
	push rax
	pop rax
.jump509:
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump510
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump512
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump512:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
.jump513: ; Begin body of loop
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump514 ; If n >= bound, break
.jump515:
	; Compute loop body
	mov rax, [rel const91] ; 718
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment n
	add qword [rsp + 0], 1
	jmp .jump513
.jump514: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	jmp .jump511
.jump510:
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
.jump511:
	pop rax
	neg rax
	push rax
	mov rax, [rel const92] ; 455
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump516
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump516:
	cmp rax, [rsp + 24]
	jl .jump517
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump517:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump518
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump518:
	cmp rax, [rsp + 32]
	jl .jump519
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump519:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump520
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump520:
	cmp rax, [rsp + 40]
	jl .jump521
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump521:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	add rsp, 0 ; Local variables
	pop rbp
	ret
	sub rsp, 16
	; Moving 16 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const93] ; 224
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	jne .jump522
	mov rax, [rel const10] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump523
	mov rax, [rel const10] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump525
	mov rax, [rel const10] ; True
	push rax
	pop rax
.jump525:
	push rax
	pop rax
	cmp rax, 0
	je .jump526
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for r
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump528
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump528:
	; Computing bound for q
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump529
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump529:
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump530
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump530:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by k
	jno .jump531
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump531:
	imul rdi, [rsp + 0 + 8] ; multiply by l
	jno .jump532
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump532:
	imul rdi, [rsp + 0 + 16] ; multiply by l
	jno .jump533
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump533:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize r to 0
	mov rax, 0
	push rax
	; Initialize q to 0
	mov rax, 0
	push rax
	; Initialize p to 0
	mov rax, 0
	push rax
.jump534: ; Begin body of loop
	; Compare r to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump536 ; If r >= bound, ...
	mov qword [rsp + 16], 0 ; r = 0
	add qword [rsp + 8], 1 ; q++
.jump536:
	; Compare q to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump537 ; If q >= bound, ...
	mov qword [rsp + 8], 0 ; q = 0
	add qword [rsp + 0], 1 ; p++
.jump537:
	; Compare p to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump535 ; If p >= bound, break
.jump538:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment r
	add qword [rsp + 16], 1
	jmp .jump534
.jump535: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump527
.jump526:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for r
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump539
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump539:
	; Computing bound for q
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump540
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump540:
	; Computing bound for p
	mov rax, [rel const94] ; 640
	push rax
	mov rax, [rsp]
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by 640
	jno .jump541
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump541:
	imul rdi, [rsp + 0 + 8] ; multiply by k
	jno .jump542
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump542:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump543
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump543:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize r to 0
	mov rax, 0
	push rax
	; Initialize q to 0
	mov rax, 0
	push rax
	; Initialize p to 0
	mov rax, 0
	push rax
.jump544: ; Begin body of loop
	; Compare r to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump546 ; If r >= bound, ...
	mov qword [rsp + 16], 0 ; r = 0
	add qword [rsp + 8], 1 ; q++
.jump546:
	; Compare q to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump547 ; If q >= bound, ...
	mov qword [rsp + 8], 0 ; q = 0
	add qword [rsp + 0], 1 ; p++
.jump547:
	; Compare p to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump545 ; If p >= bound, break
.jump548:
	; Compute loop body
	mov rax, [rel const10] ; True
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment r
	add qword [rsp + 16], 1
	jmp .jump544
.jump545: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump527:
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const95] ; 935
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump549
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump549:
	cmp rax, [rsp + 24]
	jl .jump550
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump550:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump551
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump551:
	cmp rax, [rsp + 32]
	jl .jump552
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump552:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump553
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump553:
	cmp rax, [rsp + 40]
	jl .jump554
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump554:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump524
.jump523:
	mov rax, [rel const96] ; 82.62
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	mov rax, [rel const97] ; 620
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
.jump524:
	pop rax
.jump522:
	push rax
	pop rax
	add rsp, 16 ; Local variables
	pop rbp
	ret
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump555
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for q
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump557
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump557:
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump558
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump558:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump559
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump559:
	imul rdi, [rsp + 0 + 8] ; multiply by b
	jno .jump560
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump560:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize q to 0
	mov rax, 0
	push rax
	; Initialize p to 0
	mov rax, 0
	push rax
.jump561: ; Begin body of loop
	; Compare q to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump563 ; If q >= bound, ...
	mov qword [rsp + 8], 0 ; q = 0
	add qword [rsp + 0], 1 ; p++
.jump563:
	; Compare p to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump562 ; If p >= bound, break
.jump564:
	; Compute loop body
	mov rax, [rel const10] ; True
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment q
	add qword [rsp + 8], 1
	jmp .jump561
.jump562: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump565
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump565:
	cmp rax, [rsp + 16]
	jl .jump566
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump566:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump567
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump567:
	cmp rax, [rsp + 24]
	jl .jump568
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump568:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump569
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const9] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump571
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	jmp .jump572
.jump571:
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
.jump572:
	jmp .jump570
.jump569:
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const10] ; True
	push rax
.jump570:
	jmp .jump556
.jump555:
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const9] ; False
	push rax
	; Moving 16 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
.jump556:
	; Moving 8 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	pop rax
	cmp rax, 0
	jne .jump573
	lea rdi, [rel const98] ; p
	call _fail_assertion
.jump573:
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	add rsp, 16 ; Local variables
	pop rbp
	ret

jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for b
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for b
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump1:
	; Computing bound for a
	mov rax, [rel const1] ; 170
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump2
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump2:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize b to 0
	mov rax, 0
	push rax
	; Initialize a to 0
	mov rax, 0
	push rax
.jump3: ; Begin body of loop
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump5 ; If b >= bound, ...
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
.jump5:
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump4 ; If a >= bound, break
.jump6:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment b
	add qword [rsp + 8], 1
	jmp .jump3
.jump4: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rel const2] ; 691
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump7
	lea rdi, [rel const3] ; divide by zero
	call _fail_assertion
.jump7:
	cqo
	idiv r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump8
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump8:
	; Computing bound for a
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for b
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump9
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump9:
	; Computing bound for a
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump10
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump10:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize b to 0
	mov rax, 0
	push rax
	; Initialize a to 0
	mov rax, 0
	push rax
.jump11: ; Begin body of loop
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump13 ; If b >= bound, ...
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
.jump13:
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump12 ; If a >= bound, break
.jump14:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment b
	add qword [rsp + 8], 1
	jmp .jump11
.jump12: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump15
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump15:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof int[]
imul rdi, [rsp + 0 + 0] ; multiply by (sum[a : argnum, b : argnum] (- argnum))
	jno .jump16
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump16:
imul rdi, [rsp + 0 + 8] ; multiply by (691 / (sum[a : (- 170), b : argnum] a))
	jno .jump17
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump17:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize b to 0
	mov rax, 0
	push rax
	; Initialize a to 0
	mov rax, 0
	push rax
.jump18: ; Begin body of loop
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump20 ; If b >= bound, ...
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
.jump20:
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump19 ; If a >= bound, break
.jump21:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for c
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for e
	mov rax, [rel const5] ; 768
	push rax
	mov rax, [rel const6] ; 157
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump22
	lea rdi, [rel const3] ; divide by zero
	call _fail_assertion
.jump22:
	cqo
	idiv r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump23
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump23:
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const7] ; 380
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump24
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump24:
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump25
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump25:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump26: ; Begin body of loop
	; Compare e to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump28 ; If e >= bound, ...
	mov qword [rsp + 16], 0 ; e = 0
	add qword [rsp + 8], 1 ; d++
.jump28:
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump29 ; If d >= bound, ...
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
.jump29:
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump27 ; If c >= bound, break
.jump30:
	; Compute loop body
	mov rax, [rel const8] ; 78.34
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment e
	add qword [rsp + 16], 1
	jmp .jump26
.jump27: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump31
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump31:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
imul rdi, [rsp + 0 + 0] ; multiply by (sum[c : b, d : (380 * argnum), e : (157 / 768)] to_int(78.34))
	jno .jump32
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump32:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
.jump33: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump34 ; If c >= bound, break
.jump35:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment c
	add qword [rsp + 0], 1
	jmp .jump33
.jump34: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 4
	add rax, [rsp + 48]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment b
	add qword [rsp + 8], 1
	jmp .jump18
.jump19: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const9] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump36
	mov rax, [rel const10] ; True
	push rax
	jmp .jump37
.jump36:
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
.jump37:
	pop rax
	cmp rax, 0
	je .jump38
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump39
.jump38:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for b
	mov rax, [rel const10] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump40
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump41
.jump40:
	mov rax, [rel const11] ; 29
	push rax
.jump41:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump42
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump42:
	; Computing bound for a
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for a
	mov rax, [rel const12] ; 108
	push rax
	mov rax, [rsp]
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize a to 0
	mov rax, 0
	push rax
.jump43: ; Begin body of loop
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump44 ; If a >= bound, break
.jump45:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment a
	add qword [rsp + 0], 1
	jmp .jump43
.jump44: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump46
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump46:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize b to 0
	mov rax, 0
	push rax
	; Initialize a to 0
	mov rax, 0
	push rax
.jump47: ; Begin body of loop
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump49 ; If b >= bound, ...
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
.jump49:
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump48 ; If a >= bound, break
.jump50:
	; Compute loop body
	mov rax, [rel const13] ; 656
	push rax
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment b
	add qword [rsp + 8], 1
	jmp .jump47
.jump48: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
.jump39:
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump51
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump51:
	cmp rax, [rsp + 16]
	jl .jump52
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump52:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump53
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump53:
	cmp rax, [rsp + 24]
	jl .jump54
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump54:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 4
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const9] ; False
	push rax
	pop rax
	cmp rax, 0
	jne .jump55
	mov rax, [rel const9] ; False
	push rax
	pop rax
.jump55:
	push rax
	pop rax
	cmp rax, 0
	je .jump56
	mov rax, [rel const10] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump57
	mov rax, [rel const9] ; False
	push rax
	pop rax
.jump57:
	push rax
	pop rax
.jump56:
	push rax
	pop rax
	cmp rax, 0
	je .jump58
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for d
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump60
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump60:
	cmp rax, [rsp + 8]
	jl .jump61
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump61:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump62
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump62:
	; Computing bound for c
	mov rax, [rel const16] ; 649
	push rax
	mov rax, [rsp]
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof {bool,bool}
	imul rdi, [rsp + 0 + 0] ; multiply by 649
	jno .jump63
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump63:
	imul rdi, [rsp + 0 + 8] ; multiply by args[b]
	jno .jump64
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump64:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump65: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump67 ; If d >= bound, ...
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
.jump67:
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump66 ; If c >= bound, break
.jump68:
	; Compute loop body
	mov rax, [rel const10] ; True
	push rax
	mov rax, [rel const10] ; True
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 4
	add rax, [rsp + 48]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment d
	add qword [rsp + 8], 1
	jmp .jump65
.jump66: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump59
.jump58:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump69
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump69:
	; Computing bound for c
	mov rax, [rel const17] ; 201
	push rax
	mov rax, [rsp]
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof {bool,bool}
	imul rdi, [rsp + 0 + 0] ; multiply by 201
	jno .jump70
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump70:
	imul rdi, [rsp + 0 + 8] ; multiply by (- b)
	jno .jump71
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump71:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump72: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump74 ; If d >= bound, ...
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
.jump74:
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump73 ; If c >= bound, break
.jump75:
	; Compute loop body
	mov rax, [rel const10] ; True
	push rax
	mov rax, [rel const9] ; False
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 4
	add rax, [rsp + 48]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment d
	add qword [rsp + 8], 1
	jmp .jump72
.jump73: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump59:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for c
	sub rsp, 8 ; Align stack
	mov rax, [rel const18] ; 41
	push rax
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump76
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump76:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
.jump77: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump78 ; If c >= bound, break
.jump79:
	; Compute loop body
	mov rax, [rel const19] ; 283
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment c
	add qword [rsp + 0], 1
	jmp .jump77
.jump78: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rel const9] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump80
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	jmp .jump81
.jump80:
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
.jump81:
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump82
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; divide by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump82:
	cqo
	idiv r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump83
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump83:
	cmp rax, [rsp + 16]
	jl .jump84
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump84:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump85
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump85:
	cmp rax, [rsp + 24]
	jl .jump86
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump86:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 4
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	pop rax
	cmp rax, 0
	jne .jump87
	sub rsp, 8 ; Align stack
	lea rdi, [rel const20] ; c
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump87:
	mov rax, [rel const10] ; True
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	sub rsp, 8 ; Align stack
	mov rax, [rel const9] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump295
	mov rax, [rel const10] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump296
	mov rax, [rel const10] ; True
	push rax
	jmp .jump297
.jump296:
	mov rax, [rel const59] ; 208
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
.jump297:
	pop rax
	cmp rax, 0
	je .jump298
	mov rax, [rel const9] ; False
	push rax
	jmp .jump299
.jump298:
	mov rax, [rel const9] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump300
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
.jump300:
	push rax
	pop rax
	cmp rax, 0
	je .jump301
	mov rax, [rel const10] ; True
	push rax
	jmp .jump302
.jump301:
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	jne .jump303
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
.jump303:
	push rax
.jump302:
.jump299:
	pop rax
.jump295:
	push rax
	pop rax
	cmp rax, 0
	je .jump304
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for h
	mov rax, [rel const60] ; 392
	push rax
	mov rax, [rsp]
	; Computing bound for g
	mov rax, [rel const10] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump306
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for i
	mov rax, [rel const61] ; 382
	push rax
	mov rax, [rsp]
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump308
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump308:
	; Computing bound for g
	mov rax, [rel const62] ; 10
	push rax
	mov rax, [rsp]
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by 10
	jno .jump309
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump309:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump310
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump310:
	imul rdi, [rsp + 0 + 16] ; multiply by 382
	jno .jump311
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump311:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
.jump312: ; Begin body of loop
	; Compare i to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump314 ; If i >= bound, ...
	mov qword [rsp + 16], 0 ; i = 0
	add qword [rsp + 8], 1 ; h++
.jump314:
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump315 ; If h >= bound, ...
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
.jump315:
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump313 ; If g >= bound, break
.jump316:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment i
	add qword [rsp + 16], 1
	jmp .jump312
.jump313: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	mov rax, [rel const63] ; 329
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump317
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump317:
	cmp rax, [rsp + 24]
	jl .jump318
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump318:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump319
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump319:
	cmp rax, [rsp + 32]
	jl .jump320
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump320:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump321
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump321:
	cmp rax, [rsp + 40]
	jl .jump322
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump322:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump307
.jump306:
	mov rax, [rel const9] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump323
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	jmp .jump324
.jump323:
	mov rax, [rel const64] ; 442
	push rax
.jump324:
.jump307:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump325
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump325:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof {float,float,float,float}
imul rdi, [rsp + 0 + 0] ; multiply by (if true then (array[g : 10, h : argnum, i : 382] i)[(- argnum), argnum, 329] else (if false then b else 442))
	jno .jump326
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump326:
	imul rdi, [rsp + 0 + 8] ; multiply by 392
	jno .jump327
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump327:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
.jump328: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump330 ; If h >= bound, ...
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
.jump330:
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump329 ; If g >= bound, break
.jump331:
	; Compute loop body
	mov rax, [rel const65] ; 36.72
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const66] ; 6.61
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump332
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump332:
	; Computing bound for i
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump333
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump333:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
.jump334: ; Begin body of loop
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump335 ; If i >= bound, break
.jump336:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment i
	add qword [rsp + 0], 1
	jmp .jump334
.jump335: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump337
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump337:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
.jump338: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump340 ; If j >= bound, ...
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
.jump340:
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump339 ; If i >= bound, break
.jump341:
	; Compute loop body
	sub rsp, 8 ; Align stack
	mov rax, [rel const67] ; 6.35
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 32] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 32], xmm0 ; Save sum
	; Increment j
	add qword [rsp + 8], 1
	jmp .jump338
.jump339: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	shl rax, 5
	add rax, [rsp + 64]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment h
	add qword [rsp + 8], 1
	jmp .jump328
.jump329: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump305
.jump304:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for h
	mov rax, [rel const9] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump342
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump344
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump344:
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump345
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump345:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump346
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump346:
	imul rdi, [rsp + 0 + 8] ; multiply by b
	jno .jump347
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump347:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
.jump348: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump350 ; If h >= bound, ...
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
.jump350:
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump349 ; If g >= bound, break
.jump351:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment h
	add qword [rsp + 8], 1
	jmp .jump348
.jump349: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump343
.jump342:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump352
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump352:
	; Computing bound for g
	mov rax, [rel const68] ; 623
	push rax
	mov rax, [rsp]
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by 623
	jno .jump353
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump353:
	imul rdi, [rsp + 0 + 8] ; multiply by b
	jno .jump354
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump354:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
.jump355: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump357 ; If h >= bound, ...
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
.jump357:
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump356 ; If g >= bound, break
.jump358:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment h
	add qword [rsp + 8], 1
	jmp .jump355
.jump356: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump343:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump359
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump359:
	; Computing bound for h
	mov rax, [rel const69] ; 943
	push rax
	mov rax, [rsp]
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump360
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump360:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump361
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump361:
	imul rdi, [rsp + 0 + 8] ; multiply by 943
	jno .jump362
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump362:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump363
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump363:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
.jump364: ; Begin body of loop
	; Compare i to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump366 ; If i >= bound, ...
	mov qword [rsp + 16], 0 ; i = 0
	add qword [rsp + 8], 1 ; h++
.jump366:
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump367 ; If h >= bound, ...
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
.jump367:
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump365 ; If g >= bound, break
.jump368:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment i
	add qword [rsp + 16], 1
	jmp .jump364
.jump365: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	mov rax, [rel const70] ; 939
	push rax
	mov rax, [rel const71] ; 154
	push rax
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump369
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump369:
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump370
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump370:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
.jump371: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump373 ; If h >= bound, ...
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
.jump373:
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump372 ; If g >= bound, break
.jump374:
	; Compute loop body
	mov rax, [rel const72] ; 732
	push rax
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment h
	add qword [rsp + 8], 1
	jmp .jump371
.jump372: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump375
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump375:
	cmp rax, [rsp + 24]
	jl .jump376
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump376:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump377
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump377:
	cmp rax, [rsp + 32]
	jl .jump378
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump378:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump379
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump379:
	cmp rax, [rsp + 40]
	jl .jump380
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump380:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const73] ; 727
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump381
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump381:
	cmp rax, [rsp + 16]
	jl .jump382
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump382:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump383
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump383:
	cmp rax, [rsp + 24]
	jl .jump384
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump384:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump385
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump385:
	; Computing bound for g
	sub rsp, 8 ; Align stack
	mov rax, [rel const74] ; 60.05
	push rax
	sub rsp, 8 ; Align stack
	mov rax, [rel const75] ; 74.02
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump386
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump386:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof {float,float,float,float}
	imul rdi, [rsp + 0 + 0] ; multiply by to_int((sqrt(74.02) % 60.05))
	jno .jump387
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump387:
imul rdi, [rsp + 0 + 8] ; multiply by (if false then (array[g : argnum, h : b] h) else (array[g : 623, h : b] b))[727, (array[g : argnum, h : 943, i : argnum] h)[(sum[g : b, h : b] 732), 154, 939]]
	jno .jump388
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump388:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
.jump389: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump391 ; If h >= bound, ...
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
.jump391:
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump390 ; If g >= bound, break
.jump392:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const76] ; 7.93
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const77] ; 55.8
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	shl rax, 5
	add rax, [rsp + 64]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment h
	add qword [rsp + 8], 1
	jmp .jump389
.jump390: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump305:
	lea rdi, [rel const78] ; g.png
	call _write_image
	add rsp, 24
	add rsp, 8 ; Remove alignment
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for h
	sub rsp, 8 ; Align stack
	mov rax, [rel const87] ; 49.96
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump471
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump471:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
.jump472: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump473 ; If h >= bound, break
.jump474:
	; Compute loop body
	sub rsp, 8 ; Align stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump475
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump475:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
.jump476: ; Begin body of loop
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump477 ; If i >= bound, break
.jump478:
	; Compute loop body
	mov rax, [rel const88] ; 72.43
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 16] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 16], xmm0 ; Save sum
	; Increment i
	add qword [rsp + 0], 1
	jmp .jump476
.jump477: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 16] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 16], xmm0 ; Save sum
	; Increment h
	add qword [rsp + 0], 1
	jmp .jump472
.jump473: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	sub rsp, 8 ; Align stack
	call _get_time
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	lea rdi, [rel const89] ; i
	call _print
	call _get_time
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 0]
	subsd xmm0, xmm1
	call _print_time
	add rsp, 40 ; Local variables
	pop r12
	pop rbp
	ret

