global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: db `a.png`, 0
const1: dq 0
const2: dq 317
const3: dq 374
const4: db `non-positive loop bound`, 0
const5: db `overflow computing array size`, 0
const6: dq 66.12
const7: dq 40.39
const8: db `negative array index`, 0
const9: db `index too large`, 0
const10: dq 914
const11: dq 369
const12: dq 1
const13: dq 537
const14: dq 917
const15: dq 56
const16: dq 566
const17: dq 824
const18: db `f.png`, 0
const19: db `g.png`, 0
const20: dq 795
const21: dq 520
const22: dq 935
const23: db `k`, 0
const24: db `divide by zero`, 0
const25: db `j.png`, 0
const26: db `k.png`, 0
const27: dq 172
const28: db `m`, 0

section .text
i:
_i:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const21] ; 520
	push rax
	mov rax, [rel const22] ; 935
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	jne .jump39
	mov rax, [rel const1] ; False
	push rax
	pop rax
.jump39:
	push rax
	mov rax, [rel const1] ; False
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump40
	mov rax, [rel const12] ; True
	push rax
	jmp .jump41
.jump40:
	mov rax, [rel const1] ; False
	push rax
.jump41:
	pop rax
	cmp rax, 0
	jne .jump42
	sub rsp, 8 ; Align stack
	lea rdi, [rel const23] ; k
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump42:
	sub rsp, 8
	; Moving 8 bytes from r12 - 104 to rsp
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	; Moving 24 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 72 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const1] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump43
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	jmp .jump44
.jump43:
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump45
	sub rsp, 8 ; Align stack
	lea rdi, [rel const24] ; divide by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump45:
	cqo
	idiv r10
	push rax
.jump44:
	pop rax
	neg rax
	push rax
	sub rsp, 0
	; Moving 0 bytes from r12 - 32 to rsp
	sub rsp, 8
	; Moving 8 bytes from r12 - 104 to rsp
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	; Moving 24 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 40 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 24 to rsp + 24
		mov r10, [rsp + 24 + 0]
		mov [rsp + 24 + 0], r10
	add rsp, 24
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	mov rax, [rel const12] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump46
	mov rax, [rel const1] ; False
	push rax
	jmp .jump47
.jump46:
	mov rax, [rel const1] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
.jump47:
	pop rax
	cmp rax, 0
	je .jump48
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump49
.jump48:
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
.jump49:
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setg al
	and rax, 1
	push rax
	pop rax
	add rsp, 48 ; Local variables
	pop rbp
	ret

jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp
	sub rsp, 24
	lea rdi, [rsp]
	lea rsi, [rel const0] ; a.png
	call _read_image
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for c
	mov rax, [rel const1] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump1
	mov rax, [rel const2] ; 317
	push rax
	jmp .jump2
.jump1:
	mov rax, [rel const3] ; 374
	push rax
.jump2:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump3
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump3:
	; Computing bound for b
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump4
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump4:
	; Computing total size of heap memory to allocate
	mov rdi, 0 ; sizeof {{}}
	imul rdi, [rsp + 0 + 0] ; multiply by (- argnum)
	jno .jump5
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump5:
	imul rdi, [rsp + 0 + 8] ; multiply by (if false then 317 else 374)
	jno .jump6
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump6:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump7: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump9 ; If c >= bound, ...
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
.jump9:
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump8 ; If b >= bound, break
.jump10:
	; Compute loop body
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 0
	add rax, [rsp + 32]
	; Move body (0 bytes) to index
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	; Increment c
	add qword [rsp + 8], 1
	jmp .jump7
.jump8: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8 ; Align stack
	mov rax, [rel const6] ; 66.12
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const7] ; 40.39
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump11
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump11:
	cmp rax, [rsp + 16]
	jl .jump12
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump12:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump13
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump13:
	cmp rax, [rsp + 24]
	jl .jump14
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump14:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 0
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 0
	; Moving 0 bytes from rax to rsp
	mov rax, [rel const1] ; False
	push rax
	pop rax
	cmp rax, 0
	jne .jump15
	mov rax, [rel const1] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump16
	mov rax, [rel const1] ; False
	push rax
	pop rax
.jump16:
	push rax
	pop rax
	cmp rax, 0
	jne .jump17
	mov rax, [rel const10] ; 914
	push rax
	mov rax, [rel const11] ; 369
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	pop rax
.jump17:
	push rax
	pop rax
.jump15:
	push rax
	; Moving 0 bytes from rsp + 8 to rsp + 8
	add rsp, 8
	mov rax, [rel const12] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump18
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump19
.jump18:
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for e
	mov rax, [rel const13] ; 537
	push rax
	mov rax, [rsp]
	; Computing bound for d
	mov rax, [rel const14] ; 917
	push rax
	mov rax, [rsp]
	; Computing bound for c
	mov rax, [rel const15] ; 56
	push rax
	mov rax, [rsp]
	mov rdi, 441216384
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump20: ; Begin body of loop
	; Compare e to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump22 ; If e >= bound, ...
	mov qword [rsp + 16], 0 ; e = 0
	add qword [rsp + 8], 1 ; d++
.jump22:
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump23 ; If d >= bound, ...
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
.jump23:
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump21 ; If c >= bound, break
.jump24:
	; Compute loop body
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	shl rax, 4
	add rax, [rsp + 64]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment e
	add qword [rsp + 16], 1
	jmp .jump20
.jump21: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Moving 32 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 24]
		mov [rsp + 8 + 24], r10
		mov r10, [rsp + 0 + 16]
		mov [rsp + 8 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 8 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const1] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump25
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump26
.jump25:
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
.jump26:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump27
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
.jump27:
	cmp rax, [rsp + 8]
	jl .jump28
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
.jump28:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rel const1] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump29
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump30
.jump29:
	mov rax, [rel const1] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump31
	mov rax, [rel const16] ; 566
	push rax
	jmp .jump32
.jump31:
	mov rax, [rel const17] ; 824
	push rax
.jump32:
.jump30:
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump33
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump33:
	cmp rax, [rsp + 24]
	jl .jump34
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump34:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump35
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump35:
	cmp rax, [rsp + 32]
	jl .jump36
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump36:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump37
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump37:
	cmp rax, [rsp + 40]
	jl .jump38
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump38:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 4
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump19:
	sub rsp, 24
	lea rdi, [rsp]
	sub rsp, 8 ; Align stack
	lea rsi, [rel const18] ; f.png
	call _read_image
	add rsp, 8 ; Remove alignment
	sub rsp, 24
	lea rdi, [rsp]
	lea rsi, [rel const19] ; g.png
	call _read_image
	mov rax, [rel const20] ; 795
	push rax
	sub rsp, 24
	lea rdi, [rsp]
	lea rsi, [rel const25] ; j.png
	call _read_image
	sub rsp, 24
	lea rdi, [rsp]
	sub rsp, 8 ; Align stack
	lea rsi, [rel const26] ; k.png
	call _read_image
	add rsp, 8 ; Remove alignment
	mov rax, [rel const27] ; 172
	push rax
	mov rax, [rel const12] ; True
	push rax
	pop rax
	cmp rax, 0
	jne .jump50
	lea rdi, [rel const28] ; m
	call _fail_assertion
.jump50:
	add rsp, 152 ; Local variables
	pop r12
	pop rbp
	ret

