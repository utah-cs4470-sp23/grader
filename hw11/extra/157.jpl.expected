global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 17.06
const1: dq 49.11
const2: db `negative array index`, 0
const3: db `index too large`, 0
const4: db `non-positive loop bound`, 0
const5: dq 917
const6: db `overflow computing array size`, 0
const7: dq 72.83
const8: dq 367
const9: dq 437
const10: dq 55.59
const11: db `d`, 0
const12: dq 468
const13: db `divide by zero`, 0
const14: dq 1
const15: dq 0
const16: dq 722
const17: dq 158
const18: dq 432
const19: dq 826
const20: dq 849
const21: dq 416
const22: dq 45.51
const23: dq 567
const24: dq 150
const25: dq 841
const26: dq 910
const27: dq 23.48
const28: dq 723
const29: dq 347
const30: dq 592
const31: dq 25
const32: dq 9.9
const33: dq 98.78
const34: dq 12.64
const35: dq 819
const36: dq 983
const37: dq 306
const38: dq 591
const39: dq 733
const40: dq 932
const41: dq 109
const42: dq 86.61
const43: dq 384
const44: dq 104
const45: db `b`, 0
const46: dq 614
const47: dq 899
const48: dq 411
const49: dq 752
const50: dq 492
const51: dq 390
const52: dq 8.35
const53: dq 64
const54: dq 924
const55: dq 49.39
const56: dq 55.21
const57: dq 40.98
const58: dq 67.38
const59: dq 55.2
const60: dq 495
const61: dq 986
const62: dq 77.82
const63: dq 121
const64: dq 691
const65: dq 799
const66: dq 78
const67: dq 823
const68: dq 50
const69: dq 992
const70: dq 809
const71: dq 98.95
const72: dq 90.81
const73: dq 680
const74: dq 46.47
const75: db `g`, 0
const76: dq 621
const77: dq 736
const78: db `l`, 0

section .text
a:
_a:
	push rbp
	mov rbp, rsp
	push rdi
	sub rsp, 8 ; Align stack
	mov rax, [rel const0] ; 17.06
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const1] ; 49.11
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for f
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump1
	lea rdi, [rel const2] ; negative array index
	call _fail_assertion
.jump1:
	cmp rax, [rsp + 8]
	jl .jump2
	lea rdi, [rel const3] ; index too large
	call _fail_assertion
.jump2:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump3
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump3:
	; Computing bound for e
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump4
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump4:
	; Computing bound for d
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for e
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump5
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump5:
	; Computing bound for d
	mov rax, [rel const5] ; 917
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump6
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump6:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
.jump7: ; Begin body of loop
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump9 ; If e >= bound, ...
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
.jump9:
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump8 ; If d >= bound, break
.jump10:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment e
	add qword [rsp + 8], 1
	jmp .jump7
.jump8: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump11
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump11:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
imul rdi, [rsp + 0 + 0] ; multiply by (sum[d : 917, e : argnum] argnum)
	jno .jump12
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump12:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump13
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump13:
	imul rdi, [rsp + 0 + 16] ; multiply by args[argnum]
	jno .jump14
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump14:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize f to 0
	mov rax, 0
	push rax
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
.jump15: ; Begin body of loop
	; Compare f to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump17 ; If f >= bound, ...
	mov qword [rsp + 16], 0 ; f = 0
	add qword [rsp + 8], 1 ; e++
.jump17:
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump18 ; If e >= bound, ...
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
.jump18:
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump16 ; If d >= bound, break
.jump19:
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump20
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump20:
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump21
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump21:
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump22
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump22:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
.jump23: ; Begin body of loop
	; Compare i to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump25 ; If i >= bound, ...
	mov qword [rsp + 16], 0 ; i = 0
	add qword [rsp + 8], 1 ; h++
.jump25:
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump26 ; If h >= bound, ...
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
.jump26:
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump24 ; If g >= bound, break
.jump27:
	; Compute loop body
	mov rax, [rel const7] ; 72.83
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 48] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment i
	add qword [rsp + 16], 1
	jmp .jump23
.jump24: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment f
	add qword [rsp + 16], 1
	jmp .jump15
.jump16: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const8] ; 367
	push rax
	mov rax, [rel const9] ; 437
	push rax
	; Moving 8 bytes from rsp + 16 to rsp + 16
		mov r10, [rsp + 16 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	mov rax, [rel const10] ; 55.59
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump28
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump28:
	cmp rax, [rsp + 24]
	jl .jump29
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump29:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump30
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump30:
	cmp rax, [rsp + 32]
	jl .jump31
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump31:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump32
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump32:
	cmp rax, [rsp + 40]
	jl .jump33
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump33:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	jne .jump34
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; d
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump34:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const12] ; 468
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump35
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; divide by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump35:
	cqo
	idiv r10
	push rax
	mov rax, [rel const14] ; True
	push rax
	; Moving 8 bytes from rsp + 8 to rsp + 16
		mov r10, [rsp + 8 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	mov rax, [rsp]
	cmp rax, 0
	jg .jump36
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump36:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by {true, (argnum / 468), argnum}{1}
	jno .jump37
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump37:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
.jump38: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump39 ; If d >= bound, break
.jump40:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const15] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump41
	mov rax, [rel const15] ; False
	push rax
	pop rax
.jump41:
	push rax
	pop rax
	cmp rax, 0
	je .jump42
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump43
.jump42:
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
.jump43:
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment d
	add qword [rsp + 0], 1
	jmp .jump38
.jump39: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump44
	lea rdi, [rel const2] ; negative array index
	call _fail_assertion
.jump44:
	cmp rax, [rsp + 8]
	jl .jump45
	lea rdi, [rel const3] ; index too large
	call _fail_assertion
.jump45:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	jne .jump46
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; d
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump46:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for d
	mov rax, [rel const15] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump47
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const16] ; 722
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump49
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump49:
	cmp rax, [rsp + 8]
	jl .jump50
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump50:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump48
.jump47:
	mov rax, [rel const17] ; 158
	push rax
	pop rax
	neg rax
	push rax
.jump48:
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for d
	mov rax, [rel const18] ; 432
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump51
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump51:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
.jump52: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump53 ; If d >= bound, break
.jump54:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment d
	add qword [rsp + 0], 1
	jmp .jump52
.jump53: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump55
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump55:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
imul rdi, [rsp + 0 + 0] ; multiply by (((sum[d : (- 432)] d) + (- (- argnum))) + (if (! (! false)) then args[(- 722)] else (- 158)))
	jno .jump56
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump56:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
.jump57: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump58 ; If d >= bound, break
.jump59:
	; Compute loop body
	mov rax, [rel const19] ; 826
	push rax
	mov rax, [rel const20] ; 849
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	jne .jump60
	mov rax, [rel const21] ; 416
	push rax
	sub rsp, 8 ; Align stack
	mov rax, [rel const22] ; 45.51
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
.jump60:
	push rax
	pop rax
	xor rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment d
	add qword [rsp + 0], 1
	jmp .jump57
.jump58: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const14] ; True
	push rax
	pop rax
	cmp rax, 0
	jne .jump61
	mov rax, [rel const15] ; False
	push rax
	pop rax
.jump61:
	push rax
	pop rax
	cmp rax, 0
	je .jump62
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const23] ; 567
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
.jump62:
	push rax
	pop rax
	cmp rax, 0
	je .jump63
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	jmp .jump64
.jump63:
	mov rax, [rel const24] ; 150
	push rax
.jump64:
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump65
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump67
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump67:
	; Computing bound for f
	sub rsp, 8 ; Align stack
	mov rax, [rel const25] ; 841
	push rax
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump68
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump68:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof {int,bool,float}
	imul rdi, [rsp + 0 + 0] ; multiply by to_int(acos(to_float(841)))
	jno .jump69
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump69:
	imul rdi, [rsp + 0 + 8] ; multiply by (argnum + e)
	jno .jump70
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump70:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
.jump71: ; Begin body of loop
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump73 ; If g >= bound, ...
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
.jump73:
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump72 ; If f >= bound, break
.jump74:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump75
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump75:
	; Computing bound for h
	mov rax, [rel const26] ; 910
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump76
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump76:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof {int,bool,float}
	imul rdi, [rsp + 0 + 0] ; multiply by 910
	jno .jump77
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump77:
	imul rdi, [rsp + 0 + 8] ; multiply by g
	jno .jump78
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump78:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
.jump79: ; Begin body of loop
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump81 ; If i >= bound, ...
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
.jump81:
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump80 ; If h >= bound, break
.jump82:
	; Compute loop body
	mov rax, [rel const27] ; 23.48
	push rax
	mov rax, [rel const15] ; False
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 24
	add rax, [rsp + 56]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment i
	add qword [rsp + 8], 1
	jmp .jump79
.jump80: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump83
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump83:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by g
	jno .jump84
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump84:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
.jump85: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump86 ; If h >= bound, break
.jump87:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment h
	add qword [rsp + 0], 1
	jmp .jump85
.jump86: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump88
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump88:
	cmp rax, [rsp + 8]
	jl .jump89
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump89:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump90
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump90:
	cmp rax, [rsp + 16]
	jl .jump91
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump91:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump92
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump92:
	cmp rax, [rsp + 24]
	jl .jump93
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump93:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 24
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 24
	add rax, [rsp + 56]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment g
	add qword [rsp + 8], 1
	jmp .jump71
.jump72: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump66
.jump65:
	mov rax, [rel const28] ; 723
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump94
	sub rsp, 24
	sub rsp, 8 ; Align stack
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const14] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump96
	sub rsp, 40
	; Moving 40 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 32]
		mov [rsp + 32], r10
		mov r10, [rbp - -16 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - -16 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump97
.jump96:
	sub rsp, 40
	; Moving 40 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 32]
		mov [rsp + 32], r10
		mov r10, [rbp - -16 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - -16 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
.jump97:
	lea rdi, [rsp + 64]
	call _a
	add rsp, 40
	add rsp, 16
	add rsp, 8 ; Remove alignment
	jmp .jump95
.jump94:
	sub rsp, 24
	sub rsp, 8 ; Align stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for g
	mov rax, [rel const29] ; 347
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump98
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump98:
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump99
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump99:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof int[]
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump100
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump100:
	imul rdi, [rsp + 0 + 8] ; multiply by 347
	jno .jump101
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump101:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
.jump102: ; Begin body of loop
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump104 ; If g >= bound, ...
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
.jump104:
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump103 ; If f >= bound, break
.jump105:
	; Compute loop body
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 16
	add rax, [rsp + 48]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment g
	add qword [rsp + 8], 1
	jmp .jump102
.jump103: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rax, [rel const30] ; 592
	push rax
	mov rax, [rel const31] ; 25
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump106
	lea rdi, [rel const2] ; negative array index
	call _fail_assertion
.jump106:
	cmp rax, [rsp + 16]
	jl .jump107
	lea rdi, [rel const3] ; index too large
	call _fail_assertion
.jump107:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump108
	lea rdi, [rel const2] ; negative array index
	call _fail_assertion
.jump108:
	cmp rax, [rsp + 24]
	jl .jump109
	lea rdi, [rel const3] ; index too large
	call _fail_assertion
.jump109:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 16
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 40
	; Moving 40 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 32]
		mov [rsp + 32], r10
		mov r10, [rbp - -16 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - -16 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	lea rdi, [rsp + 64]
	call _a
	add rsp, 40
	add rsp, 16
	add rsp, 8 ; Remove alignment
.jump95:
.jump66:
	mov rax, [rbp - 8] ; Address to write return value into
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 48 ; Local variables
	pop rbp
	ret
	mov rax, [rel const32] ; 9.9
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const33] ; 98.78
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const34] ; 12.64
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	jne .jump110
	sub rsp, 24
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 40
	; Moving 40 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 32]
		mov [rsp + 32], r10
		mov r10, [rbp - -16 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - -16 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	lea rdi, [rsp + 56]
	call _a
	add rsp, 40
	add rsp, 16
	mov rax, [rel const14] ; True
	push rax
	pop rax
	cmp rax, 0
	jne .jump111
	mov rax, [rel const15] ; False
	push rax
	pop rax
.jump111:
	push rax
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump112
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump112:
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump113
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump113:
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump114
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump114:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
.jump115: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump117 ; If h >= bound, ...
	mov qword [rsp + 16], 0 ; h = 0
	add qword [rsp + 8], 1 ; g++
.jump117:
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump118 ; If g >= bound, ...
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
.jump118:
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump116 ; If f >= bound, break
.jump119:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment h
	add qword [rsp + 16], 1
	jmp .jump115
.jump116: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	; Moving 8 bytes from rsp + 8 to rsp + 32
		mov r10, [rsp + 8 + 0]
		mov [rsp + 32 + 0], r10
	add rsp, 32
	pop rax
.jump110:
	push rax
	pop rax
	cmp rax, 0
	je .jump120
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump122
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump122:
	; Computing bound for g
	mov rax, [rel const35] ; 819
	push rax
	mov rax, [rel const36] ; 983
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump123
	lea rdi, [rel const13] ; divide by zero
	call _fail_assertion
.jump123:
	cqo
	idiv r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump124
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump124:
	; Computing bound for f
	sub rsp, 16
	; Moving 16 bytes from rbp - -56 to rsp
		mov r10, [rbp - -56 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -56 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const37] ; 306
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump125
	lea rdi, [rel const2] ; negative array index
	call _fail_assertion
.jump125:
	cmp rax, [rsp + 8]
	jl .jump126
	lea rdi, [rel const3] ; index too large
	call _fail_assertion
.jump126:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump127
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump127:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by c[306]
	jno .jump128
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump128:
	imul rdi, [rsp + 0 + 8] ; multiply by (983 / 819)
	jno .jump129
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump129:
	imul rdi, [rsp + 0 + 16] ; multiply by e
	jno .jump130
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump130:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
.jump131: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump133 ; If h >= bound, ...
	mov qword [rsp + 16], 0 ; h = 0
	add qword [rsp + 8], 1 ; g++
.jump133:
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump134 ; If g >= bound, ...
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
.jump134:
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump132 ; If f >= bound, break
.jump135:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment h
	add qword [rsp + 16], 1
	jmp .jump131
.jump132: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	mov rax, [rel const15] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump136
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump137
.jump136:
	mov rax, [rel const38] ; 591
	push rax
	mov rax, [rel const39] ; 733
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump138
	lea rdi, [rel const13] ; divide by zero
	call _fail_assertion
.jump138:
	cqo
	idiv r10
	push rax
.jump137:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump139
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump139:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize f to 0
	mov rax, 0
	push rax
.jump140: ; Begin body of loop
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump141 ; If f >= bound, break
.jump142:
	; Compute loop body
	mov rax, [rel const14] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump143
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump144
.jump143:
	sub rsp, 8
	; Moving 8 bytes from rbp - 112 to rsp
		mov r10, [rbp - 112 + 0]
		mov [rsp + 0], r10
.jump144:
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment f
	add qword [rsp + 0], 1
	jmp .jump140
.jump141: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rel const40] ; 932
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump145
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump145:
	cmp rax, [rsp + 24]
	jl .jump146
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump146:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump147
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump147:
	cmp rax, [rsp + 32]
	jl .jump148
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump148:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump149
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump149:
	cmp rax, [rsp + 40]
	jl .jump150
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump150:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump151
	sub rsp, 24
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 40
	; Moving 40 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 32]
		mov [rsp + 32], r10
		mov r10, [rbp - -16 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - -16 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 40
	; Moving 40 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 32]
		mov [rsp + 32], r10
		mov r10, [rbp - -16 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - -16 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 40
	; Moving 40 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 32]
		mov [rsp + 32], r10
		mov r10, [rbp - -16 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - -16 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Moving 40 bytes from rsp + 80 to rsp + 80
		mov r10, [rsp + 80 + 32]
		mov [rsp + 80 + 32], r10
		mov r10, [rsp + 80 + 24]
		mov [rsp + 80 + 24], r10
		mov r10, [rsp + 80 + 16]
		mov [rsp + 80 + 16], r10
		mov r10, [rsp + 80 + 8]
		mov [rsp + 80 + 8], r10
		mov r10, [rsp + 80 + 0]
		mov [rsp + 80 + 0], r10
	add rsp, 80
	lea rdi, [rsp + 56]
	call _a
	add rsp, 40
	add rsp, 16
	jmp .jump152
.jump151:
	sub rsp, 24
	sub rsp, 16
	; Moving 16 bytes from rbp - -56 to rsp
		mov r10, [rbp - -56 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -56 + 0]
		mov [rsp + 0], r10
	sub rsp, 40
	; Moving 40 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 32]
		mov [rsp + 32], r10
		mov r10, [rbp - -16 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - -16 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	lea rdi, [rsp + 56]
	call _a
	add rsp, 40
	add rsp, 16
	mov rax, [rel const41] ; 109
	push rax
	; Moving 24 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 16]
		mov [rsp + 8 + 16], r10
		mov r10, [rsp + 8 + 8]
		mov [rsp + 8 + 8], r10
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
.jump152:
	jmp .jump121
.jump120:
	mov rax, [rel const15] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump153
	mov rax, [rel const15] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump155
	sub rsp, 24
	sub rsp, 16
	; Moving 16 bytes from rbp - -56 to rsp
		mov r10, [rbp - -56 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -56 + 0]
		mov [rsp + 0], r10
	sub rsp, 40
	; Moving 40 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 32]
		mov [rsp + 32], r10
		mov r10, [rbp - -16 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - -16 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	lea rdi, [rsp + 56]
	call _a
	add rsp, 40
	add rsp, 16
	jmp .jump156
.jump155:
	sub rsp, 24
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 40
	; Moving 40 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 32]
		mov [rsp + 32], r10
		mov r10, [rbp - -16 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - -16 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	lea rdi, [rsp + 56]
	call _a
	add rsp, 40
	add rsp, 16
.jump156:
	jmp .jump154
.jump153:
	mov rax, [rel const42] ; 86.61
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	mov rax, [rel const43] ; 384
	push rax
	mov rax, [rel const44] ; 104
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setg al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump157
	sub rsp, 24
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 40
	; Moving 40 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 32]
		mov [rsp + 32], r10
		mov r10, [rbp - -16 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - -16 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	lea rdi, [rsp + 56]
	call _a
	add rsp, 40
	add rsp, 16
	jmp .jump158
.jump157:
	sub rsp, 24
	sub rsp, 16
	; Moving 16 bytes from rbp - -56 to rsp
		mov r10, [rbp - -56 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -56 + 0]
		mov [rsp + 0], r10
	sub rsp, 40
	; Moving 40 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 32]
		mov [rsp + 32], r10
		mov r10, [rbp - -16 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - -16 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	lea rdi, [rsp + 56]
	call _a
	add rsp, 40
	add rsp, 16
.jump158:
.jump154:
.jump121:
	mov rax, [rbp - 8] ; Address to write return value into
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 72 ; Local variables
	pop rbp
	ret

e:
_e:
	push rbp
	mov rbp, rsp
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump185
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump185:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump186
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump186:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof bool[,]
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump187
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump187:
	imul rdi, [rsp + 0 + 8] ; multiply by (- argnum)
	jno .jump188
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump188:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
.jump189: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump191 ; If p >= bound, ...
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
.jump191:
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump190 ; If o >= bound, break
.jump192:
	; Compute loop body
	sub rsp, 24
	; Moving 24 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -24 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 24
	add rax, [rsp + 56]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment p
	add qword [rsp + 8], 1
	jmp .jump189
.jump190: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8 ; Align stack
	mov rax, [rel const57] ; 40.98
	push rax
	sub rsp, 8 ; Align stack
	mov rax, [rel const58] ; 67.38
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rdi, 8
	call _jpl_alloc
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -96 to rsp
		mov r10, [rbp - -96 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -48 to rsp
		mov r10, [rbp - -48 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const59] ; 55.2
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump193
	mov rax, [rel const60] ; 495
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump195
	mov rax, [rel const61] ; 986
	push rax
	mov rax, [rel const15] ; False
	push rax
	mov rax, [rel const62] ; 77.82
	push rax
	; Moving 8 bytes from rsp + 8 to rsp + 16
		mov r10, [rsp + 8 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	jmp .jump196
.jump195:
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -104 to rsp
		mov r10, [rbp - -104 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
.jump196:
	pop rax
	cmp rax, 0
	je .jump197
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for v
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump199
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump199:
	; Computing bound for u
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump200
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump200:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof {bool}
	imul rdi, [rsp + 0 + 0] ; multiply by to_int(to_float(t))
	jno .jump201
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump201:
	imul rdi, [rsp + 0 + 8] ; multiply by (- h)
	jno .jump202
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump202:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize v to 0
	mov rax, 0
	push rax
	; Initialize u to 0
	mov rax, 0
	push rax
.jump203: ; Begin body of loop
	; Compare v to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump205 ; If v >= bound, ...
	mov qword [rsp + 8], 0 ; v = 0
	add qword [rsp + 0], 1 ; u++
.jump205:
	; Compare u to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump204 ; If u >= bound, break
.jump206:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment v
	add qword [rsp + 8], 1
	jmp .jump203
.jump204: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump198
.jump197:
	mov rax, [rel const15] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump207
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for v
	mov rax, [rel const63] ; 121
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump209
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump209:
	; Computing bound for u
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump210
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump210:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof {bool}
	imul rdi, [rsp + 0 + 0] ; multiply by t
	jno .jump211
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump211:
	imul rdi, [rsp + 0 + 8] ; multiply by 121
	jno .jump212
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump212:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize v to 0
	mov rax, 0
	push rax
	; Initialize u to 0
	mov rax, 0
	push rax
.jump213: ; Begin body of loop
	; Compare v to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump215 ; If v >= bound, ...
	mov qword [rsp + 8], 0 ; v = 0
	add qword [rsp + 0], 1 ; u++
.jump215:
	; Compare u to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump214 ; If u >= bound, break
.jump216:
	; Compute loop body
	mov rax, [rel const15] ; False
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment v
	add qword [rsp + 8], 1
	jmp .jump213
.jump214: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump208
.jump207:
	mov rax, [rel const64] ; 691
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump217
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for v
	mov rax, [rel const65] ; 799
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump219
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump219:
	; Computing bound for u
	mov rax, [rel const66] ; 78
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump220
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump220:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof {bool}
	imul rdi, [rsp + 0 + 0] ; multiply by 78
	jno .jump221
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump221:
	imul rdi, [rsp + 0 + 8] ; multiply by 799
	jno .jump222
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump222:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize v to 0
	mov rax, 0
	push rax
	; Initialize u to 0
	mov rax, 0
	push rax
.jump223: ; Begin body of loop
	; Compare v to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump225 ; If v >= bound, ...
	mov qword [rsp + 8], 0 ; v = 0
	add qword [rsp + 0], 1 ; u++
.jump225:
	; Compare u to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump224 ; If u >= bound, break
.jump226:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment v
	add qword [rsp + 8], 1
	jmp .jump223
.jump224: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump218
.jump217:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for v
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump227
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump227:
	; Computing bound for u
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump228
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump228:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof {bool}
	imul rdi, [rsp + 0 + 0] ; multiply by h
	jno .jump229
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump229:
	imul rdi, [rsp + 0 + 8] ; multiply by t
	jno .jump230
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump230:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize v to 0
	mov rax, 0
	push rax
	; Initialize u to 0
	mov rax, 0
	push rax
.jump231: ; Begin body of loop
	; Compare v to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump233 ; If v >= bound, ...
	mov qword [rsp + 8], 0 ; v = 0
	add qword [rsp + 0], 1 ; u++
.jump233:
	; Compare u to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump232 ; If u >= bound, break
.jump234:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment v
	add qword [rsp + 8], 1
	jmp .jump231
.jump232: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump218:
.jump208:
.jump198:
	jmp .jump194
.jump193:
	sub rsp, 24
	; Moving 24 bytes from rbp - -96 to rsp
		mov r10, [rbp - -96 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -96 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -96 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const67] ; 823
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump235
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump235:
	cmp rax, [rsp + 16]
	jl .jump236
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump236:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump237
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump237:
	cmp rax, [rsp + 24]
	jl .jump238
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump238:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump239
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const68] ; 50
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump241
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for v
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump243
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump243:
	; Computing bound for u
	sub rsp, 8
	; Moving 8 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump244
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump244:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof {bool}
	imul rdi, [rsp + 0 + 0] ; multiply by i
	jno .jump245
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump245:
	imul rdi, [rsp + 0 + 8] ; multiply by h
	jno .jump246
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump246:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize v to 0
	mov rax, 0
	push rax
	; Initialize u to 0
	mov rax, 0
	push rax
.jump247: ; Begin body of loop
	; Compare v to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump249 ; If v >= bound, ...
	mov qword [rsp + 8], 0 ; v = 0
	add qword [rsp + 0], 1 ; u++
.jump249:
	; Compare u to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump248 ; If u >= bound, break
.jump250:
	; Compute loop body
	mov rax, [rel const15] ; False
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment v
	add qword [rsp + 8], 1
	jmp .jump247
.jump248: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump242
.jump241:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for v
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -48 to rsp
		mov r10, [rbp - -48 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump251
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump251:
	; Computing bound for u
	sub rsp, 8
	; Moving 8 bytes from rbp - -104 to rsp
		mov r10, [rbp - -104 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump252
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump252:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof {bool}
	imul rdi, [rsp + 0 + 0] ; multiply by n
	jno .jump253
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump253:
	imul rdi, [rsp + 0 + 8] ; multiply by to_int(j)
	jno .jump254
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump254:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize v to 0
	mov rax, 0
	push rax
	; Initialize u to 0
	mov rax, 0
	push rax
.jump255: ; Begin body of loop
	; Compare v to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump257 ; If v >= bound, ...
	mov qword [rsp + 8], 0 ; v = 0
	add qword [rsp + 0], 1 ; u++
.jump257:
	; Compare u to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump256 ; If u >= bound, break
.jump258:
	; Compute loop body
	mov rax, [rel const14] ; True
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment v
	add qword [rsp + 8], 1
	jmp .jump255
.jump256: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump242:
	jmp .jump240
.jump239:
	mov rax, [rel const69] ; 992
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for v
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump259
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump259:
	; Computing bound for u
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump260
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump260:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof {bool}
	imul rdi, [rsp + 0 + 0] ; multiply by p
	jno .jump261
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump261:
	imul rdi, [rsp + 0 + 8] ; multiply by p
	jno .jump262
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump262:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize v to 0
	mov rax, 0
	push rax
	; Initialize u to 0
	mov rax, 0
	push rax
.jump263: ; Begin body of loop
	; Compare v to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump265 ; If v >= bound, ...
	mov qword [rsp + 8], 0 ; v = 0
	add qword [rsp + 0], 1 ; u++
.jump265:
	; Compare u to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump264 ; If u >= bound, break
.jump266:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment v
	add qword [rsp + 8], 1
	jmp .jump263
.jump264: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Moving 24 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 16]
		mov [rsp + 8 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 8 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
.jump240:
.jump194:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for x
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump267
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump267:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof {int,int,bool}
	imul rdi, [rsp + 0 + 0] ; multiply by (v * v)
	jno .jump268
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump268:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize x to 0
	mov rax, 0
	push rax
.jump269: ; Begin body of loop
	; Compare x to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump270 ; If x >= bound, break
.jump271:
	; Compute loop body
	mov rax, [rel const14] ; True
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const70] ; 809
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 24
	add rax, [rsp + 40]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment x
	add qword [rsp + 0], 1
	jmp .jump269
.jump270: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump272
	lea rdi, [rel const2] ; negative array index
	call _fail_assertion
.jump272:
	cmp rax, [rsp + 8]
	jl .jump273
	lea rdi, [rel const3] ; index too large
	call _fail_assertion
.jump273:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 24
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 16 to rsp + 16
		mov r10, [rsp + 16 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	pop rax
	cmp rax, 0
	je .jump274
	mov rax, [rel const15] ; False
	push rax
	mov rax, [rel const15] ; False
	push rax
	pop rax
	cmp rax, 0
	jne .jump276
	mov rax, [rel const14] ; True
	push rax
	pop rax
.jump276:
	push rax
	pop rax
	cmp rax, 0
	je .jump277
	sub rsp, 24
	; Moving 24 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 24 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -104 to rsp
		mov r10, [rbp - -104 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump279
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump279:
	cmp rax, [rsp + 16]
	jl .jump280
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump280:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump281
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump281:
	cmp rax, [rsp + 24]
	jl .jump282
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump282:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 24
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump278
.jump277:
	sub rsp, 24
	; Moving 24 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -24 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
.jump278:
	sub rsp, 8
	; Moving 8 bytes from rbp - -104 to rsp
		mov r10, [rbp - -104 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump283
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump283:
	cmp rax, [rsp + 16]
	jl .jump284
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump284:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump285
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump285:
	cmp rax, [rsp + 24]
	jl .jump286
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump286:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	jmp .jump275
.jump274:
	sub rsp, 8
	; Moving 8 bytes from rbp - -96 to rsp
		mov r10, [rbp - -96 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setg al
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump287
	sub rsp, 8
	; Moving 8 bytes from rbp - -96 to rsp
		mov r10, [rbp - -96 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	pop rax
.jump287:
	push rax
	pop rax
	cmp rax, 0
	je .jump288
	sub rsp, 8
	; Moving 8 bytes from rbp - -48 to rsp
		mov r10, [rbp - -48 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const71] ; 98.95
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	jne .jump290
	mov rax, [rel const14] ; True
	push rax
	pop rax
.jump290:
	push rax
	pop rax
	cmp rax, 0
	jne .jump291
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	pop rax
	cmp rax, 0
	je .jump292
	mov rax, [rel const15] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	jmp .jump293
.jump292:
	mov rax, [rel const14] ; True
	push rax
	pop rax
	cmp rax, 0
	jne .jump294
	mov rax, [rel const14] ; True
	push rax
	pop rax
.jump294:
	push rax
.jump293:
	pop rax
.jump291:
	push rax
	jmp .jump289
.jump288:
	sub rsp, 8
	; Moving 8 bytes from rbp - -104 to rsp
		mov r10, [rbp - -104 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump295
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	jmp .jump296
.jump295:
	mov rax, [rel const14] ; True
	push rax
.jump296:
.jump289:
.jump275:
	pop rax
	add rsp, 72 ; Local variables
	pop rbp
	ret
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for y
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump297
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump297:
	; Computing bound for x
	sub rsp, 8
	; Moving 8 bytes from rbp - -104 to rsp
		mov r10, [rbp - -104 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump298
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump298:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof {int,float,bool}
	imul rdi, [rsp + 0 + 0] ; multiply by n
	jno .jump299
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump299:
	imul rdi, [rsp + 0 + 8] ; multiply by t
	jno .jump300
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump300:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize y to 0
	mov rax, 0
	push rax
	; Initialize x to 0
	mov rax, 0
	push rax
.jump301: ; Begin body of loop
	; Compare y to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump303 ; If y >= bound, ...
	mov qword [rsp + 8], 0 ; y = 0
	add qword [rsp + 0], 1 ; x++
.jump303:
	; Compare x to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump302 ; If x >= bound, break
.jump304:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	mov rax, [rel const72] ; 90.81
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 24
	add rax, [rsp + 56]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment y
	add qword [rsp + 8], 1
	jmp .jump301
.jump302: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump305
	lea rdi, [rel const2] ; negative array index
	call _fail_assertion
.jump305:
	cmp rax, [rsp + 16]
	jl .jump306
	lea rdi, [rel const3] ; index too large
	call _fail_assertion
.jump306:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump307
	lea rdi, [rel const2] ; negative array index
	call _fail_assertion
.jump307:
	cmp rax, [rsp + 24]
	jl .jump308
	lea rdi, [rel const3] ; index too large
	call _fail_assertion
.jump308:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 24
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 16 to rsp + 16
		mov r10, [rsp + 16 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	pop rax
	add rsp, 72 ; Local variables
	pop rbp
	ret

jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp
	lea rdi, [rel const45] ; b
	sub rsp, 8 ; Align stack
	call _print
	add rsp, 8 ; Remove alignment
	sub rsp, 24
	sub rsp, 8 ; Align stack
	mov rax, [rel const14] ; True
	push rax
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 16 to rsp + 16
		mov r10, [rsp + 16 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	pop rax
	cmp rax, 0
	je .jump159
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	jmp .jump160
.jump159:
	mov rax, [rel const46] ; 614
	push rax
	mov rax, [rel const47] ; 899
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const48] ; 411
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
.jump160:
	pop rax
	cmp rax, 0
	je .jump161
	mov rax, [rel const15] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump163
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump164
.jump163:
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
.jump164:
	jmp .jump162
.jump161:
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const49] ; 752
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump165
	lea rdi, [rel const2] ; negative array index
	call _fail_assertion
.jump165:
	cmp rax, [rsp + 8]
	jl .jump166
	lea rdi, [rel const3] ; index too large
	call _fail_assertion
.jump166:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump167
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const50] ; 492
	push rax
	mov rdi, 16
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
	jmp .jump168
.jump167:
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Moving 16 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
.jump168:
.jump162:
	sub rsp, 8 ; Align stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for c
	mov rax, [rel const51] ; 390
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump169
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump169:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
.jump170: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump171 ; If c >= bound, break
.jump172:
	; Compute loop body
	mov rax, [rel const52] ; 8.35
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 16] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 16], xmm0 ; Save sum
	; Increment c
	add qword [rsp + 0], 1
	jmp .jump170
.jump171: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const53] ; 64
	push rax
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for c
	mov rax, [rel const54] ; 924
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump173
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump173:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by (- 924)
	jno .jump174
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump174:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
.jump175: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump176 ; If c >= bound, break
.jump177:
	; Compute loop body
	mov rax, [rel const14] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump178
	mov rax, [rel const55] ; 49.39
	push rax
	jmp .jump179
.jump178:
	sub rsp, 8 ; Align stack
	mov rax, [rel const56] ; 55.21
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
.jump179:
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment c
	add qword [rsp + 0], 1
	jmp .jump175
.jump176: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump180
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump180:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by (- (- argnum))
	jno .jump181
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump181:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
.jump182: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump183 ; If c >= bound, break
.jump184:
	; Compute loop body
	mov rax, [rel const14] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	mov rax, [rel const15] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment c
	add qword [rsp + 0], 1
	jmp .jump182
.jump183: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	lea rdi, [rsp + 64]
	call _a
	add rsp, 40
	add rsp, 16
	add rsp, 8 ; Remove alignment
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 16
		mov r10, [rsp + 0 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump309
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump309:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize f to 0
	mov rax, 0
	push rax
.jump310: ; Begin body of loop
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump311 ; If f >= bound, break
.jump312:
	; Compute loop body
	mov rax, [rel const73] ; 680
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment f
	add qword [rsp + 0], 1
	jmp .jump310
.jump311: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump313
	mov rax, [rel const14] ; True
	push rax
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const74] ; 46.47
	push rax
	; Moving 8 bytes from rsp + 24 to rsp + 24
		mov r10, [rsp + 24 + 0]
		mov [rsp + 24 + 0], r10
	add rsp, 24
	pop rax
.jump313:
	push rax
	pop rax
	xor rax, 1
	push rax
	lea rdi, [rel const75] ; g
	sub rsp, 8 ; Align stack
	call _print
	add rsp, 8 ; Remove alignment
	lea rdi, [rel const75] ; g
	sub rsp, 8 ; Align stack
	call _print
	add rsp, 8 ; Remove alignment
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump314
	lea rdi, [rel const13] ; divide by zero
	call _fail_assertion
.jump314:
	cqo
	idiv r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump315
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump315:
	; Computing bound for h
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for j
	mov rax, [rel const76] ; 621
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump316
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump316:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump317
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump317:
	; Computing bound for h
	mov rax, [rel const77] ; 736
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump318
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump318:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
.jump319: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump321 ; If j >= bound, ...
	mov qword [rsp + 16], 0 ; j = 0
	add qword [rsp + 8], 1 ; i++
.jump321:
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump322 ; If i >= bound, ...
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
.jump322:
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump320 ; If h >= bound, break
.jump323:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment j
	add qword [rsp + 16], 1
	jmp .jump319
.jump320: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump324
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump324:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof bool[,,]
imul rdi, [rsp + 0 + 0] ; multiply by (sum[h : 736, i : argnum, j : 621] i)
	jno .jump325
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump325:
	imul rdi, [rsp + 0 + 8] ; multiply by (argnum / argnum)
	jno .jump326
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump326:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
.jump327: ; Begin body of loop
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump329 ; If i >= bound, ...
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
.jump329:
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump328 ; If h >= bound, break
.jump330:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump331
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump331:
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump332
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump332:
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump333
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump333:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump334
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump334:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump335
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump335:
	imul rdi, [rsp + 0 + 16] ; multiply by h
	jno .jump336
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump336:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize l to 0
	mov rax, 0
	push rax
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
.jump337: ; Begin body of loop
	; Compare l to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump339 ; If l >= bound, ...
	mov qword [rsp + 16], 0 ; l = 0
	add qword [rsp + 8], 1 ; k++
.jump339:
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump340 ; If k >= bound, ...
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
.jump340:
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump338 ; If j >= bound, break
.jump341:
	; Compute loop body
	mov rax, [rel const15] ; False
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment l
	add qword [rsp + 16], 1
	jmp .jump337
.jump338: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 32
	add rax, [rsp + 64]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment i
	add qword [rsp + 8], 1
	jmp .jump327
.jump328: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rax, [rel const27] ; 23.48
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	; Moving 24 bytes from rsp + 16 to rsp + 16
		mov r10, [rsp + 16 + 16]
		mov [rsp + 16 + 16], r10
		mov r10, [rsp + 16 + 8]
		mov [rsp + 16 + 8], r10
		mov r10, [rsp + 16 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump342
	lea rdi, [rel const2] ; negative array index
	call _fail_assertion
.jump342:
	cmp rax, [rsp + 16]
	jl .jump343
	lea rdi, [rel const3] ; index too large
	call _fail_assertion
.jump343:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump344
	lea rdi, [rel const2] ; negative array index
	call _fail_assertion
.jump344:
	cmp rax, [rsp + 24]
	jl .jump345
	lea rdi, [rel const3] ; index too large
	call _fail_assertion
.jump345:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 32
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 32
	; Moving 32 bytes from rax to rsp
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	lea rdi, [rel const78] ; l
	sub rsp, 8 ; Align stack
	call _print
	add rsp, 8 ; Remove alignment
	add rsp, 64 ; Local variables
	pop r12
	pop rbp
	ret

