fn a({ b : float[,] }, c[d, e, f] : float[,][,,], {  }) : float[][,,] {
  let g = args
  let {h, {}, {}} = {acos(tan(exp(to_float(argnum)))), (if ((- to_float(d)) > atan(b[e, 155])) then {} else (array[h : argnum] {})[d]), (array[h : 460, i : f, j : f] {c, {}, 753}{1})[(- (- (if true then argnum else 621))), argnum, {argnum, 795}{1}]}
  assert (if [(array[i : 850, j : d] false)][to_int(atan(h))][(sum[i : (if (false == false) then (sum[i : d, j : f, k : e] d) else 621), j : 573, k : f] j), {(if true then argnum else f), c, log(40.25)}{0}] then (acos(atan(to_float(205))) == atan(26.21)) else (acos(8.49) == atan2((h % acos(56.43)), atan(h)))), "i"
  let {i[j], k[l]} = {g, (if (true && (! false)) then (array[i : argnum, j : d] [45.11, 32.22]) else (array[i : 726, j : d] (array[k : d] 60.77)))[(- (667 + f)), d]}
  return (if {{false}}{0}{0} then {(array[m : 793, n : e, o : d] k)}{0} else (if (if (if (! true) then (j > 216) else (l == 385)) then (acos(h) > to_float(e)) else (f > (- e))) then (if ((true != true) && true) then a({b}, (array[m : argnum, n : 307, o : l] b), {}) else (if (argnum < d) then (array[m : d, n : f, o : l] k) else (array[m : e, n : l, o : d] k))) else (if (true && (argnum >= j)) then a({b}, c, {}) else (array[m : (sum[m : j, n : f, o : j] d), n : e, o : 722] k))))
}

time print "b"

fn b(c : {}) : float {
  let d = (- argnum)
  let {} = c
  return b((array[e : 195, f : argnum, g : argnum] c)[(- [argnum, 758, argnum][argnum]), 749, (sum[e : (- d), f : d] (- (if true then 49 else e)))])
  let {e, f[g, h], i[j, k]} = (if (array[e : (- 837)] (array[f : d, g : argnum, h : e] true)[argnum, (argnum - 736), (- d)])[d] then {(! (cos(1.24) > log(63.56))), (array[e : args[args[d]], f : (- argnum)] (sum[g : d, h : to_int(47.33)] to_float(d))), (array[e : d, f : ((sum[e : argnum, f : 357] d) % (- 106))] tan(tan(17.8)))} else {((if false then (true && false) else (! true)) || (381 <= d)), (array[e : {478, 957}{0}, f : (array[e : argnum, f : d, g : 229] d)[argnum, argnum, (argnum / 677)]] pow(b(c), to_float(argnum))), (array[e : {argnum}{0}, f : (array[e : d, f : d] e)[663, argnum]] b(c))})
  return atan((- pow(tan(log(9.9)), b(c))))
}

let c = acos((- to_float((sum[c : 794, d : 944] (if true then c else c)))))
fn d(e : int, f[g, h, i] : int[,,], {  }) : bool {
  let j[k] = (if ((! true) && (h != 528)) then {{args}} else {{args}}){0}{0}
  let l = log(atan(tan(sqrt(45.13))))
  let {m, {n[o, p], {q[r], {s[t, u, v], {}}, w}}} = {to_int(exp(exp((if false then c else c)))), {(if (e >= to_int(32.03)) then (if (e == g) then (array[m : i, n : g] g) else (array[m : g, n : 904] k)) else (array[m : h, n : argnum] j[447])), {{j}{0}, {f, {}}, (! d(i, f, {}))}}}
  let x = to_float(t)
  return ((sum[y : argnum, z : ((- o) % h), A : argnum] tan(to_float(k))) > b({}))
}

time time print "e"

print "e"

write image {(array[e : (if (argnum == 345) then (sum[e : 540, f : 802] 535) else (- 555)), f : (sum[e : (sum[e : argnum, f : 418] 801), f : (sum[e : 543] e)] (sum[g : e] e))] {b({}), asin(63.81), b({}), (sum[g : f] c)})}{0} to "e.png"

let e = (if (! (to_float(717) < c)) then (array[e : (argnum / (- argnum)), f : argnum, g : argnum] {(- f)}) else (if (acos(91.52) < exp(c)) then (array[e : (argnum * 845), f : 408, g : (- 693)] {e}) else (array[e : (552 * argnum), f : (if false then argnum else 696), g : args[argnum]] {g})))[(sum[e : (if (! false) then args else args)[(if true then to_int(57.77) else 530)], f : 839] e), (sum[e : (- 267), f : (if (! true) then (array[e : argnum, f : argnum] e) else (array[e : 26, f : argnum] 508))[to_int(b({})), to_int(c)], g : argnum] e), argnum]
fn f() : int {
  return 657
  let {} = (if (array[g : f(), h : (- argnum)] true)[597, to_int(log(93.2))] then {{{}, c}{0}, asin((- c)), (! (! false))} else (if (if (! true) then true else (! true)) then {{}, 83.1, (false && false)} else {{}, tan(14.45), (5.91 > 90.81)})){0}
  let g = acos(8.1)
  let h[i, j, k] = (array[h : f(), i : argnum, j : (array[h : f(), i : (argnum / f())] ((h * i) % to_int(c)))[to_int(acos(c)), [(- 6), 619][(sum[h : argnum] argnum)]]] exp(pow({26.54}{0}, (sum[k : j] tan(c)))))
  return f()
}

time let g = atan(atan(b({})))
let h = e
