global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 900
const1: db `non-positive loop bound`, 0
const2: dq 471
const3: dq 50
const4: db `overflow computing array size`, 0
const5: dq 214
const6: dq 402
const7: dq 133
const8: db `negative array index`, 0
const9: db `index too large`, 0
const10: dq 556
const11: dq 748
const12: dq 0
const13: dq 1
const14: dq 46.26
const15: db `mod by zero`, 0
const16: dq 205
const17: dq 277
const18: dq 367
const19: dq 26.14
const20: dq 302
const21: dq 647
const22: dq 342
const23: dq 559
const24: dq 470
const25: dq 23.45
const26: dq 22.05
const27: db `U`, 0
const28: dq 27.03
const29: dq 71.19
const30: dq 62.1
const31: dq 70.63
const32: dq 154
const33: dq 64.15
const34: dq 96.03
const35: db `E`, 0
const36: dq 954
const37: dq 30.76
const38: dq 207
const39: db `s.png`, 0

section .text
g:
_g:
	push rbp
	mov rbp, rsp
	mov rax, [rel const25] ; 23.45
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 0 ; Local variables
	pop rbp
	ret
	sub rsp, 8
	; Moving 8 bytes from rbp - -264 to rsp
		mov r10, [rbp - -264 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -248 to rsp
		mov r10, [rbp - -248 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -176 to rsp
		mov r10, [rbp - -176 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	; Moving 8 bytes from rsp + 0 to rsp + 16
		mov r10, [rsp + 0 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	sub rsp, 8 ; Align stack
	mov rax, [rel const26] ; 22.05
	push rax
	sub rsp, 32
	; Moving 32 bytes from rbp - -232 to rsp
		mov r10, [rbp - -232 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - -232 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -232 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -232 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 32 to rsp + 32
		mov r10, [rsp + 32 + 0]
		mov [rsp + 32 + 0], r10
	add rsp, 32
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	jne .jump133
	lea rdi, [rel const27] ; U
	call _fail_assertion
.jump133:
	mov rax, [rel const13] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump134
	sub rsp, 8
	; Moving 8 bytes from rbp - -104 to rsp
		mov r10, [rbp - -104 + 0]
		mov [rsp + 0], r10
	jmp .jump135
.jump134:
	sub rsp, 8
	; Moving 8 bytes from rbp - -216 to rsp
		mov r10, [rbp - -216 + 0]
		mov [rsp + 0], r10
.jump135:
	sub rsp, 8
	; Moving 8 bytes from rbp - -176 to rsp
		mov r10, [rbp - -176 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump136
	sub rsp, 24
	; Moving 24 bytes from rbp - -96 to rsp
		mov r10, [rbp - -96 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -96 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -96 + 0]
		mov [rsp + 0], r10
	jmp .jump137
.jump136:
	sub rsp, 24
	; Moving 24 bytes from rbp - -96 to rsp
		mov r10, [rbp - -96 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -96 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -96 + 0]
		mov [rsp + 0], r10
.jump137:
	sub rsp, 8
	; Moving 8 bytes from rbp - -176 to rsp
		mov r10, [rbp - -176 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	sub rsp, 8
	movsd [rsp], xmm0
	; Moving 24 bytes from rsp + 8 to rsp + 16
		mov r10, [rsp + 8 + 16]
		mov [rsp + 16 + 16], r10
		mov r10, [rsp + 8 + 8]
		mov [rsp + 16 + 8], r10
		mov r10, [rsp + 8 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	; Moving 24 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 16]
		mov [rsp + 0 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for Y
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump138
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump138:
	; Computing bound for X
	sub rsp, 8
	; Moving 8 bytes from rbp - -72 to rsp
		mov r10, [rbp - -72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump139
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump139:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof int[]
	imul rdi, [rsp + 0 + 0] ; multiply by p
	jno .jump140
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump140:
	imul rdi, [rsp + 0 + 8] ; multiply by W
	jno .jump141
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump141:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize Y to 0
	mov rax, 0
	push rax
	; Initialize X to 0
	mov rax, 0
	push rax
.jump142: ; Begin body of loop
	; Compare Y to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump144 ; If Y >= bound, ...
	mov qword [rsp + 8], 0 ; Y = 0
	add qword [rsp + 0], 1 ; X++
.jump144:
	; Compare X to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump143 ; If X >= bound, break
.jump145:
	; Compute loop body
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 16
	add rax, [rsp + 48]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment Y
	add qword [rsp + 8], 1
	jmp .jump142
.jump143: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump146
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
.jump146:
	cmp rax, [rsp + 16]
	jl .jump147
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
.jump147:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump148
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
.jump148:
	cmp rax, [rsp + 24]
	jl .jump149
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
.jump149:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 16
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for Z
	sub rsp, 8
	; Moving 8 bytes from rbp - -248 to rsp
		mov r10, [rbp - -248 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump150
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump150:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by L
	jno .jump151
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump151:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize Z to 0
	mov rax, 0
	push rax
.jump152: ; Begin body of loop
	; Compare Z to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump153 ; If Z >= bound, break
.jump154:
	; Compute loop body
	mov rax, [rel const28] ; 27.03
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment Z
	add qword [rsp + 0], 1
	jmp .jump152
.jump153: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 24
	; Moving 24 bytes from rbp - -96 to rsp
		mov r10, [rbp - -96 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -96 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -96 + 0]
		mov [rsp + 0], r10
	; Moving 16 bytes from rsp + 24 to rsp + 24
		mov r10, [rsp + 24 + 8]
		mov [rsp + 24 + 8], r10
		mov r10, [rsp + 24 + 0]
		mov [rsp + 24 + 0], r10
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rbp - -288 to rsp
		mov r10, [rbp - -288 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump155
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump155:
	cmp rax, [rsp + 8]
	jl .jump156
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump156:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 40 ; Local variables
	pop rbp
	ret

m:
_m:
	push rbp
	mov rbp, rsp
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for n
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump157
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump157:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump158
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump158:
	; Computing bound for n
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump159
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump159:
	cmp rax, [rsp + 8]
	jl .jump160
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump160:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump161
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump161:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
.jump162: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump164 ; If p >= bound, ...
	mov qword [rsp + 16], 0 ; p = 0
	add qword [rsp + 8], 1 ; o++
.jump164:
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump165 ; If o >= bound, ...
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
.jump165:
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump163 ; If n >= bound, break
.jump166:
	; Compute loop body
	mov rax, [rel const12] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump167
	mov rax, [rel const12] ; False
	push rax
	jmp .jump168
.jump167:
	mov rax, [rel const13] ; True
	push rax
.jump168:
	pop rax
	cmp rax, 0
	je .jump169
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump171
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump171:
	cmp rax, [rsp + 8]
	jl .jump172
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump172:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump170
.jump169:
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
.jump170:
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment p
	add qword [rsp + 16], 1
	jmp .jump162
.jump163: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump173
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump173:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof bool[,]
imul rdi, [rsp + 0 + 0] ; multiply by (sum[n : args[d], o : f, p : k] (if (if false then false else true) then args[d] else k))
	jno .jump174
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump174:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
.jump175: ; Begin body of loop
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump176 ; If n >= bound, break
.jump177:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump178
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump178:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump179
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump179:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by l
	jno .jump180
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump180:
	imul rdi, [rsp + 0 + 8] ; multiply by d
	jno .jump181
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump181:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
.jump182: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump184 ; If p >= bound, ...
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
.jump184:
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump183 ; If o >= bound, break
.jump185:
	; Compute loop body
	call _m
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment p
	add qword [rsp + 8], 1
	jmp .jump182
.jump183: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 24
	add rax, [rsp + 40]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment n
	add qword [rsp + 0], 1
	jmp .jump175
.jump176: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump186
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump186:
	cmp rax, [rsp + 8]
	jl .jump187
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump187:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 24
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for s
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump188
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump188:
	; Computing bound for r
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setg al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump189
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	jmp .jump190
.jump189:
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
.jump190:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump191
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump191:
	; Computing bound for q
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump192
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump192:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof {bool}
	imul rdi, [rsp + 0 + 0] ; multiply by l
	jno .jump193
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump193:
	imul rdi, [rsp + 0 + 8] ; multiply by (if (l > a) then b else argnum)
	jno .jump194
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump194:
	imul rdi, [rsp + 0 + 16] ; multiply by l
	jno .jump195
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump195:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize s to 0
	mov rax, 0
	push rax
	; Initialize r to 0
	mov rax, 0
	push rax
	; Initialize q to 0
	mov rax, 0
	push rax
.jump196: ; Begin body of loop
	; Compare s to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump198 ; If s >= bound, ...
	mov qword [rsp + 16], 0 ; s = 0
	add qword [rsp + 8], 1 ; r++
.jump198:
	; Compare r to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump199 ; If r >= bound, ...
	mov qword [rsp + 8], 0 ; r = 0
	add qword [rsp + 0], 1 ; q++
.jump199:
	; Compare q to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump197 ; If q >= bound, break
.jump200:
	; Compute loop body
	mov rax, [rel const12] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump201
	call _m
	push rax
	pop rax
.jump201:
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment s
	add qword [rsp + 16], 1
	jmp .jump196
.jump197: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump202
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
.jump202:
	cmp rax, [rsp + 24]
	jl .jump203
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
.jump203:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump204
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
.jump204:
	cmp rax, [rsp + 32]
	jl .jump205
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
.jump205:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump206
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
.jump206:
	cmp rax, [rsp + 40]
	jl .jump207
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
.jump207:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	mov rax, [rel const30] ; 62.1
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	jne .jump208
	call _m
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
.jump208:
	push rax
	pop rax
	cmp rax, 0
	je .jump209
	call _m
	push rax
	jmp .jump210
.jump209:
	mov rax, [rel const12] ; False
	push rax
.jump210:
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	pop rax
	add rsp, 48 ; Local variables
	pop rbp
	ret

r:
_r:
	push rbp
	mov rbp, rsp
	push rdi
	push rsi
	call _m
	push rax
	pop rax
	cmp rax, 0
	je .jump243
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	pop rax
.jump243:
	push rax
	pop rax
	add rsp, 16 ; Local variables
	pop rbp
	ret
	mov rax, [rel const33] ; 64.15
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const12] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump244
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for G
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump246
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump246:
	; Computing bound for F
	sub rsp, 8
	; Moving 8 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump247
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump247:
	; Computing bound for E
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump248
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump248:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof {int,int,bool}
	imul rdi, [rsp + 0 + 0] ; multiply by p
	jno .jump249
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump249:
	imul rdi, [rsp + 0 + 8] ; multiply by j
	jno .jump250
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump250:
	imul rdi, [rsp + 0 + 16] ; multiply by d
	jno .jump251
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump251:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize G to 0
	mov rax, 0
	push rax
	; Initialize F to 0
	mov rax, 0
	push rax
	; Initialize E to 0
	mov rax, 0
	push rax
.jump252: ; Begin body of loop
	; Compare G to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump254 ; If G >= bound, ...
	mov qword [rsp + 16], 0 ; G = 0
	add qword [rsp + 8], 1 ; F++
.jump254:
	; Compare F to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump255 ; If F >= bound, ...
	mov qword [rsp + 8], 0 ; F = 0
	add qword [rsp + 0], 1 ; E++
.jump255:
	; Compare E to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump253 ; If E >= bound, break
.jump256:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 24
	add rax, [rsp + 72]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment G
	add qword [rsp + 16], 1
	jmp .jump252
.jump253: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump257
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
.jump257:
	cmp rax, [rsp + 24]
	jl .jump258
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
.jump258:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump259
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
.jump259:
	cmp rax, [rsp + 32]
	jl .jump260
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
.jump260:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump261
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
.jump261:
	cmp rax, [rsp + 40]
	jl .jump262
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
.jump262:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 24
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump245
.jump244:
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const34] ; 96.03
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 16
		mov r10, [rsp + 0 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
.jump245:
	; Moving 8 bytes from rsp + 16 to rsp + 16
		mov r10, [rsp + 16 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	pop rax
	cmp rax, 0
	jne .jump263
	sub rsp, 8 ; Align stack
	lea rdi, [rel const35] ; E
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump263:
	mov rax, [rel const12] ; False
	push rax
	pop rax
	cmp rax, 0
	jne .jump264
	sub rsp, 8 ; Align stack
	lea rdi, [rel const35] ; E
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump264:
	sub rsp, 8 ; Align stack
	sub rsp, 16
	; Moving 16 bytes from rbp - -80 to rsp
		mov r10, [rbp - -80 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -80 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for F
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump265
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump265:
	; Computing bound for E
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump266
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump266:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by t
	jno .jump267
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump267:
	imul rdi, [rsp + 0 + 8] ; multiply by t
	jno .jump268
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump268:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize F to 0
	mov rax, 0
	push rax
	; Initialize E to 0
	mov rax, 0
	push rax
.jump269: ; Begin body of loop
	; Compare F to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump271 ; If F >= bound, ...
	mov qword [rsp + 8], 0 ; F = 0
	add qword [rsp + 0], 1 ; E++
.jump271:
	; Compare E to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump270 ; If E >= bound, break
.jump272:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment F
	add qword [rsp + 8], 1
	jmp .jump269
.jump270: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for G
	mov rax, [rel const36] ; 954
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump273
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump273:
	; Computing bound for F
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump274
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump274:
	; Computing bound for E
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump275
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump275:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by t
	jno .jump276
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump276:
	imul rdi, [rsp + 0 + 8] ; multiply by p
	jno .jump277
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump277:
	imul rdi, [rsp + 0 + 16] ; multiply by 954
	jno .jump278
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump278:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize G to 0
	mov rax, 0
	push rax
	; Initialize F to 0
	mov rax, 0
	push rax
	; Initialize E to 0
	mov rax, 0
	push rax
.jump279: ; Begin body of loop
	; Compare G to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump281 ; If G >= bound, ...
	mov qword [rsp + 16], 0 ; G = 0
	add qword [rsp + 8], 1 ; F++
.jump281:
	; Compare F to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump282 ; If F >= bound, ...
	mov qword [rsp + 8], 0 ; F = 0
	add qword [rsp + 0], 1 ; E++
.jump282:
	; Compare E to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump280 ; If E >= bound, break
.jump283:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment G
	add qword [rsp + 16], 1
	jmp .jump279
.jump280: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	; Moving 80 bytes from rsp + 16 to rsp + 16
		mov r10, [rsp + 16 + 72]
		mov [rsp + 16 + 72], r10
		mov r10, [rsp + 16 + 64]
		mov [rsp + 16 + 64], r10
		mov r10, [rsp + 16 + 56]
		mov [rsp + 16 + 56], r10
		mov r10, [rsp + 16 + 48]
		mov [rsp + 16 + 48], r10
		mov r10, [rsp + 16 + 40]
		mov [rsp + 16 + 40], r10
		mov r10, [rsp + 16 + 32]
		mov [rsp + 16 + 32], r10
		mov r10, [rsp + 16 + 24]
		mov [rsp + 16 + 24], r10
		mov r10, [rsp + 16 + 16]
		mov [rsp + 16 + 16], r10
		mov r10, [rsp + 16 + 8]
		mov [rsp + 16 + 8], r10
		mov r10, [rsp + 16 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	sub rsp, 16
	; Moving 16 bytes from rbp - -80 to rsp
		mov r10, [rbp - -80 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -80 + 0]
		mov [rsp + 0], r10
	call _m
	push rax
	sub rsp, 24
	; Moving 24 bytes from rbp - -48 to rsp
		mov r10, [rbp - -48 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -48 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -48 + 0]
		mov [rsp + 0], r10
	; Moving 24 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 16]
		mov [rsp + 0 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for E
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump284
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump284:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof float[,,]
	imul rdi, [rsp + 0 + 0] ; multiply by d
	jno .jump285
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump285:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize E to 0
	mov rax, 0
	push rax
.jump286: ; Begin body of loop
	; Compare E to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump287 ; If E >= bound, break
.jump288:
	; Compute loop body
	sub rsp, 32
	; Moving 32 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - -16 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 32
	add rax, [rsp + 48]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment E
	add qword [rsp + 0], 1
	jmp .jump286
.jump287: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump289
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump289:
	cmp rax, [rsp + 8]
	jl .jump290
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump290:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 32
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 32
	; Moving 32 bytes from rax to rsp
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const37] ; 30.76
	push rax
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump291
	mov rax, [rel const38] ; 207
	push rax
	jmp .jump292
.jump291:
	sub rsp, 8
	; Moving 8 bytes from rbp - -48 to rsp
		mov r10, [rbp - -48 + 0]
		mov [rsp + 0], r10
.jump292:
	pop rax
	pop r10
	cmp r10, 0
	jne .jump293
	lea rdi, [rel const15] ; mod by zero
	call _fail_assertion
.jump293:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	pop rdi
	pop rsi
	call _r
	add rsp, 80
	push rax
	sub rsp, 8 ; Align stack
	call _m
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	cmp rax, 0
	jne .jump294
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for F
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump295
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump295:
	; Computing bound for E
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump296
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump296:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by f
	jno .jump297
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump297:
	imul rdi, [rsp + 0 + 8] ; multiply by a
	jno .jump298
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump298:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize F to 0
	mov rax, 0
	push rax
	; Initialize E to 0
	mov rax, 0
	push rax
.jump299: ; Begin body of loop
	; Compare F to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump301 ; If F >= bound, ...
	mov qword [rsp + 8], 0 ; F = 0
	add qword [rsp + 0], 1 ; E++
.jump301:
	; Compare E to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump300 ; If E >= bound, break
.jump302:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -72 to rsp
		mov r10, [rbp - -72 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump303
	mov rax, [rel const13] ; True
	push rax
	pop rax
.jump303:
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment F
	add qword [rsp + 8], 1
	jmp .jump299
.jump300: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump304
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
.jump304:
	cmp rax, [rsp + 16]
	jl .jump305
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
.jump305:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump306
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
.jump306:
	cmp rax, [rsp + 24]
	jl .jump307
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
.jump307:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
.jump294:
	push rax
	pop rdi
	pop rsi
	call _r
	add rsp, 80
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	add rsp, 24 ; Local variables
	pop rbp
	ret

jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp
	mov rax, [rel const0] ; 900
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for c
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for d
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump1:
	; Computing bound for b
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump2
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump2:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump3: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump5 ; If c >= bound, ...
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
.jump5:
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump4 ; If b >= bound, break
.jump6:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment c
	add qword [rsp + 8], 1
	jmp .jump3
.jump4: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump7
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump7:
	; Computing bound for c
	mov rax, [rel const2] ; 471
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump8
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump8:
	; Computing bound for b
	mov rax, [rel const3] ; 50
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump9
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump9:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by 50
	jno .jump10
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump10:
	imul rdi, [rsp + 0 + 8] ; multiply by 471
	jno .jump11
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump11:
imul rdi, [rsp + 0 + 16] ; multiply by (sum[b : a, c : argnum] c)
	jno .jump12
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump12:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump13: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump15 ; If d >= bound, ...
	mov qword [rsp + 16], 0 ; d = 0
	add qword [rsp + 8], 1 ; c++
.jump15:
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump16 ; If c >= bound, ...
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
.jump16:
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump14 ; If b >= bound, break
.jump17:
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for e
	mov rax, [rel const5] ; 214
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump18
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump18:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize e to 0
	mov rax, 0
	push rax
.jump19: ; Begin body of loop
	; Compare e to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump20 ; If e >= bound, break
.jump21:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment e
	add qword [rsp + 0], 1
	jmp .jump19
.jump20: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment d
	add qword [rsp + 16], 1
	jmp .jump13
.jump14: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for b
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump22
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump22:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by a
	jno .jump23
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump23:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize b to 0
	mov rax, 0
	push rax
.jump24: ; Begin body of loop
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump25 ; If b >= bound, break
.jump26:
	; Compute loop body
	mov rax, [rel const6] ; 402
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment b
	add qword [rsp + 0], 1
	jmp .jump24
.jump25: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump27
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump27:
	; Computing bound for b
	mov rax, [rel const7] ; 133
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump28
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump28:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump29: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump31 ; If c >= bound, ...
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
.jump31:
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump30 ; If b >= bound, break
.jump32:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment c
	add qword [rsp + 8], 1
	jmp .jump29
.jump30: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump33
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
.jump33:
	cmp rax, [rsp + 8]
	jl .jump34
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
.jump34:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump35
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump35:
	; Computing bound for b
	mov rax, [rel const10] ; 556
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump36
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump36:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump37: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump39 ; If c >= bound, ...
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
.jump39:
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump38 ; If b >= bound, break
.jump40:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment c
	add qword [rsp + 8], 1
	jmp .jump37
.jump38: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	pop rax
	neg rax
	push rax
	mov rax, [rel const11] ; 748
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump41
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
.jump41:
	cmp rax, [rsp + 24]
	jl .jump42
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
.jump42:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump43
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
.jump43:
	cmp rax, [rsp + 32]
	jl .jump44
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
.jump44:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump45
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
.jump45:
	cmp rax, [rsp + 40]
	jl .jump46
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
.jump46:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump47
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump47:
	; Computing bound for b
	mov rax, [rel const12] ; False
	push rax
	pop rax
	cmp rax, 0
	jne .jump48
	mov rax, [rel const13] ; True
	push rax
	pop rax
.jump48:
	push rax
	pop rax
	cmp rax, 0
	je .jump49
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	jmp .jump50
.jump49:
	mov rax, [rel const14] ; 46.26
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
.jump50:
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump51
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump51:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof {int}
	imul rdi, [rsp + 0 + 0] ; multiply by to_int((if (false || true) then to_float(argnum) else sin(46.26)))
	jno .jump52
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump52:
imul rdi, [rsp + 0 + 8] ; multiply by (array[b : 50, c : 471, d : (sum[b : a, c : argnum] c)] (sum[e : 214] argnum))[{748}{0}, (- (sum[b : 556, c : a] a)), (array[b : a] 402)[(sum[b : 133, c : a] argnum)]]
	jno .jump53
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump53:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump54: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump56 ; If c >= bound, ...
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
.jump56:
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump55 ; If b >= bound, break
.jump57:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment c
	add qword [rsp + 8], 1
	jmp .jump54
.jump55: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump58
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; mod by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump58:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump59
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump59:
	; Computing bound for b
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump60
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump60:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump61
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump61:
	imul rdi, [rsp + 0 + 8] ; multiply by (argnum % argnum)
	jno .jump62
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump62:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump63: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump65 ; If c >= bound, ...
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
.jump65:
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump64 ; If b >= bound, break
.jump66:
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for e
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump67
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump67:
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump68
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump68:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
.jump69: ; Begin body of loop
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump71 ; If e >= bound, ...
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
.jump71:
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump70 ; If d >= bound, break
.jump72:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment e
	add qword [rsp + 8], 1
	jmp .jump69
.jump70: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment c
	add qword [rsp + 8], 1
	jmp .jump63
.jump64: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump73
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump73:
	cmp rax, [rsp + 16]
	jl .jump74
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump74:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump75
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump75:
	cmp rax, [rsp + 24]
	jl .jump76
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump76:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump77
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump77:
	cmp rax, [rsp + 16]
	jl .jump78
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump78:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump79
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump79:
	cmp rax, [rsp + 24]
	jl .jump80
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump80:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const12] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump81
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	mov rax, [rel const12] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Moving 8 bytes from rsp + 16 to rsp + 16
		mov r10, [rsp + 16 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	jmp .jump82
.jump81:
	mov rax, [rel const16] ; 205
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
.jump82:
	pop rax
	cmp rax, 0
	je .jump83
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for e
	mov rax, [rel const17] ; 277
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump85
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump85:
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump86
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump86:
	; Computing bound for c
	mov rax, [rel const13] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump87
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	jmp .jump88
.jump87:
	mov rax, [rel const18] ; 367
	push rax
.jump88:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump89
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump89:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by (if true then a else 367)
	jno .jump90
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump90:
	imul rdi, [rsp + 0 + 8] ; multiply by b
	jno .jump91
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump91:
	imul rdi, [rsp + 0 + 16] ; multiply by (- 277)
	jno .jump92
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump92:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump93: ; Begin body of loop
	; Compare e to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump95 ; If e >= bound, ...
	mov qword [rsp + 16], 0 ; e = 0
	add qword [rsp + 8], 1 ; d++
.jump95:
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump96 ; If d >= bound, ...
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
.jump96:
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump94 ; If c >= bound, break
.jump97:
	; Compute loop body
	mov rax, [rel const12] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment e
	add qword [rsp + 16], 1
	jmp .jump93
.jump94: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for e
	mov rax, [rel const19] ; 26.14
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump98
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump98:
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump99
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump99:
	; Computing bound for c
	mov rax, [rel const20] ; 302
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump100
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump100:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by (argnum + 302)
	jno .jump101
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump101:
	imul rdi, [rsp + 0 + 8] ; multiply by b
	jno .jump102
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump102:
	imul rdi, [rsp + 0 + 16] ; multiply by to_int(26.14)
	jno .jump103
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump103:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump104: ; Begin body of loop
	; Compare e to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump106 ; If e >= bound, ...
	mov qword [rsp + 16], 0 ; e = 0
	add qword [rsp + 8], 1 ; d++
.jump106:
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump107 ; If d >= bound, ...
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
.jump107:
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump105 ; If c >= bound, break
.jump108:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment e
	add qword [rsp + 16], 1
	jmp .jump104
.jump105: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for e
	mov rax, [rel const21] ; 647
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump109
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump109:
	; Computing bound for d
	mov rax, [rel const22] ; 342
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump110
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump110:
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump111
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump111:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump112
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump112:
	imul rdi, [rsp + 0 + 8] ; multiply by (- 342)
	jno .jump113
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump113:
	imul rdi, [rsp + 0 + 16] ; multiply by (- 647)
	jno .jump114
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump114:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump115: ; Begin body of loop
	; Compare e to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump117 ; If e >= bound, ...
	mov qword [rsp + 16], 0 ; e = 0
	add qword [rsp + 8], 1 ; d++
.jump117:
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump118 ; If d >= bound, ...
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
.jump118:
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump116 ; If c >= bound, break
.jump119:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 144 to rsp
		mov r10, [rbp - 144 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment e
	add qword [rsp + 16], 1
	jmp .jump115
.jump116: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	mov rdi, 96
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 96 bytes from rsp to rax
		mov r10, [rsp + 88]
		mov [rax + 88], r10
		mov r10, [rsp + 80]
		mov [rax + 80], r10
		mov r10, [rsp + 72]
		mov [rax + 72], r10
		mov r10, [rsp + 64]
		mov [rax + 64], r10
		mov r10, [rsp + 56]
		mov [rax + 56], r10
		mov r10, [rsp + 48]
		mov [rax + 48], r10
		mov r10, [rsp + 40]
		mov [rax + 40], r10
		mov r10, [rsp + 32]
		mov [rax + 32], r10
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 96
	push rax
	mov rax, 3
	push rax
	mov rax, [rel const23] ; 559
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump120
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
.jump120:
	cmp rax, [rsp + 8]
	jl .jump121
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
.jump121:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 32
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 32
	; Moving 32 bytes from rax to rsp
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump84
.jump83:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for e
	mov rax, [rel const24] ; 470
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump122
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump122:
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump123
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump123:
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump124
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump124:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by a
	jno .jump125
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump125:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump126
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump126:
	imul rdi, [rsp + 0 + 16] ; multiply by 470
	jno .jump127
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump127:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump128: ; Begin body of loop
	; Compare e to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump130 ; If e >= bound, ...
	mov qword [rsp + 16], 0 ; e = 0
	add qword [rsp + 8], 1 ; d++
.jump130:
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump131 ; If d >= bound, ...
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
.jump131:
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump129 ; If c >= bound, break
.jump132:
	; Compute loop body
	mov rax, [rel const12] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 16 to rsp + 16
		mov r10, [rsp + 16 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment e
	add qword [rsp + 16], 1
	jmp .jump128
.jump129: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump84:
	sub rsp, 32
	; Moving 32 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 56 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 56 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	mov rax, [rel const29] ; 71.19
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const12] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump211
	jmp .jump212
.jump211:
.jump212:
	; Moving 0 bytes from rsp + 0 to rsp + 0
	add rsp, 0
	; Moving 0 bytes from rsp + 0 to rsp + 0
	add rsp, 0
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump213
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump213:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof float[]
	imul rdi, [rsp + 0 + 0] ; multiply by j
	jno .jump214
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump214:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize o to 0
	mov rax, 0
	push rax
.jump215: ; Begin body of loop
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump216 ; If o >= bound, break
.jump217:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for r
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump218
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump218:
	; Computing bound for q
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump219
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump219:
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump220
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump220:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof float[]
	imul rdi, [rsp + 0 + 0] ; multiply by l
	jno .jump221
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump221:
	imul rdi, [rsp + 0 + 8] ; multiply by d
	jno .jump222
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump222:
	imul rdi, [rsp + 0 + 16] ; multiply by b
	jno .jump223
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump223:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize r to 0
	mov rax, 0
	push rax
	; Initialize q to 0
	mov rax, 0
	push rax
	; Initialize p to 0
	mov rax, 0
	push rax
.jump224: ; Begin body of loop
	; Compare r to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump226 ; If r >= bound, ...
	mov qword [rsp + 16], 0 ; r = 0
	add qword [rsp + 8], 1 ; q++
.jump226:
	; Compare q to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump227 ; If q >= bound, ...
	mov qword [rsp + 8], 0 ; q = 0
	add qword [rsp + 0], 1 ; p++
.jump227:
	; Compare p to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump225 ; If p >= bound, break
.jump228:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for s
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump229
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump229:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by n
	jno .jump230
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump230:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize s to 0
	mov rax, 0
	push rax
.jump231: ; Begin body of loop
	; Compare s to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump232 ; If s >= bound, break
.jump233:
	; Compute loop body
	mov rax, [rel const31] ; 70.63
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment s
	add qword [rsp + 0], 1
	jmp .jump231
.jump232: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 16
	add rax, [rsp + 64]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment r
	add qword [rsp + 16], 1
	jmp .jump224
.jump225: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump234
	lea rdi, [rel const15] ; mod by zero
	call _fail_assertion
.jump234:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump235
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump235:
	cmp rax, [rsp + 24]
	jl .jump236
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump236:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump237
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump237:
	cmp rax, [rsp + 32]
	jl .jump238
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump238:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump239
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump239:
	cmp rax, [rsp + 40]
	jl .jump240
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump240:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 16
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 16
	add rax, [rsp + 32]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment o
	add qword [rsp + 0], 1
	jmp .jump215
.jump216: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump241
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
.jump241:
	cmp rax, [rsp + 8]
	jl .jump242
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
.jump242:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 16
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const32] ; 154
	push rax
	sub rsp, 24
	lea rdi, [rsp]
	sub rsp, 8 ; Align stack
	lea rsi, [rel const39] ; s.png
	call _read_image
	add rsp, 8 ; Remove alignment
	add rsp, 144 ; Local variables
	pop r12
	pop rbp
	ret

