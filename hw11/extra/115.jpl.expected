global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: db `b.png`, 0
const1: dq 1
const2: db `non-positive loop bound`, 0
const3: dq 47.07
const4: db `negative array index`, 0
const5: db `index too large`, 0
const6: db `overflow computing array size`, 0
const7: dq 0
const8: dq 258
const9: dq 56
const10: dq 75.84
const11: dq 52.39
const12: dq 68.35
const13: dq 4.3
const14: dq 35.05
const15: dq 173
const16: db `mod by zero`, 0
const17: dq 971
const18: dq 46.46
const19: dq 738
const20: dq 49.8
const21: dq 5.02
const22: dq 88
const23: dq 543
const24: dq 90.32
const25: dq 7.52
const26: dq 9.7
const27: dq 337
const28: dq 386
const29: dq 211
const30: dq 287
const31: db `y`, 0
const32: dq 0.83
const33: dq 22.62
const34: dq 60.29
const35: dq 4.45
const36: dq 51.29
const37: dq 728
const38: dq 747
const39: dq 87
const40: dq 95
const41: dq 82.04
const42: dq 354
const43: db `divide by zero`, 0
const44: dq 10.2
const45: dq 167

section .text
c:
_c:
	push rbp
	mov rbp, rsp
	mov rax, [rel const1] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump1
	sub rsp, 8
	; Moving 8 bytes from rbp - -304 to rsp
		mov r10, [rbp - -304 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	sub rsp, 8
	movsd [rsp], xmm0
	jmp .jump2
.jump1:
	sub rsp, 8
	; Moving 8 bytes from rbp - -304 to rsp
		mov r10, [rbp - -304 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
.jump2:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for T
	sub rsp, 8
	; Moving 8 bytes from rbp - -232 to rsp
		mov r10, [rbp - -232 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump3
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump3:
	; Computing bound for S
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump4
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump4:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize T to 0
	mov rax, 0
	push rax
	; Initialize S to 0
	mov rax, 0
	push rax
.jump5: ; Begin body of loop
	; Compare T to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump7 ; If T >= bound, ...
	mov qword [rsp + 8], 0 ; T = 0
	add qword [rsp + 0], 1 ; S++
.jump7:
	; Compare S to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump6 ; If S >= bound, break
.jump8:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -176 to rsp
		mov r10, [rbp - -176 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 32] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 32], xmm0 ; Save sum
	; Increment T
	add qword [rsp + 8], 1
	jmp .jump5
.jump6: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const3] ; 47.07
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 0 ; Local variables
	pop rbp
	ret
	sub rsp, 8
	; Moving 8 bytes from rbp - -280 to rsp
		mov r10, [rbp - -280 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump9
	sub rsp, 24
	; Moving 24 bytes from rbp - -80 to rsp
		mov r10, [rbp - -80 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -80 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -80 + 0]
		mov [rsp + 0], r10
	jmp .jump10
.jump9:
	sub rsp, 24
	; Moving 24 bytes from rbp - -80 to rsp
		mov r10, [rbp - -80 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -80 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -80 + 0]
		mov [rsp + 0], r10
.jump10:
	sub rsp, 8
	; Moving 8 bytes from rbp - -256 to rsp
		mov r10, [rbp - -256 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -48 to rsp
		mov r10, [rbp - -48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump11
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump11:
	cmp rax, [rsp + 16]
	jl .jump12
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump12:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump13
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump13:
	cmp rax, [rsp + 24]
	jl .jump14
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump14:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump15
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for V
	sub rsp, 8
	; Moving 8 bytes from rbp - -48 to rsp
		mov r10, [rbp - -48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump17
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump17:
	; Computing bound for U
	sub rsp, 8
	; Moving 8 bytes from rbp - -264 to rsp
		mov r10, [rbp - -264 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump18
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump18:
	; Computing bound for T
	sub rsp, 8
	; Moving 8 bytes from rbp - -168 to rsp
		mov r10, [rbp - -168 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump19
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump19:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by t
	jno .jump20
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump20:
	imul rdi, [rsp + 0 + 8] ; multiply by D
	jno .jump21
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump21:
	imul rdi, [rsp + 0 + 16] ; multiply by i
	jno .jump22
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump22:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize V to 0
	mov rax, 0
	push rax
	; Initialize U to 0
	mov rax, 0
	push rax
	; Initialize T to 0
	mov rax, 0
	push rax
.jump23: ; Begin body of loop
	; Compare V to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump25 ; If V >= bound, ...
	mov qword [rsp + 16], 0 ; V = 0
	add qword [rsp + 8], 1 ; U++
.jump25:
	; Compare U to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump26 ; If U >= bound, ...
	mov qword [rsp + 8], 0 ; U = 0
	add qword [rsp + 0], 1 ; T++
.jump26:
	; Compare T to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump24 ; If T >= bound, break
.jump27:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -312 to rsp
		mov r10, [rbp - -312 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment V
	add qword [rsp + 16], 1
	jmp .jump23
.jump24: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -48 to rsp
		mov r10, [rbp - -48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -104 to rsp
		mov r10, [rbp - -104 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -64 to rsp
		mov r10, [rbp - -64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump28
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump28:
	cmp rax, [rsp + 24]
	jl .jump29
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump29:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump30
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump30:
	cmp rax, [rsp + 32]
	jl .jump31
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump31:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump32
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump32:
	cmp rax, [rsp + 40]
	jl .jump33
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump33:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	jne .jump34
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	pop rax
.jump34:
	push rax
	pop rax
	cmp rax, 0
	je .jump35
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for V
	sub rsp, 8
	; Moving 8 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump37
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump37:
	; Computing bound for U
	sub rsp, 8
	; Moving 8 bytes from rbp - -176 to rsp
		mov r10, [rbp - -176 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump38
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump38:
	; Computing bound for T
	sub rsp, 8
	; Moving 8 bytes from rbp - -344 to rsp
		mov r10, [rbp - -344 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump39
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump39:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof {bool[][],{}}
	imul rdi, [rsp + 0 + 0] ; multiply by N
	jno .jump40
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump40:
	imul rdi, [rsp + 0 + 8] ; multiply by u
	jno .jump41
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump41:
	imul rdi, [rsp + 0 + 16] ; multiply by g
	jno .jump42
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump42:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize V to 0
	mov rax, 0
	push rax
	; Initialize U to 0
	mov rax, 0
	push rax
	; Initialize T to 0
	mov rax, 0
	push rax
.jump43: ; Begin body of loop
	; Compare V to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump45 ; If V >= bound, ...
	mov qword [rsp + 16], 0 ; V = 0
	add qword [rsp + 8], 1 ; U++
.jump45:
	; Compare U to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump46 ; If U >= bound, ...
	mov qword [rsp + 8], 0 ; U = 0
	add qword [rsp + 0], 1 ; T++
.jump46:
	; Compare T to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump44 ; If T >= bound, break
.jump47:
	; Compute loop body
	sub rsp, 16
	; Moving 16 bytes from rbp - -232 to rsp
		mov r10, [rbp - -232 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -232 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	shl rax, 4
	add rax, [rsp + 64]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment V
	add qword [rsp + 16], 1
	jmp .jump43
.jump44: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -112 to rsp
		mov r10, [rbp - -112 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -80 to rsp
		mov r10, [rbp - -80 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -256 to rsp
		mov r10, [rbp - -256 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump48
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump48:
	cmp rax, [rsp + 24]
	jl .jump49
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump49:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump50
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump50:
	cmp rax, [rsp + 32]
	jl .jump51
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump51:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump52
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump52:
	cmp rax, [rsp + 40]
	jl .jump53
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump53:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 4
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump36
.jump35:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for U
	sub rsp, 8
	; Moving 8 bytes from rbp - -288 to rsp
		mov r10, [rbp - -288 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump54
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump54:
	; Computing bound for T
	sub rsp, 8
	; Moving 8 bytes from rbp - -336 to rsp
		mov r10, [rbp - -336 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump55
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump55:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof bool[][]
	imul rdi, [rsp + 0 + 0] ; multiply by M
	jno .jump56
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump56:
	imul rdi, [rsp + 0 + 8] ; multiply by G
	jno .jump57
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump57:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize U to 0
	mov rax, 0
	push rax
	; Initialize T to 0
	mov rax, 0
	push rax
.jump58: ; Begin body of loop
	; Compare U to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump60 ; If U >= bound, ...
	mov qword [rsp + 8], 0 ; U = 0
	add qword [rsp + 0], 1 ; T++
.jump60:
	; Compare T to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump59 ; If T >= bound, break
.jump61:
	; Compute loop body
	sub rsp, 16
	; Moving 16 bytes from rbp - -232 to rsp
		mov r10, [rbp - -232 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -232 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 4
	add rax, [rsp + 48]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment U
	add qword [rsp + 8], 1
	jmp .jump58
.jump59: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -48 to rsp
		mov r10, [rbp - -48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -288 to rsp
		mov r10, [rbp - -288 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump62
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump62:
	cmp rax, [rsp + 16]
	jl .jump63
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump63:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump64
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump64:
	cmp rax, [rsp + 24]
	jl .jump65
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump65:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 4
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump36:
	jmp .jump16
.jump15:
	sub rsp, 8
	; Moving 8 bytes from rbp - -312 to rsp
		mov r10, [rbp - -312 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump66
	mov rax, [rel const7] ; False
	push rax
	jmp .jump67
.jump66:
	sub rsp, 8
	; Moving 8 bytes from rbp - -312 to rsp
		mov r10, [rbp - -312 + 0]
		mov [rsp + 0], r10
.jump67:
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	pop rax
	cmp rax, 0
	je .jump68
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for T
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump70
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump70:
	; Computing total size of heap memory to allocate
	mov rdi, 0 ; sizeof {}
	imul rdi, [rsp + 0 + 0] ; multiply by e
	jno .jump71
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump71:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize T to 0
	mov rax, 0
	push rax
.jump72: ; Begin body of loop
	; Compare T to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump73 ; If T >= bound, break
.jump74:
	; Compute loop body
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 0
	add rax, [rsp + 16]
	; Move body (0 bytes) to index
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	; Increment T
	add qword [rsp + 0], 1
	jmp .jump72
.jump73: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -88 to rsp
		mov r10, [rbp - -88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump75
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump75:
	cmp rax, [rsp + 8]
	jl .jump76
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump76:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 0
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 0
	; Moving 0 bytes from rax to rsp
	sub rsp, 16
	; Moving 16 bytes from rbp - -232 to rsp
		mov r10, [rbp - -232 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -232 + 0]
		mov [rsp + 0], r10
	jmp .jump69
.jump68:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for T
	sub rsp, 8
	; Moving 8 bytes from rbp - -184 to rsp
		mov r10, [rbp - -184 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump77
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump77:
	; Computing total size of heap memory to allocate
	mov rdi, 0 ; sizeof {}
	imul rdi, [rsp + 0 + 0] ; multiply by v
	jno .jump78
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump78:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize T to 0
	mov rax, 0
	push rax
.jump79: ; Begin body of loop
	; Compare T to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump80 ; If T >= bound, break
.jump81:
	; Compute loop body
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 0
	add rax, [rsp + 16]
	; Move body (0 bytes) to index
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	; Increment T
	add qword [rsp + 0], 1
	jmp .jump79
.jump80: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -368 to rsp
		mov r10, [rbp - -368 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump82
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump82:
	cmp rax, [rsp + 8]
	jl .jump83
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump83:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 0
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 0
	; Moving 0 bytes from rax to rsp
	sub rsp, 8
	; Moving 8 bytes from rbp - -312 to rsp
		mov r10, [rbp - -312 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump84
	sub rsp, 16
	; Moving 16 bytes from rbp - -288 to rsp
		mov r10, [rbp - -288 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -288 + 0]
		mov [rsp + 0], r10
	mov rdi, 16
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 1
	push rax
	jmp .jump85
.jump84:
	sub rsp, 16
	; Moving 16 bytes from rbp - -232 to rsp
		mov r10, [rbp - -232 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -232 + 0]
		mov [rsp + 0], r10
.jump85:
.jump69:
.jump16:
	sub rsp, 8
	; Moving 8 bytes from rbp - -312 to rsp
		mov r10, [rbp - -312 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -176 to rsp
		mov r10, [rbp - -176 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 32 ; Local variables
	pop rbp
	ret

o:
_o:
	push rbp
	mov rbp, rsp
	call _o
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump139
	call _o
	push rax
	pop rax
	cmp rax, 0
	jne .jump140
	mov rax, [rel const1] ; True
	push rax
	pop rax
.jump140:
	push rax
	pop rax
	cmp rax, 0
	jne .jump141
	mov rax, [rel const7] ; False
	push rax
	pop rax
.jump141:
	push rax
	pop rax
.jump139:
	push rax
	pop rax
	cmp rax, 0
	je .jump142
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const18] ; 46.46
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	sub rsp, 8 ; Align stack
	call _o
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	jmp .jump143
.jump142:
	mov rax, [rel const1] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
.jump143:
	pop rax
	cmp rax, 0
	je .jump144
	sub rsp, 8
	; Moving 8 bytes from r12 - 136 to rsp
		mov r10, [r12 - 136 + 0]
		mov [rsp + 0], r10
	jmp .jump145
.jump144:
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 136 to rsp
		mov r10, [r12 - 136 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const19] ; 738
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump146
	sub rsp, 8
	; Moving 8 bytes from r12 - 136 to rsp
		mov r10, [r12 - 136 + 0]
		mov [rsp + 0], r10
	jmp .jump147
.jump146:
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
.jump147:
	; Moving 8 bytes from rsp + 0 to rsp + 16
		mov r10, [rsp + 0 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
.jump145:
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const20] ; 49.8
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const21] ; 5.02
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump148
	sub rsp, 8 ; Align stack
	call _o
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const22] ; 88
	push rax
	; Moving 8 bytes from rsp + 16 to rsp + 16
		mov r10, [rsp + 16 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump150
	jmp .jump151
.jump150:
	mov rdi, 0
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	push rax
	mov rax, 3
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 128 to rsp
		mov r10, [r12 - 128 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump152
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump152:
	cmp rax, [rsp + 8]
	jl .jump153
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump153:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 0
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 0
	; Moving 0 bytes from rax to rsp
.jump151:
	jmp .jump149
.jump148:
	sub rsp, 24
	; Moving 24 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	; Moving 24 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 16]
		mov [rsp + 0 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	; Moving 0 bytes from rsp + 0 to rsp + 24
	add rsp, 24
.jump149:
	sub rsp, 32
	; Moving 32 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 24]
		mov [rsp + 24], r10
		mov r10, [r12 - 72 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 72 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rdi, 48
	call _jpl_alloc
	; Moving 48 bytes from rsp to rax
		mov r10, [rsp + 40]
		mov [rax + 40], r10
		mov r10, [rsp + 32]
		mov [rax + 32], r10
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 48
	push rax
	mov rax, 3
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 136 to rsp
		mov r10, [r12 - 136 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump154
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump154:
	cmp rax, [rsp + 8]
	jl .jump155
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump155:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 4
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 128 to rsp
		mov r10, [r12 - 128 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump156
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump156:
	cmp rax, [rsp + 8]
	jl .jump157
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump157:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const23] ; 543
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	jne .jump158
	mov rax, [rel const7] ; False
	push rax
	pop rax
.jump158:
	push rax
	pop rax
	add rsp, 48 ; Local variables
	pop rbp
	ret

p:
_p:
	push rbp
	mov rbp, rsp
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for w
	sub rsp, 8
	; Moving 8 bytes from r12 - 128 to rsp
		mov r10, [r12 - 128 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump159
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump159:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by m
	jno .jump160
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump160:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize w to 0
	mov rax, 0
	push rax
.jump161: ; Begin body of loop
	; Compare w to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump162 ; If w >= bound, break
.jump163:
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for z
	sub rsp, 8
	; Moving 8 bytes from r12 - 136 to rsp
		mov r10, [r12 - 136 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump164
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump164:
	; Computing bound for y
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump165
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump165:
	; Computing bound for x
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump166
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump166:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize z to 0
	mov rax, 0
	push rax
	; Initialize y to 0
	mov rax, 0
	push rax
	; Initialize x to 0
	mov rax, 0
	push rax
.jump167: ; Begin body of loop
	; Compare z to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump169 ; If z >= bound, ...
	mov qword [rsp + 16], 0 ; z = 0
	add qword [rsp + 8], 1 ; y++
.jump169:
	; Compare y to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump170 ; If y >= bound, ...
	mov qword [rsp + 8], 0 ; y = 0
	add qword [rsp + 0], 1 ; x++
.jump170:
	; Compare x to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump168 ; If x >= bound, break
.jump171:
	; Compute loop body
	mov rax, [rel const24] ; 90.32
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 48] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment z
	add qword [rsp + 16], 1
	jmp .jump167
.jump168: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment w
	add qword [rsp + 0], 1
	jmp .jump161
.jump162: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump172
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump172:
	cmp rax, [rsp + 8]
	jl .jump173
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump173:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 0 ; Local variables
	pop rbp
	ret
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for y
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump174
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump174:
	; Computing bound for x
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump175
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump175:
	; Computing bound for w
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump176
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump176:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize y to 0
	mov rax, 0
	push rax
	; Initialize x to 0
	mov rax, 0
	push rax
	; Initialize w to 0
	mov rax, 0
	push rax
.jump177: ; Begin body of loop
	; Compare y to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump179 ; If y >= bound, ...
	mov qword [rsp + 16], 0 ; y = 0
	add qword [rsp + 8], 1 ; x++
.jump179:
	; Compare x to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump180 ; If x >= bound, ...
	mov qword [rsp + 8], 0 ; x = 0
	add qword [rsp + 0], 1 ; w++
.jump180:
	; Compare w to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump178 ; If w >= bound, break
.jump181:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 48] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment y
	add qword [rsp + 16], 1
	jmp .jump177
.jump178: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	sub rsp, 8 ; Align stack
	mov rax, [rel const25] ; 7.52
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const26] ; 9.7
	push rax
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for A
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump182
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump182:
	cmp rax, [rsp + 8]
	jl .jump183
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump183:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump184
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump184:
	; Computing bound for z
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump185
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump185:
	; Computing bound for y
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump186
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump186:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize A to 0
	mov rax, 0
	push rax
	; Initialize z to 0
	mov rax, 0
	push rax
	; Initialize y to 0
	mov rax, 0
	push rax
.jump187: ; Begin body of loop
	; Compare A to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump189 ; If A >= bound, ...
	mov qword [rsp + 16], 0 ; A = 0
	add qword [rsp + 8], 1 ; z++
.jump189:
	; Compare z to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump190 ; If z >= bound, ...
	mov qword [rsp + 8], 0 ; z = 0
	add qword [rsp + 0], 1 ; y++
.jump190:
	; Compare y to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump188 ; If y >= bound, break
.jump191:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 48] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment A
	add qword [rsp + 16], 1
	jmp .jump187
.jump188: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rdi, 16
	call _jpl_alloc
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
	mov rdi, 16
	call _jpl_alloc
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump192
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump192:
	cmp rax, [rsp + 8]
	jl .jump193
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump193:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 4
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for A
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump194
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump194:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize A to 0
	mov rax, 0
	push rax
.jump195: ; Begin body of loop
	; Compare A to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump196 ; If A >= bound, break
.jump197:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 16] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 16], xmm0 ; Save sum
	; Increment A
	add qword [rsp + 0], 1
	jmp .jump195
.jump196: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 32 ; Local variables
	pop rbp
	ret

q:
_q:
	push rbp
	mov rbp, rsp
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for u
	sub rsp, 8
	; Moving 8 bytes from r12 - 128 to rsp
		mov r10, [r12 - 128 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump198
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump198:
	; Computing bound for t
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump199
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump199:
	; Computing total size of heap memory to allocate
	mov rdi, 0 ; sizeof {{}}
	imul rdi, [rsp + 0 + 0] ; multiply by h
	jno .jump200
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump200:
	imul rdi, [rsp + 0 + 8] ; multiply by (- m)
	jno .jump201
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump201:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize u to 0
	mov rax, 0
	push rax
	; Initialize t to 0
	mov rax, 0
	push rax
.jump202: ; Begin body of loop
	; Compare u to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump204 ; If u >= bound, ...
	mov qword [rsp + 8], 0 ; u = 0
	add qword [rsp + 0], 1 ; t++
.jump204:
	; Compare t to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump203 ; If t >= bound, break
.jump205:
	; Compute loop body
	mov rax, [rel const7] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump206
	jmp .jump207
.jump206:
.jump207:
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 0
	add rax, [rsp + 32]
	; Move body (0 bytes) to index
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	; Increment u
	add qword [rsp + 8], 1
	jmp .jump202
.jump203: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 128 to rsp
		mov r10, [r12 - 128 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump208
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump208:
	cmp rax, [rsp + 16]
	jl .jump209
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump209:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump210
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump210:
	cmp rax, [rsp + 24]
	jl .jump211
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump211:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 0
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 0
	; Moving 0 bytes from rax to rsp
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for t
	sub rsp, 8
	; Moving 8 bytes from r12 - 136 to rsp
		mov r10, [r12 - 136 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump212
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump212:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof {{int}}
	imul rdi, [rsp + 0 + 0] ; multiply by l
	jno .jump213
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump213:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize t to 0
	mov rax, 0
	push rax
.jump214: ; Begin body of loop
	; Compare t to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump215 ; If t >= bound, break
.jump216:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment t
	add qword [rsp + 0], 1
	jmp .jump214
.jump215: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 24
	; Moving 24 bytes from r12 - 104 to rsp
		mov r10, [r12 - 104 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 104 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	; Moving 24 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	; Moving 16 bytes from rsp + 0 to rsp + 48
		mov r10, [rsp + 0 + 8]
		mov [rsp + 48 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 48 + 0], r10
	add rsp, 48
	sub rsp, 8
	; Moving 8 bytes from r12 - 128 to rsp
		mov r10, [r12 - 128 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump217
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump217:
	cmp rax, [rsp + 8]
	jl .jump218
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump218:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump219
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump219:
	cmp rax, [rsp + 8]
	jl .jump220
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump220:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	mov rax, [rel const7] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump221
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for w
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump223
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump223:
	; Computing bound for v
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump224
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump224:
	; Computing bound for u
	call _o
	push rax
	pop rax
	cmp rax, 0
	je .jump225
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	jmp .jump226
.jump225:
	sub rsp, 8
	; Moving 8 bytes from r12 - 128 to rsp
		mov r10, [r12 - 128 + 0]
		mov [rsp + 0], r10
.jump226:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump227
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump227:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by (if o() then j else m)
	jno .jump228
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump228:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump229
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump229:
	imul rdi, [rsp + 0 + 16] ; multiply by (- argnum)
	jno .jump230
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump230:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize w to 0
	mov rax, 0
	push rax
	; Initialize v to 0
	mov rax, 0
	push rax
	; Initialize u to 0
	mov rax, 0
	push rax
.jump231: ; Begin body of loop
	; Compare w to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump233 ; If w >= bound, ...
	mov qword [rsp + 16], 0 ; w = 0
	add qword [rsp + 8], 1 ; v++
.jump233:
	; Compare v to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump234 ; If v >= bound, ...
	mov qword [rsp + 8], 0 ; v = 0
	add qword [rsp + 0], 1 ; u++
.jump234:
	; Compare u to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump232 ; If u >= bound, break
.jump235:
	; Compute loop body
	mov rax, [rel const1] ; True
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment w
	add qword [rsp + 16], 1
	jmp .jump231
.jump232: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump222
.jump221:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for w
	call _o
	push rax
	pop rax
	cmp rax, 0
	je .jump236
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	jmp .jump237
.jump236:
	sub rsp, 8
	; Moving 8 bytes from r12 - 128 to rsp
		mov r10, [r12 - 128 + 0]
		mov [rsp + 0], r10
.jump237:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump238
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump238:
	; Computing bound for v
	mov rax, [rel const27] ; 337
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump239
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump239:
	; Computing bound for u
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump240
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump240:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by s
	jno .jump241
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump241:
	imul rdi, [rsp + 0 + 8] ; multiply by (- 337)
	jno .jump242
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump242:
	imul rdi, [rsp + 0 + 16] ; multiply by (if o() then j else m)
	jno .jump243
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump243:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize w to 0
	mov rax, 0
	push rax
	; Initialize v to 0
	mov rax, 0
	push rax
	; Initialize u to 0
	mov rax, 0
	push rax
.jump244: ; Begin body of loop
	; Compare w to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump246 ; If w >= bound, ...
	mov qword [rsp + 16], 0 ; w = 0
	add qword [rsp + 8], 1 ; v++
.jump246:
	; Compare v to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump247 ; If v >= bound, ...
	mov qword [rsp + 8], 0 ; v = 0
	add qword [rsp + 0], 1 ; u++
.jump247:
	; Compare u to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump245 ; If u >= bound, break
.jump248:
	; Compute loop body
	mov rax, [rel const1] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment w
	add qword [rsp + 16], 1
	jmp .jump244
.jump245: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump222:
	sub rsp, 8
	; Moving 8 bytes from r12 - 128 to rsp
		mov r10, [r12 - 128 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 136 to rsp
		mov r10, [r12 - 136 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for u
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for w
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for w
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump249
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump249:
	; Computing bound for v
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump250
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump250:
	; Computing bound for u
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump251
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump251:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize w to 0
	mov rax, 0
	push rax
	; Initialize v to 0
	mov rax, 0
	push rax
	; Initialize u to 0
	mov rax, 0
	push rax
.jump252: ; Begin body of loop
	; Compare w to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump254 ; If w >= bound, ...
	mov qword [rsp + 16], 0 ; w = 0
	add qword [rsp + 8], 1 ; v++
.jump254:
	; Compare v to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump255 ; If v >= bound, ...
	mov qword [rsp + 8], 0 ; v = 0
	add qword [rsp + 0], 1 ; u++
.jump255:
	; Compare u to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump253 ; If u >= bound, break
.jump256:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment w
	add qword [rsp + 16], 1
	jmp .jump252
.jump253: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump257
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump257:
	; Computing bound for v
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump258
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump258:
	; Computing bound for u
	mov rax, [rel const28] ; 386
	push rax
	mov rax, [rsp]
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize w to 0
	mov rax, 0
	push rax
	; Initialize v to 0
	mov rax, 0
	push rax
	; Initialize u to 0
	mov rax, 0
	push rax
.jump259: ; Begin body of loop
	; Compare w to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump261 ; If w >= bound, ...
	mov qword [rsp + 16], 0 ; w = 0
	add qword [rsp + 8], 1 ; v++
.jump261:
	; Compare v to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump262 ; If v >= bound, ...
	mov qword [rsp + 8], 0 ; v = 0
	add qword [rsp + 0], 1 ; u++
.jump262:
	; Compare u to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump260 ; If u >= bound, break
.jump263:
	; Compute loop body
	mov rax, [rel const29] ; 211
	push rax
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment w
	add qword [rsp + 16], 1
	jmp .jump259
.jump260: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump264
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump264:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize u to 0
	mov rax, 0
	push rax
.jump265: ; Begin body of loop
	; Compare u to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump266 ; If u >= bound, break
.jump267:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment u
	add qword [rsp + 0], 1
	jmp .jump265
.jump266: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump268
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump268:
	cmp rax, [rsp + 24]
	jl .jump269
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump269:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump270
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump270:
	cmp rax, [rsp + 32]
	jl .jump271
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump271:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump272
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump272:
	cmp rax, [rsp + 40]
	jl .jump273
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump273:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump274
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	; Moving 16 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 136 to rsp
		mov r10, [r12 - 136 + 0]
		mov [rsp + 0], r10
	jmp .jump275
.jump274:
	sub rsp, 8 ; Align stack
	call _o
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	cmp rax, 0
	je .jump276
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for u
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump278
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump278:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by n
	jno .jump279
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump279:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize u to 0
	mov rax, 0
	push rax
.jump280: ; Begin body of loop
	; Compare u to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump281 ; If u >= bound, break
.jump282:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment u
	add qword [rsp + 0], 1
	jmp .jump280
.jump281: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	jmp .jump277
.jump276:
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rdi, 24
	call _jpl_alloc
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	push rax
	mov rax, 3
	push rax
.jump277:
	sub rsp, 8 ; Align stack
	call _o
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	cmp rax, 0
	je .jump283
	jmp .jump284
.jump283:
.jump284:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for v
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump285
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump285:
	; Computing bound for u
	mov rax, [rel const30] ; 287
	push rax
	mov rax, [rsp]
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize v to 0
	mov rax, 0
	push rax
	; Initialize u to 0
	mov rax, 0
	push rax
.jump286: ; Begin body of loop
	; Compare v to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump288 ; If v >= bound, ...
	mov qword [rsp + 8], 0 ; v = 0
	add qword [rsp + 0], 1 ; u++
.jump288:
	; Compare u to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump287 ; If u >= bound, break
.jump289:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment v
	add qword [rsp + 8], 1
	jmp .jump286
.jump287: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
.jump275:
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	jne .jump290
	sub rsp, 8 ; Align stack
	lea rdi, [rel const31] ; y
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump290:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for A
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump291
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump291:
	; Computing bound for z
	sub rsp, 8
	; Moving 8 bytes from r12 - 136 to rsp
		mov r10, [r12 - 136 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump292
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump292:
	; Computing bound for y
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump293
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump293:
	; Computing total size of heap memory to allocate
	mov rdi, 0 ; sizeof {{}}
	imul rdi, [rsp + 0 + 0] ; multiply by (- s)
	jno .jump294
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump294:
	imul rdi, [rsp + 0 + 8] ; multiply by l
	jno .jump295
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump295:
	imul rdi, [rsp + 0 + 16] ; multiply by x
	jno .jump296
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump296:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize A to 0
	mov rax, 0
	push rax
	; Initialize z to 0
	mov rax, 0
	push rax
	; Initialize y to 0
	mov rax, 0
	push rax
.jump297: ; Begin body of loop
	; Compare A to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump299 ; If A >= bound, ...
	mov qword [rsp + 16], 0 ; A = 0
	add qword [rsp + 8], 1 ; z++
.jump299:
	; Compare z to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump300 ; If z >= bound, ...
	mov qword [rsp + 8], 0 ; z = 0
	add qword [rsp + 0], 1 ; y++
.jump300:
	; Compare y to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump298 ; If y >= bound, break
.jump301:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump302
	jmp .jump303
.jump302:
.jump303:
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 0
	add rax, [rsp + 48]
	; Move body (0 bytes) to index
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	; Increment A
	add qword [rsp + 16], 1
	jmp .jump297
.jump298: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for z
	mov rax, [rel const32] ; 0.83
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump304
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump304:
	; Computing bound for y
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump305
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump305:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize z to 0
	mov rax, 0
	push rax
	; Initialize y to 0
	mov rax, 0
	push rax
.jump306: ; Begin body of loop
	; Compare z to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump308 ; If z >= bound, ...
	mov qword [rsp + 8], 0 ; z = 0
	add qword [rsp + 0], 1 ; y++
.jump308:
	; Compare y to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump307 ; If y >= bound, break
.jump309:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 112 to rsp
		mov r10, [rbp - 112 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment z
	add qword [rsp + 8], 1
	jmp .jump306
.jump307: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rel const7] ; False
	push rax
	mov rax, [rel const7] ; False
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump310
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	jmp .jump311
.jump310:
	sub rsp, 8
	; Moving 8 bytes from r12 - 136 to rsp
		mov r10, [r12 - 136 + 0]
		mov [rsp + 0], r10
.jump311:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump312
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump312:
	cmp rax, [rsp + 24]
	jl .jump313
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump313:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump314
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump314:
	cmp rax, [rsp + 32]
	jl .jump315
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump315:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump316
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump316:
	cmp rax, [rsp + 40]
	jl .jump317
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump317:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 0
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 0
	; Moving 0 bytes from rax to rsp
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for A
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump318
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump318:
	; Computing bound for z
	sub rsp, 8 ; Align stack
	call _o
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump319
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	jmp .jump320
.jump319:
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
.jump320:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump321
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump321:
	; Computing bound for y
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump322
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump322:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof float[][]
	imul rdi, [rsp + 0 + 0] ; multiply by g
	jno .jump323
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump323:
	imul rdi, [rsp + 0 + 8] ; multiply by (if (! o()) then v else argnum)
	jno .jump324
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump324:
	imul rdi, [rsp + 0 + 16] ; multiply by i
	jno .jump325
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump325:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize A to 0
	mov rax, 0
	push rax
	; Initialize z to 0
	mov rax, 0
	push rax
	; Initialize y to 0
	mov rax, 0
	push rax
.jump326: ; Begin body of loop
	; Compare A to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump328 ; If A >= bound, ...
	mov qword [rsp + 16], 0 ; A = 0
	add qword [rsp + 8], 1 ; z++
.jump328:
	; Compare z to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump329 ; If z >= bound, ...
	mov qword [rsp + 8], 0 ; z = 0
	add qword [rsp + 0], 1 ; y++
.jump329:
	; Compare y to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump327 ; If y >= bound, break
.jump330:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for B
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump331
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump331:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof float[]
	imul rdi, [rsp + 0 + 0] ; multiply by (- t)
	jno .jump332
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump332:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize B to 0
	mov rax, 0
	push rax
.jump333: ; Begin body of loop
	; Compare B to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump334 ; If B >= bound, break
.jump335:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for C
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump336
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump336:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by z
	jno .jump337
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump337:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize C to 0
	mov rax, 0
	push rax
.jump338: ; Begin body of loop
	; Compare C to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump339 ; If C >= bound, break
.jump340:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment C
	add qword [rsp + 0], 1
	jmp .jump338
.jump339: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 4
	add rax, [rsp + 32]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment B
	add qword [rsp + 0], 1
	jmp .jump333
.jump334: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	shl rax, 4
	add rax, [rsp + 64]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment A
	add qword [rsp + 16], 1
	jmp .jump326
.jump327: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 128 to rsp
		mov r10, [r12 - 128 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 128 to rsp
		mov r10, [r12 - 128 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump341
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump341:
	cmp rax, [rsp + 24]
	jl .jump342
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump342:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump343
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump343:
	cmp rax, [rsp + 32]
	jl .jump344
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump344:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump345
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump345:
	cmp rax, [rsp + 40]
	jl .jump346
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump346:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 4
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for A
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump347
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump347:
	; Computing bound for z
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump348
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump348:
	; Computing bound for y
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump349
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump349:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof {bool,float,bool}[,]
	imul rdi, [rsp + 0 + 0] ; multiply by t
	jno .jump350
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump350:
	imul rdi, [rsp + 0 + 8] ; multiply by (- g)
	jno .jump351
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump351:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump352
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump352:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize A to 0
	mov rax, 0
	push rax
	; Initialize z to 0
	mov rax, 0
	push rax
	; Initialize y to 0
	mov rax, 0
	push rax
.jump353: ; Begin body of loop
	; Compare A to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump355 ; If A >= bound, ...
	mov qword [rsp + 16], 0 ; A = 0
	add qword [rsp + 8], 1 ; z++
.jump355:
	; Compare z to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump356 ; If z >= bound, ...
	mov qword [rsp + 8], 0 ; z = 0
	add qword [rsp + 0], 1 ; y++
.jump356:
	; Compare y to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump354 ; If y >= bound, break
.jump357:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for C
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump358
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump358:
	; Computing bound for B
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump359
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump359:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof {bool,float,bool}
	imul rdi, [rsp + 0 + 0] ; multiply by n
	jno .jump360
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump360:
	imul rdi, [rsp + 0 + 8] ; multiply by x
	jno .jump361
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump361:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize C to 0
	mov rax, 0
	push rax
	; Initialize B to 0
	mov rax, 0
	push rax
.jump362: ; Begin body of loop
	; Compare C to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump364 ; If C >= bound, ...
	mov qword [rsp + 8], 0 ; C = 0
	add qword [rsp + 0], 1 ; B++
.jump364:
	; Compare B to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump363 ; If B >= bound, break
.jump365:
	; Compute loop body
	mov rax, [rel const7] ; False
	push rax
	mov rax, [rel const33] ; 22.62
	push rax
	sub rsp, 8 ; Align stack
	call _o
	add rsp, 8 ; Remove alignment
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 24
	add rax, [rsp + 56]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment C
	add qword [rsp + 8], 1
	jmp .jump362
.jump363: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 24
	add rax, [rsp + 72]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment A
	add qword [rsp + 16], 1
	jmp .jump353
.jump354: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 128 to rsp
		mov r10, [r12 - 128 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 136 to rsp
		mov r10, [r12 - 136 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump366
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump366:
	cmp rax, [rsp + 24]
	jl .jump367
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump367:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump368
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump368:
	cmp rax, [rsp + 32]
	jl .jump369
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump369:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump370
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump370:
	cmp rax, [rsp + 40]
	jl .jump371
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump371:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 24
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	call _p
	add rsp, 24
	add rsp, 16
	add rsp, 0
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 40 ; Local variables
	pop rbp
	ret

s:
_s:
	push rbp
	mov rbp, rsp
	sub rsp, 32
	; Moving 32 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - -32 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -32 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for C
	sub rsp, 8
	; Moving 8 bytes from r12 - 136 to rsp
		mov r10, [r12 - 136 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump372
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump372:
	; Computing bound for B
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump373
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump373:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by i
	jno .jump374
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump374:
	imul rdi, [rsp + 0 + 8] ; multiply by l
	jno .jump375
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump375:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize C to 0
	mov rax, 0
	push rax
	; Initialize B to 0
	mov rax, 0
	push rax
.jump376: ; Begin body of loop
	; Compare C to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump378 ; If C >= bound, ...
	mov qword [rsp + 8], 0 ; C = 0
	add qword [rsp + 0], 1 ; B++
.jump378:
	; Compare B to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump377 ; If B >= bound, break
.jump379:
	; Compute loop body
	mov rax, [rel const7] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment C
	add qword [rsp + 8], 1
	jmp .jump376
.jump377: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -64 to rsp
		mov r10, [rbp - -64 + 0]
		mov [rsp + 0], r10
	mov rdi, 64
	call _jpl_alloc
	; Moving 64 bytes from rsp to rax
		mov r10, [rsp + 56]
		mov [rax + 56], r10
		mov r10, [rsp + 48]
		mov [rax + 48], r10
		mov r10, [rsp + 40]
		mov [rax + 40], r10
		mov r10, [rsp + 32]
		mov [rax + 32], r10
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 64
	push rax
	mov rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump380
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump380:
	cmp rax, [rsp + 8]
	jl .jump381
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump381:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 6
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 64
	; Moving 64 bytes from rax to rsp
		mov r10, [rax + 56]
		mov [rsp + 56], r10
		mov r10, [rax + 48]
		mov [rsp + 48], r10
		mov r10, [rax + 40]
		mov [rsp + 40], r10
		mov r10, [rax + 32]
		mov [rsp + 32], r10
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	; Moving 24 bytes from r12 - 160 to rsp
		mov r10, [r12 - 160 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 160 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 160 + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	; Moving 24 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const7] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump382
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump383
.jump382:
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
.jump383:
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rdi, 32
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	push rax
	mov rax, 2
	push rax
	mov rax, [rel const1] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump384
	jmp .jump385
.jump384:
.jump385:
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	call _o
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump386
	mov rax, [rel const34] ; 60.29
	push rax
	mov rax, [rel const1] ; True
	push rax
	sub rsp, 24
	; Moving 24 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	jmp .jump387
.jump386:
	mov rax, [rel const35] ; 4.45
	push rax
	mov rax, [rel const1] ; True
	push rax
	sub rsp, 24
	; Moving 24 bytes from r12 - 160 to rsp
		mov r10, [r12 - 160 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 160 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 160 + 0]
		mov [rsp + 0], r10
.jump387:
	; Moving 8 bytes from rsp + 24 to rsp + 32
		mov r10, [rsp + 24 + 0]
		mov [rsp + 32 + 0], r10
	add rsp, 32
	pop rax
	cmp rax, 0
	je .jump388
	sub rsp, 24
	; Moving 24 bytes from r12 - 104 to rsp
		mov r10, [r12 - 104 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 104 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
	jmp .jump389
.jump388:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for L
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump390
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump390:
	; Computing bound for K
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump391
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump391:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof {float,float,float,float}
	imul rdi, [rsp + 0 + 0] ; multiply by G
	jno .jump392
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump392:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump393
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump393:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize L to 0
	mov rax, 0
	push rax
	; Initialize K to 0
	mov rax, 0
	push rax
.jump394: ; Begin body of loop
	; Compare L to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump396 ; If L >= bound, ...
	mov qword [rsp + 8], 0 ; L = 0
	add qword [rsp + 0], 1 ; K++
.jump396:
	; Compare K to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump395 ; If K >= bound, break
.jump397:
	; Compute loop body
	sub rsp, 24
	; Moving 24 bytes from r12 - 104 to rsp
		mov r10, [r12 - 104 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 104 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 200 to rsp
		mov r10, [rbp - 200 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump398
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump398:
	cmp rax, [rsp + 16]
	jl .jump399
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump399:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump400
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump400:
	cmp rax, [rsp + 24]
	jl .jump401
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump401:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 5
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 32
	; Moving 32 bytes from rax to rsp
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	shl rax, 5
	add rax, [rsp + 64]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment L
	add qword [rsp + 8], 1
	jmp .jump394
.jump395: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump389:
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const36] ; 51.29
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 192 ; Local variables
	pop rbp
	ret

t:
_t:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	; Moving 8 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump402
	mov rax, [rel const1] ; True
	push rax
	jmp .jump403
.jump402:
	sub rsp, 8
	; Moving 8 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
.jump403:
	pop rax
	cmp rax, 0
	jne .jump404
	call _o
	push rax
	pop rax
.jump404:
	push rax
	pop rax
	cmp rax, 0
	jne .jump405
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	jne .jump406
	sub rsp, 8
	; Moving 8 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	jne .jump407
	mov rax, [rel const1] ; True
	push rax
	pop rax
.jump407:
	push rax
	pop rax
	cmp rax, 0
	je .jump408
	mov rax, [rel const7] ; False
	push rax
	jmp .jump409
.jump408:
	mov rax, [rel const7] ; False
	push rax
.jump409:
	pop rax
.jump406:
	push rax
	pop rax
.jump405:
	push rax
	pop rax
	cmp rax, 0
	je .jump410
	mov rax, [rel const1] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump412
	mov rax, [rel const7] ; False
	push rax
	jmp .jump413
.jump412:
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
.jump413:
	pop rax
	cmp rax, 0
	je .jump414
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for A
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump416
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump416:
	; Computing bound for z
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump417
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump417:
	; Computing total size of heap memory to allocate
	mov rdi, 0 ; sizeof {}
	imul rdi, [rsp + 0 + 0] ; multiply by i
	jno .jump418
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump418:
	imul rdi, [rsp + 0 + 8] ; multiply by g
	jno .jump419
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump419:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize A to 0
	mov rax, 0
	push rax
	; Initialize z to 0
	mov rax, 0
	push rax
.jump420: ; Begin body of loop
	; Compare A to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump422 ; If A >= bound, ...
	mov qword [rsp + 8], 0 ; A = 0
	add qword [rsp + 0], 1 ; z++
.jump422:
	; Compare z to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump421 ; If z >= bound, break
.jump423:
	; Compute loop body
	sub rsp, 8 ; Align stack
	call _o
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	cmp rax, 0
	je .jump424
	jmp .jump425
.jump424:
.jump425:
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 0
	add rax, [rsp + 32]
	; Move body (0 bytes) to index
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	; Increment A
	add qword [rsp + 8], 1
	jmp .jump420
.jump421: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for z
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump426
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump426:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by j
	jno .jump427
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump427:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize z to 0
	mov rax, 0
	push rax
.jump428: ; Begin body of loop
	; Compare z to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump429 ; If z >= bound, break
.jump430:
	; Compute loop body
	mov rax, [rel const37] ; 728
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment z
	add qword [rsp + 0], 1
	jmp .jump428
.jump429: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump431
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	jmp .jump432
.jump431:
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
.jump432:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump433
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump433:
	cmp rax, [rsp + 8]
	jl .jump434
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump434:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const1] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump435
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	jmp .jump436
.jump435:
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
.jump436:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump437
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump437:
	cmp rax, [rsp + 16]
	jl .jump438
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump438:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump439
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump439:
	cmp rax, [rsp + 24]
	jl .jump440
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump440:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 0
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 0
	; Moving 0 bytes from rax to rsp
	jmp .jump415
.jump414:
	mov rax, [rel const1] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump441
	mov rax, [rel const7] ; False
	push rax
	pop rax
	cmp rax, 0
	jne .jump443
	sub rsp, 8
	; Moving 8 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	pop rax
.jump443:
	push rax
	jmp .jump442
.jump441:
	sub rsp, 8
	; Moving 8 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
.jump442:
	pop rax
	cmp rax, 0
	je .jump444
	jmp .jump445
.jump444:
	sub rsp, 8
	; Moving 8 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump446
	mov rax, [rel const1] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump448
	jmp .jump449
.jump448:
.jump449:
	jmp .jump447
.jump446:
	mov rax, [rel const1] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump450
	jmp .jump451
.jump450:
.jump451:
.jump447:
.jump445:
.jump415:
	jmp .jump411
.jump410:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for B
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump452
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump452:
	; Computing bound for A
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump453
	lea rdi, [rel const16] ; mod by zero
	call _fail_assertion
.jump453:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump454
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump454:
	; Computing bound for z
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump455
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump455:
	; Computing total size of heap memory to allocate
	mov rdi, 0 ; sizeof {}
	imul rdi, [rsp + 0 + 0] ; multiply by g
	jno .jump456
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump456:
	imul rdi, [rsp + 0 + 8] ; multiply by (- (j % v))
	jno .jump457
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump457:
	imul rdi, [rsp + 0 + 16] ; multiply by i
	jno .jump458
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump458:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize B to 0
	mov rax, 0
	push rax
	; Initialize A to 0
	mov rax, 0
	push rax
	; Initialize z to 0
	mov rax, 0
	push rax
.jump459: ; Begin body of loop
	; Compare B to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump461 ; If B >= bound, ...
	mov qword [rsp + 16], 0 ; B = 0
	add qword [rsp + 8], 1 ; A++
.jump461:
	; Compare A to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump462 ; If A >= bound, ...
	mov qword [rsp + 8], 0 ; A = 0
	add qword [rsp + 0], 1 ; z++
.jump462:
	; Compare z to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump460 ; If z >= bound, break
.jump463:
	; Compute loop body
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 0
	add rax, [rsp + 48]
	; Move body (0 bytes) to index
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	; Increment B
	add qword [rsp + 16], 1
	jmp .jump459
.jump460: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump464
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump464:
	cmp rax, [rsp + 24]
	jl .jump465
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump465:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump466
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump466:
	cmp rax, [rsp + 32]
	jl .jump467
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump467:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump468
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump468:
	cmp rax, [rsp + 40]
	jl .jump469
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump469:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 0
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 0
	; Moving 0 bytes from rax to rsp
.jump411:
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for C
	sub rsp, 8
	; Moving 8 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump470
	sub rsp, 32
	; Moving 32 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 24]
		mov [rsp + 24], r10
		mov r10, [r12 - 72 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 72 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for B
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump472
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump472:
	; Computing bound for A
	sub rsp, 8
	; Moving 8 bytes from r12 - 128 to rsp
		mov r10, [r12 - 128 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump473
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump473:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize B to 0
	mov rax, 0
	push rax
	; Initialize A to 0
	mov rax, 0
	push rax
.jump474: ; Begin body of loop
	; Compare B to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump476 ; If B >= bound, ...
	mov qword [rsp + 8], 0 ; B = 0
	add qword [rsp + 0], 1 ; A++
.jump476:
	; Compare A to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump475 ; If A >= bound, break
.jump477:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment B
	add qword [rsp + 8], 1
	jmp .jump474
.jump475: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rel const38] ; 747
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump478
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump478:
	cmp rax, [rsp + 24]
	jl .jump479
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump479:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump480
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump480:
	cmp rax, [rsp + 32]
	jl .jump481
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump481:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump482
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump482:
	cmp rax, [rsp + 40]
	jl .jump483
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump483:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump471
.jump470:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for C
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 136 to rsp
		mov r10, [r12 - 136 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump484
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump484:
	; Computing bound for B
	mov rax, [rel const39] ; 87
	push rax
	mov rax, [rsp]
	; Computing bound for A
	sub rsp, 8
	; Moving 8 bytes from r12 - 136 to rsp
		mov r10, [r12 - 136 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump485
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump485:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize C to 0
	mov rax, 0
	push rax
	; Initialize B to 0
	mov rax, 0
	push rax
	; Initialize A to 0
	mov rax, 0
	push rax
.jump486: ; Begin body of loop
	; Compare C to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump488 ; If C >= bound, ...
	mov qword [rsp + 16], 0 ; C = 0
	add qword [rsp + 8], 1 ; B++
.jump488:
	; Compare B to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump489 ; If B >= bound, ...
	mov qword [rsp + 8], 0 ; B = 0
	add qword [rsp + 0], 1 ; A++
.jump489:
	; Compare A to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump487 ; If A >= bound, break
.jump490:
	; Compute loop body
	mov rax, [rel const40] ; 95
	push rax
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment C
	add qword [rsp + 16], 1
	jmp .jump486
.jump487: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
.jump471:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump491
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump491:
	; Computing bound for B
	call _o
	push rax
	pop rax
	cmp rax, 0
	je .jump492
	sub rsp, 8
	; Moving 8 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	pop rax
.jump492:
	push rax
	pop rax
	cmp rax, 0
	je .jump493
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump495
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump495:
	cmp rax, [rsp + 8]
	jl .jump496
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump496:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump494
.jump493:
	mov rax, [rel const7] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump497
	mov rax, [rel const1] ; True
	push rax
	pop rax
.jump497:
	push rax
.jump494:
	pop rax
	cmp rax, 0
	je .jump498
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	jmp .jump499
.jump498:
	sub rsp, 8
	; Moving 8 bytes from r12 - 128 to rsp
		mov r10, [r12 - 128 + 0]
		mov [rsp + 0], r10
.jump499:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump500
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump500:
	; Computing bound for A
	sub rsp, 8 ; Align stack
	mov rax, [rel const41] ; 82.04
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump501
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump501:
	; Computing total size of heap memory to allocate
	mov rdi, 40 ; sizeof {int[,,],int}
	imul rdi, [rsp + 0 + 0] ; multiply by to_int(acos(82.04))
	jno .jump502
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump502:
	imul rdi, [rsp + 0 + 8] ; multiply by (if (if (o() && w) then u[argnum] else (false && true)) then n else m)
	jno .jump503
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump503:
imul rdi, [rsp + 0 + 16] ; multiply by (if w then f[747, (sum[A : m, B : v] g), n] else (sum[A : l, B : 87, C : (l * h)] 95))
	jno .jump504
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump504:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize C to 0
	mov rax, 0
	push rax
	; Initialize B to 0
	mov rax, 0
	push rax
	; Initialize A to 0
	mov rax, 0
	push rax
.jump505: ; Begin body of loop
	; Compare C to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump507 ; If C >= bound, ...
	mov qword [rsp + 16], 0 ; C = 0
	add qword [rsp + 8], 1 ; B++
.jump507:
	; Compare B to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump508 ; If B >= bound, ...
	mov qword [rsp + 8], 0 ; B = 0
	add qword [rsp + 0], 1 ; A++
.jump508:
	; Compare A to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump506 ; If A >= bound, break
.jump509:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 32
	; Moving 32 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 24]
		mov [rsp + 24], r10
		mov r10, [r12 - 72 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 72 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	; Moving 32 bytes from rsp + 24 to rsp + 24
		mov r10, [rsp + 24 + 24]
		mov [rsp + 24 + 24], r10
		mov r10, [rsp + 24 + 16]
		mov [rsp + 24 + 16], r10
		mov r10, [rsp + 24 + 8]
		mov [rsp + 24 + 8], r10
		mov r10, [rsp + 24 + 0]
		mov [rsp + 24 + 0], r10
	add rsp, 24
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, [rsp + 72] ; No overflow if indices in bounds
	add rax, [rsp + 48]
	imul rax, [rsp + 80] ; No overflow if indices in bounds
	add rax, [rsp + 56]
	imul rax, 40
	add rax, [rsp + 88]
	; Move body (40 bytes) to index
	; Moving 40 bytes from rsp to rax
		mov r10, [rsp + 32]
		mov [rax + 32], r10
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 40
	; Increment C
	add qword [rsp + 16], 1
	jmp .jump505
.jump506: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 16
	; Moving 16 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const42] ; 354
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump510
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump510:
	cmp rax, [rsp + 8]
	jl .jump511
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump511:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for A
	sub rsp, 8
	; Moving 8 bytes from rbp - -40 to rsp
		mov r10, [rbp - -40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump512
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump512:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize A to 0
	mov rax, 0
	push rax
.jump513: ; Begin body of loop
	; Compare A to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump514 ; If A >= bound, break
.jump515:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 16 to rsp + 16
		mov r10, [rsp + 16 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump516
	lea rdi, [rel const43] ; divide by zero
	call _fail_assertion
.jump516:
	cqo
	idiv r10
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment A
	add qword [rsp + 0], 1
	jmp .jump513
.jump514: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -40 to rsp
		mov r10, [rbp - -40 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump517
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump517:
	cmp rax, [rsp + 24]
	jl .jump518
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump518:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump519
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump519:
	cmp rax, [rsp + 32]
	jl .jump520
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump520:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump521
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump521:
	cmp rax, [rsp + 40]
	jl .jump522
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump522:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 40
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 40
	; Moving 40 bytes from rax to rsp
		mov r10, [rax + 32]
		mov [rsp + 32], r10
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	mov rax, [rel const44] ; 10.2
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 56 ; Local variables
	pop rbp
	ret

jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp
	sub rsp, 24
	lea rdi, [rsp]
	lea rsi, [rel const0] ; b.png
	call _read_image
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for e
	mov rax, [rel const8] ; 258
	push rax
	mov rax, [rsp]
	; Computing bound for d
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for e
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump86
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump86:
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump87
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump87:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump88
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump88:
	imul rdi, [rsp + 0 + 8] ; multiply by (- argnum)
	jno .jump89
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump89:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
.jump90: ; Begin body of loop
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump92 ; If e >= bound, ...
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
.jump92:
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump91 ; If d >= bound, break
.jump93:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment e
	add qword [rsp + 8], 1
	jmp .jump90
.jump91: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 16
		mov r10, [rsp + 0 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump94
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump94:
	cmp rax, [rsp + 16]
	jl .jump95
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump95:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump96
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump96:
	cmp rax, [rsp + 24]
	jl .jump97
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump97:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump98
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump98:
	; Computing total size of heap memory to allocate
	mov rdi, 72 ; sizeof {{{float,float,float,float}[,],float,int[,,]},{int}}
imul rdi, [rsp + 0 + 0] ; multiply by (array[d : argnum, e : (- argnum)] (d - e))[argnum, {argnum, args}{0}]
	jno .jump99
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump99:
	imul rdi, [rsp + 0 + 8] ; multiply by 258
	jno .jump100
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump100:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
.jump101: ; Begin body of loop
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump103 ; If e >= bound, ...
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
.jump103:
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump102 ; If d >= bound, break
.jump104:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump105
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump105:
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump106
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump106:
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump107
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump107:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by d
	jno .jump108
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump108:
	imul rdi, [rsp + 0 + 8] ; multiply by d
	jno .jump109
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump109:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump110
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump110:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
.jump111: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump113 ; If h >= bound, ...
	mov qword [rsp + 16], 0 ; h = 0
	add qword [rsp + 8], 1 ; g++
.jump113:
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump114 ; If g >= bound, ...
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
.jump114:
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump112 ; If f >= bound, break
.jump115:
	; Compute loop body
	mov rax, [rel const9] ; 56
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment h
	add qword [rsp + 16], 1
	jmp .jump111
.jump112: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump116
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump116:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize f to 0
	mov rax, 0
	push rax
.jump117: ; Begin body of loop
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump118 ; If f >= bound, break
.jump119:
	; Compute loop body
	mov rax, [rel const10] ; 75.84
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 16] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 16], xmm0 ; Save sum
	; Increment f
	add qword [rsp + 0], 1
	jmp .jump117
.jump118: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	sub rsp, 24
	; Moving 24 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 88] ; No overflow if indices in bounds
	add rax, [rsp + 72]
	imul rax, [rsp + 96] ; No overflow if indices in bounds
	add rax, [rsp + 80]
	imul rax, 72
	add rax, [rsp + 104]
	; Move body (72 bytes) to index
	; Moving 72 bytes from rsp to rax
		mov r10, [rsp + 64]
		mov [rax + 64], r10
		mov r10, [rsp + 56]
		mov [rax + 56], r10
		mov r10, [rsp + 48]
		mov [rax + 48], r10
		mov r10, [rsp + 40]
		mov [rax + 40], r10
		mov r10, [rsp + 32]
		mov [rax + 32], r10
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 72
	; Increment e
	add qword [rsp + 8], 1
	jmp .jump101
.jump102: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8 ; Align stack
	mov rax, [rel const11] ; 52.39
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const7] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump120
	mov rax, [rel const1] ; True
	push rax
	pop rax
.jump120:
	push rax
	pop rax
	cmp rax, 0
	je .jump121
	mov rax, [rel const12] ; 68.35
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	sub rsp, 8
	movsd [rsp], xmm0
	jmp .jump122
.jump121:
	mov rax, [rel const13] ; 4.3
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
.jump122:
	sub rsp, 8 ; Align stack
	mov rax, [rel const14] ; 35.05
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const15] ; 173
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump123
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; mod by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump123:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const17] ; 971
	push rax
	pop rax
	neg rax
	push rax
	; Moving 8 bytes from rsp + 8 to rsp + 16
		mov r10, [rsp + 8 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump124
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump124:
	cmp rax, [rsp + 16]
	jl .jump125
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump125:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump126
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump126:
	cmp rax, [rsp + 24]
	jl .jump127
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump127:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 72
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 72
	; Moving 72 bytes from rax to rsp
		mov r10, [rax + 64]
		mov [rsp + 64], r10
		mov r10, [rax + 56]
		mov [rsp + 56], r10
		mov r10, [rax + 48]
		mov [rsp + 48], r10
		mov r10, [rax + 40]
		mov [rsp + 40], r10
		mov r10, [rax + 32]
		mov [rsp + 32], r10
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump128
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump128:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump129
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump129:
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump130
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump130:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump131
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump131:
	imul rdi, [rsp + 0 + 8] ; multiply by (i * i)
	jno .jump132
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump132:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump133
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump133:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
	; Initialize k to 0
	mov rax, 0
	push rax
.jump134: ; Begin body of loop
	; Compare m to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump136 ; If m >= bound, ...
	mov qword [rsp + 16], 0 ; m = 0
	add qword [rsp + 8], 1 ; l++
.jump136:
	; Compare l to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump137 ; If l >= bound, ...
	mov qword [rsp + 8], 0 ; l = 0
	add qword [rsp + 0], 1 ; k++
.jump137:
	; Compare k to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump135 ; If k >= bound, break
.jump138:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment m
	add qword [rsp + 16], 1
	jmp .jump134
.jump135: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 24
	; Moving 24 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 32
	; Moving 32 bytes from rbp - 136 to rsp
		mov r10, [rbp - 136 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 136 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 136 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 136 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const45] ; 167
	push rax
	mov rax, [rel const1] ; True
	push rax
	call _o
	push rax
	mov rax, [rel const1] ; True
	push rax
	mov rdi, 16
	call _jpl_alloc
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
	call _t
	add rsp, 32
	add rsp, 0
	add rsp, 32
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	sub rsp, 8
	movsd [rsp], xmm0
	add rsp, 160 ; Local variables
	pop r12
	pop rbp
	ret

