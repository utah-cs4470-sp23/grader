global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 0
const1: dq 1
const2: dq 35.33
const3: dq 27.56
const4: dq 603
const5: db `non-positive loop bound`, 0
const6: db `overflow computing array size`, 0
const7: dq 19.7
const8: dq 955
const9: dq 553
const10: db `divide by zero`, 0
const11: db `negative array index`, 0
const12: db `index too large`, 0
const13: db `d`, 0
const14: db `mod by zero`, 0
const15: dq 83.33
const16: dq 97.83
const17: dq 90.29
const18: dq 91.38
const19: db `t`, 0
const20: dq 833
const21: dq 131
const22: dq 306
const23: dq 55.17
const24: dq 539
const25: dq 964
const26: db `p`, 0
const27: dq 91
const28: dq 953
const29: dq 97
const30: dq 821
const31: dq 19.51
const32: dq 831
const33: dq 73.84
const34: db `g`, 0
const35: dq 5.68
const36: dq 93
const37: dq 51.71
const38: dq 42
const39: dq 299
const40: dq 38.54
const41: dq 112
const42: dq 716
const43: dq 196
const44: dq 28.22
const45: dq 41.94
const46: db `h`, 0
const47: dq 469
const48: dq 150
const49: dq 948
const50: dq 52
const51: dq 915
const52: dq 691

section .text
d:
_d:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	movsd [rsp], xmm0
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for q
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump65
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump65:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by c
	jno .jump66
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump66:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize q to 0
	mov rax, 0
	push rax
.jump67: ; Begin body of loop
	; Compare q to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump68 ; If q >= bound, break
.jump69:
	; Compute loop body
	mov rax, [rel const0] ; False
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment q
	add qword [rsp + 0], 1
	jmp .jump67
.jump68: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -88 to rsp
		mov r10, [rbp - -88 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -80 to rsp
		mov r10, [rbp - -80 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump70
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; mod by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump70:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump71
	lea rdi, [rel const11] ; negative array index
	call _fail_assertion
.jump71:
	cmp rax, [rsp + 8]
	jl .jump72
	lea rdi, [rel const12] ; index too large
	call _fail_assertion
.jump72:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	pop rax
	cmp rax, 0
	je .jump73
	sub rsp, 8 ; Align stack
	mov rax, [rel const15] ; 83.33
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump75
	mov rax, [rel const16] ; 97.83
	push rax
	jmp .jump76
.jump75:
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
.jump76:
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 16
	; Moving 16 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const17] ; 90.29
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const18] ; 91.38
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Moving 16 bytes from rsp + 16 to rsp + 16
		mov r10, [rsp + 16 + 8]
		mov [rsp + 16 + 8], r10
		mov r10, [rsp + 16 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rbp - -48 to rsp
		mov r10, [rbp - -48 + 0]
		mov [rsp + 0], r10
	jmp .jump74
.jump73:
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 16
	; Moving 16 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	; Moving 32 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 24]
		mov [rsp + 0 + 24], r10
		mov r10, [rsp + 0 + 16]
		mov [rsp + 0 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
.jump74:
	mov rax, [rel const0] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump77
	mov rax, [rel const0] ; False
	push rax
	pop rax
.jump77:
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	jne .jump78
	sub rsp, 8 ; Align stack
	lea rdi, [rel const19] ; t
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump78:
	sub rsp, 32
	; Moving 32 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - -16 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	add rsp, 72 ; Local variables
	pop rbp
	ret
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	add rsp, 72 ; Local variables
	pop rbp
	ret

e:
_e:
	push rbp
	mov rbp, rsp
	push rdi
	push rsi
	push rdx
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump79
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump79:
	; Computing bound for j
	mov rax, [rel const0] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump80
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	jmp .jump81
.jump80:
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
.jump81:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump82
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump82:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by (if false then g else c)
	jno .jump83
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump83:
	imul rdi, [rsp + 0 + 8] ; multiply by g
	jno .jump84
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump84:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
.jump85: ; Begin body of loop
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump87 ; If k >= bound, ...
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
.jump87:
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump86 ; If j >= bound, break
.jump88:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment k
	add qword [rsp + 8], 1
	jmp .jump85
.jump86: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump89
	sub rsp, 16
	; Moving 16 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	jmp .jump90
.jump89:
	sub rsp, 16
	; Moving 16 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
.jump90:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for k
	mov rax, [rel const20] ; 833
	push rax
	mov rax, [rsp]
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump91
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump91:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
.jump92: ; Begin body of loop
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump94 ; If k >= bound, ...
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
.jump94:
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump93 ; If j >= bound, break
.jump95:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment k
	add qword [rsp + 8], 1
	jmp .jump92
.jump93: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump96
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	jmp .jump97
.jump96:
	mov rax, [rel const21] ; 131
	push rax
.jump97:
	mov rdi, 16
	call _jpl_alloc
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
	mov rdi, 56
	call _jpl_alloc
	; Moving 56 bytes from rsp to rax
		mov r10, [rsp + 48]
		mov [rax + 48], r10
		mov r10, [rsp + 40]
		mov [rax + 40], r10
		mov r10, [rsp + 32]
		mov [rax + 32], r10
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 56
	push rax
	mov rax, 1
	push rax
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for l
	mov rax, [rel const22] ; 306
	push rax
	sub rsp, 8 ; Align stack
	mov rax, [rel const23] ; 55.17
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump98
	lea rdi, [rel const14] ; mod by zero
	call _fail_assertion
.jump98:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump99
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump99:
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump100
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump100:
	; Computing bound for j
	mov rax, [rel const24] ; 539
	push rax
	mov rax, [rsp]
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize l to 0
	mov rax, 0
	push rax
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
.jump101: ; Begin body of loop
	; Compare l to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump103 ; If l >= bound, ...
	mov qword [rsp + 16], 0 ; l = 0
	add qword [rsp + 8], 1 ; k++
.jump103:
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump104 ; If k >= bound, ...
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
.jump104:
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump102 ; If j >= bound, break
.jump105:
	; Compute loop body
	sub rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rsi
	pop rdx
	lea rdi, [rsp + 0]
	call _e
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const25] ; 964
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump106
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump106:
	cmp rax, [rsp + 24]
	jl .jump107
	sub rsp, 8 ; Align stack
	lea rdi, [rel const12] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump107:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump108
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump108:
	cmp rax, [rsp + 32]
	jl .jump109
	sub rsp, 8 ; Align stack
	lea rdi, [rel const12] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump109:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump110
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump110:
	cmp rax, [rsp + 40]
	jl .jump111
	sub rsp, 8 ; Align stack
	lea rdi, [rel const12] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump111:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment l
	add qword [rsp + 16], 1
	jmp .jump101
.jump102: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump112
	lea rdi, [rel const11] ; negative array index
	call _fail_assertion
.jump112:
	cmp rax, [rsp + 8]
	jl .jump113
	lea rdi, [rel const12] ; index too large
	call _fail_assertion
.jump113:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 56
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 56
	; Moving 56 bytes from rax to rsp
		mov r10, [rax + 48]
		mov [rsp + 48], r10
		mov r10, [rax + 40]
		mov [rsp + 40], r10
		mov r10, [rax + 32]
		mov [rsp + 32], r10
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	jne .jump114
	lea rdi, [rel const26] ; p
	call _fail_assertion
.jump114:
	mov rax, [rel const27] ; 91
	push rax
	sub rsp, 32
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	jne .jump115
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	pop rax
.jump115:
	push rax
	pop rax
	cmp rax, 0
	je .jump116
	sub rsp, 24
	; Moving 24 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 64 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	jmp .jump117
.jump116:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for s
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump118
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump118:
	; Computing bound for r
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump119
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump119:
	; Computing bound for q
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump120
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump120:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof int[,]
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump121
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump121:
	imul rdi, [rsp + 0 + 8] ; multiply by n
	jno .jump122
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump122:
	imul rdi, [rsp + 0 + 16] ; multiply by c
	jno .jump123
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump123:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize s to 0
	mov rax, 0
	push rax
	; Initialize r to 0
	mov rax, 0
	push rax
	; Initialize q to 0
	mov rax, 0
	push rax
.jump124: ; Begin body of loop
	; Compare s to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump126 ; If s >= bound, ...
	mov qword [rsp + 16], 0 ; s = 0
	add qword [rsp + 8], 1 ; r++
.jump126:
	; Compare r to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump127 ; If r >= bound, ...
	mov qword [rsp + 8], 0 ; r = 0
	add qword [rsp + 0], 1 ; q++
.jump127:
	; Compare q to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump125 ; If q >= bound, break
.jump128:
	; Compute loop body
	sub rsp, 24
	; Moving 24 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 64 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 24
	add rax, [rsp + 72]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment s
	add qword [rsp + 16], 1
	jmp .jump124
.jump125: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const28] ; 953
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump129
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump129:
	cmp rax, [rsp + 24]
	jl .jump130
	sub rsp, 8 ; Align stack
	lea rdi, [rel const12] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump130:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump131
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump131:
	cmp rax, [rsp + 32]
	jl .jump132
	sub rsp, 8 ; Align stack
	lea rdi, [rel const12] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump132:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump133
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump133:
	cmp rax, [rsp + 40]
	jl .jump134
	sub rsp, 8 ; Align stack
	lea rdi, [rel const12] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump134:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 24
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump117:
	mov rax, [rel const0] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump135
	mov rax, [rel const29] ; 97
	push rax
	jmp .jump136
.jump135:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for q
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump137
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump137:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize q to 0
	mov rax, 0
	push rax
.jump138: ; Begin body of loop
	; Compare q to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump139 ; If q >= bound, break
.jump140:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment q
	add qword [rsp + 0], 1
	jmp .jump138
.jump139: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
.jump136:
	mov rax, [rel const30] ; 821
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump141
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump141:
	cmp rax, [rsp + 16]
	jl .jump142
	sub rsp, 8 ; Align stack
	lea rdi, [rel const12] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump142:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump143
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump143:
	cmp rax, [rsp + 24]
	jl .jump144
	sub rsp, 8 ; Align stack
	lea rdi, [rel const12] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump144:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	pop rsi
	pop rdx
	lea rdi, [rsp + 8]
	call _e
	add rsp, 8 ; Remove alignment
	mov rax, [rbp - 8] ; Address to write return value into
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 136 ; Local variables
	pop rbp
	ret

f:
_f:
	push rbp
	mov rbp, rsp
	mov rax, [rel const1] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump145
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump147
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump147:
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump148
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump148:
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump149
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump149:
	; Computing total size of heap memory to allocate
	mov rdi, 0 ; sizeof {}
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump150
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump150:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump151
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump151:
	imul rdi, [rsp + 0 + 16] ; multiply by c
	jno .jump152
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump152:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
.jump153: ; Begin body of loop
	; Compare i to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump155 ; If i >= bound, ...
	mov qword [rsp + 16], 0 ; i = 0
	add qword [rsp + 8], 1 ; h++
.jump155:
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump156 ; If h >= bound, ...
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
.jump156:
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump154 ; If g >= bound, break
.jump157:
	; Compute loop body
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 0
	add rax, [rsp + 48]
	; Move body (0 bytes) to index
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	; Increment i
	add qword [rsp + 16], 1
	jmp .jump153
.jump154: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Moving 32 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 24]
		mov [rsp + 0 + 24], r10
		mov r10, [rsp + 0 + 16]
		mov [rsp + 0 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	sub rsp, 16
	; Moving 16 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const31] ; 19.51
	push rax
	sub rsp, 8 ; Align stack
	mov rax, [rel const32] ; 831
	push rax
	pop rdi
	call _to_float
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 32
		mov r10, [rsp + 0 + 0]
		mov [rsp + 32 + 0], r10
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const33] ; 73.84
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump158
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump158:
	cmp rax, [rsp + 24]
	jl .jump159
	sub rsp, 8 ; Align stack
	lea rdi, [rel const12] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump159:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump160
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump160:
	cmp rax, [rsp + 32]
	jl .jump161
	sub rsp, 8 ; Align stack
	lea rdi, [rel const12] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump161:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump162
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump162:
	cmp rax, [rsp + 40]
	jl .jump163
	sub rsp, 8 ; Align stack
	lea rdi, [rel const12] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump163:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 0
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 0
	; Moving 0 bytes from rax to rsp
	jmp .jump146
.jump145:
.jump146:
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	jne .jump164
	lea rdi, [rel const34] ; g
	call _fail_assertion
.jump164:
	mov rax, [rel const35] ; 5.68
	push rax
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	call _f
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 16
	; Moving 16 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	; Moving 40 bytes from rsp + 24 to rsp + 24
		mov r10, [rsp + 24 + 32]
		mov [rsp + 24 + 32], r10
		mov r10, [rsp + 24 + 24]
		mov [rsp + 24 + 24], r10
		mov r10, [rsp + 24 + 16]
		mov [rsp + 24 + 16], r10
		mov r10, [rsp + 24 + 8]
		mov [rsp + 24 + 8], r10
		mov r10, [rsp + 24 + 0]
		mov [rsp + 24 + 0], r10
	add rsp, 24
	; Moving 16 bytes from rsp + 16 to rsp + 24
		mov r10, [rsp + 16 + 8]
		mov [rsp + 24 + 8], r10
		mov r10, [rsp + 16 + 0]
		mov [rsp + 24 + 0], r10
	add rsp, 24
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for j
	mov rax, [rel const36] ; 93
	push rax
	mov rax, [rsp]
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump165
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	jmp .jump166
.jump165:
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
.jump166:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump167
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump167:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by (if a then h else argnum)
	jno .jump168
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump168:
	imul rdi, [rsp + 0 + 8] ; multiply by 93
	jno .jump169
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump169:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
.jump170: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump172 ; If j >= bound, ...
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
.jump172:
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump171 ; If i >= bound, break
.jump173:
	; Compute loop body
	mov rax, [rel const37] ; 51.71
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment j
	add qword [rsp + 8], 1
	jmp .jump170
.jump171: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Moving 24 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 16]
		mov [rsp + 0 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rdi, 8
	call _jpl_alloc
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const38] ; 42
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump174
	lea rdi, [rel const14] ; mod by zero
	call _fail_assertion
.jump174:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump175
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump175:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump176
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump176:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
.jump177: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump179 ; If j >= bound, ...
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
.jump179:
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump178 ; If i >= bound, break
.jump180:
	; Compute loop body
	mov rax, [rel const39] ; 299
	push rax
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment j
	add qword [rsp + 8], 1
	jmp .jump177
.jump178: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump181
	lea rdi, [rel const11] ; negative array index
	call _fail_assertion
.jump181:
	cmp rax, [rsp + 8]
	jl .jump182
	lea rdi, [rel const12] ; index too large
	call _fail_assertion
.jump182:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump183
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump183:
	cmp rax, [rsp + 16]
	jl .jump184
	sub rsp, 8 ; Align stack
	lea rdi, [rel const12] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump184:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump185
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump185:
	cmp rax, [rsp + 24]
	jl .jump186
	sub rsp, 8 ; Align stack
	lea rdi, [rel const12] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump186:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 16 ; Local variables
	pop rbp
	ret
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump187
	mov rax, [rel const40] ; 38.54
	push rax
	jmp .jump188
.jump187:
	call _f
	sub rsp, 8
	movsd [rsp], xmm0
.jump188:
	sub rsp, 8 ; Align stack
	call _f
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	call _f
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const41] ; 112
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump189
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	jmp .jump190
.jump189:
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump191
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	pop rax
.jump191:
	push rax
.jump190:
	pop rax
	cmp rax, 0
	je .jump192
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump194
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump194:
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump195
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump195:
	; Computing bound for i
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump196
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump196:
	; Computing bound for j
	mov rax, [rel const42] ; 716
	push rax
	mov rax, [rel const43] ; 196
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump197
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump197:
	; Computing bound for i
	sub rsp, 16
	; Moving 16 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump198
	lea rdi, [rel const11] ; negative array index
	call _fail_assertion
.jump198:
	cmp rax, [rsp + 8]
	jl .jump199
	lea rdi, [rel const12] ; index too large
	call _fail_assertion
.jump199:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump200
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump200:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
.jump201: ; Begin body of loop
	; Compare k to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump203 ; If k >= bound, ...
	mov qword [rsp + 16], 0 ; k = 0
	add qword [rsp + 8], 1 ; j++
.jump203:
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump204 ; If j >= bound, ...
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
.jump204:
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump202 ; If i >= bound, break
.jump205:
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump206
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump206:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump207
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump207:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump208: ; Begin body of loop
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump210 ; If m >= bound, ...
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
.jump210:
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump209 ; If l >= bound, break
.jump211:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment m
	add qword [rsp + 8], 1
	jmp .jump208
.jump209: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment k
	add qword [rsp + 16], 1
	jmp .jump201
.jump202: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump212
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump212:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
.jump213: ; Begin body of loop
	; Compare k to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump215 ; If k >= bound, ...
	mov qword [rsp + 16], 0 ; k = 0
	add qword [rsp + 8], 1 ; j++
.jump215:
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump216 ; If j >= bound, ...
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
.jump216:
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump214 ; If i >= bound, break
.jump217:
	; Compute loop body
	call _f
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	call _f
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 48] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment k
	add qword [rsp + 16], 1
	jmp .jump213
.jump214: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	jmp .jump193
.jump192:
	sub rsp, 8 ; Align stack
	mov rax, [rel const1] ; True
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump218
	call _f
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	jmp .jump219
.jump218:
	mov rax, [rel const44] ; 28.22
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
.jump219:
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
.jump193:
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 16 ; Local variables
	pop rbp
	ret

h:
_h:
	push rbp
	mov rbp, rsp
	sub rsp, 32
	mov rax, [rel const1] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump221
	mov rax, [rel const47] ; 469
	push rax
	jmp .jump222
.jump221:
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
.jump222:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for j
	call _f
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump223
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump223:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
.jump224: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump225 ; If j >= bound, break
.jump226:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment j
	add qword [rsp + 0], 1
	jmp .jump224
.jump225: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	pop rax
	pop r10
	add rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const0] ; False
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	pop rax
	cmp rax, 0
	je .jump227
	mov rax, [rel const1] ; True
	push rax
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 32 to rsp + 32
		mov r10, [rsp + 32 + 0]
		mov [rsp + 32 + 0], r10
	add rsp, 32
	jmp .jump228
.jump227:
	mov rax, [rel const0] ; False
	push rax
.jump228:
	pop rax
	cmp rax, 0
	je .jump229
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump230
.jump229:
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
.jump230:
	pop rsi
	pop rdx
	lea rdi, [rsp + 0]
	call _e
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump231
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump231:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump232
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump232:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by l
	jno .jump233
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump233:
	imul rdi, [rsp + 0 + 8] ; multiply by c
	jno .jump234
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump234:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
.jump235: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump237 ; If p >= bound, ...
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
.jump237:
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump236 ; If o >= bound, break
.jump238:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment p
	add qword [rsp + 8], 1
	jmp .jump235
.jump236: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rax, [rel const1] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump239
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	jmp .jump240
.jump239:
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
.jump240:
	sub rsp, 8 ; Align stack
	call _f
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump241
	lea rdi, [rel const11] ; negative array index
	call _fail_assertion
.jump241:
	cmp rax, [rsp + 16]
	jl .jump242
	lea rdi, [rel const12] ; index too large
	call _fail_assertion
.jump242:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump243
	lea rdi, [rel const11] ; negative array index
	call _fail_assertion
.jump243:
	cmp rax, [rsp + 24]
	jl .jump244
	lea rdi, [rel const12] ; index too large
	call _fail_assertion
.jump244:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump245
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for p
	mov rax, [rel const48] ; 150
	push rax
	mov rax, [rsp]
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump247
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump247:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by m
	jno .jump248
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump248:
	imul rdi, [rsp + 0 + 8] ; multiply by 150
	jno .jump249
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump249:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
.jump250: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump252 ; If p >= bound, ...
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
.jump252:
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump251 ; If o >= bound, break
.jump253:
	; Compute loop body
	mov rax, [rel const0] ; False
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment p
	add qword [rsp + 8], 1
	jmp .jump250
.jump251: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 32
	; Moving 32 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const49] ; 948
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const9] ; 553
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump254
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump254:
	cmp rax, [rsp + 24]
	jl .jump255
	sub rsp, 8 ; Align stack
	lea rdi, [rel const12] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump255:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump256
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump256:
	cmp rax, [rsp + 32]
	jl .jump257
	sub rsp, 8 ; Align stack
	lea rdi, [rel const12] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump257:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump258
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump258:
	cmp rax, [rsp + 40]
	jl .jump259
	sub rsp, 8 ; Align stack
	lea rdi, [rel const12] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump259:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const50] ; 52
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump260
	lea rdi, [rel const11] ; negative array index
	call _fail_assertion
.jump260:
	cmp rax, [rsp + 16]
	jl .jump261
	lea rdi, [rel const12] ; index too large
	call _fail_assertion
.jump261:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump262
	lea rdi, [rel const11] ; negative array index
	call _fail_assertion
.jump262:
	cmp rax, [rsp + 24]
	jl .jump263
	lea rdi, [rel const12] ; index too large
	call _fail_assertion
.jump263:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump246
.jump245:
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump264
	jmp .jump265
.jump264:
.jump265:
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	call _h
	add rsp, 16
	add rsp, 0
	add rsp, 8 ; Remove alignment
	push rax
.jump246:
	pop rax
	cmp rax, 0
	je .jump266
	sub rsp, 32
	; Moving 32 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	jmp .jump267
.jump266:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for q
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump268
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump268:
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump269
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump269:
	; Computing bound for o
	mov rax, [rel const51] ; 915
	push rax
	mov rax, [rsp]
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof int[,,]
	imul rdi, [rsp + 0 + 0] ; multiply by 915
	jno .jump270
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump270:
	imul rdi, [rsp + 0 + 8] ; multiply by m
	jno .jump271
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump271:
	imul rdi, [rsp + 0 + 16] ; multiply by m
	jno .jump272
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump272:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize q to 0
	mov rax, 0
	push rax
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
.jump273: ; Begin body of loop
	; Compare q to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump275 ; If q >= bound, ...
	mov qword [rsp + 16], 0 ; q = 0
	add qword [rsp + 8], 1 ; p++
.jump275:
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump276 ; If p >= bound, ...
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
.jump276:
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump274 ; If o >= bound, break
.jump277:
	; Compute loop body
	sub rsp, 32
	; Moving 32 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, [rsp + 72] ; No overflow if indices in bounds
	add rax, [rsp + 48]
	shl rax, 5
	add rax, [rsp + 80]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment q
	add qword [rsp + 16], 1
	jmp .jump273
.jump274: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump278
	mov rax, [rel const52] ; 691
	push rax
	jmp .jump279
.jump278:
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
.jump279:
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump280
	lea rdi, [rel const11] ; negative array index
	call _fail_assertion
.jump280:
	cmp rax, [rsp + 24]
	jl .jump281
	lea rdi, [rel const12] ; index too large
	call _fail_assertion
.jump281:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump282
	lea rdi, [rel const11] ; negative array index
	call _fail_assertion
.jump282:
	cmp rax, [rsp + 32]
	jl .jump283
	lea rdi, [rel const12] ; index too large
	call _fail_assertion
.jump283:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump284
	lea rdi, [rel const11] ; negative array index
	call _fail_assertion
.jump284:
	cmp rax, [rsp + 40]
	jl .jump285
	lea rdi, [rel const12] ; index too large
	call _fail_assertion
.jump285:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 5
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 32
	; Moving 32 bytes from rax to rsp
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump267:
	mov rdi, 32
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	push rax
	mov rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for s
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump286
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump286:
	; Computing bound for r
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump287
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump287:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump288
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump288:
	imul rdi, [rsp + 0 + 8] ; multiply by p
	jno .jump289
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump289:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize s to 0
	mov rax, 0
	push rax
	; Initialize r to 0
	mov rax, 0
	push rax
.jump290: ; Begin body of loop
	; Compare s to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump292 ; If s >= bound, ...
	mov qword [rsp + 8], 0 ; s = 0
	add qword [rsp + 0], 1 ; r++
.jump292:
	; Compare r to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump291 ; If r >= bound, break
.jump293:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment s
	add qword [rsp + 8], 1
	jmp .jump290
.jump291: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 32
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rsi
	pop rdx
	lea rdi, [rsp + 8]
	call _e
	add rsp, 8 ; Remove alignment
	; Moving 24 bytes from rsp + 32 to rsp + 32
		mov r10, [rsp + 32 + 16]
		mov [rsp + 32 + 16], r10
		mov r10, [rsp + 32 + 8]
		mov [rsp + 32 + 8], r10
		mov r10, [rsp + 32 + 0]
		mov [rsp + 32 + 0], r10
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump294
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump294:
	cmp rax, [rsp + 16]
	jl .jump295
	sub rsp, 8 ; Align stack
	lea rdi, [rel const12] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump295:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump296
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump296:
	cmp rax, [rsp + 24]
	jl .jump297
	sub rsp, 8 ; Align stack
	lea rdi, [rel const12] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump297:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump298
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump299
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	jmp .jump300
.jump299:
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const1] ; True
	push rax
.jump300:
	; Moving 8 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	pop rax
	xor rax, 1
	push rax
	pop rax
.jump298:
	push rax
	pop rax
	add rsp, 64 ; Local variables
	pop rbp
	ret

jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp
	mov rax, [rel const0] ; False
	push rax
	pop rax
	cmp rax, 0
	jne .jump1
	mov rax, [rel const1] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump2
	mov rax, [rel const2] ; 35.33
	push rax
	mov rax, [rel const3] ; 27.56
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	jmp .jump3
.jump2:
	mov rax, [rel const1] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump4
	mov rax, [rel const0] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump5
	mov rax, [rel const1] ; True
	push rax
	pop rax
.jump5:
	push rax
	pop rax
.jump4:
	push rax
.jump3:
	pop rax
	xor rax, 1
	push rax
	pop rax
.jump1:
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for b
	mov rax, [rel const4] ; 603
	push rax
	pop rax
	neg rax
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	mov rax, [rsp]
	cmp rax, 0
	jg .jump6
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump6:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof int[]
	imul rdi, [rsp + 0 + 0] ; multiply by {(- 603)}{0}
	jno .jump7
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump7:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize b to 0
	mov rax, 0
	push rax
.jump8: ; Begin body of loop
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump9 ; If b >= bound, break
.jump10:
	; Compute loop body
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 4
	add rax, [rsp + 32]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment b
	add qword [rsp + 0], 1
	jmp .jump8
.jump9: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	mov rax, [rel const7] ; 19.7
	push rax
	mov rax, [rel const1] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump11
	mov rdi, 0
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	push rax
	mov rax, 3
	push rax
	jmp .jump12
.jump11:
	mov rdi, 0
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	push rax
	mov rax, 1
	push rax
.jump12:
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Moving 16 bytes from rsp + 8 to rsp + 16
		mov r10, [rsp + 8 + 8]
		mov [rsp + 16 + 8], r10
		mov r10, [rsp + 8 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for f
	mov rax, [rel const1] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump13
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	jmp .jump14
.jump13:
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
.jump14:
	pop rax
	cmp rax, 0
	je .jump15
	mov rax, [rel const8] ; 955
	push rax
	mov rax, [rel const9] ; 553
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump17
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump19
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; divide by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump19:
	cqo
	idiv r10
	push rax
	jmp .jump18
.jump17:
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
.jump18:
	jmp .jump16
.jump15:
	sub rsp, 16
	; Moving 16 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump20
	lea rdi, [rel const11] ; negative array index
	call _fail_assertion
.jump20:
	cmp rax, [rsp + 8]
	jl .jump21
	lea rdi, [rel const12] ; index too large
	call _fail_assertion
.jump21:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 4
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump22
	lea rdi, [rel const11] ; negative array index
	call _fail_assertion
.jump22:
	cmp rax, [rsp + 8]
	jl .jump23
	lea rdi, [rel const12] ; index too large
	call _fail_assertion
.jump23:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump16:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump24
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump24:
	; Computing bound for e
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump25
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump25:
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump26
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump26:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize f to 0
	mov rax, 0
	push rax
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
.jump27: ; Begin body of loop
	; Compare f to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump29 ; If f >= bound, ...
	mov qword [rsp + 16], 0 ; f = 0
	add qword [rsp + 8], 1 ; e++
.jump29:
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump30 ; If e >= bound, ...
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
.jump30:
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump28 ; If d >= bound, break
.jump31:
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for i
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump32
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump32:
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump33
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump33:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
.jump34: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump36 ; If h >= bound, ...
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
.jump36:
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump35 ; If g >= bound, break
.jump37:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 144 to rsp
		mov r10, [rbp - 144 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment h
	add qword [rsp + 8], 1
	jmp .jump34
.jump35: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump38
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump38:
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	mov rax, [rsp]
	cmp rax, 0
	jg .jump39
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump39:
	; Computing bound for g
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump40
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump40:
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump41
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump41:
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump42
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump42:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
.jump43: ; Begin body of loop
	; Compare i to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump45 ; If i >= bound, ...
	mov qword [rsp + 16], 0 ; i = 0
	add qword [rsp + 8], 1 ; h++
.jump45:
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump46 ; If h >= bound, ...
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
.jump46:
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump44 ; If g >= bound, break
.jump47:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment i
	add qword [rsp + 16], 1
	jmp .jump43
.jump44: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump48
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump48:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
.jump49: ; Begin body of loop
	; Compare i to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump51 ; If i >= bound, ...
	mov qword [rsp + 16], 0 ; i = 0
	add qword [rsp + 8], 1 ; h++
.jump51:
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump52 ; If h >= bound, ...
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
.jump52:
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump50 ; If g >= bound, break
.jump53:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment i
	add qword [rsp + 16], 1
	jmp .jump49
.jump50: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment f
	add qword [rsp + 16], 1
	jmp .jump27
.jump28: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump54
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump54:
	cmp rax, [rsp + 8]
	jl .jump55
	sub rsp, 8 ; Align stack
	lea rdi, [rel const12] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump55:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 0
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 0
	; Moving 0 bytes from rax to rsp
	call _get_time
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const0] ; False
	push rax
	pop rax
	cmp rax, 0
	jne .jump56
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
.jump56:
	push rax
	pop rax
	cmp rax, 0
	je .jump57
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	jmp .jump58
.jump57:
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump59
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
.jump59:
	push rax
.jump58:
	pop rax
	cmp rax, 0
	je .jump60
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump61
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	jmp .jump62
.jump61:
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
.jump62:
	pop rax
.jump60:
	push rax
	pop rax
	cmp rax, 0
	je .jump63
	mov rax, [rel const0] ; False
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	pop rax
.jump63:
	push rax
	pop rax
	cmp rax, 0
	jne .jump64
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; d
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump64:
	sub rsp, 8 ; Align stack
	call _get_time
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 0]
	subsd xmm0, xmm1
	sub rsp, 8 ; Align stack
	call _print_time
	add rsp, 8 ; Remove alignment
	lea rdi, [rel const13] ; d
	sub rsp, 8 ; Align stack
	call _print
	add rsp, 8 ; Remove alignment
	sub rsp, 8 ; Align stack
	mov rax, [rel const45] ; 41.94
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const0] ; False
	push rax
	pop rax
	cmp rax, 0
	jne .jump220
	lea rdi, [rel const46] ; h
	call _fail_assertion
.jump220:
	add rsp, 40 ; Local variables
	pop r12
	pop rbp
	ret

