global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 1
const1: dq 0
const2: dq 820
const3: dq 170
const4: dq 243
const5: db `non-positive loop bound`, 0
const6: dq 173
const7: dq 495
const8: dq 769
const9: db `overflow computing array size`, 0
const10: dq 774
const11: dq 418
const12: dq 70.67
const13: db `c`, 0
const14: db `c.png`, 0
const15: dq 256
const16: db `negative array index`, 0
const17: db `index too large`, 0
const18: db `ab`, 0
const19: db `f`, 0
const20: dq 710
const21: dq 788
const22: dq 474
const23: dq 59.19
const24: dq 394
const25: db `mod by zero`, 0
const26: dq 17.66
const27: dq 240
const28: dq 29
const29: dq 66.03
const30: dq 30.06
const31: dq 72.5
const32: dq 45.58
const33: dq 180
const34: dq 60.6
const35: dq 416
const36: dq 763
const37: dq 18.49
const38: dq 449

section .text
d:
_d:
	push rbp
	mov rbp, rsp
	sub rsp, 24
	; Moving 24 bytes from rbp - -336 to rsp
		mov r10, [rbp - -336 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -336 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -336 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump31
	mov rax, [rel const1] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	jne .jump33
	mov rax, [rel const1] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump34
	mov rax, [rel const1] ; False
	push rax
	pop rax
.jump34:
	push rax
	pop rax
.jump33:
	push rax
	pop rax
	cmp rax, 0
	je .jump35
	sub rsp, 8
	; Moving 8 bytes from rbp - -416 to rsp
		mov r10, [rbp - -416 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump37
	mov rdi, 0
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	push rax
	mov rax, 1
	push rax
	jmp .jump38
.jump37:
	mov rdi, 0
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	push rax
	mov rax, 2
	push rax
.jump38:
	jmp .jump36
.jump35:
	mov rax, [rel const15] ; 256
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -424 to rsp
		mov r10, [rbp - -424 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump39
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for ab
	sub rsp, 8
	; Moving 8 bytes from rbp - -176 to rsp
		mov r10, [rbp - -176 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump41
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump41:
	; Computing total size of heap memory to allocate
	mov rdi, 0 ; sizeof {}
	imul rdi, [rsp + 0 + 0] ; multiply by w
	jno .jump42
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump42:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize ab to 0
	mov rax, 0
	push rax
.jump43: ; Begin body of loop
	; Compute loop body
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 0
	add rax, [rsp + 16]
	; Move body (0 bytes) to index
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	; Increment ab
	add qword [rsp + 0], 1
	; Compare ab to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump43 ; If ab < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	jmp .jump40
.jump39:
	mov rdi, 0
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	push rax
	mov rax, 1
	push rax
.jump40:
.jump36:
	jmp .jump32
.jump31:
	mov rdi, 0
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	push rax
	mov rax, 1
	push rax
.jump32:
	sub rsp, 8
	; Moving 8 bytes from rbp - -360 to rsp
		mov r10, [rbp - -360 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump45
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
.jump45:
	cmp rax, [rsp + 8]
	jl .jump46
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
.jump46:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 0
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 0
	; Moving 0 bytes from rax to rsp
	add rsp, 24 ; Local variables
	pop rbp
	ret
	sub rsp, 8
	; Moving 8 bytes from rbp - -128 to rsp
		mov r10, [rbp - -128 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -416 to rsp
		mov r10, [rbp - -416 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -56 to rsp
		mov r10, [rbp - -56 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	pop rax
	cmp rax, 0
	je .jump47
	sub rsp, 8
	; Moving 8 bytes from rbp - -384 to rsp
		mov r10, [rbp - -384 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	jmp .jump48
.jump47:
	sub rsp, 8
	; Moving 8 bytes from rbp - -184 to rsp
		mov r10, [rbp - -184 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
.jump48:
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump49
	mov rax, [rel const0] ; True
	push rax
	jmp .jump50
.jump49:
	sub rsp, 8
	; Moving 8 bytes from rbp - -80 to rsp
		mov r10, [rbp - -80 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump51
	sub rsp, 8
	; Moving 8 bytes from rbp - -432 to rsp
		mov r10, [rbp - -432 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -80 to rsp
		mov r10, [rbp - -80 + 0]
		mov [rsp + 0], r10
	sub rsp, 32
	; Moving 32 bytes from rbp - -88 to rsp
		mov r10, [rbp - -88 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - -88 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -88 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -88 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 32 to rsp + 40
		mov r10, [rsp + 32 + 0]
		mov [rsp + 40 + 0], r10
	add rsp, 40
	jmp .jump52
.jump51:
	mov rax, [rel const0] ; True
	push rax
.jump52:
	pop rax
	cmp rax, 0
	jne .jump53
	sub rsp, 8
	; Moving 8 bytes from rbp - -416 to rsp
		mov r10, [rbp - -416 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	pop rax
	cmp rax, 0
	je .jump54
	sub rsp, 8
	; Moving 8 bytes from rbp - -336 to rsp
		mov r10, [rbp - -336 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -200 to rsp
		mov r10, [rbp - -200 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	jmp .jump55
.jump54:
	mov rax, [rel const1] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump56
	mov rax, [rel const1] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	jmp .jump57
.jump56:
	sub rsp, 8
	; Moving 8 bytes from rbp - -288 to rsp
		mov r10, [rbp - -288 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -360 to rsp
		mov r10, [rbp - -360 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
.jump57:
.jump55:
	pop rax
.jump53:
	push rax
.jump50:
	pop rax
	cmp rax, 0
	jne .jump58
	sub rsp, 8 ; Align stack
	lea rdi, [rel const18] ; ab
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump58:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for ac
	sub rsp, 8
	; Moving 8 bytes from rbp - -144 to rsp
		mov r10, [rbp - -144 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump59
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump59:
	; Computing bound for ab
	sub rsp, 8
	; Moving 8 bytes from rbp - -144 to rsp
		mov r10, [rbp - -144 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump60
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump60:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by s
	jno .jump61
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
.jump61:
	imul rdi, [rsp + 0 + 8] ; multiply by s
	jno .jump62
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
.jump62:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize ac to 0
	mov rax, 0
	push rax
	; Initialize ab to 0
	mov rax, 0
	push rax
.jump63: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for ae
	sub rsp, 8
	; Moving 8 bytes from rbp - -296 to rsp
		mov r10, [rbp - -296 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump64
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump64:
	; Computing bound for ad
	sub rsp, 8
	; Moving 8 bytes from rbp - -368 to rsp
		mov r10, [rbp - -368 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump65
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump65:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by O
	jno .jump66
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump66:
	imul rdi, [rsp + 0 + 8] ; multiply by H
	jno .jump67
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump67:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize ae to 0
	mov rax, 0
	push rax
	; Initialize ad to 0
	mov rax, 0
	push rax
.jump68: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const0] ; True
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment ae
	add qword [rsp + 8], 1
	; Compare ae to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump68 ; If ae < bound, next iter
	mov qword [rsp + 8], 0 ; ae = 0
	add qword [rsp + 0], 1 ; ad++
	; Compare ad to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump68 ; If ad < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -296 to rsp
		mov r10, [rbp - -296 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -216 to rsp
		mov r10, [rbp - -216 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump71
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump71:
	cmp rax, [rsp + 16]
	jl .jump72
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump72:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump73
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump73:
	cmp rax, [rsp + 24]
	jl .jump74
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump74:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment ac
	add qword [rsp + 8], 1
	; Compare ac to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump63 ; If ac < bound, next iter
	mov qword [rsp + 8], 0 ; ac = 0
	add qword [rsp + 0], 1 ; ab++
	; Compare ab to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump63 ; If ab < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -368 to rsp
		mov r10, [rbp - -368 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -400 to rsp
		mov r10, [rbp - -400 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump77
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
.jump77:
	cmp rax, [rsp + 16]
	jl .jump78
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
.jump78:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump79
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
.jump79:
	cmp rax, [rsp + 24]
	jl .jump80
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
.jump80:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump81
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for ac
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump83
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump83:
	; Computing bound for ab
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump84
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump84:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof {{},int,int}
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump85
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
.jump85:
	imul rdi, [rsp + 0 + 8] ; multiply by b
	jno .jump86
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
.jump86:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize ac to 0
	mov rax, 0
	push rax
	; Initialize ab to 0
	mov rax, 0
	push rax
.jump87: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -144 to rsp
		mov r10, [rbp - -144 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 16
	add rax, [rsp + 48]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment ac
	add qword [rsp + 8], 1
	; Compare ac to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump87 ; If ac < bound, next iter
	mov qword [rsp + 8], 0 ; ac = 0
	add qword [rsp + 0], 1 ; ab++
	; Compare ab to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump87 ; If ab < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -368 to rsp
		mov r10, [rbp - -368 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -392 to rsp
		mov r10, [rbp - -392 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump90
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
.jump90:
	cmp rax, [rsp + 16]
	jl .jump91
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
.jump91:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump92
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
.jump92:
	cmp rax, [rsp + 24]
	jl .jump93
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
.jump93:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 16
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Moving 0 bytes from rsp + 0 to rsp + 16
	add rsp, 16
	jmp .jump82
.jump81:
.jump82:

f:
_f:
	push rbp
	mov rbp, rsp
	push rdi
	sub rsp, 24
	; Moving 24 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 48 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const1] ; False
	push rax
	pop rax
	add rsp, 32 ; Local variables
	pop rbp
	ret
	mov rax, [rel const20] ; 710
	push rax
	mov rax, [rel const21] ; 788
	push rax
	mov rax, [rel const0] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump97
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump98
.jump97:
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
.jump98:
	pop rax
	pop r10
	cmp rax, r10
	setg al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump99
	sub rsp, 8 ; Align stack
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	pop rdi
	call _f
	add rsp, 16
	add rsp, 8 ; Remove alignment
	push rax
	jmp .jump100
.jump99:
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setg al
	and rax, 1
	push rax
.jump100:
	pop rax
	cmp rax, 0
	je .jump101
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump103
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump103:
	; Computing bound for m
	mov rax, [rel const22] ; 474
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump104
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump104:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump105
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump105:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof float[]
	imul rdi, [rsp + 0 + 0] ; multiply by i
	jno .jump106
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump106:
	imul rdi, [rsp + 0 + 8] ; multiply by 474
	jno .jump107
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump107:
	imul rdi, [rsp + 0 + 16] ; multiply by h
	jno .jump108
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump108:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump109: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const23] ; 59.19
	push rax
	mov rdi, 8
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 16
	add rax, [rsp + 64]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment n
	add qword [rsp + 16], 1
	; Compare n to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump109 ; If n < bound, next iter
	mov qword [rsp + 16], 0 ; n = 0
	add qword [rsp + 8], 1 ; m++
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump109 ; If m < bound, next iter
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump109 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump102
.jump101:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for l
	mov rax, [rel const24] ; 394
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump113
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump113:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize l to 0
	mov rax, 0
	push rax
.jump114: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment l
	add qword [rsp + 0], 1
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump114 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	pop rax
	pop r10
	cmp r10, 0
	jne .jump116
	lea rdi, [rel const25] ; mod by zero
	call _fail_assertion
.jump116:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump117
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump117:
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump118
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump118:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump119
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump119:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof float[]
	imul rdi, [rsp + 0 + 0] ; multiply by (- (- k))
	jno .jump120
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump120:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump121
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump121:
imul rdi, [rsp + 0 + 16] ; multiply by ((sum[l : 394] k) % b)
	jno .jump122
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump122:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump123: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for q
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump124
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump124:
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump125
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump125:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump126
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump126:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize q to 0
	mov rax, 0
	push rax
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
.jump127: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const26] ; 17.66
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	addsd xmm0, [rsp + 48] ; Load sum
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment q
	add qword [rsp + 16], 1
	; Compare q to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump127 ; If q < bound, next iter
	mov qword [rsp + 16], 0 ; q = 0
	add qword [rsp + 8], 1 ; p++
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump127 ; If p < bound, next iter
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump127 ; If o < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rdi, 16
	call _jpl_alloc
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 16
	add rax, [rsp + 64]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment n
	add qword [rsp + 16], 1
	; Compare n to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump123 ; If n < bound, next iter
	mov qword [rsp + 16], 0 ; n = 0
	add qword [rsp + 8], 1 ; m++
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump123 ; If m < bound, next iter
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump123 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump102:
	mov rax, [rel const1] ; False
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	pop rax
	cmp rax, 0
	je .jump134
	mov rax, [rel const0] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump136
	mov rax, [rel const0] ; True
	push rax
	jmp .jump137
.jump136:
	mov rax, [rel const0] ; True
	push rax
.jump137:
	jmp .jump135
.jump134:
	mov rax, [rel const1] ; False
	push rax
.jump135:
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	mov rax, [rel const1] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump138
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _f
	add rsp, 16
	push rax
	jmp .jump139
.jump138:
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _f
	add rsp, 16
	push rax
.jump139:
	mov rax, [rel const1] ; False
	push rax
	mov rax, [rel const0] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump140
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	jmp .jump141
.jump140:
	mov rax, [rel const27] ; 240
	push rax
.jump141:
	mov rax, [rel const28] ; 29
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	mov rdi, 24
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	push rax
	mov rax, 3
	push rax
	mov rax, [rel const29] ; 66.03
	push rax
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	; Moving 24 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 40 to rsp + 40
		mov r10, [rsp + 40 + 0]
		mov [rsp + 40 + 0], r10
	add rsp, 40
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	pop rdi
	call _f
	add rsp, 16
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	add rsp, 72 ; Local variables
	pop rbp
	ret

g:
_g:
	push rbp
	mov rbp, rsp
	sub rsp, 16
	; Moving 16 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const30] ; 30.06
	push rax
	mov rdi, 8
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -64 to rsp
		mov r10, [rbp - -64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump142
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump142:
	cmp rax, [rsp + 8]
	jl .jump143
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump143:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const31] ; 72.5
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 16 ; Local variables
	pop rbp
	ret
	sub rsp, 8
	; Moving 8 bytes from rbp - -56 to rsp
		mov r10, [rbp - -56 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const32] ; 45.58
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump144
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for v
	sub rsp, 8
	; Moving 8 bytes from rbp - -88 to rsp
		mov r10, [rbp - -88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump146
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump146:
	; Computing bound for u
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump147
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump147:
	; Computing total size of heap memory to allocate
	mov rdi, 64 ; sizeof {{}[,,],{}[,,]}
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump148
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump148:
	imul rdi, [rsp + 0 + 8] ; multiply by r
	jno .jump149
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump149:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize v to 0
	mov rax, 0
	push rax
	; Initialize u to 0
	mov rax, 0
	push rax
.jump150: ; Begin body of loop
	; Compute loop body
	sub rsp, 32
	; Moving 32 bytes from rbp - -80 to rsp
		mov r10, [rbp - -80 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - -80 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -80 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -80 + 0]
		mov [rsp + 0], r10
	sub rsp, 32
	; Moving 32 bytes from rbp - -80 to rsp
		mov r10, [rbp - -80 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - -80 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -80 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -80 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 80] ; No overflow if indices in bounds
	add rax, [rsp + 64]
	imul rax, [rsp + 88] ; No overflow if indices in bounds
	add rax, [rsp + 72]
	imul rax, 64
	add rax, [rsp + 96]
	; Move body (64 bytes) to index
	; Moving 64 bytes from rsp to rax
		mov r10, [rsp + 56]
		mov [rax + 56], r10
		mov r10, [rsp + 48]
		mov [rax + 48], r10
		mov r10, [rsp + 40]
		mov [rax + 40], r10
		mov r10, [rsp + 32]
		mov [rax + 32], r10
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 64
	; Increment v
	add qword [rsp + 8], 1
	; Compare v to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump150 ; If v < bound, next iter
	mov qword [rsp + 8], 0 ; v = 0
	add qword [rsp + 0], 1 ; u++
	; Compare u to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump150 ; If u < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -64 to rsp
		mov r10, [rbp - -64 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for u
	sub rsp, 8
	; Moving 8 bytes from rbp - -96 to rsp
		mov r10, [rbp - -96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump153
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump153:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize u to 0
	mov rax, 0
	push rax
.jump154: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment u
	add qword [rsp + 0], 1
	; Compare u to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump154 ; If u < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump156
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump156:
	cmp rax, [rsp + 16]
	jl .jump157
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump157:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump158
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump158:
	cmp rax, [rsp + 24]
	jl .jump159
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump159:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 64
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 64
	; Moving 64 bytes from rax to rsp
		mov r10, [rax + 56]
		mov [rsp + 56], r10
		mov r10, [rax + 48]
		mov [rsp + 48], r10
		mov r10, [rax + 40]
		mov [rsp + 40], r10
		mov r10, [rax + 32]
		mov [rsp + 32], r10
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump145
.jump144:
	mov rax, [rel const0] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump160
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for w
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump162
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump162:
	; Computing bound for v
	sub rsp, 8
	; Moving 8 bytes from rbp - -56 to rsp
		mov r10, [rbp - -56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump163
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump163:
	; Computing bound for u
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump164
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump164:
	; Computing total size of heap memory to allocate
	mov rdi, 0 ; sizeof {}
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump165
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
.jump165:
	imul rdi, [rsp + 0 + 8] ; multiply by m
	jno .jump166
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
.jump166:
	imul rdi, [rsp + 0 + 16] ; multiply by b
	jno .jump167
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
.jump167:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize w to 0
	mov rax, 0
	push rax
	; Initialize v to 0
	mov rax, 0
	push rax
	; Initialize u to 0
	mov rax, 0
	push rax
.jump168: ; Begin body of loop
	; Compute loop body
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 0
	add rax, [rsp + 48]
	; Move body (0 bytes) to index
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	; Increment w
	add qword [rsp + 16], 1
	; Compare w to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump168 ; If w < bound, next iter
	mov qword [rsp + 16], 0 ; w = 0
	add qword [rsp + 8], 1 ; v++
	; Compare v to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump168 ; If v < bound, next iter
	mov qword [rsp + 8], 0 ; v = 0
	add qword [rsp + 0], 1 ; u++
	; Compare u to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump168 ; If u < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump161
.jump160:
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -80 to rsp
		mov r10, [rbp - -80 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump172
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for w
	sub rsp, 8
	; Moving 8 bytes from rbp - -40 to rsp
		mov r10, [rbp - -40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump174
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump174:
	; Computing bound for v
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump175
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump175:
	; Computing bound for u
	sub rsp, 8
	; Moving 8 bytes from rbp - -88 to rsp
		mov r10, [rbp - -88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump176
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump176:
	; Computing total size of heap memory to allocate
	mov rdi, 0 ; sizeof {}
	imul rdi, [rsp + 0 + 0] ; multiply by r
	jno .jump177
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
.jump177:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump178
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
.jump178:
	imul rdi, [rsp + 0 + 16] ; multiply by l
	jno .jump179
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
.jump179:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize w to 0
	mov rax, 0
	push rax
	; Initialize v to 0
	mov rax, 0
	push rax
	; Initialize u to 0
	mov rax, 0
	push rax
.jump180: ; Begin body of loop
	; Compute loop body
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 0
	add rax, [rsp + 48]
	; Move body (0 bytes) to index
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	; Increment w
	add qword [rsp + 16], 1
	; Compare w to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump180 ; If w < bound, next iter
	mov qword [rsp + 16], 0 ; w = 0
	add qword [rsp + 8], 1 ; v++
	; Compare v to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump180 ; If v < bound, next iter
	mov qword [rsp + 8], 0 ; v = 0
	add qword [rsp + 0], 1 ; u++
	; Compare u to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump180 ; If u < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump173
.jump172:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for w
	sub rsp, 8
	; Moving 8 bytes from rbp - -40 to rsp
		mov r10, [rbp - -40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump184
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump184:
	; Computing bound for v
	sub rsp, 8
	; Moving 8 bytes from rbp - -64 to rsp
		mov r10, [rbp - -64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump185
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump185:
	; Computing bound for u
	sub rsp, 8
	; Moving 8 bytes from rbp - -64 to rsp
		mov r10, [rbp - -64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump186
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump186:
	; Computing total size of heap memory to allocate
	mov rdi, 0 ; sizeof {}
	imul rdi, [rsp + 0 + 0] ; multiply by o
	jno .jump187
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
.jump187:
	imul rdi, [rsp + 0 + 8] ; multiply by o
	jno .jump188
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
.jump188:
	imul rdi, [rsp + 0 + 16] ; multiply by l
	jno .jump189
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
.jump189:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize w to 0
	mov rax, 0
	push rax
	; Initialize v to 0
	mov rax, 0
	push rax
	; Initialize u to 0
	mov rax, 0
	push rax
.jump190: ; Begin body of loop
	; Compute loop body
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 0
	add rax, [rsp + 48]
	; Move body (0 bytes) to index
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	; Increment w
	add qword [rsp + 16], 1
	; Compare w to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump190 ; If w < bound, next iter
	mov qword [rsp + 16], 0 ; w = 0
	add qword [rsp + 8], 1 ; v++
	; Compare v to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump190 ; If v < bound, next iter
	mov qword [rsp + 8], 0 ; v = 0
	add qword [rsp + 0], 1 ; u++
	; Compare u to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump190 ; If u < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump173:
.jump161:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for w
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump194
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump194:
	; Computing bound for v
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump195
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump195:
	; Computing bound for u
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for w
	sub rsp, 8
	; Moving 8 bytes from rbp - -40 to rsp
		mov r10, [rbp - -40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump196
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump196:
	; Computing bound for v
	sub rsp, 8
	; Moving 8 bytes from rbp - -88 to rsp
		mov r10, [rbp - -88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump197
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump197:
	; Computing bound for u
	sub rsp, 8
	; Moving 8 bytes from rbp - -56 to rsp
		mov r10, [rbp - -56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump198
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump198:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize w to 0
	mov rax, 0
	push rax
	; Initialize v to 0
	mov rax, 0
	push rax
	; Initialize u to 0
	mov rax, 0
	push rax
.jump199: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment w
	add qword [rsp + 16], 1
	; Compare w to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump199 ; If w < bound, next iter
	mov qword [rsp + 16], 0 ; w = 0
	add qword [rsp + 8], 1 ; v++
	; Compare v to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump199 ; If v < bound, next iter
	mov qword [rsp + 8], 0 ; v = 0
	add qword [rsp + 0], 1 ; u++
	; Compare u to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump199 ; If u < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump203
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump203:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof {}[,,]
imul rdi, [rsp + 0 + 0] ; multiply by (sum[u : m, v : r, w : l] b)
	jno .jump204
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
.jump204:
	imul rdi, [rsp + 0 + 8] ; multiply by b
	jno .jump205
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
.jump205:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump206
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
.jump206:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize w to 0
	mov rax, 0
	push rax
	; Initialize v to 0
	mov rax, 0
	push rax
	; Initialize u to 0
	mov rax, 0
	push rax
.jump207: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for z
	mov rax, [rel const33] ; 180
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump208
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump208:
	; Computing bound for y
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump209
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump209:
	; Computing bound for x
	sub rsp, 8
	; Moving 8 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump210
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump210:
	; Computing total size of heap memory to allocate
	mov rdi, 0 ; sizeof {}
	imul rdi, [rsp + 0 + 0] ; multiply by k
	jno .jump211
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump211:
	imul rdi, [rsp + 0 + 8] ; multiply by i
	jno .jump212
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump212:
	imul rdi, [rsp + 0 + 16] ; multiply by 180
	jno .jump213
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump213:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize z to 0
	mov rax, 0
	push rax
	; Initialize y to 0
	mov rax, 0
	push rax
	; Initialize x to 0
	mov rax, 0
	push rax
.jump214: ; Begin body of loop
	; Compute loop body
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 0
	add rax, [rsp + 48]
	; Move body (0 bytes) to index
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	; Increment z
	add qword [rsp + 16], 1
	; Compare z to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump214 ; If z < bound, next iter
	mov qword [rsp + 16], 0 ; z = 0
	add qword [rsp + 8], 1 ; y++
	; Compare y to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump214 ; If y < bound, next iter
	mov qword [rsp + 8], 0 ; y = 0
	add qword [rsp + 0], 1 ; x++
	; Compare x to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump214 ; If x < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, [rsp + 72] ; No overflow if indices in bounds
	add rax, [rsp + 48]
	imul rax, 32
	add rax, [rsp + 80]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment w
	add qword [rsp + 16], 1
	; Compare w to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump207 ; If w < bound, next iter
	mov qword [rsp + 16], 0 ; w = 0
	add qword [rsp + 8], 1 ; v++
	; Compare v to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump207 ; If v < bound, next iter
	mov qword [rsp + 8], 0 ; v = 0
	add qword [rsp + 0], 1 ; u++
	; Compare u to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump207 ; If u < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -80 to rsp
		mov r10, [rbp - -80 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -56 to rsp
		mov r10, [rbp - -56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump221
	sub rsp, 8 ; Align stack
	lea rdi, [rel const25] ; mod by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump221:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -56 to rsp
		mov r10, [rbp - -56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump222
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump222:
	cmp rax, [rsp + 24]
	jl .jump223
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump223:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump224
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump224:
	cmp rax, [rsp + 32]
	jl .jump225
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump225:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump226
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump226:
	cmp rax, [rsp + 40]
	jl .jump227
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump227:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 32
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 32
	; Moving 32 bytes from rax to rsp
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump145:
	sub rsp, 8
	; Moving 8 bytes from rbp - -64 to rsp
		mov r10, [rbp - -64 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rdi, 24
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	push rax
	mov rax, 3
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump228
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump228:
	cmp rax, [rsp + 8]
	jl .jump229
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump229:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	mov rdi, 16
	call _jpl_alloc
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	pop rdi
	call _to_float
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 96 ; Local variables
	pop rbp
	ret

jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for a
	mov rax, [rel const0] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump1
	mov rax, [rel const0] ; True
	push rax
	pop rax
.jump1:
	push rax
	pop rax
	cmp rax, 0
	je .jump2
	mov rax, [rel const1] ; False
	push rax
	jmp .jump3
.jump2:
	mov rax, [rel const0] ; True
	push rax
.jump3:
	pop rax
	cmp rax, 0
	je .jump4
	mov rax, [rel const2] ; 820
	push rax
	mov rax, [rel const3] ; 170
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setg al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump6
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for b
	mov rax, [rel const4] ; 243
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump8
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump8:
	; Computing bound for a
	mov rax, [rel const6] ; 173
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump9
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump9:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize b to 0
	mov rax, 0
	push rax
	; Initialize a to 0
	mov rax, 0
	push rax
.jump10: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment b
	add qword [rsp + 8], 1
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump10 ; If b < bound, next iter
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump10 ; If a < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	jmp .jump7
.jump6:
	mov rax, [rel const7] ; 495
	push rax
.jump7:
	jmp .jump5
.jump4:
	mov rax, [rel const8] ; 769
	push rax
.jump5:
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump13
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump13:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
imul rdi, [rsp + 0 + 0] ; multiply by (- (if (if (true && true) then false else true) then (if (170 > 820) then (sum[a : 173, b : 243] argnum) else 495) else 769))
	jno .jump14
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump14:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize a to 0
	mov rax, 0
	push rax
.jump15: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const10] ; 774
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump16
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump16:
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump17
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump17:
	; Computing bound for b
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump18
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump18:
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump19
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump19:
	; Computing bound for b
	mov rax, [rel const11] ; 418
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump20
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump20:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump21: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment d
	add qword [rsp + 16], 1
	; Compare d to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump21 ; If d < bound, next iter
	mov qword [rsp + 16], 0 ; d = 0
	add qword [rsp + 8], 1 ; c++
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump21 ; If c < bound, next iter
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump21 ; If b < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump25
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump25:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump26: ; Begin body of loop
	; Compute loop body
	sub rsp, 8 ; Align stack
	mov rax, [rel const12] ; 70.67
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	addsd xmm0, [rsp + 48] ; Load sum
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment d
	add qword [rsp + 16], 1
	; Compare d to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump26 ; If d < bound, next iter
	mov qword [rsp + 16], 0 ; d = 0
	add qword [rsp + 8], 1 ; c++
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump26 ; If c < bound, next iter
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump26 ; If b < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment a
	add qword [rsp + 0], 1
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump15 ; If a < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	lea rdi, [rel const13] ; c
	sub rsp, 8 ; Align stack
	call _print
	add rsp, 8 ; Remove alignment
	sub rsp, 24
	lea rdi, [rsp]
	lea rsi, [rel const14] ; c.png
	call _read_image
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	lea rdi, [rel const19] ; f
	sub rsp, 8 ; Align stack
	call _print
	add rsp, 8 ; Remove alignment
	mov rax, [rel const1] ; False
	push rax
	pop rax
	cmp rax, 0
	jne .jump94
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	; Moving 24 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 48 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const1] ; False
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 32
		mov r10, [rsp + 0 + 0]
		mov [rsp + 32 + 0], r10
	add rsp, 32
	pop rax
	xor rax, 1
	push rax
	pop rax
.jump94:
	push rax
	pop rax
	cmp rax, 0
	je .jump95
	jmp .jump96
.jump95:
.jump96:
	lea rdi, [rel const19] ; f
	sub rsp, 8 ; Align stack
	call _print
	add rsp, 8 ; Remove alignment
	sub rsp, 8 ; Align stack
	mov rax, [rel const34] ; 60.6
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump230
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump230:
	; Computing bound for i
	mov rax, [rel const35] ; 416
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump231
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump231:
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump232
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump232:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump233
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
.jump233:
	imul rdi, [rsp + 0 + 8] ; multiply by 416
	jno .jump234
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
.jump234:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump235
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
.jump235:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
.jump236: ; Begin body of loop
	; Compute loop body
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment j
	add qword [rsp + 16], 1
	; Compare j to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump236 ; If j < bound, next iter
	mov qword [rsp + 16], 0 ; j = 0
	add qword [rsp + 8], 1 ; i++
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump236 ; If i < bound, next iter
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump236 ; If h < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump240
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump240:
	cmp rax, [rsp + 8]
	jl .jump241
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump241:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for p
	mov rax, [rel const36] ; 763
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump242
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump242:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump243
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump243:
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump244
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump244:
	; Computing total size of heap memory to allocate
	mov rdi, 0 ; sizeof {}
	imul rdi, [rsp + 0 + 0] ; multiply by h
	jno .jump245
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
.jump245:
	imul rdi, [rsp + 0 + 8] ; multiply by (- argnum)
	jno .jump246
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
.jump246:
	imul rdi, [rsp + 0 + 16] ; multiply by 763
	jno .jump247
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
.jump247:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
.jump248: ; Begin body of loop
	; Compute loop body
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 0
	add rax, [rsp + 48]
	; Move body (0 bytes) to index
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	; Increment p
	add qword [rsp + 16], 1
	; Compare p to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump248 ; If p < bound, next iter
	mov qword [rsp + 16], 0 ; p = 0
	add qword [rsp + 8], 1 ; o++
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump248 ; If o < bound, next iter
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump248 ; If n < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Moving 32 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 24]
		mov [rsp + 0 + 24], r10
		mov r10, [rsp + 0 + 16]
		mov [rsp + 0 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	mov rax, [rel const0] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump252
	mov rax, [rel const1] ; False
	push rax
	pop rax
.jump252:
	push rax
	mov rax, [rel const37] ; 18.49
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	mov rdi, 16
	call _jpl_alloc
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump253
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump253:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump254
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
.jump254:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
.jump255: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment n
	add qword [rsp + 0], 1
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump255 ; If n < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	mov rdi, 32
	call _jpl_alloc
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	push rax
	mov rax, 2
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for o
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump257
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump257:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
.jump258: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const38] ; 449
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment n
	add qword [rsp + 0], 1
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump258 ; If n < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump260
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump260:
	; Computing bound for n
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump261
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump261:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump262
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump262:
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump263
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump263:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by j
	jno .jump264
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump264:
	imul rdi, [rsp + 0 + 8] ; multiply by j
	jno .jump265
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump265:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump266
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump266:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
.jump267: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment p
	add qword [rsp + 16], 1
	; Compare p to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump267 ; If p < bound, next iter
	mov qword [rsp + 16], 0 ; p = 0
	add qword [rsp + 8], 1 ; o++
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump267 ; If o < bound, next iter
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump267 ; If n < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump271
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump271:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
.jump272: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment n
	add qword [rsp + 0], 1
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump272 ; If n < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump274
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
.jump274:
	cmp rax, [rsp + 24]
	jl .jump275
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
.jump275:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump276
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
.jump276:
	cmp rax, [rsp + 32]
	jl .jump277
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
.jump277:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump278
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
.jump278:
	cmp rax, [rsp + 40]
	jl .jump279
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
.jump279:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump280
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
.jump280:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
imul rdi, [rsp + 0 + 0] ; multiply by (array[n : j, o : j, p : argnum] l)[(sum[n : k] b), h, b]
	jno .jump281
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
.jump281:
imul rdi, [rsp + 0 + 8] ; multiply by (sum[n : l] 449)
	jno .jump282
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
.jump282:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
.jump283: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment o
	add qword [rsp + 8], 1
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump283 ; If o < bound, next iter
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump283 ; If n < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump286
	mov rax, [rel const0] ; True
	push rax
	mov rdi, 8
	call _jpl_alloc
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	jmp .jump287
.jump286:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump288
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump288:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by b
	jno .jump289
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump289:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
.jump290: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const1] ; False
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment n
	add qword [rsp + 0], 1
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump290 ; If n < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
.jump287:
	; Moving 16 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 8]
		mov [rsp + 8 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	call _g
	add rsp, 16
	add rsp, 48
	add rsp, 32
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	add rsp, 104 ; Local variables
	pop r12
	pop rbp
	ret

