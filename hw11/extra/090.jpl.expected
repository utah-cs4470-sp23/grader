global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 311
const1: db `non-positive loop bound`, 0
const2: dq 60.23
const3: dq 53.27
const4: dq 979
const5: dq 85
const6: dq 331
const7: dq 577
const8: db `overflow computing array size`, 0
const9: dq 649
const10: dq 48.02
const11: dq 42.06
const12: dq 1
const13: dq 213
const14: dq 886
const15: dq 796
const16: db `mod by zero`, 0
const17: dq 8.94
const18: dq 43.47
const19: db `b.png`, 0
const20: dq 7.85
const21: dq 917
const22: db `negative array index`, 0
const23: db `index too large`, 0
const24: dq 0
const25: dq 712
const26: dq 226
const27: dq 270
const28: dq 637
const29: dq 247
const30: dq 56.35
const31: dq 21.46
const32: dq 97.51
const33: dq 850
const34: db `i`, 0
const35: dq 38.13
const36: db `g.png`, 0
const37: dq 85.67
const38: dq 4.24
const39: dq 492
const40: dq 464

section .text
c:
_c:
	push rbp
	mov rbp, rsp
	sub rsp, 24
	; Moving 24 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump38
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump38:
	; Computing bound for j
	mov rax, [rel const12] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump39
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	jmp .jump40
.jump39:
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
.jump40:
	; Moving 8 bytes from rsp + 0 to rsp + 16
		mov r10, [rsp + 0 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	mov rax, [rsp]
	cmp rax, 0
	jg .jump41
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump41:
	; Computing total size of heap memory to allocate
	mov rdi, 0 ; sizeof {{}}
	imul rdi, [rsp + 0 + 0] ; multiply by (if (! true) then {i, argnum, f} else {argnum, e, h}){0}
	jno .jump42
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump42:
	imul rdi, [rsp + 0 + 8] ; multiply by f
	jno .jump43
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump43:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
.jump44: ; Begin body of loop
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump46 ; If k >= bound, ...
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
.jump46:
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump45 ; If j >= bound, break
.jump47:
	; Compute loop body
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 0
	add rax, [rsp + 32]
	; Move body (0 bytes) to index
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	; Increment k
	add qword [rsp + 8], 1
	jmp .jump44
.jump45: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for l
	sub rsp, 8 ; Align stack
	mov rax, [rel const20] ; 7.85
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 24
	; Moving 24 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 24 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	call _c
	add rsp, 24
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump48
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump49
.jump48:
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
.jump49:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump50
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump50:
	; Computing bound for k
	mov rax, [rel const21] ; 917
	push rax
	mov rax, [rsp]
	; Computing bound for j
	sub rsp, 24
	; Moving 24 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump51
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump51:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump52
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump52:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
.jump53: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump54 ; If j >= bound, break
.jump55:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment j
	add qword [rsp + 0], 1
	jmp .jump53
.jump54: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump56
	sub rsp, 8 ; Align stack
	lea rdi, [rel const22] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump56:
	cmp rax, [rsp + 8]
	jl .jump57
	sub rsp, 8 ; Align stack
	lea rdi, [rel const23] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump57:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump58
	lea rdi, [rel const22] ; negative array index
	call _fail_assertion
.jump58:
	cmp rax, [rsp + 16]
	jl .jump59
	lea rdi, [rel const23] ; index too large
	call _fail_assertion
.jump59:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump60
	lea rdi, [rel const22] ; negative array index
	call _fail_assertion
.jump60:
	cmp rax, [rsp + 24]
	jl .jump61
	lea rdi, [rel const23] ; index too large
	call _fail_assertion
.jump61:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump62
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump62:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize l to 0
	mov rax, 0
	push rax
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
.jump63: ; Begin body of loop
	; Compare l to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump65 ; If l >= bound, ...
	mov qword [rsp + 16], 0 ; l = 0
	add qword [rsp + 8], 1 ; k++
.jump65:
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump66 ; If k >= bound, ...
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
.jump66:
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump64 ; If j >= bound, break
.jump67:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment l
	add qword [rsp + 16], 1
	jmp .jump63
.jump64: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump68
	lea rdi, [rel const22] ; negative array index
	call _fail_assertion
.jump68:
	cmp rax, [rsp + 16]
	jl .jump69
	lea rdi, [rel const23] ; index too large
	call _fail_assertion
.jump69:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump70
	lea rdi, [rel const22] ; negative array index
	call _fail_assertion
.jump70:
	cmp rax, [rsp + 24]
	jl .jump71
	lea rdi, [rel const23] ; index too large
	call _fail_assertion
.jump71:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 0
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 0
	; Moving 0 bytes from rax to rsp
	sub rsp, 8 ; Align stack
	sub rsp, 8 ; Align stack
	sub rsp, 24
	; Moving 24 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 24 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	; Moving 24 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 24 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	; Moving 24 bytes from rsp + 32 to rsp + 32
		mov r10, [rsp + 32 + 16]
		mov [rsp + 32 + 16], r10
		mov r10, [rsp + 32 + 8]
		mov [rsp + 32 + 8], r10
		mov r10, [rsp + 32 + 0]
		mov [rsp + 32 + 0], r10
	add rsp, 32
	call _c
	add rsp, 24
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 24 ; Local variables
	pop rbp
	ret
	sub rsp, 24
	; Moving 24 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	call _c
	add rsp, 24
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const24] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump72
	mov rax, [rel const12] ; True
	push rax
	jmp .jump73
.jump72:
	mov rax, [rel const24] ; False
	push rax
.jump73:
	pop rax
	cmp rax, 0
	je .jump74
	sub rsp, 24
	; Moving 24 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 24 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	jmp .jump75
.jump74:
	sub rsp, 24
	; Moving 24 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
.jump75:
	call _c
	add rsp, 24
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 32 ; Local variables
	pop rbp
	ret

f:
_f:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump106
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump106:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump107
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump107:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
.jump108: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump110 ; If j >= bound, ...
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
.jump110:
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump109 ; If i >= bound, break
.jump111:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 32] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 32], xmm0 ; Save sum
	; Increment j
	add qword [rsp + 8], 1
	jmp .jump108
.jump109: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	sub rsp, 8 ; Align stack
	mov rax, [rel const30] ; 56.35
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 0 ; Local variables
	pop rbp
	ret
	mov rax, [rel const24] ; False
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	pop rax
	cmp rax, 0
	jne .jump112
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const12] ; True
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	pop rax
.jump112:
	push rax
	pop rax
	cmp rax, 0
	je .jump113
	mov rax, [rel const24] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump115
	mov rax, [rel const24] ; False
	push rax
	jmp .jump116
.jump115:
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
.jump116:
	pop rax
	cmp rax, 0
	jne .jump117
	mov rax, [rel const12] ; True
	push rax
	pop rax
.jump117:
	push rax
	jmp .jump114
.jump113:
	mov rax, [rel const24] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump118
	mov rax, [rel const31] ; 21.46
	push rax
	mov rax, [rel const32] ; 97.51
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	jmp .jump119
.jump118:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump120
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump120:
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump121
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump121:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump122
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump122:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by h
	jno .jump123
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump123:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump124
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump124:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump125
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump125:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
.jump126: ; Begin body of loop
	; Compare k to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump128 ; If k >= bound, ...
	mov qword [rsp + 16], 0 ; k = 0
	add qword [rsp + 8], 1 ; j++
.jump128:
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump129 ; If j >= bound, ...
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
.jump129:
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump127 ; If i >= bound, break
.jump130:
	; Compute loop body
	mov rax, [rel const24] ; False
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment k
	add qword [rsp + 16], 1
	jmp .jump126
.jump127: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	mov rax, [rel const33] ; 850
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump131
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; mod by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump131:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump132
	sub rsp, 8 ; Align stack
	lea rdi, [rel const22] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump132:
	cmp rax, [rsp + 24]
	jl .jump133
	sub rsp, 8 ; Align stack
	lea rdi, [rel const23] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump133:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump134
	sub rsp, 8 ; Align stack
	lea rdi, [rel const22] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump134:
	cmp rax, [rsp + 32]
	jl .jump135
	sub rsp, 8 ; Align stack
	lea rdi, [rel const23] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump135:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump136
	sub rsp, 8 ; Align stack
	lea rdi, [rel const22] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump136:
	cmp rax, [rsp + 40]
	jl .jump137
	sub rsp, 8 ; Align stack
	lea rdi, [rel const23] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump137:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump119:
.jump114:
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	jne .jump138
	lea rdi, [rel const34] ; i
	call _fail_assertion
.jump138:
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const35] ; 38.13
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 32 ; Local variables
	pop rbp
	ret

jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp
	sub rsp, 8 ; Align stack
	mov rax, [rel const0] ; 311
	push rax
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for a
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump1:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize a to 0
	mov rax, 0
	push rax
.jump2: ; Begin body of loop
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump3 ; If a >= bound, break
.jump4:
	; Compute loop body
	mov rax, [rel const2] ; 60.23
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 16] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 16], xmm0 ; Save sum
	; Increment a
	add qword [rsp + 0], 1
	jmp .jump2
.jump3: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const3] ; 53.27
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump5
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for c
	mov rax, [rel const4] ; 979
	push rax
	mov rax, [rel const5] ; 85
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump7
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump7:
	; Computing bound for b
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for b
	mov rax, [rel const6] ; 331
	push rax
	mov rax, [rsp]
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize b to 0
	mov rax, 0
	push rax
.jump8: ; Begin body of loop
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump9 ; If b >= bound, break
.jump10:
	; Compute loop body
	mov rax, [rel const7] ; 577
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment b
	add qword [rsp + 0], 1
	jmp .jump8
.jump9: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump11
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump11:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof {float,float,float,float}
imul rdi, [rsp + 0 + 0] ; multiply by (- (to_int(a) * (sum[b : 331] 577)))
	jno .jump12
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump12:
	imul rdi, [rsp + 0 + 8] ; multiply by (85 + 979)
	jno .jump13
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump13:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump14: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump16 ; If c >= bound, ...
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
.jump16:
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump15 ; If b >= bound, break
.jump17:
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump18
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump18:
	; Computing bound for e
	mov rax, [rel const9] ; 649
	push rax
	mov rax, [rsp]
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump19
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump19:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize f to 0
	mov rax, 0
	push rax
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
.jump20: ; Begin body of loop
	; Compare f to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump22 ; If f >= bound, ...
	mov qword [rsp + 16], 0 ; f = 0
	add qword [rsp + 8], 1 ; e++
.jump22:
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump23 ; If e >= bound, ...
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
.jump23:
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump21 ; If d >= bound, break
.jump24:
	; Compute loop body
	mov rax, [rel const10] ; 48.02
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 48] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment f
	add qword [rsp + 16], 1
	jmp .jump20
.jump21: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const11] ; 42.06
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	shl rax, 5
	add rax, [rsp + 64]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment c
	add qword [rsp + 8], 1
	jmp .jump14
.jump15: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump6
.jump5:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for c
	mov rax, [rel const12] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump25
	mov rax, [rel const13] ; 213
	push rax
	pop rax
	neg rax
	push rax
	jmp .jump26
.jump25:
	mov rax, [rel const14] ; 886
	push rax
.jump26:
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump27
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump27:
	; Computing bound for b
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const15] ; 796
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump28
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; mod by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump28:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 16
		mov r10, [rsp + 0 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	mov rax, [rsp]
	cmp rax, 0
	jg .jump29
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump29:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof {float,float,float,float}
	imul rdi, [rsp + 0 + 0] ; multiply by {(796 % argnum), args}{0}
	jno .jump30
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump30:
	imul rdi, [rsp + 0 + 8] ; multiply by (- (if true then (- 213) else 886))
	jno .jump31
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump31:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump32: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump34 ; If c >= bound, ...
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
.jump34:
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump33 ; If b >= bound, break
.jump35:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const12] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump36
	mov rax, [rel const17] ; 8.94
	push rax
	jmp .jump37
.jump36:
	mov rax, [rel const18] ; 43.47
	push rax
.jump37:
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	shl rax, 5
	add rax, [rsp + 64]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment c
	add qword [rsp + 8], 1
	jmp .jump32
.jump33: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump6:
	lea rdi, [rel const19] ; b.png
	call _write_image
	add rsp, 24
	add rsp, 8 ; Remove alignment
	sub rsp, 24
	lea rdi, [rsp]
	sub rsp, 8 ; Align stack
	lea rsi, [rel const19] ; b.png
	call _read_image
	add rsp, 8 ; Remove alignment
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for e
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for e
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump76
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump76:
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump77
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump77:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
.jump78: ; Begin body of loop
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump80 ; If e >= bound, ...
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
.jump80:
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump79 ; If d >= bound, break
.jump81:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment e
	add qword [rsp + 8], 1
	jmp .jump78
.jump79: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump82
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump82:
	; Computing bound for d
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump83
	lea rdi, [rel const22] ; negative array index
	call _fail_assertion
.jump83:
	cmp rax, [rsp + 8]
	jl .jump84
	lea rdi, [rel const23] ; index too large
	call _fail_assertion
.jump84:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const12] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump85
	mov rax, [rel const25] ; 712
	push rax
	jmp .jump86
.jump85:
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
.jump86:
	pop rax
	pop r10
	cmp r10, 0
	jne .jump87
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; mod by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump87:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump88
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump88:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof {int,int[]}[]
	imul rdi, [rsp + 0 + 0] ; multiply by ((if true then 712 else argnum) % args[argnum])
	jno .jump89
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump89:
imul rdi, [rsp + 0 + 8] ; multiply by (sum[d : (argnum + argnum), e : argnum] d)
	jno .jump90
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump90:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
.jump91: ; Begin body of loop
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump93 ; If e >= bound, ...
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
.jump93:
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump92 ; If d >= bound, break
.jump94:
	; Compute loop body
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rdi, 72
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 72 bytes from rsp to rax
		mov r10, [rsp + 64]
		mov [rax + 64], r10
		mov r10, [rsp + 56]
		mov [rax + 56], r10
		mov r10, [rsp + 48]
		mov [rax + 48], r10
		mov r10, [rsp + 40]
		mov [rax + 40], r10
		mov r10, [rsp + 32]
		mov [rax + 32], r10
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 72
	push rax
	mov rax, 3
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 4
	add rax, [rsp + 48]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment e
	add qword [rsp + 8], 1
	jmp .jump91
.jump92: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for d
	mov rax, [rel const26] ; 226
	push rax
	mov rax, [rsp]
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
.jump95: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump96 ; If d >= bound, break
.jump97:
	; Compute loop body
	mov rax, [rel const27] ; 270
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment d
	add qword [rsp + 0], 1
	jmp .jump95
.jump96: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump98
	lea rdi, [rel const22] ; negative array index
	call _fail_assertion
.jump98:
	cmp rax, [rsp + 16]
	jl .jump99
	lea rdi, [rel const23] ; index too large
	call _fail_assertion
.jump99:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump100
	lea rdi, [rel const22] ; negative array index
	call _fail_assertion
.jump100:
	cmp rax, [rsp + 24]
	jl .jump101
	lea rdi, [rel const23] ; index too large
	call _fail_assertion
.jump101:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 4
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const24] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump102
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump103
.jump102:
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
.jump103:
	mov rax, [rel const28] ; 637
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rel const29] ; 247
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump104
	lea rdi, [rel const22] ; negative array index
	call _fail_assertion
.jump104:
	cmp rax, [rsp + 8]
	jl .jump105
	lea rdi, [rel const23] ; index too large
	call _fail_assertion
.jump105:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 24
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump139
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump139:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof {float,float,float,float}[,]
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump140
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump140:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize g to 0
	mov rax, 0
	push rax
.jump141: ; Begin body of loop
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump142 ; If g >= bound, break
.jump143:
	; Compute loop body
	sub rsp, 24
	; Moving 24 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 40 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 24
	add rax, [rsp + 40]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment g
	add qword [rsp + 0], 1
	jmp .jump141
.jump142: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8 ; Align stack
	mov rax, [rel const24] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump144
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	jmp .jump145
.jump144:
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
.jump145:
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump146
	lea rdi, [rel const22] ; negative array index
	call _fail_assertion
.jump146:
	cmp rax, [rsp + 8]
	jl .jump147
	lea rdi, [rel const23] ; index too large
	call _fail_assertion
.jump147:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 24
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	lea rdi, [rel const36] ; g.png
	call _write_image
	add rsp, 24
	add rsp, 8 ; Remove alignment
	mov rax, [rel const12] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump148
	sub rsp, 16
	; Moving 16 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	jmp .jump149
.jump148:
	sub rsp, 16
	; Moving 16 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
.jump149:
	call _f
	add rsp, 16
	add rsp, 0
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 16
	; Moving 16 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	call _f
	add rsp, 16
	add rsp, 0
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const37] ; 85.67
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const38] ; 4.24
	push rax
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Moving 16 bytes from rsp + 0 to rsp + 16
		mov r10, [rsp + 0 + 8]
		mov [rsp + 16 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	sub rsp, 24
	; Moving 24 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 40 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump150
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump150:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump151
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump151:
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump152
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump152:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by d
	jno .jump153
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump153:
	imul rdi, [rsp + 0 + 8] ; multiply by d
	jno .jump154
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump154:
	imul rdi, [rsp + 0 + 16] ; multiply by i
	jno .jump155
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump155:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
	; Initialize k to 0
	mov rax, 0
	push rax
.jump156: ; Begin body of loop
	; Compare m to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump158 ; If m >= bound, ...
	mov qword [rsp + 16], 0 ; m = 0
	add qword [rsp + 8], 1 ; l++
.jump158:
	; Compare l to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump159 ; If l >= bound, ...
	mov qword [rsp + 8], 0 ; l = 0
	add qword [rsp + 0], 1 ; k++
.jump159:
	; Compare k to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump157 ; If k >= bound, break
.jump160:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment m
	add qword [rsp + 16], 1
	jmp .jump156
.jump157: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Moving 32 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 24]
		mov [rsp + 0 + 24], r10
		mov r10, [rsp + 0 + 16]
		mov [rsp + 0 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const39] ; 492
	push rax
	sub rsp, 16
	; Moving 16 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 24 to rsp + 24
		mov r10, [rsp + 24 + 0]
		mov [rsp + 24 + 0], r10
	add rsp, 24
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump161
	sub rsp, 8 ; Align stack
	lea rdi, [rel const22] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump161:
	cmp rax, [rsp + 24]
	jl .jump162
	sub rsp, 8 ; Align stack
	lea rdi, [rel const23] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump162:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump163
	sub rsp, 8 ; Align stack
	lea rdi, [rel const22] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump163:
	cmp rax, [rsp + 32]
	jl .jump164
	sub rsp, 8 ; Align stack
	lea rdi, [rel const23] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump164:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump165
	sub rsp, 8 ; Align stack
	lea rdi, [rel const22] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump165:
	cmp rax, [rsp + 40]
	jl .jump166
	sub rsp, 8 ; Align stack
	lea rdi, [rel const23] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump166:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump167
	lea rdi, [rel const22] ; negative array index
	call _fail_assertion
.jump167:
	cmp rax, [rsp + 8]
	jl .jump168
	lea rdi, [rel const23] ; index too large
	call _fail_assertion
.jump168:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump169
	lea rdi, [rel const22] ; negative array index
	call _fail_assertion
.jump169:
	cmp rax, [rsp + 16]
	jl .jump170
	lea rdi, [rel const23] ; index too large
	call _fail_assertion
.jump170:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump171
	lea rdi, [rel const22] ; negative array index
	call _fail_assertion
.jump171:
	cmp rax, [rsp + 24]
	jl .jump172
	lea rdi, [rel const23] ; index too large
	call _fail_assertion
.jump172:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 5
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 32
	; Moving 32 bytes from rax to rsp
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const40] ; 464
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	add rsp, 120 ; Local variables
	pop r12
	pop rbp
	ret

