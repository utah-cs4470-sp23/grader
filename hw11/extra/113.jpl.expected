global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 1
const1: dq 0
const2: dq 90.03
const3: db `non-positive loop bound`, 0
const4: db `overflow computing array size`, 0
const5: dq 65.69
const6: dq 84.94
const7: dq 4.0
const8: dq 583
const9: dq 61.08
const10: dq 396
const11: dq 914
const12: dq 795
const13: dq 718
const14: dq 771
const15: dq 249
const16: dq 33.26
const17: dq 781
const18: dq 123
const19: dq 681
const20: db `negative array index`, 0
const21: db `index too large`, 0
const22: dq 24.73
const23: dq 66.6
const24: dq 92.22
const25: dq 31.35
const26: dq 186
const27: db `k.png`, 0
const28: dq 830
const29: dq 780
const30: db `mod by zero`, 0
const31: dq 739
const32: dq 265
const33: db `o`, 0
const34: dq 168
const35: dq 155
const36: dq 1000
const37: db `(FloatType)`, 0
const38: dq 444
const39: db `r`, 0
const40: dq 23.79
const41: db `q.png`, 0

section .text
l:
_l:
	push rbp
	mov rbp, rsp
	push rdi
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump97
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump97:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof {int}
	imul rdi, [rsp + 0 + 0] ; multiply by g
	jno .jump98
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump98:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize o to 0
	mov rax, 0
	push rax
.jump99: ; Begin body of loop
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump100 ; If o >= bound, break
.jump101:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump102
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump102:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof {int}
	imul rdi, [rsp + 0 + 0] ; multiply by n
	jno .jump103
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump103:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
.jump104: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump105 ; If p >= bound, break
.jump106:
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for q
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump107
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump107:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize q to 0
	mov rax, 0
	push rax
.jump108: ; Begin body of loop
	; Compare q to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump109 ; If q >= bound, break
.jump110:
	; Compute loop body
	mov rax, [rel const28] ; 830
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment q
	add qword [rsp + 0], 1
	jmp .jump108
.jump109: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment p
	add qword [rsp + 0], 1
	jmp .jump104
.jump105: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump111
	sub rsp, 8 ; Align stack
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump111:
	cmp rax, [rsp + 8]
	jl .jump112
	sub rsp, 8 ; Align stack
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump112:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment o
	add qword [rsp + 0], 1
	jmp .jump99
.jump100: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	mov rax, [rbp - 8] ; Address to write return value into
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24 ; Local variables
	pop rbp
	ret
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump113
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump113:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof {int}
	imul rdi, [rsp + 0 + 0] ; multiply by d
	jno .jump114
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump114:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize o to 0
	mov rax, 0
	push rax
.jump115: ; Begin body of loop
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump116 ; If o >= bound, break
.jump117:
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for r
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump118
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump118:
	; Computing bound for q
	mov rax, [rel const29] ; 780
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump119
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump119:
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump120
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump120:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize r to 0
	mov rax, 0
	push rax
	; Initialize q to 0
	mov rax, 0
	push rax
	; Initialize p to 0
	mov rax, 0
	push rax
.jump121: ; Begin body of loop
	; Compare r to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump123 ; If r >= bound, ...
	mov qword [rsp + 16], 0 ; r = 0
	add qword [rsp + 8], 1 ; q++
.jump123:
	; Compare q to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump124 ; If q >= bound, ...
	mov qword [rsp + 8], 0 ; q = 0
	add qword [rsp + 0], 1 ; p++
.jump124:
	; Compare p to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump122 ; If p >= bound, break
.jump125:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for s
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump126
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump126:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize s to 0
	mov rax, 0
	push rax
.jump127: ; Begin body of loop
	; Compare s to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump128 ; If s >= bound, break
.jump129:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment s
	add qword [rsp + 0], 1
	jmp .jump127
.jump128: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	pop rax
	pop r10
	cmp r10, 0
	jne .jump130
	sub rsp, 8 ; Align stack
	lea rdi, [rel const30] ; mod by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump130:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment r
	add qword [rsp + 16], 1
	jmp .jump121
.jump122: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment o
	add qword [rsp + 0], 1
	jmp .jump115
.jump116: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	mov rax, [rbp - 8] ; Address to write return value into
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 40 ; Local variables
	pop rbp
	ret
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for q
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump131
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump131:
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump132
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump132:
	; Computing bound for o
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for q
	sub rsp, 8
	; Moving 8 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump133
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump133:
	; Computing bound for p
	mov rax, [rel const31] ; 739
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump134
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump134:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump135
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump135:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize q to 0
	mov rax, 0
	push rax
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
.jump136: ; Begin body of loop
	; Compare q to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump138 ; If q >= bound, ...
	mov qword [rsp + 16], 0 ; q = 0
	add qword [rsp + 8], 1 ; p++
.jump138:
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump139 ; If p >= bound, ...
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
.jump139:
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump137 ; If o >= bound, break
.jump140:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment q
	add qword [rsp + 16], 1
	jmp .jump136
.jump137: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump141
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump141:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof bool[,,]
imul rdi, [rsp + 0 + 0] ; multiply by (sum[o : a, p : 739, q : j] g)
	jno .jump142
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump142:
	imul rdi, [rsp + 0 + 8] ; multiply by a
	jno .jump143
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump143:
	imul rdi, [rsp + 0 + 16] ; multiply by a
	jno .jump144
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump144:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize q to 0
	mov rax, 0
	push rax
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
.jump145: ; Begin body of loop
	; Compare q to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump147 ; If q >= bound, ...
	mov qword [rsp + 16], 0 ; q = 0
	add qword [rsp + 8], 1 ; p++
.jump147:
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump148 ; If p >= bound, ...
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
.jump148:
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump146 ; If o >= bound, break
.jump149:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for t
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump150
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump150:
	; Computing bound for s
	sub rsp, 8
	; Moving 8 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump151
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump151:
	; Computing bound for r
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump152
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump152:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by e
	jno .jump153
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump153:
	imul rdi, [rsp + 0 + 8] ; multiply by j
	jno .jump154
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump154:
	imul rdi, [rsp + 0 + 16] ; multiply by e
	jno .jump155
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump155:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize t to 0
	mov rax, 0
	push rax
	; Initialize s to 0
	mov rax, 0
	push rax
	; Initialize r to 0
	mov rax, 0
	push rax
.jump156: ; Begin body of loop
	; Compare t to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump158 ; If t >= bound, ...
	mov qword [rsp + 16], 0 ; t = 0
	add qword [rsp + 8], 1 ; s++
.jump158:
	; Compare s to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump159 ; If s >= bound, ...
	mov qword [rsp + 8], 0 ; s = 0
	add qword [rsp + 0], 1 ; r++
.jump159:
	; Compare r to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump157 ; If r >= bound, break
.jump160:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setg al
	and rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment t
	add qword [rsp + 16], 1
	jmp .jump156
.jump157: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, [rsp + 72] ; No overflow if indices in bounds
	add rax, [rsp + 48]
	imul rax, 32
	add rax, [rsp + 80]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment q
	add qword [rsp + 16], 1
	jmp .jump145
.jump146: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump161
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
.jump161:
	cmp rax, [rsp + 24]
	jl .jump162
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
.jump162:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump163
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
.jump163:
	cmp rax, [rsp + 32]
	jl .jump164
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
.jump164:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump165
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
.jump165:
	cmp rax, [rsp + 40]
	jl .jump166
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
.jump166:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 32
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 32
	; Moving 32 bytes from rax to rsp
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const32] ; 265
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump167
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
.jump167:
	cmp rax, [rsp + 24]
	jl .jump168
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
.jump168:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump169
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
.jump169:
	cmp rax, [rsp + 32]
	jl .jump170
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
.jump170:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump171
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
.jump171:
	cmp rax, [rsp + 40]
	jl .jump172
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
.jump172:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	jne .jump173
	sub rsp, 8 ; Align stack
	lea rdi, [rel const33] ; o
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump173:
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump174
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump176
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump176:
	; Computing bound for o
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for q
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump177
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump177:
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump178
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump178:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump179
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump179:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize q to 0
	mov rax, 0
	push rax
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
.jump180: ; Begin body of loop
	; Compare q to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump182 ; If q >= bound, ...
	mov qword [rsp + 16], 0 ; q = 0
	add qword [rsp + 8], 1 ; p++
.jump182:
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump183 ; If p >= bound, ...
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
.jump183:
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump181 ; If o >= bound, break
.jump184:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment q
	add qword [rsp + 16], 1
	jmp .jump180
.jump181: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump185
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump185:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof {{{}},bool[],int}
imul rdi, [rsp + 0 + 0] ; multiply by (- (sum[o : d, p : g, q : e] j))
	jno .jump186
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump186:
	imul rdi, [rsp + 0 + 8] ; multiply by j
	jno .jump187
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump187:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
.jump188: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump190 ; If p >= bound, ...
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
.jump190:
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump189 ; If o >= bound, break
.jump191:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const0] ; True
	push rax
	mov rax, [rel const1] ; False
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	mov rdi, 24
	call _jpl_alloc
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	push rax
	mov rax, 3
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 24
	add rax, [rsp + 56]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment p
	add qword [rsp + 8], 1
	jmp .jump188
.jump189: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump175
.jump174:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump192
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump192:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump193
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump193:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof {{{}},bool[],int}
	imul rdi, [rsp + 0 + 0] ; multiply by j
	jno .jump194
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump194:
	imul rdi, [rsp + 0 + 8] ; multiply by (- (- f))
	jno .jump195
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump195:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
.jump196: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump198 ; If p >= bound, ...
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
.jump198:
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump197 ; If o >= bound, break
.jump199:
	; Compute loop body
	mov rax, [rel const34] ; 168
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for q
	sub rsp, 8
	; Moving 8 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump200
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump200:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by j
	jno .jump201
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump201:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize q to 0
	mov rax, 0
	push rax
.jump202: ; Begin body of loop
	; Compare q to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump203 ; If q >= bound, break
.jump204:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment q
	add qword [rsp + 0], 1
	jmp .jump202
.jump203: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 24
	add rax, [rsp + 56]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment p
	add qword [rsp + 8], 1
	jmp .jump196
.jump197: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump175:
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump205
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
.jump205:
	cmp rax, [rsp + 16]
	jl .jump206
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
.jump206:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump207
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
.jump207:
	cmp rax, [rsp + 24]
	jl .jump208
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
.jump208:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 24
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	lea rdi, [rsp + 16]
	call _l
	add rsp, 0
	add rsp, 16
	mov rax, [rbp - 8] ; Address to write return value into
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 80 ; Local variables
	pop rbp
	ret

p:
_p:
	push rbp
	mov rbp, rsp
	push rdi
	mov rax, [rel const38] ; 444
	push rax
	pop rax
	add rsp, 8 ; Local variables
	pop rbp
	ret
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	jne .jump296
	sub rsp, 8 ; Align stack
	lea rdi, [rel const39] ; r
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump296:
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump297
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump298
.jump297:
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
.jump298:
	sub rsp, 8
	; Moving 8 bytes from r12 - 144 to rsp
		mov r10, [r12 - 144 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump299
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump300
.jump299:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for r
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump301
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump301:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump302
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump302:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize r to 0
	mov rax, 0
	push rax
.jump303: ; Begin body of loop
	; Compare r to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump304 ; If r >= bound, break
.jump305:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment r
	add qword [rsp + 0], 1
	jmp .jump303
.jump304: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for r
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump306
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump306:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by f
	jno .jump307
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump307:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize r to 0
	mov rax, 0
	push rax
.jump308: ; Begin body of loop
	; Compare r to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump309 ; If r >= bound, break
.jump310:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment r
	add qword [rsp + 0], 1
	jmp .jump308
.jump309: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	mov rdi, 32
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	push rax
	mov rax, 2
	push rax
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump311
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	jmp .jump312
.jump311:
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
.jump312:
	pop rdi
	call _p
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump313
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
.jump313:
	cmp rax, [rsp + 8]
	jl .jump314
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
.jump314:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 16
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump300:
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump315
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for s
	sub rsp, 8
	; Moving 8 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump317
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump317:
	; Computing bound for r
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump318
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump318:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof float[,,]
	imul rdi, [rsp + 0 + 0] ; multiply by e
	jno .jump319
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump319:
	imul rdi, [rsp + 0 + 8] ; multiply by j
	jno .jump320
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump320:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize s to 0
	mov rax, 0
	push rax
	; Initialize r to 0
	mov rax, 0
	push rax
.jump321: ; Begin body of loop
	; Compare s to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump323 ; If s >= bound, ...
	mov qword [rsp + 8], 0 ; s = 0
	add qword [rsp + 0], 1 ; r++
.jump323:
	; Compare r to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump322 ; If r >= bound, break
.jump324:
	; Compute loop body
	sub rsp, 32
	; Moving 32 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 24]
		mov [rsp + 24], r10
		mov r10, [r12 - 64 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 64 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 32
	add rax, [rsp + 64]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment s
	add qword [rsp + 8], 1
	jmp .jump321
.jump322: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump316
.jump315:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for s
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump325
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump325:
	; Computing bound for r
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump326
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump326:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof float[,,]
	imul rdi, [rsp + 0 + 0] ; multiply by i
	jno .jump327
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump327:
	imul rdi, [rsp + 0 + 8] ; multiply by e
	jno .jump328
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump328:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize s to 0
	mov rax, 0
	push rax
	; Initialize r to 0
	mov rax, 0
	push rax
.jump329: ; Begin body of loop
	; Compare s to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump331 ; If s >= bound, ...
	mov qword [rsp + 8], 0 ; s = 0
	add qword [rsp + 0], 1 ; r++
.jump331:
	; Compare r to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump330 ; If r >= bound, break
.jump332:
	; Compute loop body
	sub rsp, 32
	; Moving 32 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 24]
		mov [rsp + 24], r10
		mov r10, [r12 - 64 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 64 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 32
	add rax, [rsp + 64]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment s
	add qword [rsp + 8], 1
	jmp .jump329
.jump330: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump316:
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	; Moving 24 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 16]
		mov [rsp + 8 + 16], r10
		mov r10, [rsp + 8 + 8]
		mov [rsp + 8 + 8], r10
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	sub rsp, 16
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for r
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump333
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump333:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by a
	jno .jump334
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump334:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize r to 0
	mov rax, 0
	push rax
.jump335: ; Begin body of loop
	; Compare r to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump336 ; If r >= bound, break
.jump337:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment r
	add qword [rsp + 0], 1
	jmp .jump335
.jump336: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for r
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump338
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump338:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by f
	jno .jump339
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump339:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize r to 0
	mov rax, 0
	push rax
.jump340: ; Begin body of loop
	; Compare r to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump341 ; If r >= bound, break
.jump342:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment r
	add qword [rsp + 0], 1
	jmp .jump340
.jump341: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	mov rdi, 48
	call _jpl_alloc
	; Moving 48 bytes from rsp to rax
		mov r10, [rsp + 40]
		mov [rax + 40], r10
		mov r10, [rsp + 32]
		mov [rax + 32], r10
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 48
	push rax
	mov rax, 3
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump343
	sub rsp, 8 ; Align stack
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump343:
	cmp rax, [rsp + 8]
	jl .jump344
	sub rsp, 8 ; Align stack
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump344:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 16
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const40] ; 23.79
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump345
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump347
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump349
	jmp .jump350
.jump349:
.jump350:
	jmp .jump348
.jump347:
.jump348:
	jmp .jump346
.jump345:
	; Moving 0 bytes from rsp + 0 to rsp + 0
	add rsp, 0
.jump346:
	lea rdi, [rsp + 16]
	call _l
	add rsp, 0
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	add rsp, 72 ; Local variables
	pop rbp
	ret

jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp
	mov rax, [rel const0] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump1
	mov rax, [rel const1] ; False
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	mov rax, [rel const2] ; 90.03
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for b
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump3
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump3:
	; Computing bound for a
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump4
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump4:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump5
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump5:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump6
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump6:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize b to 0
	mov rax, 0
	push rax
	; Initialize a to 0
	mov rax, 0
	push rax
.jump7: ; Begin body of loop
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump9 ; If b >= bound, ...
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
.jump9:
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump8 ; If a >= bound, break
.jump10:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment b
	add qword [rsp + 8], 1
	jmp .jump7
.jump8: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump2
.jump1:
	mov rax, [rel const0] ; True
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	mov rax, [rel const5] ; 65.69
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const6] ; 84.94
	push rax
	mov rax, [rel const7] ; 4.0
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for b
	mov rax, [rel const0] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump11
	mov rax, [rel const8] ; 583
	push rax
	jmp .jump12
.jump11:
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
.jump12:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump13
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump13:
	; Computing bound for a
	mov rax, [rel const9] ; 61.08
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump14
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump14:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by to_int(61.08)
	jno .jump15
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump15:
	imul rdi, [rsp + 0 + 8] ; multiply by (if true then 583 else argnum)
	jno .jump16
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump16:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize b to 0
	mov rax, 0
	push rax
	; Initialize a to 0
	mov rax, 0
	push rax
.jump17: ; Begin body of loop
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump19 ; If b >= bound, ...
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
.jump19:
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump18 ; If a >= bound, break
.jump20:
	; Compute loop body
	mov rax, [rel const1] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump21
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump22
.jump21:
	mov rax, [rel const10] ; 396
	push rax
.jump22:
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment b
	add qword [rsp + 8], 1
	jmp .jump17
.jump18: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump2:
	; Moving 16 bytes from rsp + 32 to rsp + 32
		mov r10, [rsp + 32 + 8]
		mov [rsp + 32 + 8], r10
		mov r10, [rsp + 32 + 0]
		mov [rsp + 32 + 0], r10
	add rsp, 32
	sub rsp, 8 ; Align stack
	call _get_time
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump23
	mov rax, [rel const0] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump25
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for e
	mov rax, [rel const11] ; 914
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump27
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump27:
	; Computing bound for d
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump28
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump28:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
.jump29: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump30 ; If c >= bound, break
.jump31:
	; Compute loop body
	mov rax, [rel const12] ; 795
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment c
	add qword [rsp + 0], 1
	jmp .jump29
.jump30: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump32
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump32:
	; Computing bound for c
	mov rax, [rel const13] ; 718
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump33
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump33:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by 718
	jno .jump34
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump34:
imul rdi, [rsp + 0 + 8] ; multiply by (sum[c : argnum] 795)
	jno .jump35
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump35:
	imul rdi, [rsp + 0 + 16] ; multiply by 914
	jno .jump36
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump36:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump37: ; Begin body of loop
	; Compare e to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump39 ; If e >= bound, ...
	mov qword [rsp + 16], 0 ; e = 0
	add qword [rsp + 8], 1 ; d++
.jump39:
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump40 ; If d >= bound, ...
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
.jump40:
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump38 ; If c >= bound, break
.jump41:
	; Compute loop body
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment e
	add qword [rsp + 16], 1
	jmp .jump37
.jump38: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump26
.jump25:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for e
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for c
	mov rax, [rel const14] ; 771
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump42
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump42:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
.jump43: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump44 ; If c >= bound, break
.jump45:
	; Compute loop body
	mov rax, [rel const15] ; 249
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment c
	add qword [rsp + 0], 1
	jmp .jump43
.jump44: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump46
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump46:
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump47
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump47:
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump48
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump48:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by a
	jno .jump49
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump49:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump50
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump50:
imul rdi, [rsp + 0 + 16] ; multiply by (sum[c : 771] 249)
	jno .jump51
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump51:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump52: ; Begin body of loop
	; Compare e to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump54 ; If e >= bound, ...
	mov qword [rsp + 16], 0 ; e = 0
	add qword [rsp + 8], 1 ; d++
.jump54:
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump55 ; If d >= bound, ...
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
.jump55:
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump53 ; If c >= bound, break
.jump56:
	; Compute loop body
	sub rsp, 8 ; Align stack
	mov rax, [rel const16] ; 33.26
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment e
	add qword [rsp + 16], 1
	jmp .jump52
.jump53: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump26:
	jmp .jump24
.jump23:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for e
	mov rax, [rel const17] ; 781
	push rax
	mov rax, [rel const18] ; 123
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump57
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump57:
	; Computing bound for d
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for c
	mov rax, [rel const19] ; 681
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump58
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump58:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by 681
	jno .jump59
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump59:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
.jump60: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump61 ; If c >= bound, break
.jump62:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment c
	add qword [rsp + 0], 1
	jmp .jump60
.jump61: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump63
	sub rsp, 8 ; Align stack
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump63:
	cmp rax, [rsp + 8]
	jl .jump64
	sub rsp, 8 ; Align stack
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump64:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump65
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump65:
	; Computing bound for c
	sub rsp, 8 ; Align stack
	mov rax, [rel const22] ; 24.73
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump66
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump66:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by to_int(sin(24.73))
	jno .jump67
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump67:
imul rdi, [rsp + 0 + 8] ; multiply by (array[c : 681] argnum)[argnum]
	jno .jump68
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump68:
	imul rdi, [rsp + 0 + 16] ; multiply by ((- 123) - 781)
	jno .jump69
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump69:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump70: ; Begin body of loop
	; Compare e to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump72 ; If e >= bound, ...
	mov qword [rsp + 16], 0 ; e = 0
	add qword [rsp + 8], 1 ; d++
.jump72:
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump73 ; If d >= bound, ...
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
.jump73:
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump71 ; If c >= bound, break
.jump74:
	; Compute loop body
	sub rsp, 8 ; Align stack
	mov rax, [rel const23] ; 66.6
	push rax
	sub rsp, 8 ; Align stack
	mov rax, [rel const24] ; 92.22
	push rax
	mov rax, [rel const25] ; 31.35
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment e
	add qword [rsp + 16], 1
	jmp .jump70
.jump71: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump24:
	call _get_time
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 32]
	subsd xmm0, xmm1
	call _print_time
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for i
	mov rax, [rel const26] ; 186
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	mov rax, [rsp]
	cmp rax, 0
	jg .jump75
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump75:
	; Computing bound for h
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump76
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
.jump76:
	cmp rax, [rsp + 8]
	jl .jump77
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
.jump77:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump78
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump78:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof {int[,],int}
	imul rdi, [rsp + 0 + 0] ; multiply by (- args[argnum])
	jno .jump79
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump79:
	imul rdi, [rsp + 0 + 8] ; multiply by {186}{0}
	jno .jump80
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump80:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
.jump81: ; Begin body of loop
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump83 ; If i >= bound, ...
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
.jump83:
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump82 ; If h >= bound, break
.jump84:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from rbp - 112 to rsp
		mov r10, [rbp - 112 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump85
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump85:
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump86
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump86:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump87
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump87:
	imul rdi, [rsp + 0 + 8] ; multiply by h
	jno .jump88
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump88:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
.jump89: ; Begin body of loop
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump91 ; If k >= bound, ...
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
.jump91:
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump90 ; If j >= bound, break
.jump92:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 152 to rsp
		mov r10, [rbp - 152 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment k
	add qword [rsp + 8], 1
	jmp .jump89
.jump90: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 32
	add rax, [rsp + 64]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment i
	add qword [rsp + 8], 1
	jmp .jump81
.jump82: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump93
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
.jump93:
	cmp rax, [rsp + 16]
	jl .jump94
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
.jump94:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump95
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
.jump95:
	cmp rax, [rsp + 24]
	jl .jump96
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
.jump96:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 32
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 32
	; Moving 32 bytes from rax to rsp
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Moving 24 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 16]
		mov [rsp + 8 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 8 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	sub rsp, 24
	lea rdi, [rsp]
	sub rsp, 8 ; Align stack
	lea rsi, [rel const27] ; k.png
	call _read_image
	add rsp, 8 ; Remove alignment
	sub rsp, 16
	sub rsp, 8 ; Align stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump209
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump209:
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump210
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump210:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof int[][,,]
	imul rdi, [rsp + 0 + 0] ; multiply by f
	jno .jump211
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump211:
	imul rdi, [rsp + 0 + 8] ; multiply by d
	jno .jump212
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump212:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
	; Initialize m to 0
	mov rax, 0
	push rax
.jump213: ; Begin body of loop
	; Compare n to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump215 ; If n >= bound, ...
	mov qword [rsp + 8], 0 ; n = 0
	add qword [rsp + 0], 1 ; m++
.jump215:
	; Compare m to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump214 ; If m >= bound, break
.jump216:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for q
	sub rsp, 8
	; Moving 8 bytes from rbp - 176 to rsp
		mov r10, [rbp - 176 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump217
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump217:
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump218
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump218:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump219
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump219:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof int[]
	imul rdi, [rsp + 0 + 0] ; multiply by i
	jno .jump220
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump220:
	imul rdi, [rsp + 0 + 8] ; multiply by g
	jno .jump221
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump221:
	imul rdi, [rsp + 0 + 16] ; multiply by n
	jno .jump222
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump222:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize q to 0
	mov rax, 0
	push rax
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
.jump223: ; Begin body of loop
	; Compare q to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump225 ; If q >= bound, ...
	mov qword [rsp + 16], 0 ; q = 0
	add qword [rsp + 8], 1 ; p++
.jump225:
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump226 ; If p >= bound, ...
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
.jump226:
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump224 ; If o >= bound, break
.jump227:
	; Compute loop body
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 16
	add rax, [rsp + 64]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment q
	add qword [rsp + 16], 1
	jmp .jump223
.jump224: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 32
	add rax, [rsp + 64]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment n
	add qword [rsp + 8], 1
	jmp .jump213
.jump214: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump228
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump228:
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump229
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump229:
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump230
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump230:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump231
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump231:
	imul rdi, [rsp + 0 + 8] ; multiply by f
	jno .jump232
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump232:
	imul rdi, [rsp + 0 + 16] ; multiply by d
	jno .jump233
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump233:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
	; Initialize m to 0
	mov rax, 0
	push rax
.jump234: ; Begin body of loop
	; Compare o to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump236 ; If o >= bound, ...
	mov qword [rsp + 16], 0 ; o = 0
	add qword [rsp + 8], 1 ; n++
.jump236:
	; Compare n to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump237 ; If n >= bound, ...
	mov qword [rsp + 8], 0 ; n = 0
	add qword [rsp + 0], 1 ; m++
.jump237:
	; Compare m to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump235 ; If m >= bound, break
.jump238:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment o
	add qword [rsp + 16], 1
	jmp .jump234
.jump235: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	mov rax, [rel const35] ; 155
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump239
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
.jump239:
	cmp rax, [rsp + 24]
	jl .jump240
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
.jump240:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump241
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
.jump241:
	cmp rax, [rsp + 32]
	jl .jump242
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
.jump242:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump243
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
.jump243:
	cmp rax, [rsp + 40]
	jl .jump244
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
.jump244:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump245
	sub rsp, 8 ; Align stack
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump245:
	cmp rax, [rsp + 16]
	jl .jump246
	sub rsp, 8 ; Align stack
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump246:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump247
	sub rsp, 8 ; Align stack
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump247:
	cmp rax, [rsp + 24]
	jl .jump248
	sub rsp, 8 ; Align stack
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump248:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 32
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 32
	; Moving 32 bytes from rax to rsp
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump249
	sub rsp, 8 ; Align stack
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump249:
	cmp rax, [rsp + 24]
	jl .jump250
	sub rsp, 8 ; Align stack
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump250:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump251
	sub rsp, 8 ; Align stack
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump251:
	cmp rax, [rsp + 32]
	jl .jump252
	sub rsp, 8 ; Align stack
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump252:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump253
	sub rsp, 8 ; Align stack
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump253:
	cmp rax, [rsp + 40]
	jl .jump254
	sub rsp, 8 ; Align stack
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump254:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 16
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump255
	jmp .jump256
.jump255:
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	jne .jump257
	mov rax, [rel const0] ; True
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
.jump257:
	push rax
	pop rax
	cmp rax, 0
	je .jump258
	jmp .jump259
.jump258:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump260
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump260:
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump261
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump261:
	; Computing total size of heap memory to allocate
	mov rdi, 0 ; sizeof {}
	imul rdi, [rsp + 0 + 0] ; multiply by j
	jno .jump262
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump262:
	imul rdi, [rsp + 0 + 8] ; multiply by g
	jno .jump263
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump263:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
	; Initialize m to 0
	mov rax, 0
	push rax
.jump264: ; Begin body of loop
	; Compare n to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump266 ; If n >= bound, ...
	mov qword [rsp + 8], 0 ; n = 0
	add qword [rsp + 0], 1 ; m++
.jump266:
	; Compare m to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump265 ; If m >= bound, break
.jump267:
	; Compute loop body
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 0
	add rax, [rsp + 32]
	; Move body (0 bytes) to index
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	; Increment n
	add qword [rsp + 8], 1
	jmp .jump264
.jump265: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump268
	sub rsp, 8 ; Align stack
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump268:
	cmp rax, [rsp + 16]
	jl .jump269
	sub rsp, 8 ; Align stack
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump269:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump270
	sub rsp, 8 ; Align stack
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump270:
	cmp rax, [rsp + 24]
	jl .jump271
	sub rsp, 8 ; Align stack
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump271:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 0
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 0
	; Moving 0 bytes from rax to rsp
.jump259:
.jump256:
	lea rdi, [rsp + 24]
	call _l
	add rsp, 0
	add rsp, 16
	add rsp, 8 ; Remove alignment
	mov rax, [rel const36] ; 1000
	push rax
	sub rsp, 8 ; Align stack
	sub rsp, 8 ; Align stack
	sub rsp, 32
	; Moving 32 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 64 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 64 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump272
	sub rsp, 8 ; Align stack
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump272:
	cmp rax, [rsp + 24]
	jl .jump273
	sub rsp, 8 ; Align stack
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump273:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump274
	sub rsp, 8 ; Align stack
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump274:
	cmp rax, [rsp + 32]
	jl .jump275
	sub rsp, 8 ; Align stack
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump275:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump276
	sub rsp, 8 ; Align stack
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump276:
	cmp rax, [rsp + 40]
	jl .jump277
	sub rsp, 8 ; Align stack
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump277:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	lea rdi, [rel const37] ; (FloatType)
	lea rsi, [rsp]
	call _show
	add rsp, 8
	add rsp, 8 ; Remove alignment
	sub rsp, 16
	mov rax, [rel const1] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump278
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rdi, 16
	call _jpl_alloc
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
	jmp .jump279
.jump278:
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rdi, 16
	call _jpl_alloc
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
.jump279:
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Moving 16 bytes from rsp + 16 to rsp + 16
		mov r10, [rsp + 16 + 8]
		mov [rsp + 16 + 8], r10
		mov r10, [rsp + 16 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump280
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
.jump280:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump281
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump281:
	; Computing total size of heap memory to allocate
	mov rdi, 0 ; sizeof {}
	imul rdi, [rsp + 0 + 0] ; multiply by e
	jno .jump282
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump282:
	imul rdi, [rsp + 0 + 8] ; multiply by i
	jno .jump283
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump283:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
.jump284: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump286 ; If p >= bound, ...
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
.jump286:
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump285 ; If o >= bound, break
.jump287:
	; Compute loop body
	mov rax, [rel const0] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump288
	mov rax, [rel const0] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump290
	jmp .jump291
.jump290:
.jump291:
	jmp .jump289
.jump288:
.jump289:
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 0
	add rax, [rsp + 32]
	; Move body (0 bytes) to index
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	; Increment p
	add qword [rsp + 8], 1
	jmp .jump284
.jump285: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump292
	sub rsp, 8 ; Align stack
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump292:
	cmp rax, [rsp + 16]
	jl .jump293
	sub rsp, 8 ; Align stack
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump293:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump294
	sub rsp, 8 ; Align stack
	lea rdi, [rel const20] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump294:
	cmp rax, [rsp + 24]
	jl .jump295
	sub rsp, 8 ; Align stack
	lea rdi, [rel const21] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump295:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 0
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 0
	; Moving 0 bytes from rax to rsp
	lea rdi, [rsp + 16]
	call _l
	add rsp, 0
	add rsp, 16
	sub rsp, 24
	lea rdi, [rsp]
	sub rsp, 8 ; Align stack
	lea rsi, [rel const41] ; q.png
	call _read_image
	add rsp, 8 ; Remove alignment
	add rsp, 176 ; Local variables
	pop r12
	pop rbp
	ret

