global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 31.33
const1: dq 33.95
const2: dq 45.52
const3: dq 172
const4: dq 0
const5: dq 335
const6: dq 303
const7: dq 445
const8: db `divide by zero`, 0
const9: db `non-positive loop bound`, 0
const10: dq 935
const11: db `overflow computing array size`, 0
const12: dq 278
const13: dq 96.66
const14: dq 1
const15: db `negative array index`, 0
const16: db `index too large`, 0
const17: dq 980
const18: dq 4
const19: dq 66.83
const20: dq 430
const21: dq 54.13
const22: dq 468
const23: dq 944
const24: dq 681
const25: dq 2406882816
const26: dq 0.91
const27: dq 489
const28: dq 213
const29: dq 256
const30: dq 32.84
const31: dq 508
const32: dq 143
const33: dq 48.87
const34: dq 60.42
const35: dq 37.51
const36: dq 797
const37: dq 1.81
const38: dq 94.58
const39: dq 54.06
const40: dq 856
const41: dq 989
const42: dq 196
const43: dq 87.54
const44: dq 910
const45: dq 529
const46: dq 98
const47: dq 510
const48: dq 341
const49: dq 334
const50: dq 62.01
const51: dq 82.14
const52: dq 35.46
const53: dq 86.07
const54: dq 40.03
const55: dq 35.2
const56: dq 91.19
const57: dq 541
const58: dq 3
const59: dq 685
const60: dq 662
const61: dq 304
const62: dq 73.85
const63: dq 88.14
const64: dq 69.7
const65: dq 418
const66: dq 23.3
const67: dq 18.21
const68: dq 56.47
const69: dq 2.62
const70: dq 87.15
const71: dq 98.4
const72: dq 31.56
const73: db `l.png`, 0
const74: dq 70
const75: dq 708
const76: dq 799
const77: dq 251
const78: dq 937
const79: dq 948
const80: db `mod by zero`, 0
const81: dq 672
const82: dq 684
const83: db `n`, 0
const84: dq 15
const85: dq 17.14
const86: dq 326
const87: dq 77.02
const88: dq 55.33
const89: db `o`, 0
const90: dq 122

section .text
e:
_e:
	push rbp
	mov rbp, rsp
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for h
	sub rsp, 16
	; Moving 16 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	call _e
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	cmp rax, 0
	je .jump80
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump81
.jump80:
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
.jump81:
	mov rax, [rel const14] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	; Moving 16 bytes from rsp + 8 to rsp + 24
		mov r10, [rsp + 8 + 8]
		mov [rsp + 24 + 8], r10
		mov r10, [rsp + 8 + 0]
		mov [rsp + 24 + 0], r10
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump82
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
.jump82:
	cmp rax, [rsp + 8]
	jl .jump83
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
.jump83:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump84
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump84:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
.jump85: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump86 ; If h >= bound, break
.jump87:
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for i
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump88
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump88:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump89
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump89:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by d
	jno .jump90
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump90:
	imul rdi, [rsp + 0 + 8] ; multiply by h
	jno .jump91
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump91:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
.jump92: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump94 ; If j >= bound, ...
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
.jump94:
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump93 ; If i >= bound, break
.jump95:
	; Compute loop body
	mov rax, [rel const4] ; False
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment j
	add qword [rsp + 8], 1
	jmp .jump92
.jump93: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rax, [rel const31] ; 508
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump96
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump96:
	cmp rax, [rsp + 16]
	jl .jump97
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump97:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump98
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump98:
	cmp rax, [rsp + 24]
	jl .jump99
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump99:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump100
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	jmp .jump101
.jump100:
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
.jump101:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump102
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump102:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
.jump103: ; Begin body of loop
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump104 ; If i >= bound, break
.jump105:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment i
	add qword [rsp + 0], 1
	jmp .jump103
.jump104: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment h
	add qword [rsp + 0], 1
	jmp .jump85
.jump86: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump106
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump106:
	; Computing bound for j
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for k
	mov rax, [rel const32] ; 143
	push rax
	mov rax, [rsp]
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump107
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump107:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump108
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump108:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
.jump109: ; Begin body of loop
	; Compare k to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump111 ; If k >= bound, ...
	mov qword [rsp + 16], 0 ; k = 0
	add qword [rsp + 8], 1 ; j++
.jump111:
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump112 ; If j >= bound, ...
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
.jump112:
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump110 ; If i >= bound, break
.jump113:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment k
	add qword [rsp + 16], 1
	jmp .jump109
.jump110: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump114
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump114:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump115
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump115:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
.jump116: ; Begin body of loop
	; Compare k to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump118 ; If k >= bound, ...
	mov qword [rsp + 16], 0 ; k = 0
	add qword [rsp + 8], 1 ; j++
.jump118:
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump119 ; If j >= bound, ...
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
.jump119:
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump117 ; If i >= bound, break
.jump120:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const33] ; 48.87
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 16
		mov r10, [rsp + 0 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 48] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment k
	add qword [rsp + 16], 1
	jmp .jump116
.jump117: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rel const34] ; 60.42
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const35] ; 37.51
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump121
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump123
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump123:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump124
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump124:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by d
	jno .jump125
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump125:
	imul rdi, [rsp + 0 + 8] ; multiply by h
	jno .jump126
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump126:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
.jump127: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump129 ; If j >= bound, ...
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
.jump129:
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump128 ; If i >= bound, break
.jump130:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment j
	add qword [rsp + 8], 1
	jmp .jump127
.jump128: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rax, [rel const36] ; 797
	push rax
	mov rax, [rel const37] ; 1.81
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	jmp .jump122
.jump121:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump131
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump131:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump132
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump132:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by d
	jno .jump133
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump133:
	imul rdi, [rsp + 0 + 8] ; multiply by b
	jno .jump134
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump134:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
.jump135: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump137 ; If j >= bound, ...
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
.jump137:
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump136 ; If i >= bound, break
.jump138:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment j
	add qword [rsp + 8], 1
	jmp .jump135
.jump136: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const38] ; 94.58
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
.jump122:
	; Moving 40 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 32]
		mov [rsp + 8 + 32], r10
		mov r10, [rsp + 0 + 24]
		mov [rsp + 8 + 24], r10
		mov r10, [rsp + 0 + 16]
		mov [rsp + 8 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 8 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	mov rax, [rel const14] ; True
	push rax
	pop rax
	add rsp, 64 ; Local variables
	pop rbp
	ret
	call _e
	push rax
	pop rax
	add rsp, 64 ; Local variables
	pop rbp
	ret

k:
_k:
	push rbp
	mov rbp, rsp
	sub rsp, 32
	; Moving 32 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 24]
		mov [rsp + 24], r10
		mov r10, [r12 - 40 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 40 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump298
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump298:
	cmp rax, [rsp + 8]
	jl .jump299
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump299:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const14] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump300
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	jmp .jump301
.jump300:
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -112 to rsp
		mov r10, [rbp - -112 + 0]
		mov [rsp + 0], r10
.jump301:
	sub rsp, 8
	; Moving 8 bytes from rbp - -56 to rsp
		mov r10, [rbp - -56 + 0]
		mov [rsp + 0], r10
	; Moving 16 bytes from rsp + 8 to rsp + 16
		mov r10, [rsp + 8 + 8]
		mov [rsp + 16 + 8], r10
		mov r10, [rsp + 8 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	; Moving 8 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for F
	mov rax, [rel const60] ; 662
	push rax
	mov rax, [rsp]
	; Computing bound for E
	sub rsp, 8
	; Moving 8 bytes from rbp - -48 to rsp
		mov r10, [rbp - -48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump302
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump302:
	; Computing bound for D
	sub rsp, 8
	; Moving 8 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump303
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump303:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof int[]
	imul rdi, [rsp + 0 + 0] ; multiply by o
	jno .jump304
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump304:
	imul rdi, [rsp + 0 + 8] ; multiply by q
	jno .jump305
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump305:
	imul rdi, [rsp + 0 + 16] ; multiply by 662
	jno .jump306
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump306:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize F to 0
	mov rax, 0
	push rax
	; Initialize E to 0
	mov rax, 0
	push rax
	; Initialize D to 0
	mov rax, 0
	push rax
.jump307: ; Begin body of loop
	; Compare F to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump309 ; If F >= bound, ...
	mov qword [rsp + 16], 0 ; F = 0
	add qword [rsp + 8], 1 ; E++
.jump309:
	; Compare E to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump310 ; If E >= bound, ...
	mov qword [rsp + 8], 0 ; E = 0
	add qword [rsp + 0], 1 ; D++
.jump310:
	; Compare D to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump308 ; If D >= bound, break
.jump311:
	; Compute loop body
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	shl rax, 4
	add rax, [rsp + 64]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment F
	add qword [rsp + 16], 1
	jmp .jump307
.jump308: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 32
	; Moving 32 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -48 to rsp
		mov r10, [rbp - -48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump312
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump312:
	cmp rax, [rsp + 24]
	jl .jump313
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump313:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump314
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump314:
	cmp rax, [rsp + 32]
	jl .jump315
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump315:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump316
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump316:
	cmp rax, [rsp + 40]
	jl .jump317
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump317:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 32
	; Moving 32 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - -16 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Moving 0 bytes from rsp + 40 to rsp + 40
	add rsp, 40
	add rsp, 72 ; Local variables
	pop rbp
	ret

n:
_n:
	push rbp
	mov rbp, rsp
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for J
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump504
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump504:
	; Computing bound for I
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for J
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump505
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump505:
	; Computing bound for I
	sub rsp, 8
	; Moving 8 bytes from rbp - -128 to rsp
		mov r10, [rbp - -128 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump506
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump506:
	; Computing bound for H
	sub rsp, 8
	; Moving 8 bytes from rbp - -144 to rsp
		mov r10, [rbp - -144 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump507
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump507:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize J to 0
	mov rax, 0
	push rax
	; Initialize I to 0
	mov rax, 0
	push rax
	; Initialize H to 0
	mov rax, 0
	push rax
.jump508: ; Begin body of loop
	; Compare J to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump510 ; If J >= bound, ...
	mov qword [rsp + 16], 0 ; J = 0
	add qword [rsp + 8], 1 ; I++
.jump510:
	; Compare I to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump511 ; If I >= bound, ...
	mov qword [rsp + 8], 0 ; I = 0
	add qword [rsp + 0], 1 ; H++
.jump511:
	; Compare H to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump509 ; If H >= bound, break
.jump512:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment J
	add qword [rsp + 16], 1
	jmp .jump508
.jump509: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump513
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump513:
	; Computing bound for H
	sub rsp, 8
	; Moving 8 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump514
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump514:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize J to 0
	mov rax, 0
	push rax
	; Initialize I to 0
	mov rax, 0
	push rax
	; Initialize H to 0
	mov rax, 0
	push rax
.jump515: ; Begin body of loop
	; Compare J to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump517 ; If J >= bound, ...
	mov qword [rsp + 16], 0 ; J = 0
	add qword [rsp + 8], 1 ; I++
.jump517:
	; Compare I to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump518 ; If I >= bound, ...
	mov qword [rsp + 8], 0 ; I = 0
	add qword [rsp + 0], 1 ; H++
.jump518:
	; Compare H to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump516 ; If H >= bound, break
.jump519:
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for K
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump520
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump520:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize K to 0
	mov rax, 0
	push rax
.jump521: ; Begin body of loop
	; Compare K to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump522 ; If K >= bound, break
.jump523:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -168 to rsp
		mov r10, [rbp - -168 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump524
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	jmp .jump525
.jump524:
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
.jump525:
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 16] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 16], xmm0 ; Save sum
	; Increment K
	add qword [rsp + 0], 1
	jmp .jump521
.jump522: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 48] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment J
	add qword [rsp + 16], 1
	jmp .jump515
.jump516: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for K
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump526
	lea rdi, [rel const8] ; divide by zero
	call _fail_assertion
.jump526:
	cqo
	idiv r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump527
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump527:
	; Computing bound for J
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump528
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump528:
	; Computing bound for I
	sub rsp, 8
	; Moving 8 bytes from rbp - -48 to rsp
		mov r10, [rbp - -48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump529
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump529:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof {bool,bool,int}
	imul rdi, [rsp + 0 + 0] ; multiply by t
	jno .jump530
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump530:
	imul rdi, [rsp + 0 + 8] ; multiply by j
	jno .jump531
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump531:
	imul rdi, [rsp + 0 + 16] ; multiply by (b / argnum)
	jno .jump532
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump532:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize K to 0
	mov rax, 0
	push rax
	; Initialize J to 0
	mov rax, 0
	push rax
	; Initialize I to 0
	mov rax, 0
	push rax
.jump533: ; Begin body of loop
	; Compare K to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump535 ; If K >= bound, ...
	mov qword [rsp + 16], 0 ; K = 0
	add qword [rsp + 8], 1 ; J++
.jump535:
	; Compare J to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump536 ; If J >= bound, ...
	mov qword [rsp + 8], 0 ; J = 0
	add qword [rsp + 0], 1 ; I++
.jump536:
	; Compare I to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump534 ; If I >= bound, break
.jump537:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	call _e
	add rsp, 8 ; Remove alignment
	push rax
	call _e
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 24
	add rax, [rsp + 72]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment K
	add qword [rsp + 16], 1
	jmp .jump533
.jump534: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -176 to rsp
		mov r10, [rbp - -176 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for I
	mov rax, [rel const84] ; 15
	push rax
	mov rax, [rsp]
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize I to 0
	mov rax, 0
	push rax
.jump538: ; Begin body of loop
	; Compare I to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump539 ; If I >= bound, break
.jump540:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -48 to rsp
		mov r10, [rbp - -48 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment I
	add qword [rsp + 0], 1
	jmp .jump538
.jump539: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump541
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
.jump541:
	cmp rax, [rsp + 24]
	jl .jump542
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
.jump542:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump543
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
.jump543:
	cmp rax, [rsp + 32]
	jl .jump544
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
.jump544:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump545
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
.jump545:
	cmp rax, [rsp + 40]
	jl .jump546
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
.jump546:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 24
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 8 to rsp + 16
		mov r10, [rsp + 8 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	pop rax
	cmp rax, 0
	je .jump547
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const85] ; 17.14
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	jmp .jump548
.jump547:
	sub rsp, 8 ; Align stack
	mov rax, [rel const4] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump549
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -184 to rsp
		mov r10, [rbp - -184 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	sub rsp, 8
	movsd [rsp], xmm0
	jmp .jump550
.jump549:
	sub rsp, 32
	; Moving 32 bytes from rbp - -96 to rsp
		mov r10, [rbp - -96 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - -96 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -96 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -96 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const86] ; 326
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump551
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump551:
	cmp rax, [rsp + 24]
	jl .jump552
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump552:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump553
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump553:
	cmp rax, [rsp + 32]
	jl .jump554
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump554:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump555
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump555:
	cmp rax, [rsp + 40]
	jl .jump556
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump556:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	sub rsp, 8
	movsd [rsp], xmm0
.jump550:
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
.jump548:
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 8 ; Local variables
	pop rbp
	ret
	sub rsp, 8 ; Align stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for J
	sub rsp, 8
	; Moving 8 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump557
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump557:
	; Computing bound for I
	sub rsp, 8
	; Moving 8 bytes from rbp - -200 to rsp
		mov r10, [rbp - -200 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump558
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump558:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof float[,]
	imul rdi, [rsp + 0 + 0] ; multiply by G
	jno .jump559
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump559:
	imul rdi, [rsp + 0 + 8] ; multiply by r
	jno .jump560
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump560:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize J to 0
	mov rax, 0
	push rax
	; Initialize I to 0
	mov rax, 0
	push rax
.jump561: ; Begin body of loop
	; Compare J to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump563 ; If J >= bound, ...
	mov qword [rsp + 8], 0 ; J = 0
	add qword [rsp + 0], 1 ; I++
.jump563:
	; Compare I to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump562 ; If I >= bound, break
.jump564:
	; Compute loop body
	sub rsp, 24
	; Moving 24 bytes from rbp - -176 to rsp
		mov r10, [rbp - -176 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -176 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -176 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 24
	add rax, [rsp + 56]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment J
	add qword [rsp + 8], 1
	jmp .jump561
.jump562: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 16
	; Moving 16 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -128 to rsp
		mov r10, [rbp - -128 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump565
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump565:
	cmp rax, [rsp + 8]
	jl .jump566
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump566:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump567
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump567:
	cmp rax, [rsp + 16]
	jl .jump568
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump568:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump569
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump569:
	cmp rax, [rsp + 24]
	jl .jump570
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump570:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 24
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -152 to rsp
		mov r10, [rbp - -152 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -200 to rsp
		mov r10, [rbp - -200 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump571
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump571:
	cmp rax, [rsp + 16]
	jl .jump572
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump572:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump573
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump573:
	cmp rax, [rsp + 24]
	jl .jump574
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump574:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	mov rax, [rel const87] ; 77.02
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 8 ; Local variables
	pop rbp
	ret
	sub rsp, 16
	; Moving 16 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 24 ; Local variables
	pop rbp
	ret

jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp
	mov rax, [rel const0] ; 31.33
	push rax
	mov rax, [rel const1] ; 33.95
	push rax
	sub rsp, 8 ; Align stack
	mov rax, [rel const2] ; 45.52
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump1
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for c
	mov rax, [rel const3] ; 172
	push rax
	mov rax, [rsp]
	; Computing bound for b
	mov rax, [rel const4] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump3
	mov rax, [rel const5] ; 335
	push rax
	jmp .jump4
.jump3:
	mov rax, [rel const6] ; 303
	push rax
	pop rax
	neg rax
	push rax
.jump4:
	mov rax, [rel const7] ; 445
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump5
	lea rdi, [rel const8] ; divide by zero
	call _fail_assertion
.jump5:
	cqo
	idiv r10
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump6
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump6:
	; Computing bound for a
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for b
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for a
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump7
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump7:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize a to 0
	mov rax, 0
	push rax
.jump8: ; Begin body of loop
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump9 ; If a >= bound, break
.jump10:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment a
	add qword [rsp + 0], 1
	jmp .jump8
.jump9: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump11
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump11:
	; Computing bound for a
	mov rax, [rel const10] ; 935
	push rax
	mov rax, [rsp]
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize b to 0
	mov rax, 0
	push rax
	; Initialize a to 0
	mov rax, 0
	push rax
.jump12: ; Begin body of loop
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump14 ; If b >= bound, ...
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
.jump14:
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump13 ; If a >= bound, break
.jump15:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment b
	add qword [rsp + 8], 1
	jmp .jump12
.jump13: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump16
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump16:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
imul rdi, [rsp + 0 + 0] ; multiply by (- (sum[a : 935, b : (sum[a : argnum] argnum)] argnum))
	jno .jump17
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump17:
	imul rdi, [rsp + 0 + 8] ; multiply by ((argnum / 445) + (if false then 335 else (- 303)))
	jno .jump18
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump18:
	imul rdi, [rsp + 0 + 16] ; multiply by 172
	jno .jump19
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump19:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
	; Initialize a to 0
	mov rax, 0
	push rax
.jump20: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump22 ; If c >= bound, ...
	mov qword [rsp + 16], 0 ; c = 0
	add qword [rsp + 8], 1 ; b++
.jump22:
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump23 ; If b >= bound, ...
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
.jump23:
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump21 ; If a >= bound, break
.jump24:
	; Compute loop body
	mov rax, [rel const12] ; 278
	push rax
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const13] ; 96.66
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment c
	add qword [rsp + 16], 1
	jmp .jump20
.jump21: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump2
.jump1:
	mov rax, [rel const14] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump25
	mov rax, [rel const14] ; True
	push rax
	jmp .jump26
.jump25:
	mov rax, [rel const14] ; True
	push rax
.jump26:
	pop rax
	cmp rax, 0
	je .jump27
	mov rax, [rel const14] ; True
	push rax
	mov rax, [rel const4] ; False
	push rax
	mov rdi, 16
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump29
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
.jump29:
	cmp rax, [rsp + 8]
	jl .jump30
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
.jump30:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump31
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump33
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump33:
	; Computing bound for b
	mov rax, [rel const17] ; 980
	push rax
	mov rax, [rel const18] ; 4
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump34
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump34:
	; Computing bound for a
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump35
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump35:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump36
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump36:
	imul rdi, [rsp + 0 + 8] ; multiply by (4 - 980)
	jno .jump37
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump37:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump38
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump38:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
	; Initialize a to 0
	mov rax, 0
	push rax
.jump39: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump41 ; If c >= bound, ...
	mov qword [rsp + 16], 0 ; c = 0
	add qword [rsp + 8], 1 ; b++
.jump41:
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump42 ; If b >= bound, ...
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
.jump42:
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump40 ; If a >= bound, break
.jump43:
	; Compute loop body
	mov rax, [rel const19] ; 66.83
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment c
	add qword [rsp + 16], 1
	jmp .jump39
.jump40: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump32
.jump31:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump44
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump44:
	; Computing bound for b
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump45
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
.jump45:
	cmp rax, [rsp + 8]
	jl .jump46
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
.jump46:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump47
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump47:
	; Computing bound for a
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const20] ; 430
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump48
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump48:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by (430 + argnum)
	jno .jump49
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump49:
	imul rdi, [rsp + 0 + 8] ; multiply by args[argnum]
	jno .jump50
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump50:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump51
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump51:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
	; Initialize a to 0
	mov rax, 0
	push rax
.jump52: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump54 ; If c >= bound, ...
	mov qword [rsp + 16], 0 ; c = 0
	add qword [rsp + 8], 1 ; b++
.jump54:
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump55 ; If b >= bound, ...
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
.jump55:
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump53 ; If a >= bound, break
.jump56:
	; Compute loop body
	mov rax, [rel const21] ; 54.13
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment c
	add qword [rsp + 16], 1
	jmp .jump52
.jump53: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump32:
	jmp .jump28
.jump27:
	mov rax, [rel const4] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump57
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for c
	mov rax, [rel const22] ; 468
	push rax
	mov rax, [rsp]
	; Computing bound for b
	mov rax, [rel const23] ; 944
	push rax
	mov rax, [rsp]
	; Computing bound for a
	mov rax, [rel const24] ; 681
	push rax
	mov rax, [rsp]
	mov rdi, [rel const25] ; 2406882816
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
	; Initialize a to 0
	mov rax, 0
	push rax
.jump59: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump61 ; If c >= bound, ...
	mov qword [rsp + 16], 0 ; c = 0
	add qword [rsp + 8], 1 ; b++
.jump61:
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump62 ; If b >= bound, ...
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
.jump62:
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump60 ; If a >= bound, break
.jump63:
	; Compute loop body
	mov rax, [rel const26] ; 0.91
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment c
	add qword [rsp + 16], 1
	jmp .jump59
.jump60: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump58
.jump57:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump64
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump64:
	; Computing bound for b
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump65
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump65:
	; Computing bound for b
	mov rax, [rel const27] ; 489
	push rax
	mov rax, [rsp]
	; Computing bound for a
	mov rax, [rel const28] ; 213
	push rax
	mov rax, [rsp]
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
	; Initialize a to 0
	mov rax, 0
	push rax
.jump66: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump68 ; If c >= bound, ...
	mov qword [rsp + 16], 0 ; c = 0
	add qword [rsp + 8], 1 ; b++
.jump68:
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump69 ; If b >= bound, ...
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
.jump69:
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump67 ; If a >= bound, break
.jump70:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment c
	add qword [rsp + 16], 1
	jmp .jump66
.jump67: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump71
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump71:
	; Computing bound for a
	mov rax, [rel const29] ; 256
	push rax
	mov rax, [rsp]
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by 256
	jno .jump72
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump72:
imul rdi, [rsp + 0 + 8] ; multiply by (sum[a : 213, b : 489, c : argnum] a)
	jno .jump73
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump73:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump74
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump74:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
	; Initialize a to 0
	mov rax, 0
	push rax
.jump75: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump77 ; If c >= bound, ...
	mov qword [rsp + 16], 0 ; c = 0
	add qword [rsp + 8], 1 ; b++
.jump77:
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump78 ; If b >= bound, ...
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
.jump78:
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump76 ; If a >= bound, break
.jump79:
	; Compute loop body
	mov rax, [rel const30] ; 32.84
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment c
	add qword [rsp + 16], 1
	jmp .jump75
.jump76: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump58:
.jump28:
.jump2:
	sub rsp, 8 ; Align stack
	mov rax, [rel const39] ; 54.06
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump139
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; divide by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump139:
	cqo
	idiv r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump140
	sub rsp, 8 ; Align stack
	call _e
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	cmp rax, 0
	je .jump142
	mov rax, [rel const14] ; True
	push rax
	mov rax, [rel const40] ; 856
	push rax
	jmp .jump143
.jump142:
	sub rsp, 8 ; Align stack
	call _e
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const41] ; 989
	push rax
.jump143:
	; Moving 8 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	pop rax
	cmp rax, 0
	je .jump144
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump146
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump146:
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump147
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump147:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof int[,]
	imul rdi, [rsp + 0 + 0] ; multiply by b
	jno .jump148
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump148:
	imul rdi, [rsp + 0 + 8] ; multiply by (- c)
	jno .jump149
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump149:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
.jump150: ; Begin body of loop
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump152 ; If g >= bound, ...
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
.jump152:
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump151 ; If f >= bound, break
.jump153:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump154
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump154:
	; Computing bound for h
	mov rax, [rel const42] ; 196
	push rax
	mov rax, [rsp]
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by 196
	jno .jump155
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump155:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump156
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump156:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
.jump157: ; Begin body of loop
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump159 ; If i >= bound, ...
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
.jump159:
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump158 ; If h >= bound, break
.jump160:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 112 to rsp
		mov r10, [rbp - 112 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment i
	add qword [rsp + 8], 1
	jmp .jump157
.jump158: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 24
	add rax, [rsp + 56]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment g
	add qword [rsp + 8], 1
	jmp .jump150
.jump151: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for h
	sub rsp, 8 ; Align stack
	mov rax, [rel const43] ; 87.54
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump161
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump161:
	; Computing bound for g
	mov rax, [rel const4] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump162
	mov rax, [rel const44] ; 910
	push rax
	jmp .jump163
.jump162:
	mov rax, [rel const45] ; 529
	push rax
.jump163:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump164
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump164:
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump165
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump165:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
.jump166: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump168 ; If h >= bound, ...
	mov qword [rsp + 16], 0 ; h = 0
	add qword [rsp + 8], 1 ; g++
.jump168:
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump169 ; If g >= bound, ...
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
.jump169:
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump167 ; If f >= bound, break
.jump170:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment h
	add qword [rsp + 16], 1
	jmp .jump166
.jump167: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump171
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
.jump171:
	cmp rax, [rsp + 16]
	jl .jump172
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
.jump172:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump173
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
.jump173:
	cmp rax, [rsp + 24]
	jl .jump174
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
.jump174:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 24
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump145
.jump144:
	mov rax, [rel const14] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump175
	sub rsp, 8 ; Align stack
	call _e
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
.jump175:
	push rax
	pop rax
	cmp rax, 0
	je .jump176
	sub rsp, 8 ; Align stack
	call _e
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
.jump176:
	push rax
	pop rax
	cmp rax, 0
	je .jump177
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for g
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump179
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump179:
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump180
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump180:
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump181
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump181:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
.jump182: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump184 ; If h >= bound, ...
	mov qword [rsp + 16], 0 ; h = 0
	add qword [rsp + 8], 1 ; g++
.jump184:
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump185 ; If g >= bound, ...
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
.jump185:
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump183 ; If f >= bound, break
.jump186:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment h
	add qword [rsp + 16], 1
	jmp .jump182
.jump183: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump187
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump187:
	; Computing bound for f
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump188
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump188:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize f to 0
	mov rax, 0
	push rax
.jump189: ; Begin body of loop
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump190 ; If f >= bound, break
.jump191:
	; Compute loop body
	mov rax, [rel const46] ; 98
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment f
	add qword [rsp + 0], 1
	jmp .jump189
.jump190: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump192
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump192:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
imul rdi, [rsp + 0 + 0] ; multiply by (sum[f : d] 98)
	jno .jump193
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump193:
imul rdi, [rsp + 0 + 8] ; multiply by (sum[f : b, g : b, h : argnum] b)
	jno .jump194
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump194:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
.jump195: ; Begin body of loop
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump197 ; If g >= bound, ...
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
.jump197:
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump196 ; If f >= bound, break
.jump198:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment g
	add qword [rsp + 8], 1
	jmp .jump195
.jump196: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump178
.jump177:
	mov rax, [rel const4] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump199
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for g
	mov rax, [rel const47] ; 510
	push rax
	mov rax, [rsp]
	; Computing bound for f
	mov rax, [rel const48] ; 341
	push rax
	mov rax, [rsp]
	mov rdi, 1391280
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
.jump201: ; Begin body of loop
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump203 ; If g >= bound, ...
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
.jump203:
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump202 ; If f >= bound, break
.jump204:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment g
	add qword [rsp + 8], 1
	jmp .jump201
.jump202: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump200
.jump199:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump205
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump205:
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump206
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump206:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by c
	jno .jump207
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump207:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump208
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump208:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
.jump209: ; Begin body of loop
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump211 ; If g >= bound, ...
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
.jump211:
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump210 ; If f >= bound, break
.jump212:
	; Compute loop body
	mov rax, [rel const49] ; 334
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment g
	add qword [rsp + 8], 1
	jmp .jump209
.jump210: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump200:
.jump178:
.jump145:
	jmp .jump141
.jump140:
	sub rsp, 8 ; Align stack
	call _e
	add rsp, 8 ; Remove alignment
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	pop rax
	cmp rax, 0
	je .jump213
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump215
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump215:
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump216
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump216:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by c
	jno .jump217
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump217:
	imul rdi, [rsp + 0 + 8] ; multiply by d
	jno .jump218
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump218:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
.jump219: ; Begin body of loop
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump221 ; If g >= bound, ...
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
.jump221:
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump220 ; If f >= bound, break
.jump222:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment g
	add qword [rsp + 8], 1
	jmp .jump219
.jump220: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump214
.jump213:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump223
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump223:
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump224
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump224:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by d
	jno .jump225
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump225:
	imul rdi, [rsp + 0 + 8] ; multiply by c
	jno .jump226
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump226:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
.jump227: ; Begin body of loop
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump229 ; If g >= bound, ...
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
.jump229:
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump228 ; If f >= bound, break
.jump230:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment g
	add qword [rsp + 8], 1
	jmp .jump227
.jump228: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump214:
	; Moving 24 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 16]
		mov [rsp + 0 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
.jump141:
	mov rax, [rel const14] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump231
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump232
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump232:
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump233
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump233:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump234
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump234:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
.jump235: ; Begin body of loop
	; Compare k to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump237 ; If k >= bound, ...
	mov qword [rsp + 16], 0 ; k = 0
	add qword [rsp + 8], 1 ; j++
.jump237:
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump238 ; If j >= bound, ...
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
.jump238:
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump236 ; If i >= bound, break
.jump239:
	; Compute loop body
	mov rax, [rel const50] ; 62.01
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 48] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment k
	add qword [rsp + 16], 1
	jmp .jump235
.jump236: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump240
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump240:
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump241
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump241:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump242
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump242:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
.jump243: ; Begin body of loop
	; Compare k to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump245 ; If k >= bound, ...
	mov qword [rsp + 16], 0 ; k = 0
	add qword [rsp + 8], 1 ; j++
.jump245:
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump246 ; If j >= bound, ...
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
.jump246:
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump244 ; If i >= bound, break
.jump247:
	; Compute loop body
	mov rax, [rel const51] ; 82.14
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 48] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment k
	add qword [rsp + 16], 1
	jmp .jump243
.jump244: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump248
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump248:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump249
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump249:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
.jump250: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump252 ; If j >= bound, ...
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
.jump252:
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump251 ; If i >= bound, break
.jump253:
	; Compute loop body
	mov rax, [rel const52] ; 35.46
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 32] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 32], xmm0 ; Save sum
	; Increment j
	add qword [rsp + 8], 1
	jmp .jump250
.jump251: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
.jump231:
	push rax
	pop rax
	cmp rax, 0
	je .jump254
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rdi, 8
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	sub rsp, 32
	; Moving 32 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 40 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 40 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const53] ; 86.07
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	sub rsp, 8
	movsd [rsp], xmm0
	; Moving 16 bytes from rsp + 40 to rsp + 40
		mov r10, [rsp + 40 + 8]
		mov [rsp + 40 + 8], r10
		mov r10, [rsp + 40 + 0]
		mov [rsp + 40 + 0], r10
	add rsp, 40
	jmp .jump255
.jump254:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for k
	sub rsp, 8 ; Align stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump256
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump256:
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump257
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump257:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump258
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump258:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
.jump259: ; Begin body of loop
	; Compare k to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump261 ; If k >= bound, ...
	mov qword [rsp + 16], 0 ; k = 0
	add qword [rsp + 8], 1 ; j++
.jump261:
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump262 ; If j >= bound, ...
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
.jump262:
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump260 ; If i >= bound, break
.jump263:
	; Compute loop body
	mov rax, [rel const54] ; 40.03
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 48] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment k
	add qword [rsp + 16], 1
	jmp .jump259
.jump260: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump264
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump264:
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump265
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump265:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump266
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump266:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof {int[]}
	imul rdi, [rsp + 0 + 0] ; multiply by g
	jno .jump267
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump267:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump268
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump268:
imul rdi, [rsp + 0 + 16] ; multiply by to_int((sum[i : h, j : h, k : argnum] 40.03))
	jno .jump269
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump269:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
.jump270: ; Begin body of loop
	; Compare k to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump272 ; If k >= bound, ...
	mov qword [rsp + 16], 0 ; k = 0
	add qword [rsp + 8], 1 ; j++
.jump272:
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump273 ; If j >= bound, ...
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
.jump273:
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump271 ; If i >= bound, break
.jump274:
	; Compute loop body
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	shl rax, 4
	add rax, [rsp + 64]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment k
	add qword [rsp + 16], 1
	jmp .jump270
.jump271: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	mov rax, [rel const55] ; 35.2
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	sub rsp, 8 ; Align stack
	mov rax, [rel const56] ; 91.19
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const14] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump275
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump277
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump277:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump278
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump278:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
.jump279: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump281 ; If j >= bound, ...
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
.jump281:
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump280 ; If i >= bound, break
.jump282:
	; Compute loop body
	mov rax, [rel const57] ; 541
	push rax
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment j
	add qword [rsp + 8], 1
	jmp .jump279
.jump280: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	jmp .jump276
.jump275:
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
.jump276:
	pop rax
	pop r10
	sub rax, r10
	push rax
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for k
	mov rax, [rel const58] ; 3
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump283
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; divide by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump283:
	cqo
	idiv r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump284
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump284:
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump285
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump285:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump286
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump286:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
.jump287: ; Begin body of loop
	; Compare k to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump289 ; If k >= bound, ...
	mov qword [rsp + 16], 0 ; k = 0
	add qword [rsp + 8], 1 ; j++
.jump289:
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump290 ; If j >= bound, ...
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
.jump290:
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump288 ; If i >= bound, break
.jump291:
	; Compute loop body
	mov rax, [rel const59] ; 685
	push rax
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment k
	add qword [rsp + 16], 1
	jmp .jump287
.jump288: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump292
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump292:
	cmp rax, [rsp + 24]
	jl .jump293
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump293:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump294
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump294:
	cmp rax, [rsp + 32]
	jl .jump295
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump295:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump296
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump296:
	cmp rax, [rsp + 40]
	jl .jump297
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump297:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 4
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump255:
	sub rsp, 8 ; Align stack
	sub rsp, 8 ; Align stack
	call _e
	add rsp, 8 ; Remove alignment
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump318
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump320
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump320:
	; Computing bound for l
	sub rsp, 24
	; Moving 24 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 64 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump321
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
.jump321:
	cmp rax, [rsp + 16]
	jl .jump322
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
.jump322:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump323
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
.jump323:
	cmp rax, [rsp + 24]
	jl .jump324
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
.jump324:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump325
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump325:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof {float,float,float,float}
	imul rdi, [rsp + 0 + 0] ; multiply by f[b, g]
	jno .jump326
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump326:
	imul rdi, [rsp + 0 + 8] ; multiply by (g - (argnum + argnum))
	jno .jump327
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump327:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump328: ; Begin body of loop
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump330 ; If m >= bound, ...
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
.jump330:
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump329 ; If l >= bound, break
.jump331:
	; Compute loop body
	call _e
	push rax
	pop rax
	cmp rax, 0
	je .jump332
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump334
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump334:
	; Computing bound for n
	mov rax, [rel const61] ; 304
	push rax
	mov rax, [rsp]
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
.jump335: ; Begin body of loop
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump337 ; If o >= bound, ...
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
.jump337:
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump336 ; If n >= bound, break
.jump338:
	; Compute loop body
	mov rax, [rel const62] ; 73.85
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 32] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 32], xmm0 ; Save sum
	; Increment o
	add qword [rsp + 8], 1
	jmp .jump335
.jump336: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	jmp .jump333
.jump332:
	mov rax, [rel const63] ; 88.14
	push rax
.jump333:
	sub rsp, 8 ; Align stack
	mov rax, [rel const64] ; 69.7
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump339
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump339:
	; Computing bound for n
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump340
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump340:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
.jump341: ; Begin body of loop
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump342 ; If n >= bound, break
.jump343:
	; Compute loop body
	mov rax, [rel const65] ; 418
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment n
	add qword [rsp + 0], 1
	jmp .jump341
.jump342: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump344
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump344:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
.jump345: ; Begin body of loop
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump347 ; If o >= bound, ...
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
.jump347:
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump346 ; If n >= bound, break
.jump348:
	; Compute loop body
	mov rax, [rel const66] ; 23.3
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 32] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 32], xmm0 ; Save sum
	; Increment o
	add qword [rsp + 8], 1
	jmp .jump345
.jump346: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	sub rsp, 8 ; Align stack
	mov rax, [rel const67] ; 18.21
	push rax
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump349
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump349:
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump350
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump350:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
.jump351: ; Begin body of loop
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump353 ; If o >= bound, ...
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
.jump353:
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump352 ; If n >= bound, break
.jump354:
	; Compute loop body
	mov rax, [rel const68] ; 56.47
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 32] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 32], xmm0 ; Save sum
	; Increment o
	add qword [rsp + 8], 1
	jmp .jump351
.jump352: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	shl rax, 5
	add rax, [rsp + 64]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment m
	add qword [rsp + 8], 1
	jmp .jump328
.jump329: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump319
.jump318:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump355
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump355:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump356
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump356:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof {float,float,float,float}
	imul rdi, [rsp + 0 + 0] ; multiply by c
	jno .jump357
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump357:
	imul rdi, [rsp + 0 + 8] ; multiply by (- d)
	jno .jump358
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump358:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump359: ; Begin body of loop
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump361 ; If m >= bound, ...
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
.jump361:
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump360 ; If l >= bound, break
.jump362:
	; Compute loop body
	mov rax, [rel const69] ; 2.62
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const70] ; 87.15
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 32
	; Moving 32 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 40 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 40 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump363
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
.jump363:
	cmp rax, [rsp + 24]
	jl .jump364
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
.jump364:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump365
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
.jump365:
	cmp rax, [rsp + 32]
	jl .jump366
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
.jump366:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump367
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
.jump367:
	cmp rax, [rsp + 40]
	jl .jump368
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
.jump368:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for p
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump369
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump369:
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump370
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump370:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
.jump371: ; Begin body of loop
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump373 ; If o >= bound, ...
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
.jump373:
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump372 ; If n >= bound, break
.jump374:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment o
	add qword [rsp + 8], 1
	jmp .jump371
.jump372: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump375
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump375:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump376
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump376:
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump377
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump377:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
.jump378: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump380 ; If p >= bound, ...
	mov qword [rsp + 16], 0 ; p = 0
	add qword [rsp + 8], 1 ; o++
.jump380:
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump381 ; If o >= bound, ...
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
.jump381:
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump379 ; If n >= bound, break
.jump382:
	; Compute loop body
	mov rax, [rel const71] ; 98.4
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 48] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment p
	add qword [rsp + 16], 1
	jmp .jump378
.jump379: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	sub rsp, 8 ; Align stack
	mov rax, [rel const72] ; 31.56
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	shl rax, 5
	add rax, [rsp + 64]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment m
	add qword [rsp + 8], 1
	jmp .jump359
.jump360: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump319:
	lea rdi, [rel const73] ; l.png
	call _write_image
	add rsp, 24
	add rsp, 8 ; Remove alignment
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for m
	mov rax, [rel const74] ; 70
	push rax
	mov rax, [rsp]
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump383
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump383:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof bool[,,]
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump384
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump384:
	imul rdi, [rsp + 0 + 8] ; multiply by 70
	jno .jump385
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump385:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump386: ; Begin body of loop
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump388 ; If m >= bound, ...
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
.jump388:
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump387 ; If l >= bound, break
.jump389:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for p
	mov rax, [rel const75] ; 708
	push rax
	mov rax, [rsp]
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump390
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump390:
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump391
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump391:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by j
	jno .jump392
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump392:
	imul rdi, [rsp + 0 + 8] ; multiply by b
	jno .jump393
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump393:
	imul rdi, [rsp + 0 + 16] ; multiply by 708
	jno .jump394
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump394:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
.jump395: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump397 ; If p >= bound, ...
	mov qword [rsp + 16], 0 ; p = 0
	add qword [rsp + 8], 1 ; o++
.jump397:
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump398 ; If o >= bound, ...
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
.jump398:
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump396 ; If n >= bound, break
.jump399:
	; Compute loop body
	call _e
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment p
	add qword [rsp + 16], 1
	jmp .jump395
.jump396: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	shl rax, 5
	add rax, [rsp + 64]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment m
	add qword [rsp + 8], 1
	jmp .jump386
.jump387: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump400
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump400:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize l to 0
	mov rax, 0
	push rax
.jump401: ; Begin body of loop
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump402 ; If l >= bound, break
.jump403:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 144 to rsp
		mov r10, [rbp - 144 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment l
	add qword [rsp + 0], 1
	jmp .jump401
.jump402: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump404
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
.jump404:
	cmp rax, [rsp + 8]
	jl .jump405
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
.jump405:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const76] ; 799
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump406
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump408
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump408:
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump409
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump409:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump410
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump410:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump411: ; Begin body of loop
	; Compare n to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump413 ; If n >= bound, ...
	mov qword [rsp + 16], 0 ; n = 0
	add qword [rsp + 8], 1 ; m++
.jump413:
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump414 ; If m >= bound, ...
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
.jump414:
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump412 ; If l >= bound, break
.jump415:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment n
	add qword [rsp + 16], 1
	jmp .jump411
.jump412: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	jmp .jump407
.jump406:
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
.jump407:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump416
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump416:
	cmp rax, [rsp + 16]
	jl .jump417
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump417:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump418
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump418:
	cmp rax, [rsp + 24]
	jl .jump419
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump419:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 5
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 32
	; Moving 32 bytes from rax to rsp
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump420
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump420:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize l to 0
	mov rax, 0
	push rax
.jump421: ; Begin body of loop
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump422 ; If l >= bound, break
.jump423:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment l
	add qword [rsp + 0], 1
	jmp .jump421
.jump422: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump424
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump424:
	cmp rax, [rsp + 24]
	jl .jump425
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump425:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump426
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump426:
	cmp rax, [rsp + 32]
	jl .jump427
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump427:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump428
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump428:
	cmp rax, [rsp + 40]
	jl .jump429
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump429:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump430
	mov rax, [rel const77] ; 251
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump432
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	jmp .jump433
.jump432:
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
.jump433:
	mov rax, [rel const4] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump434
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	jmp .jump435
.jump434:
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
.jump435:
	mov rdi, 16
	call _jpl_alloc
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
	mov rax, [rel const78] ; 937
	push rax
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump436
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump436:
	cmp rax, [rsp + 8]
	jl .jump437
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump437:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump431
.jump430:
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	mov rax, [rel const4] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	mov rdi, 16
	call _jpl_alloc
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump438
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump438:
	cmp rax, [rsp + 8]
	jl .jump439
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump439:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump440
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump442
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump442:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump443
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump443:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof {int}
	imul rdi, [rsp + 0 + 0] ; multiply by (- d)
	jno .jump444
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump444:
	imul rdi, [rsp + 0 + 8] ; multiply by (- h)
	jno .jump445
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump445:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump446: ; Begin body of loop
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump448 ; If m >= bound, ...
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
.jump448:
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump447 ; If l >= bound, break
.jump449:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment m
	add qword [rsp + 8], 1
	jmp .jump446
.jump447: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump450
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump450:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump451
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump451:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump452: ; Begin body of loop
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump454 ; If m >= bound, ...
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
.jump454:
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump453 ; If l >= bound, break
.jump455:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment m
	add qword [rsp + 8], 1
	jmp .jump452
.jump453: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump456
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump456:
	cmp rax, [rsp + 16]
	jl .jump457
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump457:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump458
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump458:
	cmp rax, [rsp + 24]
	jl .jump459
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump459:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump441
.jump440:
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
.jump441:
.jump431:
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for o
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for o
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump460
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump460:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
.jump461: ; Begin body of loop
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump462 ; If n >= bound, break
.jump463:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment n
	add qword [rsp + 0], 1
	jmp .jump461
.jump462: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump464
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump464:
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump465
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump465:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
.jump466: ; Begin body of loop
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump468 ; If o >= bound, ...
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
.jump468:
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump467 ; If n >= bound, break
.jump469:
	; Compute loop body
	mov rax, [rel const79] ; 948
	push rax
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment o
	add qword [rsp + 8], 1
	jmp .jump466
.jump467: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump470
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump470:
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump471
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump471:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof bool[]
	imul rdi, [rsp + 0 + 0] ; multiply by d
	jno .jump472
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump472:
imul rdi, [rsp + 0 + 8] ; multiply by (sum[n : c, o : (sum[n : d] h)] 948)
	jno .jump473
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump473:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
.jump474: ; Begin body of loop
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump476 ; If o >= bound, ...
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
.jump476:
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump475 ; If n >= bound, break
.jump477:
	; Compute loop body
	mov rax, [rel const4] ; False
	push rax
	mov rax, [rel const14] ; True
	push rax
	sub rsp, 8 ; Align stack
	call _e
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	cmp rax, 0
	je .jump478
	sub rsp, 8 ; Align stack
	call _e
	add rsp, 8 ; Remove alignment
	push rax
	jmp .jump479
.jump478:
	mov rax, [rel const4] ; False
	push rax
.jump479:
	mov rdi, 24
	call _jpl_alloc
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	push rax
	mov rax, 3
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 4
	add rax, [rsp + 48]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment o
	add qword [rsp + 8], 1
	jmp .jump474
.jump475: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	; Moving 24 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 64 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 24 to rsp + 24
		mov r10, [rsp + 24 + 0]
		mov [rsp + 24 + 0], r10
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rdi, 16
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump480
	sub rsp, 8 ; Align stack
	lea rdi, [rel const80] ; mod by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump480:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump481
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
.jump481:
	cmp rax, [rsp + 8]
	jl .jump482
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
.jump482:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump483
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump483:
	cmp rax, [rsp + 16]
	jl .jump484
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump484:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump485
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump485:
	cmp rax, [rsp + 24]
	jl .jump486
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump486:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 4
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump487
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump487:
	; Computing bound for n
	mov rax, [rel const81] ; 672
	push rax
	mov rax, [rsp]
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by 672
	jno .jump488
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump488:
	imul rdi, [rsp + 0 + 8] ; multiply by b
	jno .jump489
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump489:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
.jump490: ; Begin body of loop
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump492 ; If o >= bound, ...
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
.jump492:
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump491 ; If n >= bound, break
.jump493:
	; Compute loop body
	sub rsp, 8 ; Align stack
	call _e
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	xor rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment o
	add qword [rsp + 8], 1
	jmp .jump490
.jump491: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const82] ; 684
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump494
	lea rdi, [rel const8] ; divide by zero
	call _fail_assertion
.jump494:
	cqo
	idiv r10
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump495
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump495:
	cmp rax, [rsp + 16]
	jl .jump496
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump496:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump497
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump497:
	cmp rax, [rsp + 24]
	jl .jump498
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump498:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump499
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	jmp .jump500
.jump499:
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
.jump500:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump501
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump501:
	cmp rax, [rsp + 8]
	jl .jump502
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump502:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	jne .jump503
	lea rdi, [rel const83] ; n
	call _fail_assertion
.jump503:
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const4] ; False
	push rax
	pop rax
	cmp rax, 0
	jne .jump575
	mov rax, [rel const4] ; False
	push rax
	pop rax
.jump575:
	push rax
	mov rax, [rel const88] ; 55.33
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	sub rsp, 8
	movsd [rsp], xmm0
	; Moving 16 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 8]
		mov [rsp + 8 + 8], r10
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	; Moving 8 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	pop rax
	cmp rax, 0
	jne .jump576
	lea rdi, [rel const89] ; o
	call _fail_assertion
.jump576:
	mov rax, [rel const14] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump577
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump579
	jmp .jump580
.jump579:
	mov rax, [rel const14] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump581
	mov rax, [rel const14] ; True
	push rax
	pop rax
.jump581:
	push rax
	pop rax
	cmp rax, 0
	jne .jump582
	mov rax, [rel const14] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump583
	call _e
	push rax
	pop rax
.jump583:
	push rax
	pop rax
.jump582:
	push rax
	pop rax
	cmp rax, 0
	je .jump584
	call _e
	push rax
	pop rax
	cmp rax, 0
	je .jump586
	jmp .jump587
.jump586:
.jump587:
	jmp .jump585
.jump584:
.jump585:
.jump580:
	jmp .jump578
.jump577:
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for p
	mov rax, [rel const90] ; 122
	push rax
	mov rax, [rsp]
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump588
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump588:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by h
	jno .jump589
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump589:
	imul rdi, [rsp + 0 + 8] ; multiply by 122
	jno .jump590
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump590:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
.jump591: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump593 ; If p >= bound, ...
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
.jump593:
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump592 ; If o >= bound, break
.jump594:
	; Compute loop body
	sub rsp, 8 ; Align stack
	call _e
	add rsp, 8 ; Remove alignment
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment p
	add qword [rsp + 8], 1
	jmp .jump591
.jump592: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rax, [rel const4] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump595
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	jmp .jump596
.jump595:
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
.jump596:
	call _e
	push rax
	pop rax
	cmp rax, 0
	je .jump597
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump598
.jump597:
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
.jump598:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump599
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump599:
	cmp rax, [rsp + 16]
	jl .jump600
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump600:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump601
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump601:
	cmp rax, [rsp + 24]
	jl .jump602
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump602:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for q
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump603
	lea rdi, [rel const80] ; mod by zero
	call _fail_assertion
.jump603:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump604
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump604:
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump605
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump605:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump606
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump606:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof int[]
	imul rdi, [rsp + 0 + 0] ; multiply by g
	jno .jump607
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump607:
	imul rdi, [rsp + 0 + 8] ; multiply by g
	jno .jump608
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump608:
	imul rdi, [rsp + 0 + 16] ; multiply by (c % g)
	jno .jump609
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump609:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize q to 0
	mov rax, 0
	push rax
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
.jump610: ; Begin body of loop
	; Compare q to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump612 ; If q >= bound, ...
	mov qword [rsp + 16], 0 ; q = 0
	add qword [rsp + 8], 1 ; p++
.jump612:
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump613 ; If p >= bound, ...
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
.jump613:
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump611 ; If o >= bound, break
.jump614:
	; Compute loop body
	mov rax, [rel const14] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump615
	sub rsp, 16
	; Moving 16 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	jmp .jump616
.jump615:
	sub rsp, 16
	; Moving 16 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
.jump616:
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	shl rax, 4
	add rax, [rsp + 64]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment q
	add qword [rsp + 16], 1
	jmp .jump610
.jump611: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump617
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump617:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump618
	lea rdi, [rel const9] ; non-positive loop bound
	call _fail_assertion
.jump618:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump619
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump619:
	imul rdi, [rsp + 0 + 8] ; multiply by (- j)
	jno .jump620
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump620:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
.jump621: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump623 ; If p >= bound, ...
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
.jump623:
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump622 ; If o >= bound, break
.jump624:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 184 to rsp
		mov r10, [rbp - 184 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment p
	add qword [rsp + 8], 1
	jmp .jump621
.jump622: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 32
	; Moving 32 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 40 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 40 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	call _k
	add rsp, 32
	add rsp, 24
	add rsp, 48
	add rsp, 8 ; Remove alignment
.jump578:
	add rsp, 88 ; Local variables
	pop r12
	pop rbp
	ret

