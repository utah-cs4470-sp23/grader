global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 31.33
const1: dq 33.95
const2: dq 45.52
const3: dq 172
const4: db `non-positive loop bound`, 0
const5: dq 0
const6: dq 335
const7: dq 303
const8: dq 445
const9: db `divide by zero`, 0
const10: dq 935
const11: db `overflow computing array size`, 0
const12: dq 278
const13: dq 96.66
const14: dq 1
const15: db `negative array index`, 0
const16: db `index too large`, 0
const17: dq 980
const18: dq 4
const19: dq 66.83
const20: dq 430
const21: dq 54.13
const22: dq 468
const23: dq 944
const24: dq 681
const25: dq 0.91
const26: dq 489
const27: dq 213
const28: dq 256
const29: dq 32.84
const30: dq 508
const31: dq 143
const32: dq 48.87
const33: dq 60.42
const34: dq 37.51
const35: dq 797
const36: dq 1.81
const37: dq 94.58
const38: dq 54.06
const39: dq 856
const40: dq 989
const41: dq 196
const42: dq 87.54
const43: dq 910
const44: dq 529
const45: dq 98
const46: dq 510
const47: dq 341
const48: dq 334
const49: dq 62.01
const50: dq 82.14
const51: dq 35.46
const52: dq 86.07
const53: dq 40.03
const54: dq 35.2
const55: dq 91.19
const56: dq 541
const57: dq 3
const58: dq 685
const59: dq 662
const60: dq 304
const61: dq 73.85
const62: dq 88.14
const63: dq 69.7
const64: dq 418
const65: dq 23.3
const66: dq 18.21
const67: dq 56.47
const68: dq 2.62
const69: dq 87.15
const70: dq 98.4
const71: dq 31.56
const72: db `l.png`, 0
const73: dq 70
const74: dq 708
const75: dq 799
const76: dq 251
const77: dq 937
const78: dq 948
const79: db `mod by zero`, 0
const80: dq 672
const81: dq 684
const82: db `n`, 0
const83: dq 15
const84: dq 17.14
const85: dq 326
const86: dq 77.02
const87: dq 55.33
const88: db `o`, 0
const89: dq 122

section .text
e:
_e:
	push rbp
	mov rbp, rsp
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for h
	sub rsp, 16
	; Moving 16 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	call _e
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	cmp rax, 0
	je .jump91
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump92
.jump91:
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
.jump92:
	mov rax, [rel const14] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	; Moving 16 bytes from rsp + 8 to rsp + 24
		mov r10, [rsp + 8 + 8]
		mov [rsp + 24 + 8], r10
		mov r10, [rsp + 8 + 0]
		mov [rsp + 24 + 0], r10
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump93
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
.jump93:
	cmp rax, [rsp + 8]
	jl .jump94
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
.jump94:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump95
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump95:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
.jump96: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump97 ; If h >= bound, break
.jump98:
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for i
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump99
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump99:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump100
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump100:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by d
	jno .jump101
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump101:
	imul rdi, [rsp + 0 + 8] ; multiply by h
	jno .jump102
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump102:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
.jump103: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump105 ; If j >= bound, ...
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
.jump105:
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump104 ; If i >= bound, break
.jump106:
	; Compute loop body
	mov rax, [rel const5] ; False
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment j
	add qword [rsp + 8], 1
	jmp .jump103
.jump104: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rax, [rel const30] ; 508
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump107
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump107:
	cmp rax, [rsp + 16]
	jl .jump108
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump108:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump109
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump109:
	cmp rax, [rsp + 24]
	jl .jump110
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump110:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump111
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	jmp .jump112
.jump111:
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
.jump112:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump113
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump113:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
.jump114: ; Begin body of loop
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump115 ; If i >= bound, break
.jump116:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment i
	add qword [rsp + 0], 1
	jmp .jump114
.jump115: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment h
	add qword [rsp + 0], 1
	jmp .jump96
.jump97: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump117
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump117:
	; Computing bound for j
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for k
	mov rax, [rel const31] ; 143
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump118
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump118:
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump119
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump119:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump120
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump120:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
.jump121: ; Begin body of loop
	; Compare k to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump123 ; If k >= bound, ...
	mov qword [rsp + 16], 0 ; k = 0
	add qword [rsp + 8], 1 ; j++
.jump123:
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump124 ; If j >= bound, ...
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
.jump124:
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump122 ; If i >= bound, break
.jump125:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment k
	add qword [rsp + 16], 1
	jmp .jump121
.jump122: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump126
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump126:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump127
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump127:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
.jump128: ; Begin body of loop
	; Compare k to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump130 ; If k >= bound, ...
	mov qword [rsp + 16], 0 ; k = 0
	add qword [rsp + 8], 1 ; j++
.jump130:
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump131 ; If j >= bound, ...
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
.jump131:
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump129 ; If i >= bound, break
.jump132:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const32] ; 48.87
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 16
		mov r10, [rsp + 0 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 48] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment k
	add qword [rsp + 16], 1
	jmp .jump128
.jump129: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rel const33] ; 60.42
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const34] ; 37.51
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump133
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump135
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump135:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump136
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump136:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by d
	jno .jump137
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump137:
	imul rdi, [rsp + 0 + 8] ; multiply by h
	jno .jump138
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump138:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
.jump139: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump141 ; If j >= bound, ...
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
.jump141:
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump140 ; If i >= bound, break
.jump142:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment j
	add qword [rsp + 8], 1
	jmp .jump139
.jump140: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rax, [rel const35] ; 797
	push rax
	mov rax, [rel const36] ; 1.81
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	jmp .jump134
.jump133:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump143
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump143:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump144
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump144:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by d
	jno .jump145
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump145:
	imul rdi, [rsp + 0 + 8] ; multiply by b
	jno .jump146
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump146:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
.jump147: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump149 ; If j >= bound, ...
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
.jump149:
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump148 ; If i >= bound, break
.jump150:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment j
	add qword [rsp + 8], 1
	jmp .jump147
.jump148: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const37] ; 94.58
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
.jump134:
	; Moving 40 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 32]
		mov [rsp + 8 + 32], r10
		mov r10, [rsp + 0 + 24]
		mov [rsp + 8 + 24], r10
		mov r10, [rsp + 0 + 16]
		mov [rsp + 8 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 8 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	mov rax, [rel const14] ; True
	push rax
	pop rax
	add rsp, 64 ; Local variables
	pop rbp
	ret
	call _e
	push rax
	pop rax
	add rsp, 64 ; Local variables
	pop rbp
	ret

k:
_k:
	push rbp
	mov rbp, rsp
	sub rsp, 32
	; Moving 32 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 24]
		mov [rsp + 24], r10
		mov r10, [r12 - 40 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 40 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump315
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump315:
	cmp rax, [rsp + 8]
	jl .jump316
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump316:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const14] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump317
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	jmp .jump318
.jump317:
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -112 to rsp
		mov r10, [rbp - -112 + 0]
		mov [rsp + 0], r10
.jump318:
	sub rsp, 8
	; Moving 8 bytes from rbp - -56 to rsp
		mov r10, [rbp - -56 + 0]
		mov [rsp + 0], r10
	; Moving 16 bytes from rsp + 8 to rsp + 16
		mov r10, [rsp + 8 + 8]
		mov [rsp + 16 + 8], r10
		mov r10, [rsp + 8 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	; Moving 8 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for F
	mov rax, [rel const59] ; 662
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump319
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump319:
	; Computing bound for E
	sub rsp, 8
	; Moving 8 bytes from rbp - -48 to rsp
		mov r10, [rbp - -48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump320
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump320:
	; Computing bound for D
	sub rsp, 8
	; Moving 8 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump321
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump321:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof int[]
	imul rdi, [rsp + 0 + 0] ; multiply by o
	jno .jump322
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump322:
	imul rdi, [rsp + 0 + 8] ; multiply by q
	jno .jump323
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump323:
	imul rdi, [rsp + 0 + 16] ; multiply by 662
	jno .jump324
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump324:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize F to 0
	mov rax, 0
	push rax
	; Initialize E to 0
	mov rax, 0
	push rax
	; Initialize D to 0
	mov rax, 0
	push rax
.jump325: ; Begin body of loop
	; Compare F to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump327 ; If F >= bound, ...
	mov qword [rsp + 16], 0 ; F = 0
	add qword [rsp + 8], 1 ; E++
.jump327:
	; Compare E to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump328 ; If E >= bound, ...
	mov qword [rsp + 8], 0 ; E = 0
	add qword [rsp + 0], 1 ; D++
.jump328:
	; Compare D to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump326 ; If D >= bound, break
.jump329:
	; Compute loop body
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 16
	add rax, [rsp + 64]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment F
	add qword [rsp + 16], 1
	jmp .jump325
.jump326: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 32
	; Moving 32 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -48 to rsp
		mov r10, [rbp - -48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump330
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump330:
	cmp rax, [rsp + 24]
	jl .jump331
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump331:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump332
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump332:
	cmp rax, [rsp + 32]
	jl .jump333
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump333:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump334
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump334:
	cmp rax, [rsp + 40]
	jl .jump335
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump335:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 32
	; Moving 32 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - -16 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Moving 0 bytes from rsp + 40 to rsp + 40
	add rsp, 40
	add rsp, 72 ; Local variables
	pop rbp
	ret

n:
_n:
	push rbp
	mov rbp, rsp
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for J
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump526
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump526:
	; Computing bound for I
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for J
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump527
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump527:
	; Computing bound for I
	sub rsp, 8
	; Moving 8 bytes from rbp - -128 to rsp
		mov r10, [rbp - -128 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump528
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump528:
	; Computing bound for H
	sub rsp, 8
	; Moving 8 bytes from rbp - -144 to rsp
		mov r10, [rbp - -144 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump529
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump529:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize J to 0
	mov rax, 0
	push rax
	; Initialize I to 0
	mov rax, 0
	push rax
	; Initialize H to 0
	mov rax, 0
	push rax
.jump530: ; Begin body of loop
	; Compare J to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump532 ; If J >= bound, ...
	mov qword [rsp + 16], 0 ; J = 0
	add qword [rsp + 8], 1 ; I++
.jump532:
	; Compare I to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump533 ; If I >= bound, ...
	mov qword [rsp + 8], 0 ; I = 0
	add qword [rsp + 0], 1 ; H++
.jump533:
	; Compare H to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump531 ; If H >= bound, break
.jump534:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment J
	add qword [rsp + 16], 1
	jmp .jump530
.jump531: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump535
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump535:
	; Computing bound for H
	sub rsp, 8
	; Moving 8 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump536
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump536:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize J to 0
	mov rax, 0
	push rax
	; Initialize I to 0
	mov rax, 0
	push rax
	; Initialize H to 0
	mov rax, 0
	push rax
.jump537: ; Begin body of loop
	; Compare J to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump539 ; If J >= bound, ...
	mov qword [rsp + 16], 0 ; J = 0
	add qword [rsp + 8], 1 ; I++
.jump539:
	; Compare I to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump540 ; If I >= bound, ...
	mov qword [rsp + 8], 0 ; I = 0
	add qword [rsp + 0], 1 ; H++
.jump540:
	; Compare H to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump538 ; If H >= bound, break
.jump541:
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for K
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump542
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump542:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize K to 0
	mov rax, 0
	push rax
.jump543: ; Begin body of loop
	; Compare K to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump544 ; If K >= bound, break
.jump545:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -168 to rsp
		mov r10, [rbp - -168 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump546
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	jmp .jump547
.jump546:
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
.jump547:
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 16] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 16], xmm0 ; Save sum
	; Increment K
	add qword [rsp + 0], 1
	jmp .jump543
.jump544: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 48] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment J
	add qword [rsp + 16], 1
	jmp .jump537
.jump538: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for K
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump548
	lea rdi, [rel const9] ; divide by zero
	call _fail_assertion
.jump548:
	cqo
	idiv r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump549
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump549:
	; Computing bound for J
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump550
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump550:
	; Computing bound for I
	sub rsp, 8
	; Moving 8 bytes from rbp - -48 to rsp
		mov r10, [rbp - -48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump551
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump551:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof {bool,bool,int}
	imul rdi, [rsp + 0 + 0] ; multiply by t
	jno .jump552
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump552:
	imul rdi, [rsp + 0 + 8] ; multiply by j
	jno .jump553
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump553:
	imul rdi, [rsp + 0 + 16] ; multiply by (b / argnum)
	jno .jump554
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump554:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize K to 0
	mov rax, 0
	push rax
	; Initialize J to 0
	mov rax, 0
	push rax
	; Initialize I to 0
	mov rax, 0
	push rax
.jump555: ; Begin body of loop
	; Compare K to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump557 ; If K >= bound, ...
	mov qword [rsp + 16], 0 ; K = 0
	add qword [rsp + 8], 1 ; J++
.jump557:
	; Compare J to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump558 ; If J >= bound, ...
	mov qword [rsp + 8], 0 ; J = 0
	add qword [rsp + 0], 1 ; I++
.jump558:
	; Compare I to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump556 ; If I >= bound, break
.jump559:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	call _e
	add rsp, 8 ; Remove alignment
	push rax
	call _e
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 24
	add rax, [rsp + 72]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment K
	add qword [rsp + 16], 1
	jmp .jump555
.jump556: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -176 to rsp
		mov r10, [rbp - -176 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for I
	mov rax, [rel const83] ; 15
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump560
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump560:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize I to 0
	mov rax, 0
	push rax
.jump561: ; Begin body of loop
	; Compare I to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump562 ; If I >= bound, break
.jump563:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -48 to rsp
		mov r10, [rbp - -48 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment I
	add qword [rsp + 0], 1
	jmp .jump561
.jump562: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump564
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
.jump564:
	cmp rax, [rsp + 24]
	jl .jump565
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
.jump565:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump566
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
.jump566:
	cmp rax, [rsp + 32]
	jl .jump567
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
.jump567:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump568
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
.jump568:
	cmp rax, [rsp + 40]
	jl .jump569
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
.jump569:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 24
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 8 to rsp + 16
		mov r10, [rsp + 8 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	pop rax
	cmp rax, 0
	je .jump570
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const84] ; 17.14
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	jmp .jump571
.jump570:
	sub rsp, 8 ; Align stack
	mov rax, [rel const5] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump572
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -184 to rsp
		mov r10, [rbp - -184 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	sub rsp, 8
	movsd [rsp], xmm0
	jmp .jump573
.jump572:
	sub rsp, 32
	; Moving 32 bytes from rbp - -96 to rsp
		mov r10, [rbp - -96 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - -96 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -96 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -96 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const85] ; 326
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump574
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump574:
	cmp rax, [rsp + 24]
	jl .jump575
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump575:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump576
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump576:
	cmp rax, [rsp + 32]
	jl .jump577
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump577:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump578
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump578:
	cmp rax, [rsp + 40]
	jl .jump579
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump579:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	sub rsp, 8
	movsd [rsp], xmm0
.jump573:
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
.jump571:
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 8 ; Local variables
	pop rbp
	ret
	sub rsp, 8 ; Align stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for J
	sub rsp, 8
	; Moving 8 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump580
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump580:
	; Computing bound for I
	sub rsp, 8
	; Moving 8 bytes from rbp - -200 to rsp
		mov r10, [rbp - -200 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump581
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump581:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof float[,]
	imul rdi, [rsp + 0 + 0] ; multiply by G
	jno .jump582
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump582:
	imul rdi, [rsp + 0 + 8] ; multiply by r
	jno .jump583
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump583:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize J to 0
	mov rax, 0
	push rax
	; Initialize I to 0
	mov rax, 0
	push rax
.jump584: ; Begin body of loop
	; Compare J to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump586 ; If J >= bound, ...
	mov qword [rsp + 8], 0 ; J = 0
	add qword [rsp + 0], 1 ; I++
.jump586:
	; Compare I to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump585 ; If I >= bound, break
.jump587:
	; Compute loop body
	sub rsp, 24
	; Moving 24 bytes from rbp - -176 to rsp
		mov r10, [rbp - -176 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -176 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -176 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 24
	add rax, [rsp + 56]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment J
	add qword [rsp + 8], 1
	jmp .jump584
.jump585: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 16
	; Moving 16 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -128 to rsp
		mov r10, [rbp - -128 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump588
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump588:
	cmp rax, [rsp + 8]
	jl .jump589
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump589:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump590
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump590:
	cmp rax, [rsp + 16]
	jl .jump591
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump591:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump592
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump592:
	cmp rax, [rsp + 24]
	jl .jump593
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump593:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 24
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -152 to rsp
		mov r10, [rbp - -152 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -200 to rsp
		mov r10, [rbp - -200 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump594
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump594:
	cmp rax, [rsp + 16]
	jl .jump595
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump595:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump596
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump596:
	cmp rax, [rsp + 24]
	jl .jump597
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump597:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	mov rax, [rel const86] ; 77.02
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 8 ; Local variables
	pop rbp
	ret
	sub rsp, 16
	; Moving 16 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 24 ; Local variables
	pop rbp
	ret

jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp
	mov rax, [rel const0] ; 31.33
	push rax
	mov rax, [rel const1] ; 33.95
	push rax
	sub rsp, 8 ; Align stack
	mov rax, [rel const2] ; 45.52
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump1
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for c
	mov rax, [rel const3] ; 172
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump3
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump3:
	; Computing bound for b
	mov rax, [rel const5] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump4
	mov rax, [rel const6] ; 335
	push rax
	jmp .jump5
.jump4:
	mov rax, [rel const7] ; 303
	push rax
	pop rax
	neg rax
	push rax
.jump5:
	mov rax, [rel const8] ; 445
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump6
	lea rdi, [rel const9] ; divide by zero
	call _fail_assertion
.jump6:
	cqo
	idiv r10
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump7
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump7:
	; Computing bound for a
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for b
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for a
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump8
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump8:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize a to 0
	mov rax, 0
	push rax
.jump9: ; Begin body of loop
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump10 ; If a >= bound, break
.jump11:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment a
	add qword [rsp + 0], 1
	jmp .jump9
.jump10: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump12
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump12:
	; Computing bound for a
	mov rax, [rel const10] ; 935
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump13
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump13:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize b to 0
	mov rax, 0
	push rax
	; Initialize a to 0
	mov rax, 0
	push rax
.jump14: ; Begin body of loop
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump16 ; If b >= bound, ...
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
.jump16:
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump15 ; If a >= bound, break
.jump17:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment b
	add qword [rsp + 8], 1
	jmp .jump14
.jump15: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump18
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump18:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
imul rdi, [rsp + 0 + 0] ; multiply by (- (sum[a : 935, b : (sum[a : argnum] argnum)] argnum))
	jno .jump19
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump19:
	imul rdi, [rsp + 0 + 8] ; multiply by ((argnum / 445) + (if false then 335 else (- 303)))
	jno .jump20
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump20:
	imul rdi, [rsp + 0 + 16] ; multiply by 172
	jno .jump21
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump21:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
	; Initialize a to 0
	mov rax, 0
	push rax
.jump22: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump24 ; If c >= bound, ...
	mov qword [rsp + 16], 0 ; c = 0
	add qword [rsp + 8], 1 ; b++
.jump24:
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump25 ; If b >= bound, ...
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
.jump25:
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump23 ; If a >= bound, break
.jump26:
	; Compute loop body
	mov rax, [rel const12] ; 278
	push rax
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const13] ; 96.66
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment c
	add qword [rsp + 16], 1
	jmp .jump22
.jump23: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump2
.jump1:
	mov rax, [rel const14] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump27
	mov rax, [rel const14] ; True
	push rax
	jmp .jump28
.jump27:
	mov rax, [rel const14] ; True
	push rax
.jump28:
	pop rax
	cmp rax, 0
	je .jump29
	mov rax, [rel const14] ; True
	push rax
	mov rax, [rel const5] ; False
	push rax
	mov rdi, 16
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump31
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
.jump31:
	cmp rax, [rsp + 8]
	jl .jump32
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
.jump32:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump33
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump35
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump35:
	; Computing bound for b
	mov rax, [rel const17] ; 980
	push rax
	mov rax, [rel const18] ; 4
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump36
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump36:
	; Computing bound for a
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump37
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump37:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump38
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump38:
	imul rdi, [rsp + 0 + 8] ; multiply by (4 - 980)
	jno .jump39
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump39:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump40
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump40:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
	; Initialize a to 0
	mov rax, 0
	push rax
.jump41: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump43 ; If c >= bound, ...
	mov qword [rsp + 16], 0 ; c = 0
	add qword [rsp + 8], 1 ; b++
.jump43:
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump44 ; If b >= bound, ...
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
.jump44:
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump42 ; If a >= bound, break
.jump45:
	; Compute loop body
	mov rax, [rel const19] ; 66.83
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment c
	add qword [rsp + 16], 1
	jmp .jump41
.jump42: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump34
.jump33:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump46
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump46:
	; Computing bound for b
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump47
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
.jump47:
	cmp rax, [rsp + 8]
	jl .jump48
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
.jump48:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump49
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump49:
	; Computing bound for a
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const20] ; 430
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump50
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump50:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by (430 + argnum)
	jno .jump51
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump51:
	imul rdi, [rsp + 0 + 8] ; multiply by args[argnum]
	jno .jump52
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump52:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump53
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump53:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
	; Initialize a to 0
	mov rax, 0
	push rax
.jump54: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump56 ; If c >= bound, ...
	mov qword [rsp + 16], 0 ; c = 0
	add qword [rsp + 8], 1 ; b++
.jump56:
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump57 ; If b >= bound, ...
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
.jump57:
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump55 ; If a >= bound, break
.jump58:
	; Compute loop body
	mov rax, [rel const21] ; 54.13
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment c
	add qword [rsp + 16], 1
	jmp .jump54
.jump55: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump34:
	jmp .jump30
.jump29:
	mov rax, [rel const5] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump59
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for c
	mov rax, [rel const22] ; 468
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump61
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump61:
	; Computing bound for b
	mov rax, [rel const23] ; 944
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump62
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump62:
	; Computing bound for a
	mov rax, [rel const24] ; 681
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump63
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump63:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by 681
	jno .jump64
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump64:
	imul rdi, [rsp + 0 + 8] ; multiply by 944
	jno .jump65
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump65:
	imul rdi, [rsp + 0 + 16] ; multiply by 468
	jno .jump66
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump66:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
	; Initialize a to 0
	mov rax, 0
	push rax
.jump67: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump69 ; If c >= bound, ...
	mov qword [rsp + 16], 0 ; c = 0
	add qword [rsp + 8], 1 ; b++
.jump69:
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump70 ; If b >= bound, ...
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
.jump70:
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump68 ; If a >= bound, break
.jump71:
	; Compute loop body
	mov rax, [rel const25] ; 0.91
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment c
	add qword [rsp + 16], 1
	jmp .jump67
.jump68: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump60
.jump59:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump72
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump72:
	; Computing bound for b
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump73
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump73:
	; Computing bound for b
	mov rax, [rel const26] ; 489
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump74
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump74:
	; Computing bound for a
	mov rax, [rel const27] ; 213
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump75
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump75:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
	; Initialize a to 0
	mov rax, 0
	push rax
.jump76: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump78 ; If c >= bound, ...
	mov qword [rsp + 16], 0 ; c = 0
	add qword [rsp + 8], 1 ; b++
.jump78:
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump79 ; If b >= bound, ...
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
.jump79:
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump77 ; If a >= bound, break
.jump80:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment c
	add qword [rsp + 16], 1
	jmp .jump76
.jump77: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump81
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump81:
	; Computing bound for a
	mov rax, [rel const28] ; 256
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump82
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump82:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by 256
	jno .jump83
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump83:
imul rdi, [rsp + 0 + 8] ; multiply by (sum[a : 213, b : 489, c : argnum] a)
	jno .jump84
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump84:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump85
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump85:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
	; Initialize a to 0
	mov rax, 0
	push rax
.jump86: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump88 ; If c >= bound, ...
	mov qword [rsp + 16], 0 ; c = 0
	add qword [rsp + 8], 1 ; b++
.jump88:
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump89 ; If b >= bound, ...
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
.jump89:
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump87 ; If a >= bound, break
.jump90:
	; Compute loop body
	mov rax, [rel const29] ; 32.84
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment c
	add qword [rsp + 16], 1
	jmp .jump86
.jump87: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump60:
.jump30:
.jump2:
	sub rsp, 8 ; Align stack
	mov rax, [rel const38] ; 54.06
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump151
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; divide by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump151:
	cqo
	idiv r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump152
	sub rsp, 8 ; Align stack
	call _e
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	cmp rax, 0
	je .jump154
	mov rax, [rel const14] ; True
	push rax
	mov rax, [rel const39] ; 856
	push rax
	jmp .jump155
.jump154:
	sub rsp, 8 ; Align stack
	call _e
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const40] ; 989
	push rax
.jump155:
	; Moving 8 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	pop rax
	cmp rax, 0
	je .jump156
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump158
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump158:
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump159
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump159:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof int[,]
	imul rdi, [rsp + 0 + 0] ; multiply by b
	jno .jump160
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump160:
	imul rdi, [rsp + 0 + 8] ; multiply by (- c)
	jno .jump161
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump161:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
.jump162: ; Begin body of loop
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump164 ; If g >= bound, ...
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
.jump164:
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump163 ; If f >= bound, break
.jump165:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump166
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump166:
	; Computing bound for h
	mov rax, [rel const41] ; 196
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump167
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump167:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by 196
	jno .jump168
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump168:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump169
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump169:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
.jump170: ; Begin body of loop
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump172 ; If i >= bound, ...
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
.jump172:
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump171 ; If h >= bound, break
.jump173:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 112 to rsp
		mov r10, [rbp - 112 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment i
	add qword [rsp + 8], 1
	jmp .jump170
.jump171: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 24
	add rax, [rsp + 56]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment g
	add qword [rsp + 8], 1
	jmp .jump162
.jump163: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for h
	sub rsp, 8 ; Align stack
	mov rax, [rel const42] ; 87.54
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump174
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump174:
	; Computing bound for g
	mov rax, [rel const5] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump175
	mov rax, [rel const43] ; 910
	push rax
	jmp .jump176
.jump175:
	mov rax, [rel const44] ; 529
	push rax
.jump176:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump177
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump177:
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump178
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump178:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
.jump179: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump181 ; If h >= bound, ...
	mov qword [rsp + 16], 0 ; h = 0
	add qword [rsp + 8], 1 ; g++
.jump181:
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump182 ; If g >= bound, ...
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
.jump182:
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump180 ; If f >= bound, break
.jump183:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment h
	add qword [rsp + 16], 1
	jmp .jump179
.jump180: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump184
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
.jump184:
	cmp rax, [rsp + 16]
	jl .jump185
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
.jump185:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump186
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
.jump186:
	cmp rax, [rsp + 24]
	jl .jump187
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
.jump187:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 24
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump157
.jump156:
	mov rax, [rel const14] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump188
	sub rsp, 8 ; Align stack
	call _e
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
.jump188:
	push rax
	pop rax
	cmp rax, 0
	je .jump189
	sub rsp, 8 ; Align stack
	call _e
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
.jump189:
	push rax
	pop rax
	cmp rax, 0
	je .jump190
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for g
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump192
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump192:
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump193
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump193:
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump194
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump194:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
.jump195: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump197 ; If h >= bound, ...
	mov qword [rsp + 16], 0 ; h = 0
	add qword [rsp + 8], 1 ; g++
.jump197:
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump198 ; If g >= bound, ...
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
.jump198:
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump196 ; If f >= bound, break
.jump199:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment h
	add qword [rsp + 16], 1
	jmp .jump195
.jump196: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump200
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump200:
	; Computing bound for f
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump201
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump201:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize f to 0
	mov rax, 0
	push rax
.jump202: ; Begin body of loop
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump203 ; If f >= bound, break
.jump204:
	; Compute loop body
	mov rax, [rel const45] ; 98
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment f
	add qword [rsp + 0], 1
	jmp .jump202
.jump203: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump205
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump205:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
imul rdi, [rsp + 0 + 0] ; multiply by (sum[f : d] 98)
	jno .jump206
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump206:
imul rdi, [rsp + 0 + 8] ; multiply by (sum[f : b, g : b, h : argnum] b)
	jno .jump207
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump207:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
.jump208: ; Begin body of loop
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump210 ; If g >= bound, ...
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
.jump210:
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump209 ; If f >= bound, break
.jump211:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment g
	add qword [rsp + 8], 1
	jmp .jump208
.jump209: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump191
.jump190:
	mov rax, [rel const5] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump212
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for g
	mov rax, [rel const46] ; 510
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump214
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump214:
	; Computing bound for f
	mov rax, [rel const47] ; 341
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump215
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump215:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by 341
	jno .jump216
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump216:
	imul rdi, [rsp + 0 + 8] ; multiply by 510
	jno .jump217
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump217:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
.jump218: ; Begin body of loop
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump220 ; If g >= bound, ...
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
.jump220:
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump219 ; If f >= bound, break
.jump221:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment g
	add qword [rsp + 8], 1
	jmp .jump218
.jump219: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump213
.jump212:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump222
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump222:
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump223
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump223:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by c
	jno .jump224
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump224:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump225
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump225:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
.jump226: ; Begin body of loop
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump228 ; If g >= bound, ...
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
.jump228:
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump227 ; If f >= bound, break
.jump229:
	; Compute loop body
	mov rax, [rel const48] ; 334
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment g
	add qword [rsp + 8], 1
	jmp .jump226
.jump227: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump213:
.jump191:
.jump157:
	jmp .jump153
.jump152:
	sub rsp, 8 ; Align stack
	call _e
	add rsp, 8 ; Remove alignment
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	pop rax
	cmp rax, 0
	je .jump230
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump232
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump232:
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump233
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump233:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by c
	jno .jump234
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump234:
	imul rdi, [rsp + 0 + 8] ; multiply by d
	jno .jump235
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump235:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
.jump236: ; Begin body of loop
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump238 ; If g >= bound, ...
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
.jump238:
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump237 ; If f >= bound, break
.jump239:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment g
	add qword [rsp + 8], 1
	jmp .jump236
.jump237: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump231
.jump230:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump240
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump240:
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump241
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump241:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by d
	jno .jump242
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump242:
	imul rdi, [rsp + 0 + 8] ; multiply by c
	jno .jump243
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump243:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
.jump244: ; Begin body of loop
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump246 ; If g >= bound, ...
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
.jump246:
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump245 ; If f >= bound, break
.jump247:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment g
	add qword [rsp + 8], 1
	jmp .jump244
.jump245: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump231:
	; Moving 24 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 16]
		mov [rsp + 0 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
.jump153:
	mov rax, [rel const14] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump248
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump249
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump249:
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump250
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump250:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump251
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump251:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
.jump252: ; Begin body of loop
	; Compare k to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump254 ; If k >= bound, ...
	mov qword [rsp + 16], 0 ; k = 0
	add qword [rsp + 8], 1 ; j++
.jump254:
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump255 ; If j >= bound, ...
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
.jump255:
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump253 ; If i >= bound, break
.jump256:
	; Compute loop body
	mov rax, [rel const49] ; 62.01
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 48] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment k
	add qword [rsp + 16], 1
	jmp .jump252
.jump253: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump257
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump257:
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump258
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump258:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump259
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump259:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
.jump260: ; Begin body of loop
	; Compare k to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump262 ; If k >= bound, ...
	mov qword [rsp + 16], 0 ; k = 0
	add qword [rsp + 8], 1 ; j++
.jump262:
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump263 ; If j >= bound, ...
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
.jump263:
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump261 ; If i >= bound, break
.jump264:
	; Compute loop body
	mov rax, [rel const50] ; 82.14
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 48] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment k
	add qword [rsp + 16], 1
	jmp .jump260
.jump261: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump265
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump265:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump266
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump266:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
.jump267: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump269 ; If j >= bound, ...
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
.jump269:
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump268 ; If i >= bound, break
.jump270:
	; Compute loop body
	mov rax, [rel const51] ; 35.46
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 32] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 32], xmm0 ; Save sum
	; Increment j
	add qword [rsp + 8], 1
	jmp .jump267
.jump268: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
.jump248:
	push rax
	pop rax
	cmp rax, 0
	je .jump271
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rdi, 8
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	sub rsp, 32
	; Moving 32 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 40 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 40 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const52] ; 86.07
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	sub rsp, 8
	movsd [rsp], xmm0
	; Moving 16 bytes from rsp + 40 to rsp + 40
		mov r10, [rsp + 40 + 8]
		mov [rsp + 40 + 8], r10
		mov r10, [rsp + 40 + 0]
		mov [rsp + 40 + 0], r10
	add rsp, 40
	jmp .jump272
.jump271:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for k
	sub rsp, 8 ; Align stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump273
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump273:
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump274
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump274:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump275
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump275:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
.jump276: ; Begin body of loop
	; Compare k to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump278 ; If k >= bound, ...
	mov qword [rsp + 16], 0 ; k = 0
	add qword [rsp + 8], 1 ; j++
.jump278:
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump279 ; If j >= bound, ...
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
.jump279:
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump277 ; If i >= bound, break
.jump280:
	; Compute loop body
	mov rax, [rel const53] ; 40.03
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 48] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment k
	add qword [rsp + 16], 1
	jmp .jump276
.jump277: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump281
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump281:
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump282
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump282:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump283
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump283:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof {int[]}
	imul rdi, [rsp + 0 + 0] ; multiply by g
	jno .jump284
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump284:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump285
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump285:
imul rdi, [rsp + 0 + 16] ; multiply by to_int((sum[i : h, j : h, k : argnum] 40.03))
	jno .jump286
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump286:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
.jump287: ; Begin body of loop
	; Compare k to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump289 ; If k >= bound, ...
	mov qword [rsp + 16], 0 ; k = 0
	add qword [rsp + 8], 1 ; j++
.jump289:
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump290 ; If j >= bound, ...
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
.jump290:
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump288 ; If i >= bound, break
.jump291:
	; Compute loop body
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 16
	add rax, [rsp + 64]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment k
	add qword [rsp + 16], 1
	jmp .jump287
.jump288: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	mov rax, [rel const54] ; 35.2
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	sub rsp, 8 ; Align stack
	mov rax, [rel const55] ; 91.19
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const14] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump292
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump294
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump294:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump295
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump295:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
.jump296: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump298 ; If j >= bound, ...
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
.jump298:
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump297 ; If i >= bound, break
.jump299:
	; Compute loop body
	mov rax, [rel const56] ; 541
	push rax
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment j
	add qword [rsp + 8], 1
	jmp .jump296
.jump297: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	jmp .jump293
.jump292:
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
.jump293:
	pop rax
	pop r10
	sub rax, r10
	push rax
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for k
	mov rax, [rel const57] ; 3
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump300
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; divide by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump300:
	cqo
	idiv r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump301
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump301:
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump302
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump302:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump303
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump303:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
.jump304: ; Begin body of loop
	; Compare k to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump306 ; If k >= bound, ...
	mov qword [rsp + 16], 0 ; k = 0
	add qword [rsp + 8], 1 ; j++
.jump306:
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump307 ; If j >= bound, ...
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
.jump307:
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump305 ; If i >= bound, break
.jump308:
	; Compute loop body
	mov rax, [rel const58] ; 685
	push rax
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment k
	add qword [rsp + 16], 1
	jmp .jump304
.jump305: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump309
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump309:
	cmp rax, [rsp + 24]
	jl .jump310
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump310:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump311
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump311:
	cmp rax, [rsp + 32]
	jl .jump312
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump312:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump313
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump313:
	cmp rax, [rsp + 40]
	jl .jump314
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump314:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 16
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump272:
	sub rsp, 8 ; Align stack
	sub rsp, 8 ; Align stack
	call _e
	add rsp, 8 ; Remove alignment
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump336
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump338
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump338:
	; Computing bound for l
	sub rsp, 24
	; Moving 24 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 64 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump339
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
.jump339:
	cmp rax, [rsp + 16]
	jl .jump340
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
.jump340:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump341
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
.jump341:
	cmp rax, [rsp + 24]
	jl .jump342
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
.jump342:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump343
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump343:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof {float,float,float,float}
	imul rdi, [rsp + 0 + 0] ; multiply by f[b, g]
	jno .jump344
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump344:
	imul rdi, [rsp + 0 + 8] ; multiply by (g - (argnum + argnum))
	jno .jump345
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump345:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump346: ; Begin body of loop
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump348 ; If m >= bound, ...
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
.jump348:
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump347 ; If l >= bound, break
.jump349:
	; Compute loop body
	call _e
	push rax
	pop rax
	cmp rax, 0
	je .jump350
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump352
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump352:
	; Computing bound for n
	mov rax, [rel const60] ; 304
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump353
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump353:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
.jump354: ; Begin body of loop
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump356 ; If o >= bound, ...
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
.jump356:
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump355 ; If n >= bound, break
.jump357:
	; Compute loop body
	mov rax, [rel const61] ; 73.85
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 32] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 32], xmm0 ; Save sum
	; Increment o
	add qword [rsp + 8], 1
	jmp .jump354
.jump355: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	jmp .jump351
.jump350:
	mov rax, [rel const62] ; 88.14
	push rax
.jump351:
	sub rsp, 8 ; Align stack
	mov rax, [rel const63] ; 69.7
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump358
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump358:
	; Computing bound for n
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump359
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump359:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
.jump360: ; Begin body of loop
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump361 ; If n >= bound, break
.jump362:
	; Compute loop body
	mov rax, [rel const64] ; 418
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment n
	add qword [rsp + 0], 1
	jmp .jump360
.jump361: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump363
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump363:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
.jump364: ; Begin body of loop
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump366 ; If o >= bound, ...
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
.jump366:
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump365 ; If n >= bound, break
.jump367:
	; Compute loop body
	mov rax, [rel const65] ; 23.3
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 32] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 32], xmm0 ; Save sum
	; Increment o
	add qword [rsp + 8], 1
	jmp .jump364
.jump365: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	sub rsp, 8 ; Align stack
	mov rax, [rel const66] ; 18.21
	push rax
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump368
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump368:
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump369
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump369:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
.jump370: ; Begin body of loop
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump372 ; If o >= bound, ...
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
.jump372:
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump371 ; If n >= bound, break
.jump373:
	; Compute loop body
	mov rax, [rel const67] ; 56.47
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 32] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 32], xmm0 ; Save sum
	; Increment o
	add qword [rsp + 8], 1
	jmp .jump370
.jump371: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 32
	add rax, [rsp + 64]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment m
	add qword [rsp + 8], 1
	jmp .jump346
.jump347: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump337
.jump336:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump374
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump374:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump375
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump375:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof {float,float,float,float}
	imul rdi, [rsp + 0 + 0] ; multiply by c
	jno .jump376
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump376:
	imul rdi, [rsp + 0 + 8] ; multiply by (- d)
	jno .jump377
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump377:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump378: ; Begin body of loop
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump380 ; If m >= bound, ...
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
.jump380:
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump379 ; If l >= bound, break
.jump381:
	; Compute loop body
	mov rax, [rel const68] ; 2.62
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const69] ; 87.15
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 32
	; Moving 32 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 40 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 40 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump382
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
.jump382:
	cmp rax, [rsp + 24]
	jl .jump383
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
.jump383:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump384
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
.jump384:
	cmp rax, [rsp + 32]
	jl .jump385
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
.jump385:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump386
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
.jump386:
	cmp rax, [rsp + 40]
	jl .jump387
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
.jump387:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for p
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump388
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump388:
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump389
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump389:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
.jump390: ; Begin body of loop
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump392 ; If o >= bound, ...
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
.jump392:
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump391 ; If n >= bound, break
.jump393:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment o
	add qword [rsp + 8], 1
	jmp .jump390
.jump391: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump394
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump394:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump395
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump395:
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump396
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump396:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
.jump397: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump399 ; If p >= bound, ...
	mov qword [rsp + 16], 0 ; p = 0
	add qword [rsp + 8], 1 ; o++
.jump399:
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump400 ; If o >= bound, ...
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
.jump400:
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump398 ; If n >= bound, break
.jump401:
	; Compute loop body
	mov rax, [rel const70] ; 98.4
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 48] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment p
	add qword [rsp + 16], 1
	jmp .jump397
.jump398: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	sub rsp, 8 ; Align stack
	mov rax, [rel const71] ; 31.56
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 32
	add rax, [rsp + 64]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment m
	add qword [rsp + 8], 1
	jmp .jump378
.jump379: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump337:
	lea rdi, [rel const72] ; l.png
	call _write_image
	add rsp, 24
	add rsp, 8 ; Remove alignment
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for m
	mov rax, [rel const73] ; 70
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump402
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump402:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump403
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump403:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof bool[,,]
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump404
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump404:
	imul rdi, [rsp + 0 + 8] ; multiply by 70
	jno .jump405
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump405:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump406: ; Begin body of loop
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump408 ; If m >= bound, ...
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
.jump408:
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump407 ; If l >= bound, break
.jump409:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for p
	mov rax, [rel const74] ; 708
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump410
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump410:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump411
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump411:
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump412
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump412:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by j
	jno .jump413
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump413:
	imul rdi, [rsp + 0 + 8] ; multiply by b
	jno .jump414
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump414:
	imul rdi, [rsp + 0 + 16] ; multiply by 708
	jno .jump415
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump415:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
.jump416: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump418 ; If p >= bound, ...
	mov qword [rsp + 16], 0 ; p = 0
	add qword [rsp + 8], 1 ; o++
.jump418:
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump419 ; If o >= bound, ...
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
.jump419:
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump417 ; If n >= bound, break
.jump420:
	; Compute loop body
	call _e
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment p
	add qword [rsp + 16], 1
	jmp .jump416
.jump417: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 32
	add rax, [rsp + 64]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment m
	add qword [rsp + 8], 1
	jmp .jump406
.jump407: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump421
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump421:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize l to 0
	mov rax, 0
	push rax
.jump422: ; Begin body of loop
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump423 ; If l >= bound, break
.jump424:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 144 to rsp
		mov r10, [rbp - 144 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment l
	add qword [rsp + 0], 1
	jmp .jump422
.jump423: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump425
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
.jump425:
	cmp rax, [rsp + 8]
	jl .jump426
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
.jump426:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const75] ; 799
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump427
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump429
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump429:
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump430
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump430:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump431
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump431:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump432: ; Begin body of loop
	; Compare n to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump434 ; If n >= bound, ...
	mov qword [rsp + 16], 0 ; n = 0
	add qword [rsp + 8], 1 ; m++
.jump434:
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump435 ; If m >= bound, ...
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
.jump435:
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump433 ; If l >= bound, break
.jump436:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment n
	add qword [rsp + 16], 1
	jmp .jump432
.jump433: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	jmp .jump428
.jump427:
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
.jump428:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump437
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump437:
	cmp rax, [rsp + 16]
	jl .jump438
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump438:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump439
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump439:
	cmp rax, [rsp + 24]
	jl .jump440
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump440:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 32
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 32
	; Moving 32 bytes from rax to rsp
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump441
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump441:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize l to 0
	mov rax, 0
	push rax
.jump442: ; Begin body of loop
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump443 ; If l >= bound, break
.jump444:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment l
	add qword [rsp + 0], 1
	jmp .jump442
.jump443: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump445
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump445:
	cmp rax, [rsp + 24]
	jl .jump446
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump446:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump447
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump447:
	cmp rax, [rsp + 32]
	jl .jump448
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump448:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump449
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump449:
	cmp rax, [rsp + 40]
	jl .jump450
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump450:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump451
	mov rax, [rel const76] ; 251
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump453
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	jmp .jump454
.jump453:
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
.jump454:
	mov rax, [rel const5] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump455
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	jmp .jump456
.jump455:
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
.jump456:
	mov rdi, 16
	call _jpl_alloc
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
	mov rax, [rel const77] ; 937
	push rax
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump457
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump457:
	cmp rax, [rsp + 8]
	jl .jump458
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump458:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump452
.jump451:
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	mov rax, [rel const5] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	mov rdi, 16
	call _jpl_alloc
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump459
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump459:
	cmp rax, [rsp + 8]
	jl .jump460
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump460:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump461
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump463
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump463:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump464
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump464:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof {int}
	imul rdi, [rsp + 0 + 0] ; multiply by (- d)
	jno .jump465
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump465:
	imul rdi, [rsp + 0 + 8] ; multiply by (- h)
	jno .jump466
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump466:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump467: ; Begin body of loop
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump469 ; If m >= bound, ...
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
.jump469:
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump468 ; If l >= bound, break
.jump470:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment m
	add qword [rsp + 8], 1
	jmp .jump467
.jump468: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump471
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump471:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump472
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump472:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump473: ; Begin body of loop
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump475 ; If m >= bound, ...
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
.jump475:
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump474 ; If l >= bound, break
.jump476:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment m
	add qword [rsp + 8], 1
	jmp .jump473
.jump474: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump477
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump477:
	cmp rax, [rsp + 16]
	jl .jump478
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump478:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump479
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump479:
	cmp rax, [rsp + 24]
	jl .jump480
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump480:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump462
.jump461:
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
.jump462:
.jump452:
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for o
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for o
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump481
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump481:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
.jump482: ; Begin body of loop
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump483 ; If n >= bound, break
.jump484:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment n
	add qword [rsp + 0], 1
	jmp .jump482
.jump483: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump485
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump485:
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump486
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump486:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
.jump487: ; Begin body of loop
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump489 ; If o >= bound, ...
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
.jump489:
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump488 ; If n >= bound, break
.jump490:
	; Compute loop body
	mov rax, [rel const78] ; 948
	push rax
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment o
	add qword [rsp + 8], 1
	jmp .jump487
.jump488: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump491
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump491:
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump492
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump492:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof bool[]
	imul rdi, [rsp + 0 + 0] ; multiply by d
	jno .jump493
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump493:
imul rdi, [rsp + 0 + 8] ; multiply by (sum[n : c, o : (sum[n : d] h)] 948)
	jno .jump494
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump494:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
.jump495: ; Begin body of loop
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump497 ; If o >= bound, ...
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
.jump497:
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump496 ; If n >= bound, break
.jump498:
	; Compute loop body
	mov rax, [rel const5] ; False
	push rax
	mov rax, [rel const14] ; True
	push rax
	sub rsp, 8 ; Align stack
	call _e
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	cmp rax, 0
	je .jump499
	sub rsp, 8 ; Align stack
	call _e
	add rsp, 8 ; Remove alignment
	push rax
	jmp .jump500
.jump499:
	mov rax, [rel const5] ; False
	push rax
.jump500:
	mov rdi, 24
	call _jpl_alloc
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	push rax
	mov rax, 3
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 16
	add rax, [rsp + 48]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment o
	add qword [rsp + 8], 1
	jmp .jump495
.jump496: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	; Moving 24 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 64 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 24 to rsp + 24
		mov r10, [rsp + 24 + 0]
		mov [rsp + 24 + 0], r10
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rdi, 16
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump501
	sub rsp, 8 ; Align stack
	lea rdi, [rel const79] ; mod by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump501:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump502
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
.jump502:
	cmp rax, [rsp + 8]
	jl .jump503
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
.jump503:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump504
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump504:
	cmp rax, [rsp + 16]
	jl .jump505
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump505:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump506
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump506:
	cmp rax, [rsp + 24]
	jl .jump507
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump507:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 16
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump508
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump508:
	; Computing bound for n
	mov rax, [rel const80] ; 672
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump509
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump509:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by 672
	jno .jump510
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump510:
	imul rdi, [rsp + 0 + 8] ; multiply by b
	jno .jump511
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump511:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
.jump512: ; Begin body of loop
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump514 ; If o >= bound, ...
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
.jump514:
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump513 ; If n >= bound, break
.jump515:
	; Compute loop body
	sub rsp, 8 ; Align stack
	call _e
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	xor rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment o
	add qword [rsp + 8], 1
	jmp .jump512
.jump513: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const81] ; 684
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump516
	lea rdi, [rel const9] ; divide by zero
	call _fail_assertion
.jump516:
	cqo
	idiv r10
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump517
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump517:
	cmp rax, [rsp + 16]
	jl .jump518
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump518:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump519
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump519:
	cmp rax, [rsp + 24]
	jl .jump520
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump520:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump521
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	jmp .jump522
.jump521:
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
.jump522:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump523
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump523:
	cmp rax, [rsp + 8]
	jl .jump524
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump524:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	jne .jump525
	lea rdi, [rel const82] ; n
	call _fail_assertion
.jump525:
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const5] ; False
	push rax
	pop rax
	cmp rax, 0
	jne .jump598
	mov rax, [rel const5] ; False
	push rax
	pop rax
.jump598:
	push rax
	mov rax, [rel const87] ; 55.33
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	sub rsp, 8
	movsd [rsp], xmm0
	; Moving 16 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 8]
		mov [rsp + 8 + 8], r10
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	; Moving 8 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	pop rax
	cmp rax, 0
	jne .jump599
	lea rdi, [rel const88] ; o
	call _fail_assertion
.jump599:
	mov rax, [rel const14] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump600
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump602
	jmp .jump603
.jump602:
	mov rax, [rel const14] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump604
	mov rax, [rel const14] ; True
	push rax
	pop rax
.jump604:
	push rax
	pop rax
	cmp rax, 0
	jne .jump605
	mov rax, [rel const14] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump606
	call _e
	push rax
	pop rax
.jump606:
	push rax
	pop rax
.jump605:
	push rax
	pop rax
	cmp rax, 0
	je .jump607
	call _e
	push rax
	pop rax
	cmp rax, 0
	je .jump609
	jmp .jump610
.jump609:
.jump610:
	jmp .jump608
.jump607:
.jump608:
.jump603:
	jmp .jump601
.jump600:
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for p
	mov rax, [rel const89] ; 122
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump611
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump611:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump612
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump612:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by h
	jno .jump613
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump613:
	imul rdi, [rsp + 0 + 8] ; multiply by 122
	jno .jump614
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump614:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
.jump615: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump617 ; If p >= bound, ...
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
.jump617:
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump616 ; If o >= bound, break
.jump618:
	; Compute loop body
	sub rsp, 8 ; Align stack
	call _e
	add rsp, 8 ; Remove alignment
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment p
	add qword [rsp + 8], 1
	jmp .jump615
.jump616: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rax, [rel const5] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump619
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	jmp .jump620
.jump619:
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
.jump620:
	call _e
	push rax
	pop rax
	cmp rax, 0
	je .jump621
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump622
.jump621:
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
.jump622:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump623
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump623:
	cmp rax, [rsp + 16]
	jl .jump624
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump624:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump625
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump625:
	cmp rax, [rsp + 24]
	jl .jump626
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump626:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for q
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump627
	lea rdi, [rel const79] ; mod by zero
	call _fail_assertion
.jump627:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump628
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump628:
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump629
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump629:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump630
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump630:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof int[]
	imul rdi, [rsp + 0 + 0] ; multiply by g
	jno .jump631
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump631:
	imul rdi, [rsp + 0 + 8] ; multiply by g
	jno .jump632
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump632:
	imul rdi, [rsp + 0 + 16] ; multiply by (c % g)
	jno .jump633
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump633:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize q to 0
	mov rax, 0
	push rax
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
.jump634: ; Begin body of loop
	; Compare q to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump636 ; If q >= bound, ...
	mov qword [rsp + 16], 0 ; q = 0
	add qword [rsp + 8], 1 ; p++
.jump636:
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump637 ; If p >= bound, ...
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
.jump637:
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump635 ; If o >= bound, break
.jump638:
	; Compute loop body
	mov rax, [rel const14] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump639
	sub rsp, 16
	; Moving 16 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	jmp .jump640
.jump639:
	sub rsp, 16
	; Moving 16 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
.jump640:
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 16
	add rax, [rsp + 64]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment q
	add qword [rsp + 16], 1
	jmp .jump634
.jump635: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump641
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump641:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump642
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump642:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump643
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump643:
	imul rdi, [rsp + 0 + 8] ; multiply by (- j)
	jno .jump644
	lea rdi, [rel const11] ; overflow computing array size
	call _fail_assertion
.jump644:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
.jump645: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump647 ; If p >= bound, ...
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
.jump647:
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump646 ; If o >= bound, break
.jump648:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 184 to rsp
		mov r10, [rbp - 184 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment p
	add qword [rsp + 8], 1
	jmp .jump645
.jump646: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 32
	; Moving 32 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 40 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 40 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	call _k
	add rsp, 32
	add rsp, 24
	add rsp, 48
	add rsp, 8 ; Remove alignment
.jump601:
	add rsp, 88 ; Local variables
	pop r12
	pop rbp
	ret

