global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 6.4
const1: db `non-positive loop bound`, 0
const2: dq 975
const3: dq 50
const4: db `overflow computing array size`, 0
const5: dq 22
const6: db `divide by zero`, 0
const7: dq 692
const8: dq 920
const9: db `negative array index`, 0
const10: db `index too large`, 0
const11: dq 73.42
const12: dq 1.7
const13: dq 1
const14: dq 860
const15: dq 0
const16: dq 61.91
const17: db `b.png`, 0
const18: dq 672
const19: dq 743
const20: dq 803
const21: dq 907
const22: dq 894
const23: db `mod by zero`, 0
const24: dq 602
const25: dq 568
const26: dq 23.2
const27: dq 389
const28: dq 304
const29: dq 263
const30: dq 864
const31: dq 663
const32: dq 23.57
const33: dq 718
const34: dq 373
const35: dq 565
const36: dq 191
const37: dq 930
const38: dq 26.55
const39: dq 69.8
const40: dq 7.54
const41: dq 52.82
const42: dq 48.29
const43: dq 11.77
const44: dq 65.75
const45: dq 940
const46: db `i.png`, 0
const47: dq 2.89
const48: dq 37.83
const49: dq 47.02
const50: dq 97.3
const51: dq 90
const52: dq 688
const53: dq 482
const54: dq 7.44
const55: dq 74
const56: dq 238
const57: dq 131
const58: dq 886
const59: dq 746
const60: dq 27.24
const61: dq 502
const62: dq 511
const63: dq 60.6
const64: dq 405
const65: dq 36.64
const66: db `n`, 0
const67: dq 88.52
const68: dq 67.33
const69: dq 956

section .text
i:
_i:
	push rbp
	mov rbp, rsp
	push rdi
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump156
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump156:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump157
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump157:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof {bool,{}}
	imul rdi, [rsp + 0 + 0] ; multiply by g
	jno .jump158
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump158:
	imul rdi, [rsp + 0 + 8] ; multiply by b
	jno .jump159
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump159:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump160: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment m
	add qword [rsp + 8], 1
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump160 ; If m < bound, next iter
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump160 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for n
	mov rax, [rel const13] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump161
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	jmp .jump162
.jump161:
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
.jump162:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump163
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump163:
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump164
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump164:
	; Computing bound for l
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump165
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump165:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump166
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump166:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump167: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment m
	add qword [rsp + 8], 1
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump167 ; If m < bound, next iter
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump167 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump168
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump168:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
imul rdi, [rsp + 0 + 0] ; multiply by (sum[l : f, m : f] d)
	jno .jump169
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump169:
	imul rdi, [rsp + 0 + 8] ; multiply by b
	jno .jump170
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump170:
	imul rdi, [rsp + 0 + 16] ; multiply by (if true then b else f)
	jno .jump171
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump171:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump172: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment n
	add qword [rsp + 16], 1
	; Compare n to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump172 ; If n < bound, next iter
	mov qword [rsp + 16], 0 ; n = 0
	add qword [rsp + 8], 1 ; m++
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump172 ; If m < bound, next iter
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump172 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump173
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump173:
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump174
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump174:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump175
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump175:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump176: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment n
	add qword [rsp + 16], 1
	; Compare n to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump176 ; If n < bound, next iter
	mov qword [rsp + 16], 0 ; n = 0
	add qword [rsp + 8], 1 ; m++
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump176 ; If m < bound, next iter
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump176 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const47] ; 2.89
	push rax
	mov rax, [rel const48] ; 37.83
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump177
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump179
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump179:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize l to 0
	mov rax, 0
	push rax
.jump180: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment l
	add qword [rsp + 0], 1
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump180 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	jmp .jump178
.jump177:
	sub rsp, 8 ; Align stack
	mov rax, [rel const49] ; 47.02
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
.jump178:
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump181
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump181:
	cmp rax, [rsp + 24]
	jl .jump182
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump182:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump183
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump183:
	cmp rax, [rsp + 32]
	jl .jump184
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump184:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump185
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump185:
	cmp rax, [rsp + 40]
	jl .jump186
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump186:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump187
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump187:
	cmp rax, [rsp + 16]
	jl .jump188
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump188:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump189
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump189:
	cmp rax, [rsp + 24]
	jl .jump190
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump190:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Moving 0 bytes from rsp + 8 to rsp + 8
	add rsp, 8
	sub rsp, 24
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for l
	sub rsp, 8 ; Align stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump191
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump191:
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump192
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump192:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump193
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump193:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by b
	jno .jump194
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump194:
	imul rdi, [rsp + 0 + 8] ; multiply by g
	jno .jump195
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump195:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump196
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump196:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump197: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const50] ; 97.3
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment n
	add qword [rsp + 16], 1
	; Compare n to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump197 ; If n < bound, next iter
	mov qword [rsp + 16], 0 ; n = 0
	add qword [rsp + 8], 1 ; m++
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump197 ; If m < bound, next iter
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump197 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const15] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump198
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	jmp .jump199
.jump198:
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
.jump199:
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump200
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump200:
	cmp rax, [rsp + 24]
	jl .jump201
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump201:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump202
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump202:
	cmp rax, [rsp + 32]
	jl .jump203
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump203:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump204
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump204:
	cmp rax, [rsp + 40]
	jl .jump205
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump205:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump206
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump206:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
imul rdi, [rsp + 0 + 0] ; multiply by to_int((array[l : b, m : g, n : argnum] 97.3)[g, (if false then d else argnum), k])
	jno .jump207
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump207:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize l to 0
	mov rax, 0
	push rax
.jump208: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump209
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump209:
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump210
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump210:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by l
	jno .jump211
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump211:
	imul rdi, [rsp + 0 + 8] ; multiply by h
	jno .jump212
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump212:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
	; Initialize m to 0
	mov rax, 0
	push rax
.jump213: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const51] ; 90
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment n
	add qword [rsp + 8], 1
	; Compare n to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump213 ; If n < bound, next iter
	mov qword [rsp + 8], 0 ; n = 0
	add qword [rsp + 0], 1 ; m++
	; Compare m to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump213 ; If m < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rax, [rel const52] ; 688
	push rax
	mov rax, [rel const53] ; 482
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump214
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump214:
	cmp rax, [rsp + 16]
	jl .jump215
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump215:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump216
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump216:
	cmp rax, [rsp + 24]
	jl .jump217
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump217:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment l
	add qword [rsp + 0], 1
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump208 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	lea rdi, [rsp + 16]
	call _i
	add rsp, 16
	mov rax, [rbp - 8] ; Address to write return value into
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32 ; Local variables
	pop rbp
	ret
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for m
	mov rax, [rel const13] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump218
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump220
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump220:
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump221
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump221:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump222
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump222:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by k
	jno .jump223
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump223:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump224
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump224:
	imul rdi, [rsp + 0 + 16] ; multiply by b
	jno .jump225
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump225:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump226: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const15] ; False
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment n
	add qword [rsp + 16], 1
	; Compare n to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump226 ; If n < bound, next iter
	mov qword [rsp + 16], 0 ; n = 0
	add qword [rsp + 8], 1 ; m++
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump226 ; If m < bound, next iter
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump226 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump219
.jump218:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump227
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump227:
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump228
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump228:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump229
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump229:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by g
	jno .jump230
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump230:
	imul rdi, [rsp + 0 + 8] ; multiply by b
	jno .jump231
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump231:
	imul rdi, [rsp + 0 + 16] ; multiply by f
	jno .jump232
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump232:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump233: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const15] ; False
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment n
	add qword [rsp + 16], 1
	; Compare n to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump233 ; If n < bound, next iter
	mov qword [rsp + 16], 0 ; n = 0
	add qword [rsp + 8], 1 ; m++
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump233 ; If m < bound, next iter
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump233 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump219:
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	sub rsp, 8 ; Align stack
	mov rax, [rel const54] ; 7.44
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump234
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump234:
	cmp rax, [rsp + 24]
	jl .jump235
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump235:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump236
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump236:
	cmp rax, [rsp + 32]
	jl .jump237
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump237:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump238
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump238:
	cmp rax, [rsp + 40]
	jl .jump239
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump239:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump240
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for m
	mov rax, [rel const13] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump242
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	jmp .jump243
.jump242:
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
.jump243:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump244
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump244:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump245
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump245:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by f
	jno .jump246
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump246:
	imul rdi, [rsp + 0 + 8] ; multiply by (if true then d else k)
	jno .jump247
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump247:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump248: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment m
	add qword [rsp + 8], 1
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump248 ; If m < bound, next iter
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump248 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const13] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump249
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	jmp .jump250
.jump249:
	mov rax, [rel const55] ; 74
	push rax
.jump250:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump251
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump251:
	cmp rax, [rsp + 16]
	jl .jump252
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump252:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump253
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump253:
	cmp rax, [rsp + 24]
	jl .jump254
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump254:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump241
.jump240:
	mov rax, [rel const13] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump255
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	jmp .jump256
.jump255:
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
.jump256:
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump257
	sub rsp, 8 ; Align stack
	lea rdi, [rel const23] ; mod by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump257:
	cqo
	idiv r10
	mov rax, rdx
	push rax
.jump241:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump258
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump258:
	; Computing bound for l
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump259
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump259:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump260
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump260:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump261: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment m
	add qword [rsp + 8], 1
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump261 ; If m < bound, next iter
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump261 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump262
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump262:
	; Computing total size of heap memory to allocate
	mov rdi, 0 ; sizeof {}
imul rdi, [rsp + 0 + 0] ; multiply by (sum[l : f, m : b] m)
	jno .jump263
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump263:
imul rdi, [rsp + 0 + 8] ; multiply by (if (if true then (array[l : k, m : argnum, n : b] false) else (array[l : g, m : b, n : f] false))[to_int(7.44), to_int(acos(a)), {g}{0}] then (array[l : f, m : (if true then d else k)] b)[(if true then (d * argnum) else 74), argnum] else (argnum % (if true then g else g)))
	jno .jump264
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump264:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump265: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for p
	mov rax, [rel const15] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump266
	mov rax, [rel const15] ; False
	push rax
	jmp .jump267
.jump266:
	mov rax, [rel const13] ; True
	push rax
.jump267:
	pop rax
	cmp rax, 0
	je .jump268
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	jmp .jump269
.jump268:
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
.jump269:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump270
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump270:
	; Computing bound for o
	mov rax, [rel const56] ; 238
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump271
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	jmp .jump272
.jump271:
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
.jump272:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump273
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump273:
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump274
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump274:
	; Computing total size of heap memory to allocate
	mov rdi, 0 ; sizeof {}
	imul rdi, [rsp + 0 + 0] ; multiply by (- argnum)
	jno .jump275
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump275:
	imul rdi, [rsp + 0 + 8] ; multiply by (if (d != 238) then f else h)
	jno .jump276
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump276:
	imul rdi, [rsp + 0 + 16] ; multiply by (if (if false then false else true) then f else h)
	jno .jump277
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump277:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
.jump278: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	; Moving 0 bytes from rsp + 16 to rsp + 16
	add rsp, 16
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 0
	add rax, [rsp + 48]
	; Move body (0 bytes) to index
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	; Increment p
	add qword [rsp + 16], 1
	; Compare p to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump278 ; If p < bound, next iter
	mov qword [rsp + 16], 0 ; p = 0
	add qword [rsp + 8], 1 ; o++
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump278 ; If o < bound, next iter
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump278 ; If n < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	mov rax, [rel const57] ; 131
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rel const15] ; False
	push rax
	mov rax, [rel const15] ; False
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Moving 8 bytes from rsp + 8 to rsp + 16
		mov r10, [rsp + 8 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump279
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump279:
	cmp rax, [rsp + 24]
	jl .jump280
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump280:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump281
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump281:
	cmp rax, [rsp + 32]
	jl .jump282
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump282:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump283
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump283:
	cmp rax, [rsp + 40]
	jl .jump284
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump284:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 0
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 0
	; Moving 0 bytes from rax to rsp
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 0
	add rax, [rsp + 32]
	; Move body (0 bytes) to index
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	; Increment m
	add qword [rsp + 8], 1
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump265 ; If m < bound, next iter
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump265 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rax, [rbp - 8] ; Address to write return value into
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 56 ; Local variables
	pop rbp
	ret
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump285
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump285:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump286
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump286:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by b
	jno .jump287
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump287:
	imul rdi, [rsp + 0 + 8] ; multiply by h
	jno .jump288
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump288:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump289: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const58] ; 886
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment m
	add qword [rsp + 8], 1
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump289 ; If m < bound, next iter
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump289 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rel const59] ; 746
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump290
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump290:
	cmp rax, [rsp + 16]
	jl .jump291
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump291:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump292
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump292:
	cmp rax, [rsp + 24]
	jl .jump293
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump293:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump294
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump296
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump296:
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump297
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump297:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump298
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump298:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by b
	jno .jump299
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump299:
	imul rdi, [rsp + 0 + 8] ; multiply by b
	jno .jump300
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump300:
	imul rdi, [rsp + 0 + 16] ; multiply by h
	jno .jump301
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump301:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump302: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment n
	add qword [rsp + 16], 1
	; Compare n to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump302 ; If n < bound, next iter
	mov qword [rsp + 16], 0 ; n = 0
	add qword [rsp + 8], 1 ; m++
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump302 ; If m < bound, next iter
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump302 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump303
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump303:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump304
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump304:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump305: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment m
	add qword [rsp + 8], 1
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump305 ; If m < bound, next iter
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump305 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump306
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump306:
	cmp rax, [rsp + 24]
	jl .jump307
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump307:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump308
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump308:
	cmp rax, [rsp + 32]
	jl .jump309
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump309:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump310
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump310:
	cmp rax, [rsp + 40]
	jl .jump311
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump311:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump312
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump314
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump314:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump315
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump315:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by k
	jno .jump316
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump316:
	imul rdi, [rsp + 0 + 8] ; multiply by b
	jno .jump317
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump317:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump318: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const13] ; True
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment m
	add qword [rsp + 8], 1
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump318 ; If m < bound, next iter
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump318 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump319
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump319:
	cmp rax, [rsp + 16]
	jl .jump320
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump320:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump321
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump321:
	cmp rax, [rsp + 24]
	jl .jump322
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump322:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump323
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rel const60] ; 27.24
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for n
	mov rax, [rel const61] ; 502
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump325
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump325:
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump326
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump326:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump327
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump327:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by k
	jno .jump328
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump328:
	imul rdi, [rsp + 0 + 8] ; multiply by h
	jno .jump329
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump329:
	imul rdi, [rsp + 0 + 16] ; multiply by 502
	jno .jump330
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump330:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump331: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment n
	add qword [rsp + 16], 1
	; Compare n to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump331 ; If n < bound, next iter
	mov qword [rsp + 16], 0 ; n = 0
	add qword [rsp + 8], 1 ; m++
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump331 ; If m < bound, next iter
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump331 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump324
.jump323:
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump332
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump332:
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump333
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump333:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump334
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump334:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by f
	jno .jump335
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump335:
	imul rdi, [rsp + 0 + 8] ; multiply by f
	jno .jump336
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump336:
	imul rdi, [rsp + 0 + 16] ; multiply by h
	jno .jump337
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump337:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump338: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const62] ; 511
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment n
	add qword [rsp + 16], 1
	; Compare n to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump338 ; If n < bound, next iter
	mov qword [rsp + 16], 0 ; n = 0
	add qword [rsp + 8], 1 ; m++
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump338 ; If m < bound, next iter
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump338 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump324:
	jmp .jump313
.jump312:
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const63] ; 60.6
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const13] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump339
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump341
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump341:
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump342
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump342:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump343
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump343:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by g
	jno .jump344
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump344:
	imul rdi, [rsp + 0 + 8] ; multiply by h
	jno .jump345
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump345:
	imul rdi, [rsp + 0 + 16] ; multiply by g
	jno .jump346
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump346:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump347: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 112 to rsp
		mov r10, [rbp - 112 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment n
	add qword [rsp + 16], 1
	; Compare n to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump347 ; If n < bound, next iter
	mov qword [rsp + 16], 0 ; n = 0
	add qword [rsp + 8], 1 ; m++
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump347 ; If m < bound, next iter
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump347 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump340
.jump339:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump348
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump348:
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump349
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump349:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump350
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump350:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by b
	jno .jump351
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump351:
	imul rdi, [rsp + 0 + 8] ; multiply by f
	jno .jump352
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump352:
	imul rdi, [rsp + 0 + 16] ; multiply by h
	jno .jump353
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump353:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump354: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment n
	add qword [rsp + 16], 1
	; Compare n to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump354 ; If n < bound, next iter
	mov qword [rsp + 16], 0 ; n = 0
	add qword [rsp + 8], 1 ; m++
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump354 ; If m < bound, next iter
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump354 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump340:
.jump313:
	jmp .jump295
.jump294:
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const64] ; 405
	push rax
	pop rdi
	call _to_float
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const65] ; 36.64
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump355
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump357
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump357:
	; Computing bound for m
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump358
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump358:
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump359
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump359:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump360
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump360:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump361: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment n
	add qword [rsp + 16], 1
	; Compare n to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump361 ; If n < bound, next iter
	mov qword [rsp + 16], 0 ; n = 0
	add qword [rsp + 8], 1 ; m++
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump361 ; If m < bound, next iter
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump361 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump362
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump362:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump363
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump363:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump364
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump364:
imul rdi, [rsp + 0 + 8] ; multiply by (sum[l : h, m : h, n : d] argnum)
	jno .jump365
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump365:
	imul rdi, [rsp + 0 + 16] ; multiply by g
	jno .jump366
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump366:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump367: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment n
	add qword [rsp + 16], 1
	; Compare n to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump367 ; If n < bound, next iter
	mov qword [rsp + 16], 0 ; n = 0
	add qword [rsp + 8], 1 ; m++
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump367 ; If m < bound, next iter
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump367 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump356
.jump355:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump368
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump368:
	; Computing bound for m
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump369
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump369:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump370
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump370:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by (- b)
	jno .jump371
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump371:
	imul rdi, [rsp + 0 + 8] ; multiply by to_int(a)
	jno .jump372
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump372:
	imul rdi, [rsp + 0 + 16] ; multiply by f
	jno .jump373
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump373:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump374: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment n
	add qword [rsp + 16], 1
	; Compare n to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump374 ; If n < bound, next iter
	mov qword [rsp + 16], 0 ; n = 0
	add qword [rsp + 8], 1 ; m++
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump374 ; If m < bound, next iter
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump374 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump356:
.jump295:
	sub rsp, 24
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rdi, 32
	call _jpl_alloc
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	push rax
	mov rax, 2
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump375
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump375:
	cmp rax, [rsp + 8]
	jl .jump376
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump376:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 16
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	lea rdi, [rsp + 16]
	call _i
	add rsp, 16
	mov rax, [rbp - 8] ; Address to write return value into
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 128 ; Local variables
	pop rbp
	ret

y:
_y:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for H
	mov rax, [rel const15] ; False
	push rax
	mov rax, [rel const15] ; False
	push rax
	mov rdi, 16
	call _jpl_alloc
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 192 to rsp
		mov r10, [r12 - 192 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump412
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump412:
	cmp rax, [rsp + 8]
	jl .jump413
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump413:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump414
	sub rsp, 8
	; Moving 8 bytes from r12 - 192 to rsp
		mov r10, [r12 - 192 + 0]
		mov [rsp + 0], r10
	jmp .jump415
.jump414:
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
.jump415:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump416
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump416:
	; Computing bound for G
	sub rsp, 8
	; Moving 8 bytes from r12 - 160 to rsp
		mov r10, [r12 - 160 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump417
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump417:
	; Computing bound for F
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for G
	sub rsp, 8
	; Moving 8 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump418
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump418:
	; Computing bound for F
	sub rsp, 8
	; Moving 8 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump419
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump419:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize G to 0
	mov rax, 0
	push rax
	; Initialize F to 0
	mov rax, 0
	push rax
.jump420: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment G
	add qword [rsp + 8], 1
	; Compare G to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump420 ; If G < bound, next iter
	mov qword [rsp + 8], 0 ; G = 0
	add qword [rsp + 0], 1 ; F++
	; Compare F to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump420 ; If F < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump421
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump421:
	; Computing total size of heap memory to allocate
	mov rdi, 64 ; sizeof {float[,,],{float,int}[,,]}
imul rdi, [rsp + 0 + 0] ; multiply by (sum[F : m, G : C] d)
	jno .jump422
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump422:
	imul rdi, [rsp + 0 + 8] ; multiply by s
	jno .jump423
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump423:
	imul rdi, [rsp + 0 + 16] ; multiply by (if [false, false][o] then o else (f + g))
	jno .jump424
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump424:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize H to 0
	mov rax, 0
	push rax
	; Initialize G to 0
	mov rax, 0
	push rax
	; Initialize F to 0
	mov rax, 0
	push rax
.jump425: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for K
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump426
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump426:
	; Computing bound for J
	sub rsp, 8
	; Moving 8 bytes from r12 - 160 to rsp
		mov r10, [r12 - 160 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump427
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump427:
	; Computing bound for I
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump428
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump428:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof {float,int}[,,]
	imul rdi, [rsp + 0 + 0] ; multiply by A
	jno .jump429
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump429:
	imul rdi, [rsp + 0 + 8] ; multiply by s
	jno .jump430
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump430:
	imul rdi, [rsp + 0 + 16] ; multiply by G
	jno .jump431
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump431:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize K to 0
	mov rax, 0
	push rax
	; Initialize J to 0
	mov rax, 0
	push rax
	; Initialize I to 0
	mov rax, 0
	push rax
.jump432: ; Begin body of loop
	; Compute loop body
	sub rsp, 32
	; Moving 32 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - -16 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, [rsp + 72] ; No overflow if indices in bounds
	add rax, [rsp + 48]
	imul rax, 32
	add rax, [rsp + 80]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment K
	add qword [rsp + 16], 1
	; Compare K to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump432 ; If K < bound, next iter
	mov qword [rsp + 16], 0 ; K = 0
	add qword [rsp + 8], 1 ; J++
	; Compare J to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump432 ; If J < bound, next iter
	mov qword [rsp + 8], 0 ; J = 0
	add qword [rsp + 0], 1 ; I++
	; Compare I to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump432 ; If I < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	mov rax, [rel const15] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump433
	sub rsp, 8
	; Moving 8 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	jmp .jump434
.jump433:
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
.jump434:
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -48 to rsp
		mov r10, [rbp - -48 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump435
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	jmp .jump436
.jump435:
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
.jump436:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump437
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump437:
	cmp rax, [rsp + 24]
	jl .jump438
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump438:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump439
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump439:
	cmp rax, [rsp + 32]
	jl .jump440
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump440:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump441
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump441:
	cmp rax, [rsp + 40]
	jl .jump442
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump442:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 32
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 32
	; Moving 32 bytes from rax to rsp
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 32
	; Moving 32 bytes from r12 - 104 to rsp
		mov r10, [r12 - 104 + 24]
		mov [rsp + 24], r10
		mov r10, [r12 - 104 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 104 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 88] ; No overflow if indices in bounds
	add rax, [rsp + 64]
	imul rax, [rsp + 96] ; No overflow if indices in bounds
	add rax, [rsp + 72]
	imul rax, [rsp + 104] ; No overflow if indices in bounds
	add rax, [rsp + 80]
	imul rax, 64
	add rax, [rsp + 112]
	; Move body (64 bytes) to index
	; Moving 64 bytes from rsp to rax
		mov r10, [rsp + 56]
		mov [rax + 56], r10
		mov r10, [rsp + 48]
		mov [rax + 48], r10
		mov r10, [rsp + 40]
		mov [rax + 40], r10
		mov r10, [rsp + 32]
		mov [rax + 32], r10
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 64
	; Increment H
	add qword [rsp + 16], 1
	; Compare H to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump425 ; If H < bound, next iter
	mov qword [rsp + 16], 0 ; H = 0
	add qword [rsp + 8], 1 ; G++
	; Compare G to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump425 ; If G < bound, next iter
	mov qword [rsp + 8], 0 ; G = 0
	add qword [rsp + 0], 1 ; F++
	; Compare F to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump425 ; If F < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 192 to rsp
		mov r10, [r12 - 192 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump443
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump443:
	cmp rax, [rsp + 24]
	jl .jump444
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump444:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump445
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump445:
	cmp rax, [rsp + 32]
	jl .jump446
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump446:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump447
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump447:
	cmp rax, [rsp + 40]
	jl .jump448
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump448:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 64
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 64
	; Moving 64 bytes from rax to rsp
		mov r10, [rax + 56]
		mov [rsp + 56], r10
		mov r10, [rax + 48]
		mov [rsp + 48], r10
		mov r10, [rax + 40]
		mov [rsp + 40], r10
		mov r10, [rax + 32]
		mov [rsp + 32], r10
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for P
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump449
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump449:
	; Computing bound for O
	sub rsp, 8
	; Moving 8 bytes from r12 - 112 to rsp
		mov r10, [r12 - 112 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump450
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump450:
	; Computing bound for N
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump451
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump451:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof {}[,]
	imul rdi, [rsp + 0 + 0] ; multiply by d
	jno .jump452
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump452:
	imul rdi, [rsp + 0 + 8] ; multiply by x
	jno .jump453
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump453:
	imul rdi, [rsp + 0 + 16] ; multiply by L
	jno .jump454
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump454:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize P to 0
	mov rax, 0
	push rax
	; Initialize O to 0
	mov rax, 0
	push rax
	; Initialize N to 0
	mov rax, 0
	push rax
.jump455: ; Begin body of loop
	; Compute loop body
	sub rsp, 24
	sub rsp, 8 ; Align stack
	mov rax, [rel const15] ; False
	push rax
	mov rdi, 8
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	lea rdi, [rsp + 24]
	call _i
	add rsp, 16
	add rsp, 8 ; Remove alignment
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 24
	add rax, [rsp + 72]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment P
	add qword [rsp + 16], 1
	; Compare P to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump455 ; If P < bound, next iter
	mov qword [rsp + 16], 0 ; P = 0
	add qword [rsp + 8], 1 ; O++
	; Compare O to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump455 ; If O < bound, next iter
	mov qword [rsp + 8], 0 ; O = 0
	add qword [rsp + 0], 1 ; N++
	; Compare N to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump455 ; If N < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 104 to rsp
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump456
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump456:
	cmp rax, [rsp + 24]
	jl .jump457
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump457:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump458
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump458:
	cmp rax, [rsp + 32]
	jl .jump459
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump459:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump460
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump460:
	cmp rax, [rsp + 40]
	jl .jump461
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump461:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 24
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 32
	; Moving 32 bytes from r12 - 168 to rsp
		mov r10, [r12 - 168 + 24]
		mov [rsp + 24], r10
		mov r10, [r12 - 168 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 168 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 168 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 152 to rsp
		mov r10, [r12 - 152 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 184 to rsp
		mov r10, [r12 - 184 + 0]
		mov [rsp + 0], r10
	; Moving 32 bytes from rsp + 16 to rsp + 16
		mov r10, [rsp + 16 + 24]
		mov [rsp + 16 + 24], r10
		mov r10, [rsp + 16 + 16]
		mov [rsp + 16 + 16], r10
		mov r10, [rsp + 16 + 8]
		mov [rsp + 16 + 8], r10
		mov r10, [rsp + 16 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rbp - -48 to rsp
		mov r10, [rbp - -48 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump462
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const67] ; 88.52
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump464
	mov rax, [rel const15] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump466
	jmp .jump467
.jump466:
.jump467:
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	jmp .jump465
.jump464:
	sub rsp, 8
	; Moving 8 bytes from r12 - 104 to rsp
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
.jump465:
	jmp .jump463
.jump462:
	sub rsp, 8
	; Moving 8 bytes from r12 - 104 to rsp
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump468
	jmp .jump469
.jump468:
	sub rsp, 8
	; Moving 8 bytes from rbp - -48 to rsp
		mov r10, [rbp - -48 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump470
	jmp .jump471
.jump470:
.jump471:
.jump469:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for O
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump472
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump472:
	; Computing bound for N
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump473
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump473:
	; Computing total size of heap memory to allocate
	mov rdi, 0 ; sizeof {}
	imul rdi, [rsp + 0 + 0] ; multiply by B
	jno .jump474
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump474:
	imul rdi, [rsp + 0 + 8] ; multiply by B
	jno .jump475
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump475:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize O to 0
	mov rax, 0
	push rax
	; Initialize N to 0
	mov rax, 0
	push rax
.jump476: ; Begin body of loop
	; Compute loop body
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 0
	add rax, [rsp + 32]
	; Move body (0 bytes) to index
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	; Increment O
	add qword [rsp + 8], 1
	; Compare O to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump476 ; If O < bound, next iter
	mov qword [rsp + 8], 0 ; O = 0
	add qword [rsp + 0], 1 ; N++
	; Compare N to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump476 ; If N < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 104 to rsp
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump477
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump477:
	cmp rax, [rsp + 16]
	jl .jump478
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump478:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump479
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump479:
	cmp rax, [rsp + 24]
	jl .jump480
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump480:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 0
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 0
	; Moving 0 bytes from rax to rsp
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
.jump463:
	sub rsp, 24
	; Moving 24 bytes from r12 - 136 to rsp
		mov r10, [r12 - 136 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 136 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 136 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 160 ; Local variables
	pop rbp
	ret

jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp
	sub rsp, 8 ; Align stack
	mov rax, [rel const0] ; 6.4
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for c
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump1:
	; Computing bound for c
	mov rax, [rel const2] ; 975
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump2
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump2:
	; Computing bound for b
	mov rax, [rel const3] ; 50
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump3
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump3:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by 50
	jno .jump4
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump4:
	imul rdi, [rsp + 0 + 8] ; multiply by 975
	jno .jump5
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump5:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump6
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump6:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump7: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment d
	add qword [rsp + 16], 1
	; Compare d to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump7 ; If d < bound, next iter
	mov qword [rsp + 16], 0 ; d = 0
	add qword [rsp + 8], 1 ; c++
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump7 ; If c < bound, next iter
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump7 ; If b < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const5] ; 22
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump8
	lea rdi, [rel const6] ; divide by zero
	call _fail_assertion
.jump8:
	cqo
	idiv r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for d
	mov rax, [rel const7] ; 692
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump9
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump9:
	; Computing bound for c
	mov rax, [rel const8] ; 920
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump10
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump10:
	; Computing bound for b
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump11
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump11:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump12: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment d
	add qword [rsp + 16], 1
	; Compare d to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump12 ; If d < bound, next iter
	mov qword [rsp + 16], 0 ; d = 0
	add qword [rsp + 8], 1 ; c++
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump12 ; If c < bound, next iter
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump12 ; If b < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump13
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump13:
	cmp rax, [rsp + 24]
	jl .jump14
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump14:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump15
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump15:
	cmp rax, [rsp + 32]
	jl .jump16
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump16:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump17
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump17:
	cmp rax, [rsp + 40]
	jl .jump18
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump18:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump19
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump19:
	; Computing bound for b
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump20
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump20:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof {float,float,float,float}
	imul rdi, [rsp + 0 + 0] ; multiply by (- (- argnum))
	jno .jump21
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump21:
imul rdi, [rsp + 0 + 8] ; multiply by (array[b : 50, c : 975, d : argnum] c)[(sum[b : argnum, c : 920, d : 692] c), argnum, (22 / argnum)]
	jno .jump22
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump22:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump23: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const11] ; 73.42
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const12] ; 1.7
	push rax
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 32
	add rax, [rsp + 64]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment c
	add qword [rsp + 8], 1
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump23 ; If c < bound, next iter
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump23 ; If b < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump24
	mov rax, [rel const13] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump25
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const14] ; 860
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	jmp .jump26
.jump25:
	mov rax, [rel const15] ; False
	push rax
.jump26:
	pop rax
.jump24:
	push rax
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const16] ; 61.91
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Moving 24 bytes from rsp + 16 to rsp + 16
		mov r10, [rsp + 16 + 16]
		mov [rsp + 16 + 16], r10
		mov r10, [rsp + 16 + 8]
		mov [rsp + 16 + 8], r10
		mov r10, [rsp + 16 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	lea rdi, [rel const17] ; b.png
	call _write_image
	add rsp, 24
	add rsp, 8 ; Remove alignment
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for c
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for c
	mov rax, [rel const13] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump27
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump28
.jump27:
	mov rax, [rel const18] ; 672
	push rax
.jump28:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump29
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump29:
	; Computing bound for b
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump30
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump30:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof int[,,]
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump31
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump31:
	imul rdi, [rsp + 0 + 8] ; multiply by (if true then argnum else 672)
	jno .jump32
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump32:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump33: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for f
	mov rax, [rel const19] ; 743
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump34
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump34:
	; Computing bound for e
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump35
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump35:
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump36
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump36:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump37
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump37:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump38
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump38:
	imul rdi, [rsp + 0 + 16] ; multiply by 743
	jno .jump39
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump39:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize f to 0
	mov rax, 0
	push rax
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
.jump40: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment f
	add qword [rsp + 16], 1
	; Compare f to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump40 ; If f < bound, next iter
	mov qword [rsp + 16], 0 ; f = 0
	add qword [rsp + 8], 1 ; e++
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump40 ; If e < bound, next iter
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump40 ; If d < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 32
	add rax, [rsp + 64]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment c
	add qword [rsp + 8], 1
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump33 ; If c < bound, next iter
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump33 ; If b < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rax, [rel const20] ; 803
	push rax
	mov rax, [rel const21] ; 907
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const22] ; 894
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump41
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump41:
	cmp rax, [rsp + 8]
	jl .jump42
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump42:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump43
	sub rsp, 8 ; Align stack
	lea rdi, [rel const23] ; mod by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump43:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump44
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump44:
	cmp rax, [rsp + 16]
	jl .jump45
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump45:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump46
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump46:
	cmp rax, [rsp + 24]
	jl .jump47
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump47:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 32
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 32
	; Moving 32 bytes from rax to rsp
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const24] ; 602
	push rax
	pop rax
	neg rax
	push rax
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump48
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump48:
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump49
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump49:
	; Computing bound for b
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump50
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump50:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump51: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const2] ; 975
	push rax
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment d
	add qword [rsp + 16], 1
	; Compare d to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump51 ; If d < bound, next iter
	mov qword [rsp + 16], 0 ; d = 0
	add qword [rsp + 8], 1 ; c++
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump51 ; If c < bound, next iter
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump51 ; If b < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump52
	mov rax, [rel const25] ; 568
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump54
	sub rsp, 8 ; Align stack
	mov rax, [rel const26] ; 23.2
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	jmp .jump55
.jump54:
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
.jump55:
	jmp .jump53
.jump52:
	mov rax, [rel const13] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump56
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump57
.jump56:
	mov rax, [rel const27] ; 389
	push rax
	pop rax
	neg rax
	push rax
.jump57:
.jump53:
	mov rax, [rel const28] ; 304
	push rax
	mov rax, [rel const29] ; 263
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump58
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump58:
	cmp rax, [rsp + 24]
	jl .jump59
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump59:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump60
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump60:
	cmp rax, [rsp + 32]
	jl .jump61
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump61:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump62
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump62:
	cmp rax, [rsp + 40]
	jl .jump63
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump63:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump64
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump64:
	; Computing bound for b
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for b
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump65
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump65:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof {int}
	imul rdi, [rsp + 0 + 0] ; multiply by (- argnum)
	jno .jump66
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump66:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize b to 0
	mov rax, 0
	push rax
.jump67: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment b
	add qword [rsp + 0], 1
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump67 ; If b < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	mov rax, [rel const30] ; 864
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump68
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump68:
	cmp rax, [rsp + 8]
	jl .jump69
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump69:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	mov rax, [rsp]
	cmp rax, 0
	jg .jump70
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump70:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump71: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const15] ; False
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump72
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump73
.jump72:
	mov rax, [rel const31] ; 663
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setg al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump74
	mov rax, [rel const13] ; True
	push rax
	pop rax
	cmp rax, 0
	jne .jump76
	mov rax, [rel const13] ; True
	push rax
	pop rax
.jump76:
	push rax
	jmp .jump75
.jump74:
	mov rax, [rel const15] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
.jump75:
	pop rax
	cmp rax, 0
	je .jump77
	mov rax, [rel const32] ; 23.57
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 8 to rsp + 16
		mov r10, [rsp + 8 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	jmp .jump78
.jump77:
	mov rax, [rel const33] ; 718
	push rax
.jump78:
.jump73:
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment c
	add qword [rsp + 8], 1
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump71 ; If c < bound, next iter
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump71 ; If b < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for e
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for c
	mov rax, [rel const34] ; 373
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump79
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump79:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
.jump80: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment c
	add qword [rsp + 0], 1
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump80 ; If c < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump81
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump81:
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const13] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump82
	mov rax, [rel const35] ; 565
	push rax
	jmp .jump83
.jump82:
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
.jump83:
	pop rax
	pop r10
	cmp r10, 0
	jne .jump84
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; divide by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump84:
	cqo
	idiv r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump85
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump85:
	; Computing bound for c
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump86
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump86:
	cmp rax, [rsp + 8]
	jl .jump87
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump87:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump88
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump88:
	; Computing total size of heap memory to allocate
	mov rdi, 40 ; sizeof {float,int[],int[]}
	imul rdi, [rsp + 0 + 0] ; multiply by (- args[argnum])
	jno .jump89
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump89:
	imul rdi, [rsp + 0 + 8] ; multiply by ((if true then 565 else b) / argnum)
	jno .jump90
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump90:
imul rdi, [rsp + 0 + 16] ; multiply by (sum[c : 373] (- b))
	jno .jump91
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump91:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump92: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const15] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump93
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump94
.jump93:
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
.jump94:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump95
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump95:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump96
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump96:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize f to 0
	mov rax, 0
	push rax
.jump97: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment f
	add qword [rsp + 0], 1
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump97 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, [rsp + 72] ; No overflow if indices in bounds
	add rax, [rsp + 48]
	imul rax, [rsp + 80] ; No overflow if indices in bounds
	add rax, [rsp + 56]
	imul rax, 40
	add rax, [rsp + 88]
	; Move body (40 bytes) to index
	; Moving 40 bytes from rsp to rax
		mov r10, [rsp + 32]
		mov [rax + 32], r10
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 40
	; Increment e
	add qword [rsp + 16], 1
	; Compare e to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump92 ; If e < bound, next iter
	mov qword [rsp + 16], 0 ; e = 0
	add qword [rsp + 8], 1 ; d++
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump92 ; If d < bound, next iter
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump92 ; If c < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for e
	mov rax, [rel const36] ; 191
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump98
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump98:
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump99
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump99:
	; Computing bound for c
	mov rax, [rel const37] ; 930
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump100
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump100:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by 930
	jno .jump101
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump101:
	imul rdi, [rsp + 0 + 8] ; multiply by b
	jno .jump102
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump102:
	imul rdi, [rsp + 0 + 16] ; multiply by 191
	jno .jump103
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump103:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump104: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 112 to rsp
		mov r10, [rbp - 112 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment e
	add qword [rsp + 16], 1
	; Compare e to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump104 ; If e < bound, next iter
	mov qword [rsp + 16], 0 ; e = 0
	add qword [rsp + 8], 1 ; d++
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump104 ; If d < bound, next iter
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump104 ; If c < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	sub rsp, 8 ; Align stack
	mov rax, [rel const38] ; 26.55
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump105
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump105:
	cmp rax, [rsp + 24]
	jl .jump106
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump106:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump107
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump107:
	cmp rax, [rsp + 32]
	jl .jump108
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump108:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump109
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump109:
	cmp rax, [rsp + 40]
	jl .jump110
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump110:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const15] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump111
	mov rax, [rel const39] ; 69.8
	push rax
	jmp .jump112
.jump111:
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	sub rsp, 8
	movsd [rsp], xmm0
.jump112:
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump113
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump113:
	; Computing bound for c
	mov rax, [rel const15] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump114
	sub rsp, 8 ; Align stack
	mov rax, [rel const40] ; 7.54
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	jmp .jump115
.jump114:
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
.jump115:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump116
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump116:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump117: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment d
	add qword [rsp + 8], 1
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump117 ; If d < bound, next iter
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump117 ; If c < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump118
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump118:
	cmp rax, [rsp + 24]
	jl .jump119
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump119:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump120
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump120:
	cmp rax, [rsp + 32]
	jl .jump121
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump121:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump122
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump122:
	cmp rax, [rsp + 40]
	jl .jump123
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump123:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 40
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 40
	; Moving 40 bytes from rax to rsp
		mov r10, [rax + 32]
		mov [rsp + 32], r10
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Moving 16 bytes from rsp + 8 to rsp + 24
		mov r10, [rsp + 8 + 8]
		mov [rsp + 24 + 8], r10
		mov r10, [rsp + 8 + 0]
		mov [rsp + 24 + 0], r10
	add rsp, 24
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump124
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump124:
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump125
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump125:
	; Computing bound for e
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump126
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump126:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof int[]
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump127
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump127:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump128
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump128:
	imul rdi, [rsp + 0 + 16] ; multiply by d
	jno .jump129
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump129:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
	; Initialize e to 0
	mov rax, 0
	push rax
.jump130: ; Begin body of loop
	; Compute loop body
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 16
	add rax, [rsp + 64]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment g
	add qword [rsp + 16], 1
	; Compare g to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump130 ; If g < bound, next iter
	mov qword [rsp + 16], 0 ; g = 0
	add qword [rsp + 8], 1 ; f++
	; Compare f to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump130 ; If f < bound, next iter
	mov qword [rsp + 8], 0 ; f = 0
	add qword [rsp + 0], 1 ; e++
	; Compare e to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump130 ; If e < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8 ; Align stack
	mov rax, [rel const41] ; 52.82
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Moving 32 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 24]
		mov [rsp + 8 + 24], r10
		mov r10, [rsp + 8 + 16]
		mov [rsp + 8 + 16], r10
		mov r10, [rsp + 8 + 8]
		mov [rsp + 8 + 8], r10
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	; Moving 32 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 24]
		mov [rsp + 0 + 24], r10
		mov r10, [rsp + 0 + 16]
		mov [rsp + 0 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	mov rax, [rel const15] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump131
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for i
	mov rax, [rel const15] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump133
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	jmp .jump134
.jump133:
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
.jump134:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump135
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump135:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof {float,float,float,float}[,]
	imul rdi, [rsp + 0 + 0] ; multiply by (if false then d else g)
	jno .jump136
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump136:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
.jump137: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump138
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump138:
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump139
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump139:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof {float,float,float,float}
	imul rdi, [rsp + 0 + 0] ; multiply by d
	jno .jump140
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump140:
	imul rdi, [rsp + 0 + 8] ; multiply by b
	jno .jump141
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump141:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
.jump142: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const42] ; 48.29
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const43] ; 11.77
	push rax
	mov rax, [rel const44] ; 65.75
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 32
	add rax, [rsp + 64]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment k
	add qword [rsp + 8], 1
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump142 ; If k < bound, next iter
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump142 ; If j < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 24
	add rax, [rsp + 40]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment i
	add qword [rsp + 0], 1
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump137 ; If i < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	jmp .jump132
.jump131:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump143
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump143:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof {float,float,float,float}[,]
	imul rdi, [rsp + 0 + 0] ; multiply by (- b)
	jno .jump144
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump144:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
.jump145: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump146
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump146:
	; Computing bound for j
	mov rax, [rel const45] ; 940
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump147
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump147:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof {float,float,float,float}
	imul rdi, [rsp + 0 + 0] ; multiply by 940
	jno .jump148
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump148:
	imul rdi, [rsp + 0 + 8] ; multiply by i
	jno .jump149
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump149:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
.jump150: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 32
	add rax, [rsp + 64]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment k
	add qword [rsp + 8], 1
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump150 ; If k < bound, next iter
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump150 ; If j < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 24
	add rax, [rsp + 40]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment i
	add qword [rsp + 0], 1
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump145 ; If i < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
.jump132:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump151
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump151:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump152
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump152:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
.jump153: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment j
	add qword [rsp + 8], 1
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump153 ; If j < bound, next iter
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump153 ; If i < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump154
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump154:
	cmp rax, [rsp + 8]
	jl .jump155
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump155:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 24
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	lea rdi, [rel const46] ; i.png
	call _write_image
	add rsp, 24
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump377
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump377:
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump378
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump378:
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump379
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump379:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by f
	jno .jump380
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump380:
	imul rdi, [rsp + 0 + 8] ; multiply by d
	jno .jump381
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump381:
	imul rdi, [rsp + 0 + 16] ; multiply by h
	jno .jump382
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump382:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize l to 0
	mov rax, 0
	push rax
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
.jump383: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 16 to rsp + 16
		mov r10, [rsp + 16 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment l
	add qword [rsp + 16], 1
	; Compare l to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump383 ; If l < bound, next iter
	mov qword [rsp + 16], 0 ; l = 0
	add qword [rsp + 8], 1 ; k++
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump383 ; If k < bound, next iter
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump383 ; If j < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	lea rdi, [rel const66] ; n
	sub rsp, 8 ; Align stack
	call _print
	add rsp, 8 ; Remove alignment
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump384
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump384:
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump385
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump385:
	; Computing total size of heap memory to allocate
	mov rdi, 88 ; sizeof {int[,],float[,,],{int[,],int}}
	imul rdi, [rsp + 0 + 0] ; multiply by (b - m)
	jno .jump386
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump386:
	imul rdi, [rsp + 0 + 8] ; multiply by h
	jno .jump387
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump387:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
.jump388: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 144 to rsp
		mov r10, [rbp - 144 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for q
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump389
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump389:
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump390
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump390:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump391
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump391:
	imul rdi, [rsp + 0 + 8] ; multiply by l
	jno .jump392
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump392:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize q to 0
	mov rax, 0
	push rax
	; Initialize p to 0
	mov rax, 0
	push rax
.jump393: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment q
	add qword [rsp + 8], 1
	; Compare q to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump393 ; If q < bound, next iter
	mov qword [rsp + 8], 0 ; q = 0
	add qword [rsp + 0], 1 ; p++
	; Compare p to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump393 ; If p < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rax, [rel const15] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump394
	sub rsp, 32
	; Moving 32 bytes from rbp - 104 to rsp
		mov r10, [rbp - 104 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 104 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 104 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	jmp .jump395
.jump394:
	sub rsp, 32
	; Moving 32 bytes from rbp - 104 to rsp
		mov r10, [rbp - 104 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 104 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 104 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
.jump395:
	mov rax, [rel const13] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump396
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for q
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump398
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump398:
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump399
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump399:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by d
	jno .jump400
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump400:
	imul rdi, [rsp + 0 + 8] ; multiply by k
	jno .jump401
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump401:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize q to 0
	mov rax, 0
	push rax
	; Initialize p to 0
	mov rax, 0
	push rax
.jump402: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment q
	add qword [rsp + 8], 1
	; Compare q to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump402 ; If q < bound, next iter
	mov qword [rsp + 8], 0 ; q = 0
	add qword [rsp + 0], 1 ; p++
	; Compare p to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump402 ; If p < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump397
.jump396:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for q
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump403
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump403:
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump404
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump404:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by l
	jno .jump405
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump405:
	imul rdi, [rsp + 0 + 8] ; multiply by f
	jno .jump406
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump406:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize q to 0
	mov rax, 0
	push rax
	; Initialize p to 0
	mov rax, 0
	push rax
.jump407: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment q
	add qword [rsp + 8], 1
	; Compare q to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump407 ; If q < bound, next iter
	mov qword [rsp + 8], 0 ; q = 0
	add qword [rsp + 0], 1 ; p++
	; Compare p to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump407 ; If p < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump397:
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 104] ; No overflow if indices in bounds
	add rax, [rsp + 88]
	imul rax, [rsp + 112] ; No overflow if indices in bounds
	add rax, [rsp + 96]
	imul rax, 88
	add rax, [rsp + 120]
	; Move body (88 bytes) to index
	; Moving 88 bytes from rsp to rax
		mov r10, [rsp + 80]
		mov [rax + 80], r10
		mov r10, [rsp + 72]
		mov [rax + 72], r10
		mov r10, [rsp + 64]
		mov [rax + 64], r10
		mov r10, [rsp + 56]
		mov [rax + 56], r10
		mov r10, [rsp + 48]
		mov [rax + 48], r10
		mov r10, [rsp + 40]
		mov [rax + 40], r10
		mov r10, [rsp + 32]
		mov [rax + 32], r10
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 88
	; Increment o
	add qword [rsp + 8], 1
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump388 ; If o < bound, next iter
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump388 ; If n < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump408
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump408:
	cmp rax, [rsp + 16]
	jl .jump409
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump409:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump410
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump410:
	cmp rax, [rsp + 24]
	jl .jump411
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump411:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 88
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 88
	; Moving 88 bytes from rax to rsp
		mov r10, [rax + 80]
		mov [rsp + 80], r10
		mov r10, [rax + 72]
		mov [rsp + 72], r10
		mov r10, [rax + 64]
		mov [rsp + 64], r10
		mov r10, [rax + 56]
		mov [rsp + 56], r10
		mov r10, [rax + 48]
		mov [rsp + 48], r10
		mov r10, [rax + 40]
		mov [rsp + 40], r10
		mov r10, [rax + 32]
		mov [rsp + 32], r10
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for A
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for A
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump481
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump481:
	; Computing bound for z
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump482
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump482:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize A to 0
	mov rax, 0
	push rax
	; Initialize z to 0
	mov rax, 0
	push rax
.jump483: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const68] ; 67.33
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	addsd xmm0, [rsp + 32] ; Load sum
	movsd [rsp + 32], xmm0 ; Save sum
	; Increment A
	add qword [rsp + 8], 1
	; Compare A to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump483 ; If A < bound, next iter
	mov qword [rsp + 8], 0 ; A = 0
	add qword [rsp + 0], 1 ; z++
	; Compare z to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump483 ; If z < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for B
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump484
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump484:
	; Computing bound for A
	mov rax, [rel const69] ; 956
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump485
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump485:
	; Computing bound for z
	sub rsp, 8
	; Moving 8 bytes from rbp - 136 to rsp
		mov r10, [rbp - 136 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump486
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump486:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize B to 0
	mov rax, 0
	push rax
	; Initialize A to 0
	mov rax, 0
	push rax
	; Initialize z to 0
	mov rax, 0
	push rax
.jump487: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment B
	add qword [rsp + 16], 1
	; Compare B to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump487 ; If B < bound, next iter
	mov qword [rsp + 16], 0 ; B = 0
	add qword [rsp + 8], 1 ; A++
	; Compare A to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump487 ; If A < bound, next iter
	mov qword [rsp + 8], 0 ; A = 0
	add qword [rsp + 0], 1 ; z++
	; Compare z to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump487 ; If z < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump488
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for B
	sub rsp, 8
	; Moving 8 bytes from rbp - 152 to rsp
		mov r10, [rbp - 152 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump490
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump490:
	; Computing bound for A
	sub rsp, 8
	; Moving 8 bytes from rbp - 152 to rsp
		mov r10, [rbp - 152 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump491
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump491:
	; Computing bound for z
	sub rsp, 8
	; Moving 8 bytes from rbp - 192 to rsp
		mov r10, [rbp - 192 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump492
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump492:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize B to 0
	mov rax, 0
	push rax
	; Initialize A to 0
	mov rax, 0
	push rax
	; Initialize z to 0
	mov rax, 0
	push rax
.jump493: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 160 to rsp
		mov r10, [rbp - 160 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment B
	add qword [rsp + 16], 1
	; Compare B to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump493 ; If B < bound, next iter
	mov qword [rsp + 16], 0 ; B = 0
	add qword [rsp + 8], 1 ; A++
	; Compare A to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump493 ; If A < bound, next iter
	mov qword [rsp + 8], 0 ; A = 0
	add qword [rsp + 0], 1 ; z++
	; Compare z to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump493 ; If z < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	jmp .jump489
.jump488:
	sub rsp, 8
	; Moving 8 bytes from rbp - 184 to rsp
		mov r10, [rbp - 184 + 0]
		mov [rsp + 0], r10
.jump489:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump494
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump494:
	; Computing bound for z
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump495
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump495:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by l
	jno .jump496
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump496:
imul rdi, [rsp + 0 + 8] ; multiply by (if (to_float((sum[z : v, A : 956, B : argnum] g)) <= (sum[z : m, A : m] 67.33)) then (sum[z : (- o), A : t, B : t] s) else p)
	jno .jump497
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump497:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize A to 0
	mov rax, 0
	push rax
	; Initialize z to 0
	mov rax, 0
	push rax
.jump498: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump499
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	jmp .jump500
.jump499:
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
.jump500:
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setg al
	and rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment A
	add qword [rsp + 8], 1
	; Compare A to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump498 ; If A < bound, next iter
	mov qword [rsp + 8], 0 ; A = 0
	add qword [rsp + 0], 1 ; z++
	; Compare z to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump498 ; If z < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	add rsp, 208 ; Local variables
	pop r12
	pop rbp
	ret

