global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 0
const1: dq 217
const2: dq 3.23
const3: dq 16.53
const4: db `non-positive loop bound`, 0
const5: dq 561
const6: db `overflow computing array size`, 0
const7: dq 110
const8: dq 838
const9: db `negative array index`, 0
const10: db `index too large`, 0
const11: dq 464
const12: dq 173
const13: dq 150
const14: dq 743
const15: dq 334
const16: dq 37.12
const17: dq 75.49
const18: dq 82.33
const19: dq 432
const20: dq 1
const21: dq 830
const22: db `n`, 0
const23: dq 548
const24: db `o`, 0
const25: dq 84.83
const26: db `i`, 0
const27: dq 479
const28: dq 504
const29: dq 542
const30: dq 318
const31: dq 381
const32: db `divide by zero`, 0
const33: dq 45.85
const34: dq 57.3
const35: dq 41.96
const36: dq 744
const37: dq 313
const38: dq 411
const39: dq 52.35
const40: dq 54.15
const41: dq 112
const42: db `mod by zero`, 0
const43: dq 84.55
const44: dq 136
const45: dq 389

section .text
h:
_h:
	push rbp
	mov rbp, rsp
	push rdi
	mov rax, [rel const21] ; 830
	push rax
	mov rax, [rel const0] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump66
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump68
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump68:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by e
	jno .jump69
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump69:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
.jump70: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment n
	add qword [rsp + 0], 1
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump70 ; If n < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	jmp .jump67
.jump66:
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const0] ; False
	push rax
	mov rdi, 16
	call _jpl_alloc
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
.jump67:
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump72
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump72:
	cmp rax, [rsp + 8]
	jl .jump73
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump73:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	jne .jump74
	lea rdi, [rel const22] ; n
	call _fail_assertion
.jump74:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump75
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump75:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof int[,][]
	imul rdi, [rsp + 0 + 0] ; multiply by e
	jno .jump76
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump76:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
.jump77: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump78
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump78:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof int[,]
	imul rdi, [rsp + 0 + 0] ; multiply by e
	jno .jump79
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump79:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize o to 0
	mov rax, 0
	push rax
.jump80: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for q
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump81
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump81:
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump82
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump82:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump83
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump83:
	imul rdi, [rsp + 0 + 8] ; multiply by e
	jno .jump84
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump84:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize q to 0
	mov rax, 0
	push rax
	; Initialize p to 0
	mov rax, 0
	push rax
.jump85: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment q
	add qword [rsp + 8], 1
	; Compare q to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump85 ; If q < bound, next iter
	mov qword [rsp + 8], 0 ; q = 0
	add qword [rsp + 0], 1 ; p++
	; Compare p to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump85 ; If p < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 24
	add rax, [rsp + 40]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment o
	add qword [rsp + 0], 1
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump80 ; If o < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 16
	add rax, [rsp + 32]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment n
	add qword [rsp + 0], 1
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump77 ; If n < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump90
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump90:
	cmp rax, [rsp + 8]
	jl .jump91
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump91:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 16
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 32
	; Moving 32 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 24]
		mov [rsp + 24], r10
		mov r10, [r12 - 48 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 48 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for p
	mov rax, [rel const23] ; 548
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump92
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump92:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump93
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump93:
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump94
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump94:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
.jump95: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment p
	add qword [rsp + 16], 1
	; Compare p to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump95 ; If p < bound, next iter
	mov qword [rsp + 16], 0 ; p = 0
	add qword [rsp + 8], 1 ; o++
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump95 ; If o < bound, next iter
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump95 ; If n < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump99
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump99:
	cmp rax, [rsp + 24]
	jl .jump100
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump100:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump101
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump101:
	cmp rax, [rsp + 32]
	jl .jump102
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump102:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump103
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump103:
	cmp rax, [rsp + 40]
	jl .jump104
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump104:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump105
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump105:
	cmp rax, [rsp + 8]
	jl .jump106
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump106:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 24
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const20] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	jne .jump107
	sub rsp, 8 ; Align stack
	lea rdi, [rel const24] ; o
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump107:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for q
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump108
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump108:
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump109
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump109:
	; Computing bound for o
	mov rax, [rel const25] ; 84.83
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump110
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump110:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof int[,]
	imul rdi, [rsp + 0 + 0] ; multiply by to_int(tan(84.83))
	jno .jump111
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump111:
	imul rdi, [rsp + 0 + 8] ; multiply by i
	jno .jump112
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump112:
	imul rdi, [rsp + 0 + 16] ; multiply by m
	jno .jump113
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump113:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize q to 0
	mov rax, 0
	push rax
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
.jump114: ; Begin body of loop
	; Compute loop body
	sub rsp, 24
	; Moving 24 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 40 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 24
	add rax, [rsp + 72]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment q
	add qword [rsp + 16], 1
	; Compare q to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump114 ; If q < bound, next iter
	mov qword [rsp + 16], 0 ; q = 0
	add qword [rsp + 8], 1 ; p++
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump114 ; If p < bound, next iter
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump114 ; If o < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump118
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump118:
	; Computing bound for o
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump119
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump119:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump120
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump120:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
.jump121: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment p
	add qword [rsp + 8], 1
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump121 ; If p < bound, next iter
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump121 ; If o < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump124
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump124:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
.jump125: ; Begin body of loop
	; Compute loop body
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	addsd xmm0, [rsp + 32] ; Load sum
	movsd [rsp + 32], xmm0 ; Save sum
	; Increment p
	add qword [rsp + 8], 1
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump125 ; If p < bound, next iter
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump125 ; If o < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 16 to rsp + 16
		mov r10, [rsp + 16 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump128
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump128:
	cmp rax, [rsp + 24]
	jl .jump129
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump129:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump130
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump130:
	cmp rax, [rsp + 32]
	jl .jump131
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump131:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump132
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump132:
	cmp rax, [rsp + 40]
	jl .jump133
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump133:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 24
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const20] ; True
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 32
	; Moving 32 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 24]
		mov [rsp + 24], r10
		mov r10, [r12 - 48 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 48 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 32 to rsp + 40
		mov r10, [rsp + 32 + 0]
		mov [rsp + 40 + 0], r10
	add rsp, 40
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump134
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	jmp .jump135
.jump134:
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
.jump135:
	pop rax
	cmp rax, 0
	je .jump136
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump137
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	pop rax
.jump137:
	push rax
	pop rax
.jump136:
	push rax
	pop rax
	cmp rax, 0
	je .jump138
	sub rsp, 32
	; Moving 32 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 24]
		mov [rsp + 24], r10
		mov r10, [r12 - 48 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 48 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump139
.jump138:
	sub rsp, 32
	; Moving 32 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 24]
		mov [rsp + 24], r10
		mov r10, [r12 - 48 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 48 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _h
	add rsp, 16
	add rsp, 16
	add rsp, 8 ; Remove alignment
	push rax
.jump139:
	; Moving 8 bytes from rsp + 0 to rsp + 32
		mov r10, [rsp + 0 + 0]
		mov [rsp + 32 + 0], r10
	add rsp, 32
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump140
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump140:
	cmp rax, [rsp + 16]
	jl .jump141
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump141:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump142
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump142:
	cmp rax, [rsp + 24]
	jl .jump143
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump143:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	add rsp, 40 ; Local variables
	pop rbp
	ret

i:
_i:
	push rbp
	mov rbp, rsp
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for l
	mov rax, [rel const27] ; 479
	push rax
	mov rax, [rel const28] ; 504
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump148
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump148:
	; Computing bound for k
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for l
	mov rax, [rel const29] ; 542
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump149
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump149:
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump150
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump150:
	; Computing bound for j
	sub rsp, 8 ; Align stack
	call _i
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump151
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump151:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize l to 0
	mov rax, 0
	push rax
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
.jump152: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment l
	add qword [rsp + 16], 1
	; Compare l to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump152 ; If l < bound, next iter
	mov qword [rsp + 16], 0 ; l = 0
	add qword [rsp + 8], 1 ; k++
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump152 ; If k < bound, next iter
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump152 ; If j < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump156
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump156:
	; Computing bound for j
	sub rsp, 8 ; Align stack
	call _i
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump157
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump157:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by i()
	jno .jump158
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump158:
imul rdi, [rsp + 0 + 8] ; multiply by (sum[j : i(), k : c, l : 542] c)
	jno .jump159
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump159:
	imul rdi, [rsp + 0 + 16] ; multiply by (504 + 479)
	jno .jump160
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump160:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize l to 0
	mov rax, 0
	push rax
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
.jump161: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const20] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment l
	add qword [rsp + 16], 1
	; Compare l to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump161 ; If l < bound, next iter
	mov qword [rsp + 16], 0 ; l = 0
	add qword [rsp + 8], 1 ; k++
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump161 ; If k < bound, next iter
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump161 ; If j < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	mov rax, [rel const30] ; 318
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	call _i
	add rsp, 8 ; Remove alignment
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 16
		mov r10, [rsp + 0 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump165
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump165:
	cmp rax, [rsp + 24]
	jl .jump166
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump166:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump167
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump167:
	cmp rax, [rsp + 32]
	jl .jump168
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump168:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump169
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump169:
	cmp rax, [rsp + 40]
	jl .jump170
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump170:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump171
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump173
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump173:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof {{int[,,]}}
	imul rdi, [rsp + 0 + 0] ; multiply by c
	jno .jump174
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump174:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
.jump175: ; Begin body of loop
	; Compute loop body
	sub rsp, 32
	; Moving 32 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 24]
		mov [rsp + 24], r10
		mov r10, [r12 - 48 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 48 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 32
	add rax, [rsp + 48]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment j
	add qword [rsp + 0], 1
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump175 ; If j < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	jmp .jump172
.jump171:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump177
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	jmp .jump178
.jump177:
	sub rsp, 8 ; Align stack
	call _i
	add rsp, 8 ; Remove alignment
	push rax
.jump178:
	sub rsp, 32
	; Moving 32 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 24]
		mov [rsp + 24], r10
		mov r10, [r12 - 48 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 48 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const31] ; 381
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump179
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump179:
	cmp rax, [rsp + 24]
	jl .jump180
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump180:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump181
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump181:
	cmp rax, [rsp + 32]
	jl .jump182
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump182:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump183
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump183:
	cmp rax, [rsp + 40]
	jl .jump184
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump184:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump185
	sub rsp, 8 ; Align stack
	lea rdi, [rel const32] ; divide by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump185:
	cqo
	idiv r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump186
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump186:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof {{int[,,]}}
	imul rdi, [rsp + 0 + 0] ; multiply by (b[d, 381, d] / (if g then d else i()))
	jno .jump187
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump187:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
.jump188: ; Begin body of loop
	; Compute loop body
	sub rsp, 32
	; Moving 32 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 24]
		mov [rsp + 24], r10
		mov r10, [r12 - 48 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 48 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 32
	add rax, [rsp + 48]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment j
	add qword [rsp + 0], 1
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump188 ; If j < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
.jump172:
	mov rax, [rel const33] ; 45.85
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump190
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump192
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	call _i
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	jmp .jump193
.jump192:
	mov rax, [rel const34] ; 57.3
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
.jump193:
	jmp .jump191
.jump190:
	mov rax, [rel const0] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump194
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	call _i
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	jmp .jump195
.jump194:
	mov rax, [rel const35] ; 41.96
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
.jump195:
.jump191:
	; Moving 8 bytes from rsp + 8 to rsp + 16
		mov r10, [rsp + 8 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump196
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump196:
	cmp rax, [rsp + 8]
	jl .jump197
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump197:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 32
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 32
	; Moving 32 bytes from rax to rsp
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	add rsp, 32 ; Local variables
	pop rbp
	ret
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	call _i
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setg al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump198
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for q
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump200
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump200:
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump201
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump201:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump202
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	jmp .jump203
.jump202:
	sub rsp, 8 ; Align stack
	call _i
	add rsp, 8 ; Remove alignment
	push rax
.jump203:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump204
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump204:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof {bool,int}
	imul rdi, [rsp + 0 + 0] ; multiply by (if a then k else i())
	jno .jump205
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump205:
	imul rdi, [rsp + 0 + 8] ; multiply by e
	jno .jump206
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump206:
	imul rdi, [rsp + 0 + 16] ; multiply by to_int(f)
	jno .jump207
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump207:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize q to 0
	mov rax, 0
	push rax
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
.jump208: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 16
	add rax, [rsp + 64]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment q
	add qword [rsp + 16], 1
	; Compare q to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump208 ; If q < bound, next iter
	mov qword [rsp + 16], 0 ; q = 0
	add qword [rsp + 8], 1 ; p++
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump208 ; If p < bound, next iter
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump208 ; If o < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump199
.jump198:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for q
	mov rax, [rel const36] ; 744
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump212
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump212:
	; Computing bound for p
	mov rax, [rel const37] ; 313
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump213
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump213:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump214
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	jmp .jump215
.jump214:
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
.jump215:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump216
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump216:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof {bool,int}
	imul rdi, [rsp + 0 + 0] ; multiply by (if a then l else c)
	jno .jump217
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump217:
	imul rdi, [rsp + 0 + 8] ; multiply by 313
	jno .jump218
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump218:
	imul rdi, [rsp + 0 + 16] ; multiply by 744
	jno .jump219
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump219:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize q to 0
	mov rax, 0
	push rax
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
.jump220: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const0] ; False
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 16
	add rax, [rsp + 64]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment q
	add qword [rsp + 16], 1
	; Compare q to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump220 ; If q < bound, next iter
	mov qword [rsp + 16], 0 ; q = 0
	add qword [rsp + 8], 1 ; p++
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump220 ; If p < bound, next iter
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump220 ; If o < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump199:
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump224
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump224:
	cmp rax, [rsp + 24]
	jl .jump225
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump225:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump226
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump226:
	cmp rax, [rsp + 32]
	jl .jump227
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump227:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump228
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump228:
	cmp rax, [rsp + 40]
	jl .jump229
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump229:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 16
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	pop rax
	cmp rax, 0
	jne .jump230
	lea rdi, [rel const24] ; o
	call _fail_assertion
.jump230:
	call _i
	push rax
	pop rax
	add rsp, 48 ; Local variables
	pop rbp
	ret

jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp
	mov rax, [rel const0] ; False
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const1] ; 217
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 16
		mov r10, [rsp + 0 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const2] ; 3.23
	push rax
	mov rax, [rel const3] ; 16.53
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rdi, 16
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump1:
	; Computing bound for b
	mov rax, [rel const5] ; 561
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump2
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump2:
	; Computing bound for a
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump3
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump3:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump4
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump4:
	imul rdi, [rsp + 0 + 8] ; multiply by 561
	jno .jump5
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump5:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump6
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump6:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
	; Initialize a to 0
	mov rax, 0
	push rax
.jump7: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment c
	add qword [rsp + 16], 1
	; Compare c to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump7 ; If c < bound, next iter
	mov qword [rsp + 16], 0 ; c = 0
	add qword [rsp + 8], 1 ; b++
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump7 ; If b < bound, next iter
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump7 ; If a < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	mov rax, [rel const7] ; 110
	push rax
	mov rax, [rel const8] ; 838
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump11
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump11:
	cmp rax, [rsp + 24]
	jl .jump12
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump12:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump13
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump13:
	cmp rax, [rsp + 32]
	jl .jump14
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump14:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump15
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump15:
	cmp rax, [rsp + 40]
	jl .jump16
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump16:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump17
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump17:
	cmp rax, [rsp + 8]
	jl .jump18
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump18:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump19
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump20
.jump19:
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
.jump20:
	mov rax, [rel const11] ; 464
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump21
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
.jump21:
	cmp rax, [rsp + 8]
	jl .jump22
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
.jump22:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump23
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump23:
	; Computing bound for c
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump24
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump24:
	; Computing bound for b
	mov rax, [rel const12] ; 173
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump25
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump25:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by 173
	jno .jump26
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump26:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump27
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump27:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump28: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const13] ; 150
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment c
	add qword [rsp + 8], 1
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump28 ; If c < bound, next iter
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump28 ; If b < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump31
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump31:
	; Computing bound for b
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump32
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump32:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump33: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment c
	add qword [rsp + 8], 1
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump33 ; If c < bound, next iter
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump33 ; If b < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rel const14] ; 743
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump36
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump36:
	cmp rax, [rsp + 16]
	jl .jump37
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump37:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump38
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump38:
	cmp rax, [rsp + 24]
	jl .jump39
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump39:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump40
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump40:
	; Computing bound for b
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const15] ; 334
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump41
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump41:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by ((- 334) - argnum)
	jno .jump42
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump42:
imul rdi, [rsp + 0 + 8] ; multiply by (array[b : 173, c : argnum] 150)[(- 743), (sum[b : argnum, c : argnum] b)]
	jno .jump43
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump43:
	imul rdi, [rsp + 0 + 16] ; multiply by (if a then args else args)[(- 464)]
	jno .jump44
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump44:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump45: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	neg rax
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment d
	add qword [rsp + 16], 1
	; Compare d to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump45 ; If d < bound, next iter
	mov qword [rsp + 16], 0 ; d = 0
	add qword [rsp + 8], 1 ; c++
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump45 ; If c < bound, next iter
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump45 ; If b < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump49
	mov rax, [rel const16] ; 37.12
	push rax
	jmp .jump50
.jump49:
	mov rax, [rel const17] ; 75.49
	push rax
.jump50:
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const18] ; 82.33
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	sub rsp, 8
	movsd [rsp], xmm0
	; Moving 32 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 24]
		mov [rsp + 8 + 24], r10
		mov r10, [rsp + 8 + 16]
		mov [rsp + 8 + 16], r10
		mov r10, [rsp + 8 + 8]
		mov [rsp + 8 + 8], r10
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const19] ; 432
	push rax
	; Moving 16 bytes from rsp + 8 to rsp + 16
		mov r10, [rsp + 8 + 8]
		mov [rsp + 16 + 8], r10
		mov r10, [rsp + 8 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump51
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump51:
	cmp rax, [rsp + 8]
	jl .jump52
	sub rsp, 8 ; Align stack
	lea rdi, [rel const10] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump52:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const0] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	mov rax, [rel const0] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump53
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	jne .jump55
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
.jump55:
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump56
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump58
	jmp .jump59
.jump58:
.jump59:
	; Moving 0 bytes from rsp + 0 to rsp + 0
	add rsp, 0
	jmp .jump57
.jump56:
	mov rax, [rel const20] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump60
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump62
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump64
	jmp .jump65
.jump64:
.jump65:
	jmp .jump63
.jump62:
.jump63:
	jmp .jump61
.jump60:
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	; Moving 0 bytes from rsp + 0 to rsp + 8
	add rsp, 8
.jump61:
.jump57:
	jmp .jump54
.jump53:
.jump54:
	mov rax, [rel const20] ; True
	push rax
	pop rax
	cmp rax, 0
	jne .jump144
	mov rax, [rel const20] ; True
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	pop rax
.jump144:
	push rax
	pop rax
	cmp rax, 0
	je .jump145
	mov rax, [rel const20] ; True
	push rax
	jmp .jump146
.jump145:
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
.jump146:
	pop rax
	cmp rax, 0
	jne .jump147
	lea rdi, [rel const26] ; i
	call _fail_assertion
.jump147:
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for n
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump231
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump231:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by (- c)
	jno .jump232
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
.jump232:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize l to 0
	mov rax, 0
	push rax
.jump233: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment l
	add qword [rsp + 0], 1
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump233 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rdi, 8
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	call _i
	push rax
	pop rdi
	call _h
	add rsp, 16
	add rsp, 16
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump235
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump235:
	; Computing bound for m
	mov rax, [rel const38] ; 411
	push rax
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const39] ; 52.35
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 16
		mov r10, [rsp + 0 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump236
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump236:
	; Computing bound for l
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for m
	sub rsp, 8 ; Align stack
	mov rax, [rel const40] ; 54.15
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump237
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump237:
	; Computing bound for l
	mov rax, [rel const20] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump238
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump240
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump240:
	; Computing bound for l
	call _i
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump241
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump241:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump242: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 152 to rsp
		mov r10, [rbp - 152 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment m
	add qword [rsp + 8], 1
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump242 ; If m < bound, next iter
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump242 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	jmp .jump239
.jump238:
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
.jump239:
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump245
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump245:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump246: ; Begin body of loop
	; Compute loop body
	sub rsp, 8 ; Align stack
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const41] ; 112
	push rax
	mov rdi, 8
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump247
	lea rdi, [rel const42] ; mod by zero
	call _fail_assertion
.jump247:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rdi
	call _h
	add rsp, 16
	add rsp, 16
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment m
	add qword [rsp + 8], 1
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump246 ; If m < bound, next iter
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump246 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump250
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump250:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
imul rdi, [rsp + 0 + 0] ; multiply by (sum[l : (- (if true then (sum[l : i(), m : argnum] l) else j)), m : to_int(54.15)] h((e % d), [{112}], args))
	jno .jump251
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump251:
	imul rdi, [rsp + 0 + 8] ; multiply by (to_int({52.35, args}{0}) + 411)
	jno .jump252
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump252:
imul rdi, [rsp + 0 + 16] ; multiply by h(i(), [{(c - j)}], (array[l : (- c)] l))
	jno .jump253
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump253:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump254: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const43] ; 84.55
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment n
	add qword [rsp + 16], 1
	; Compare n to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump254 ; If n < bound, next iter
	mov qword [rsp + 16], 0 ; n = 0
	add qword [rsp + 8], 1 ; m++
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump254 ; If m < bound, next iter
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump254 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for r
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump258
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump258:
	; Computing bound for q
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rel const44] ; 136
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	mov rax, [rsp]
	cmp rax, 0
	jg .jump259
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
.jump259:
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump260
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump260:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize r to 0
	mov rax, 0
	push rax
	; Initialize q to 0
	mov rax, 0
	push rax
	; Initialize p to 0
	mov rax, 0
	push rax
.jump261: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment r
	add qword [rsp + 16], 1
	; Compare r to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump261 ; If r < bound, next iter
	mov qword [rsp + 16], 0 ; r = 0
	add qword [rsp + 8], 1 ; q++
	; Compare q to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump261 ; If q < bound, next iter
	mov qword [rsp + 8], 0 ; q = 0
	add qword [rsp + 0], 1 ; p++
	; Compare p to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump261 ; If p < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rel const45] ; 389
	push rax
	pop rax
	neg rax
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	mov rdi, 24
	call _jpl_alloc
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	push rax
	mov rax, 3
	push rax
	add rsp, 112 ; Local variables
	pop r12
	pop rbp
	ret

