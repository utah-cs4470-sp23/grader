global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 0
const1: dq 1
const2: db `non-positive loop bound`, 0
const3: db `overflow computing array size`, 0
const4: dq 122
const5: dq 695
const6: dq 382
const7: dq 532
const8: db `negative array index`, 0
const9: db `index too large`, 0
const10: dq 94.92
const11: dq 837
const12: dq 416
const13: db `mod by zero`, 0
const14: dq 918
const15: dq 652
const16: dq 14.43
const17: dq 337
const18: dq 144
const19: dq 947
const20: dq 383
const21: dq 96.75
const22: dq 43.9
const23: dq 55.88
const24: dq 328
const25: dq 564
const26: dq 810
const27: dq 17.58
const28: dq 86.99
const29: dq 0.66
const30: dq 9
const31: dq 86.43
const32: dq 726
const33: dq 59.07
const34: dq 40.59
const35: dq 75.25
const36: dq 159
const37: dq 92.74
const38: dq 47.72
const39: dq 198
const40: dq 751
const41: dq 526
const42: dq 866
const43: dq 258
const44: dq 183
const45: dq 845
const46: dq 76.99
const47: db `divide by zero`, 0
const48: dq 33.18
const49: db `v.png`, 0
const50: db `D`, 0
const51: dq 40
const52: dq 81.47
const53: dq 36.78
const54: dq 708
const55: dq 580
const56: db `E`, 0

section .text
a:
_a:
	push rbp
	mov rbp, rsp
	mov rax, [rel const0] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump1
	mov rax, [rel const1] ; True
	push rax
	jmp .jump2
.jump1:
	mov rax, [rel const1] ; True
	push rax
.jump2:
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rdi, 16
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 1
	push rax
	; Moving 8 bytes from rsp + 16 to rsp + 16
		mov r10, [rsp + 16 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	mov rax, [rel const0] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump3
	mov rax, [rel const0] ; False
	push rax
	jmp .jump4
.jump3:
	mov rax, [rel const0] ; False
	push rax
.jump4:
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump5
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const0] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump7
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump8
.jump7:
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
.jump8:
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump9
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump11
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump11:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof int[,,]
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump12
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump12:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
.jump13: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump14 ; If c >= bound, break
.jump15:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump16
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump16:
	; Computing bound for e
	mov rax, [rel const4] ; 122
	push rax
	mov rax, [rsp]
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump17
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump17:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump18
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump18:
	imul rdi, [rsp + 0 + 8] ; multiply by 122
	jno .jump19
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump19:
	imul rdi, [rsp + 0 + 16] ; multiply by c
	jno .jump20
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump20:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize f to 0
	mov rax, 0
	push rax
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
.jump21: ; Begin body of loop
	; Compare f to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump23 ; If f >= bound, ...
	mov qword [rsp + 16], 0 ; f = 0
	add qword [rsp + 8], 1 ; e++
.jump23:
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump24 ; If e >= bound, ...
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
.jump24:
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump22 ; If d >= bound, break
.jump25:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment f
	add qword [rsp + 16], 1
	jmp .jump21
.jump22: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	shl rax, 5
	add rax, [rsp + 48]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment c
	add qword [rsp + 0], 1
	jmp .jump13
.jump14: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	jmp .jump10
.jump9:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump26
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump26:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof int[,,]
	imul rdi, [rsp + 0 + 0] ; multiply by (- argnum)
	jno .jump27
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump27:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
.jump28: ; Begin body of loop
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump29 ; If c >= bound, break
.jump30:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for f
	mov rax, [rel const5] ; 695
	push rax
	mov rax, [rsp]
	; Computing bound for e
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump31
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump31:
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump32
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump32:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump33
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump33:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump34
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump34:
	imul rdi, [rsp + 0 + 16] ; multiply by 695
	jno .jump35
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump35:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize f to 0
	mov rax, 0
	push rax
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
.jump36: ; Begin body of loop
	; Compare f to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump38 ; If f >= bound, ...
	mov qword [rsp + 16], 0 ; f = 0
	add qword [rsp + 8], 1 ; e++
.jump38:
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump39 ; If e >= bound, ...
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
.jump39:
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump37 ; If d >= bound, break
.jump40:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment f
	add qword [rsp + 16], 1
	jmp .jump36
.jump37: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	shl rax, 5
	add rax, [rsp + 48]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment c
	add qword [rsp + 0], 1
	jmp .jump28
.jump29: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
.jump10:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for d
	mov rax, [rel const6] ; 382
	push rax
	mov rax, [rsp]
	; Computing bound for c
	mov rax, [rel const7] ; 532
	push rax
	mov rax, [rsp]
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump41: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump43 ; If d >= bound, ...
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
.jump43:
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump42 ; If c >= bound, break
.jump44:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment d
	add qword [rsp + 8], 1
	jmp .jump41
.jump42: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump45
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump45:
	cmp rax, [rsp + 8]
	jl .jump46
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump46:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 5
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 32
	; Moving 32 bytes from rax to rsp
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump6
.jump5:
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const10] ; 94.92
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump47
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for e
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump49
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump49:
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump50
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump50:
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump51
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump51:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump52
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump52:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump53
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump53:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump54
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump54:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump55: ; Begin body of loop
	; Compare e to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump57 ; If e >= bound, ...
	mov qword [rsp + 16], 0 ; e = 0
	add qword [rsp + 8], 1 ; d++
.jump57:
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump58 ; If d >= bound, ...
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
.jump58:
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump56 ; If c >= bound, break
.jump59:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment e
	add qword [rsp + 16], 1
	jmp .jump55
.jump56: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 24
	; Moving 24 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	; Moving 32 bytes from rsp + 40 to rsp + 40
		mov r10, [rsp + 40 + 24]
		mov [rsp + 40 + 24], r10
		mov r10, [rsp + 40 + 16]
		mov [rsp + 40 + 16], r10
		mov r10, [rsp + 40 + 8]
		mov [rsp + 40 + 8], r10
		mov r10, [rsp + 40 + 0]
		mov [rsp + 40 + 0], r10
	add rsp, 40
	jmp .jump48
.jump47:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for e
	mov rax, [rel const11] ; 837
	push rax
	mov rax, [rsp]
	; Computing bound for d
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump60
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump60:
	; Computing bound for c
	mov rax, [rel const12] ; 416
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump61
	lea rdi, [rel const13] ; mod by zero
	call _fail_assertion
.jump61:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump62
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump62:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump63: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump65 ; If d >= bound, ...
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
.jump65:
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump64 ; If c >= bound, break
.jump66:
	; Compute loop body
	mov rax, [rel const14] ; 918
	push rax
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment d
	add qword [rsp + 8], 1
	jmp .jump63
.jump64: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump67
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump67:
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump68
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump68:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by (- argnum)
	jno .jump69
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump69:
imul rdi, [rsp + 0 + 8] ; multiply by (sum[c : (argnum % 416), d : argnum] 918)
	jno .jump70
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump70:
	imul rdi, [rsp + 0 + 16] ; multiply by 837
	jno .jump71
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump71:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump72: ; Begin body of loop
	; Compare e to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump74 ; If e >= bound, ...
	mov qword [rsp + 16], 0 ; e = 0
	add qword [rsp + 8], 1 ; d++
.jump74:
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump75 ; If d >= bound, ...
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
.jump75:
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump73 ; If c >= bound, break
.jump76:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment e
	add qword [rsp + 16], 1
	jmp .jump72
.jump73: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump48:
.jump6:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump77
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump77:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump78
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump78:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize g to 0
	mov rax, 0
	push rax
.jump79: ; Begin body of loop
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump80 ; If g >= bound, break
.jump81:
	; Compute loop body
	mov rax, [rel const1] ; True
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment g
	add qword [rsp + 0], 1
	jmp .jump79
.jump80: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump82
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump82:
	cmp rax, [rsp + 8]
	jl .jump83
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump83:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump84
	mov rax, [rel const15] ; 652
	push rax
	sub rsp, 32
	; Moving 32 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	jmp .jump85
.jump84:
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump86
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump86:
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump87
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump87:
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump88
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump88:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by f
	jno .jump89
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump89:
	imul rdi, [rsp + 0 + 8] ; multiply by e
	jno .jump90
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump90:
	imul rdi, [rsp + 0 + 16] ; multiply by e
	jno .jump91
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump91:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
.jump92: ; Begin body of loop
	; Compare i to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump94 ; If i >= bound, ...
	mov qword [rsp + 16], 0 ; i = 0
	add qword [rsp + 8], 1 ; h++
.jump94:
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump95 ; If h >= bound, ...
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
.jump95:
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump93 ; If g >= bound, break
.jump96:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment i
	add qword [rsp + 16], 1
	jmp .jump92
.jump93: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump85:
	; Moving 8 bytes from rsp + 32 to rsp + 32
		mov r10, [rsp + 32 + 0]
		mov [rsp + 32 + 0], r10
	add rsp, 32
	; Moving 0 bytes from rsp + 0 to rsp + 8
	add rsp, 8
	mov rax, [rel const16] ; 14.43
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for h
	mov rax, [rel const1] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump97
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump99
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump99:
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump100
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump100:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
.jump101: ; Begin body of loop
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump103 ; If i >= bound, ...
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
.jump103:
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump102 ; If h >= bound, break
.jump104:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment i
	add qword [rsp + 8], 1
	jmp .jump101
.jump102: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	jmp .jump98
.jump97:
	mov rax, [rel const1] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump105
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	jmp .jump106
.jump105:
	mov rax, [rel const17] ; 337
	push rax
.jump106:
.jump98:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump107
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump107:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
.jump108: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump109 ; If h >= bound, break
.jump110:
	; Compute loop body
	mov rax, [rel const18] ; 144
	push rax
	mov rax, [rel const19] ; 947
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment h
	add qword [rsp + 0], 1
	jmp .jump108
.jump109: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump111
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for i
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump113
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump113:
	cmp rax, [rsp + 8]
	jl .jump114
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump114:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump115
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump115:
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump116
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump116:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof int[][,,]
	imul rdi, [rsp + 0 + 0] ; multiply by (f + d)
	jno .jump117
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump117:
	imul rdi, [rsp + 0 + 8] ; multiply by args[d]
	jno .jump118
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump118:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
.jump119: ; Begin body of loop
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump121 ; If i >= bound, ...
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
.jump121:
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump120 ; If h >= bound, break
.jump122:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for l
	mov rax, [rel const20] ; 383
	push rax
	mov rax, [rsp]
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump123
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump123:
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump124
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump124:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof int[]
	imul rdi, [rsp + 0 + 0] ; multiply by i
	jno .jump125
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump125:
	imul rdi, [rsp + 0 + 8] ; multiply by d
	jno .jump126
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump126:
	imul rdi, [rsp + 0 + 16] ; multiply by 383
	jno .jump127
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump127:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize l to 0
	mov rax, 0
	push rax
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
.jump128: ; Begin body of loop
	; Compare l to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump130 ; If l >= bound, ...
	mov qword [rsp + 16], 0 ; l = 0
	add qword [rsp + 8], 1 ; k++
.jump130:
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump131 ; If k >= bound, ...
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
.jump131:
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump129 ; If j >= bound, break
.jump132:
	; Compute loop body
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	shl rax, 4
	add rax, [rsp + 64]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment l
	add qword [rsp + 16], 1
	jmp .jump128
.jump129: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	shl rax, 5
	add rax, [rsp + 64]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment i
	add qword [rsp + 8], 1
	jmp .jump119
.jump120: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rax, [rel const21] ; 96.75
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump133
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
.jump133:
	cmp rax, [rsp + 16]
	jl .jump134
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
.jump134:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump135
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
.jump135:
	cmp rax, [rsp + 24]
	jl .jump136
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
.jump136:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 5
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 32
	; Moving 32 bytes from rax to rsp
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	mov rax, [rel const22] ; 43.9
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const23] ; 55.88
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump137
	mov rax, [rel const0] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump139
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump141
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump141:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump142
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump142:
	; Computing bound for h
	mov rax, [rel const24] ; 328
	push rax
	mov rax, [rsp]
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
.jump143: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump145 ; If j >= bound, ...
	mov qword [rsp + 16], 0 ; j = 0
	add qword [rsp + 8], 1 ; i++
.jump145:
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump146 ; If i >= bound, ...
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
.jump146:
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump144 ; If h >= bound, break
.jump147:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment j
	add qword [rsp + 16], 1
	jmp .jump143
.jump144: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	jmp .jump140
.jump139:
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
.jump140:
	jmp .jump138
.jump137:
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
.jump138:
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump148
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
.jump148:
	cmp rax, [rsp + 24]
	jl .jump149
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
.jump149:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump150
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
.jump150:
	cmp rax, [rsp + 32]
	jl .jump151
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
.jump151:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump152
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
.jump152:
	cmp rax, [rsp + 40]
	jl .jump153
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
.jump153:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 4
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump112
.jump111:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for h
	mov rax, [rel const25] ; 564
	push rax
	mov rax, [rsp]
	mov rdi, 4512
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
.jump154: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump155 ; If h >= bound, break
.jump156:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment h
	add qword [rsp + 0], 1
	jmp .jump154
.jump155: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
.jump112:
	add rsp, 56 ; Local variables
	pop rbp
	ret

D:
_D:
	push rbp
	mov rbp, rsp
	mov rax, [rel const51] ; 40
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for H
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for G
	sub rsp, 8 ; Align stack
	mov rax, [rel const52] ; 81.47
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump235
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump235:
	; Computing bound for F
	sub rsp, 8
	; Moving 8 bytes from r12 - 152 to rsp
		mov r10, [r12 - 152 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump236
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump236:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize G to 0
	mov rax, 0
	push rax
	; Initialize F to 0
	mov rax, 0
	push rax
.jump237: ; Begin body of loop
	; Compare G to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump239 ; If G >= bound, ...
	mov qword [rsp + 8], 0 ; G = 0
	add qword [rsp + 0], 1 ; F++
.jump239:
	; Compare F to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump238 ; If F >= bound, break
.jump240:
	; Compute loop body
	sub rsp, 8 ; Align stack
	mov rax, [rel const53] ; 36.78
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment G
	add qword [rsp + 8], 1
	jmp .jump237
.jump238: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump241
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump241:
	; Computing bound for G
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump242
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump242:
	; Computing bound for F
	sub rsp, 8
	; Moving 8 bytes from r12 - 200 to rsp
		mov r10, [r12 - 200 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump243
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump243:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof {bool}
	imul rdi, [rsp + 0 + 0] ; multiply by x
	jno .jump244
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump244:
	imul rdi, [rsp + 0 + 8] ; multiply by j
	jno .jump245
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump245:
imul rdi, [rsp + 0 + 16] ; multiply by (sum[F : o, G : to_int(81.47)] to_int(36.78))
	jno .jump246
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump246:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize H to 0
	mov rax, 0
	push rax
	; Initialize G to 0
	mov rax, 0
	push rax
	; Initialize F to 0
	mov rax, 0
	push rax
.jump247: ; Begin body of loop
	; Compare H to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump249 ; If H >= bound, ...
	mov qword [rsp + 16], 0 ; H = 0
	add qword [rsp + 8], 1 ; G++
.jump249:
	; Compare G to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump250 ; If G >= bound, ...
	mov qword [rsp + 8], 0 ; G = 0
	add qword [rsp + 0], 1 ; F++
.jump250:
	; Compare F to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump248 ; If F >= bound, break
.jump251:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for K
	sub rsp, 8
	; Moving 8 bytes from r12 - 208 to rsp
		mov r10, [r12 - 208 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump252
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump252:
	; Computing bound for J
	call _D
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump253
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump253:
	; Computing bound for I
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump254
	sub rsp, 8
	; Moving 8 bytes from r12 - 200 to rsp
		mov r10, [r12 - 200 + 0]
		mov [rsp + 0], r10
	jmp .jump255
.jump254:
	sub rsp, 8
	; Moving 8 bytes from r12 - 144 to rsp
		mov r10, [r12 - 144 + 0]
		mov [rsp + 0], r10
.jump255:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump256
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump256:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof {bool}
	imul rdi, [rsp + 0 + 0] ; multiply by (if b then x else q)
	jno .jump257
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump257:
	imul rdi, [rsp + 0 + 8] ; multiply by D()
	jno .jump258
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump258:
	imul rdi, [rsp + 0 + 16] ; multiply by w
	jno .jump259
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump259:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize K to 0
	mov rax, 0
	push rax
	; Initialize J to 0
	mov rax, 0
	push rax
	; Initialize I to 0
	mov rax, 0
	push rax
.jump260: ; Begin body of loop
	; Compare K to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump262 ; If K >= bound, ...
	mov qword [rsp + 16], 0 ; K = 0
	add qword [rsp + 8], 1 ; J++
.jump262:
	; Compare J to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump263 ; If J >= bound, ...
	mov qword [rsp + 8], 0 ; J = 0
	add qword [rsp + 0], 1 ; I++
.jump263:
	; Compare I to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump261 ; If I >= bound, break
.jump264:
	; Compute loop body
	mov rax, [rel const1] ; True
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment K
	add qword [rsp + 16], 1
	jmp .jump260
.jump261: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump265
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump265:
	cmp rax, [rsp + 24]
	jl .jump266
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump266:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump267
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump267:
	cmp rax, [rsp + 32]
	jl .jump268
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump268:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump269
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump269:
	cmp rax, [rsp + 40]
	jl .jump270
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump270:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment H
	add qword [rsp + 16], 1
	jmp .jump247
.jump248: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8 ; Align stack
	call _D
	add rsp, 8 ; Remove alignment
	push rax
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for F
	sub rsp, 8
	; Moving 8 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump271
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump271:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize F to 0
	mov rax, 0
	push rax
.jump272: ; Begin body of loop
	; Compare F to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump273 ; If F >= bound, break
.jump274:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 200 to rsp
		mov r10, [r12 - 200 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment F
	add qword [rsp + 0], 1
	jmp .jump272
.jump273: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for F
	mov rax, [rel const54] ; 708
	push rax
	mov rax, [rsp]
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize F to 0
	mov rax, 0
	push rax
.jump275: ; Begin body of loop
	; Compare F to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump276 ; If F >= bound, break
.jump277:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment F
	add qword [rsp + 0], 1
	jmp .jump275
.jump276: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump278
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
.jump278:
	cmp rax, [rsp + 24]
	jl .jump279
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
.jump279:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump280
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
.jump280:
	cmp rax, [rsp + 32]
	jl .jump281
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
.jump281:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump282
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
.jump282:
	cmp rax, [rsp + 40]
	jl .jump283
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
.jump283:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for H
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump284
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump284:
	; Computing bound for G
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump285
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump285:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof {bool,float[,]}
	imul rdi, [rsp + 0 + 0] ; multiply by t
	jno .jump286
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump286:
	imul rdi, [rsp + 0 + 8] ; multiply by j
	jno .jump287
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump287:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize H to 0
	mov rax, 0
	push rax
	; Initialize G to 0
	mov rax, 0
	push rax
.jump288: ; Begin body of loop
	; Compare H to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump290 ; If H >= bound, ...
	mov qword [rsp + 8], 0 ; H = 0
	add qword [rsp + 0], 1 ; G++
.jump290:
	; Compare G to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump289 ; If G >= bound, break
.jump291:
	; Compute loop body
	sub rsp, 24
	; Moving 24 bytes from r12 - 144 to rsp
		mov r10, [r12 - 144 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 144 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 144 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	shl rax, 5
	add rax, [rsp + 64]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment H
	add qword [rsp + 8], 1
	jmp .jump288
.jump289: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 200 to rsp
		mov r10, [r12 - 200 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump292
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump292:
	cmp rax, [rsp + 16]
	jl .jump293
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump293:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump294
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump294:
	cmp rax, [rsp + 24]
	jl .jump295
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump295:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 5
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 32
	; Moving 32 bytes from rax to rsp
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 24
		mov r10, [rsp + 0 + 0]
		mov [rsp + 24 + 0], r10
	add rsp, 24
	pop rax
	cmp rax, 0
	je .jump296
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for I
	sub rsp, 8
	; Moving 8 bytes from r12 - 176 to rsp
		mov r10, [r12 - 176 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump298
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump298:
	; Computing bound for H
	sub rsp, 8
	; Moving 8 bytes from r12 - 176 to rsp
		mov r10, [r12 - 176 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump299
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump299:
	; Computing bound for G
	sub rsp, 8 ; Align stack
	call _D
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump300
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump300:
	; Computing total size of heap memory to allocate
	mov rdi, 40 ; sizeof {{float[,]},int[]}
	imul rdi, [rsp + 0 + 0] ; multiply by (- D())
	jno .jump301
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump301:
	imul rdi, [rsp + 0 + 8] ; multiply by m
	jno .jump302
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump302:
	imul rdi, [rsp + 0 + 16] ; multiply by m
	jno .jump303
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump303:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize I to 0
	mov rax, 0
	push rax
	; Initialize H to 0
	mov rax, 0
	push rax
	; Initialize G to 0
	mov rax, 0
	push rax
.jump304: ; Begin body of loop
	; Compare I to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump306 ; If I >= bound, ...
	mov qword [rsp + 16], 0 ; I = 0
	add qword [rsp + 8], 1 ; H++
.jump306:
	; Compare H to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump307 ; If H >= bound, ...
	mov qword [rsp + 8], 0 ; H = 0
	add qword [rsp + 0], 1 ; G++
.jump307:
	; Compare G to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump305 ; If G >= bound, break
.jump308:
	; Compute loop body
	sub rsp, 16
	; Moving 16 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	; Moving 24 bytes from r12 - 144 to rsp
		mov r10, [r12 - 144 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 144 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 144 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, [rsp + 72] ; No overflow if indices in bounds
	add rax, [rsp + 48]
	imul rax, [rsp + 80] ; No overflow if indices in bounds
	add rax, [rsp + 56]
	imul rax, 40
	add rax, [rsp + 88]
	; Move body (40 bytes) to index
	; Moving 40 bytes from rsp to rax
		mov r10, [rsp + 32]
		mov [rax + 32], r10
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 40
	; Increment I
	add qword [rsp + 16], 1
	jmp .jump304
.jump305: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	mov rax, [rel const55] ; 580
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 240 to rsp
		mov r10, [r12 - 240 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump309
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump309:
	cmp rax, [rsp + 24]
	jl .jump310
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump310:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump311
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump311:
	cmp rax, [rsp + 32]
	jl .jump312
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump312:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump313
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump313:
	cmp rax, [rsp + 40]
	jl .jump314
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump314:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 40
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 40
	; Moving 40 bytes from rax to rsp
		mov r10, [rax + 32]
		mov [rsp + 32], r10
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump297
.jump296:
	sub rsp, 16
	; Moving 16 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	; Moving 24 bytes from r12 - 176 to rsp
		mov r10, [r12 - 176 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 176 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 176 + 0]
		mov [rsp + 0], r10
	; Moving 40 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 32]
		mov [rsp + 0 + 32], r10
		mov r10, [rsp + 0 + 24]
		mov [rsp + 0 + 24], r10
		mov r10, [rsp + 0 + 16]
		mov [rsp + 0 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
.jump297:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for K
	call _D
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump315
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump315:
	; Computing bound for J
	sub rsp, 8
	; Moving 8 bytes from r12 - 200 to rsp
		mov r10, [r12 - 200 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump316
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump316:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof {int,{int[],int}}
	imul rdi, [rsp + 0 + 0] ; multiply by x
	jno .jump317
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump317:
	imul rdi, [rsp + 0 + 8] ; multiply by D()
	jno .jump318
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump318:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize K to 0
	mov rax, 0
	push rax
	; Initialize J to 0
	mov rax, 0
	push rax
.jump319: ; Begin body of loop
	; Compare K to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump321 ; If K >= bound, ...
	mov qword [rsp + 8], 0 ; K = 0
	add qword [rsp + 0], 1 ; J++
.jump321:
	; Compare J to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump320 ; If J >= bound, break
.jump322:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 200 to rsp
		mov r10, [r12 - 200 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	shl rax, 5
	add rax, [rsp + 64]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment K
	add qword [rsp + 8], 1
	jmp .jump319
.jump320: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump323
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for K
	sub rsp, 8
	; Moving 8 bytes from r12 - 248 to rsp
		mov r10, [r12 - 248 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump325
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump325:
	; Computing bound for J
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump326
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump326:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by j
	jno .jump327
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump327:
	imul rdi, [rsp + 0 + 8] ; multiply by A
	jno .jump328
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump328:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize K to 0
	mov rax, 0
	push rax
	; Initialize J to 0
	mov rax, 0
	push rax
.jump329: ; Begin body of loop
	; Compare K to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump331 ; If K >= bound, ...
	mov qword [rsp + 8], 0 ; K = 0
	add qword [rsp + 0], 1 ; J++
.jump331:
	; Compare J to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump330 ; If J >= bound, break
.jump332:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment K
	add qword [rsp + 8], 1
	jmp .jump329
.jump330: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump324
.jump323:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for K
	sub rsp, 8
	; Moving 8 bytes from r12 - 208 to rsp
		mov r10, [r12 - 208 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump333
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump333:
	; Computing bound for J
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump334
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump334:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by j
	jno .jump335
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump335:
	imul rdi, [rsp + 0 + 8] ; multiply by w
	jno .jump336
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump336:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize K to 0
	mov rax, 0
	push rax
	; Initialize J to 0
	mov rax, 0
	push rax
.jump337: ; Begin body of loop
	; Compare K to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump339 ; If K >= bound, ...
	mov qword [rsp + 8], 0 ; K = 0
	add qword [rsp + 0], 1 ; J++
.jump339:
	; Compare J to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump338 ; If J >= bound, break
.jump340:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment K
	add qword [rsp + 8], 1
	jmp .jump337
.jump338: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump324:
	sub rsp, 8
	; Moving 8 bytes from r12 - 168 to rsp
		mov r10, [r12 - 168 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 232 to rsp
		mov r10, [r12 - 232 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump341
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump341:
	cmp rax, [rsp + 16]
	jl .jump342
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump342:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump343
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump343:
	cmp rax, [rsp + 24]
	jl .jump344
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump344:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 248 to rsp
		mov r10, [r12 - 248 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump345
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
.jump345:
	cmp rax, [rsp + 16]
	jl .jump346
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
.jump346:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump347
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
.jump347:
	cmp rax, [rsp + 24]
	jl .jump348
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
.jump348:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 5
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 32
	; Moving 32 bytes from rax to rsp
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Moving 24 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 16]
		mov [rsp + 8 + 16], r10
		mov r10, [rsp + 8 + 8]
		mov [rsp + 8 + 8], r10
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	sub rsp, 8
	; Moving 8 bytes from r12 - 248 to rsp
		mov r10, [r12 - 248 + 0]
		mov [rsp + 0], r10
	pop rax
	add rsp, 80 ; Local variables
	pop rbp
	ret

jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp
	sub rsp, 8 ; Align stack
	mov rax, [rel const26] ; 810
	push rax
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const27] ; 17.58
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for b
	sub rsp, 8 ; Align stack
	mov rax, [rel const28] ; 86.99
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const29] ; 0.66
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const30] ; 9
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 16
		mov r10, [rsp + 0 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	mov rax, [rsp]
	cmp rax, 0
	jg .jump157
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump157:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize b to 0
	mov rax, 0
	push rax
.jump158: ; Begin body of loop
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump159 ; If b >= bound, break
.jump160:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment b
	add qword [rsp + 0], 1
	jmp .jump158
.jump159: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	mov rax, [rel const0] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump161
	mov rax, [rel const31] ; 86.43
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	jmp .jump162
.jump161:
	mov rax, [rel const32] ; 726
	push rax
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
.jump162:
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump163
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump163:
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	sub rsp, 8 ; Align stack
	mov rax, [rel const33] ; 59.07
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Moving 8 bytes from rsp + 16 to rsp + 16
		mov r10, [rsp + 16 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	mov rax, [rsp]
	cmp rax, 0
	jg .jump164
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump164:
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump165
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump165:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by e
	jno .jump166
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump166:
	imul rdi, [rsp + 0 + 8] ; multiply by {sin(59.07), (! b), e}{2}
	jno .jump167
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump167:
	imul rdi, [rsp + 0 + 16] ; multiply by to_int((if b then asin(86.43) else to_float(726)))
	jno .jump168
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump168:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
.jump169: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump171 ; If h >= bound, ...
	mov qword [rsp + 16], 0 ; h = 0
	add qword [rsp + 8], 1 ; g++
.jump171:
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump172 ; If g >= bound, ...
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
.jump172:
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump170 ; If f >= bound, break
.jump173:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const34] ; 40.59
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const35] ; 75.25
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment h
	add qword [rsp + 16], 1
	jmp .jump169
.jump170: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for f
	mov rax, [rel const0] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump174
	mov rax, [rel const36] ; 159
	push rax
	jmp .jump175
.jump174:
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
.jump175:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump176
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump176:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize f to 0
	mov rax, 0
	push rax
.jump177: ; Begin body of loop
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump178 ; If f >= bound, break
.jump179:
	; Compute loop body
	mov rax, [rel const37] ; 92.74
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 16] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 16], xmm0 ; Save sum
	; Increment f
	add qword [rsp + 0], 1
	jmp .jump177
.jump178: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rel const38] ; 47.72
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump180
	mov rax, [rel const39] ; 198
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rdi, 16
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	; Moving 16 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 8]
		mov [rsp + 8 + 8], r10
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	jmp .jump181
.jump180:
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for g
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for g
	mov rax, [rel const40] ; 751
	push rax
	mov rax, [rsp]
	; Computing bound for f
	mov rax, [rel const41] ; 526
	push rax
	mov rax, [rsp]
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
.jump182: ; Begin body of loop
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump184 ; If g >= bound, ...
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
.jump184:
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump183 ; If f >= bound, break
.jump185:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment g
	add qword [rsp + 8], 1
	jmp .jump182
.jump183: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump186
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump186:
	; Computing bound for f
	mov rax, [rel const42] ; 866
	push rax
	mov rax, [rel const43] ; 258
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump187
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump187:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
.jump188: ; Begin body of loop
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump190 ; If g >= bound, ...
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
.jump190:
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump189 ; If f >= bound, break
.jump191:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 112 to rsp
		mov r10, [rbp - 112 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment g
	add qword [rsp + 8], 1
	jmp .jump188
.jump189: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 24
		mov r10, [rsp + 0 + 0]
		mov [rsp + 24 + 0], r10
	add rsp, 24
	mov rdi, 24
	call _jpl_alloc
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	push rax
	mov rax, 3
	push rax
.jump181:
	sub rsp, 8 ; Align stack
	call _get_time
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const44] ; 183
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump192
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump192:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump193
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump193:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by e
	jno .jump194
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump194:
	imul rdi, [rsp + 0 + 8] ; multiply by (183 * argnum)
	jno .jump195
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump195:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump196: ; Begin body of loop
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump198 ; If m >= bound, ...
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
.jump198:
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump197 ; If l >= bound, break
.jump199:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const45] ; 845
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment m
	add qword [rsp + 8], 1
	jmp .jump196
.jump197: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump200
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump200:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump201
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump201:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by (k - g)
	jno .jump202
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump202:
	imul rdi, [rsp + 0 + 8] ; multiply by i
	jno .jump203
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump203:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump204: ; Begin body of loop
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump206 ; If m >= bound, ...
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
.jump206:
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump205 ; If l >= bound, break
.jump207:
	; Compute loop body
	mov rax, [rel const46] ; 76.99
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment m
	add qword [rsp + 8], 1
	jmp .jump204
.jump205: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const0] ; False
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const1] ; True
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump208
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump210
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump210:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump211
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump211:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by j
	jno .jump212
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump212:
	imul rdi, [rsp + 0 + 8] ; multiply by e
	jno .jump213
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump213:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump214: ; Begin body of loop
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump216 ; If m >= bound, ...
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
.jump216:
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump215 ; If l >= bound, break
.jump217:
	; Compute loop body
	sub rsp, 32
	; Moving 32 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 72 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 72 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump218
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump218:
	cmp rax, [rsp + 24]
	jl .jump219
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump219:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump220
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump220:
	cmp rax, [rsp + 32]
	jl .jump221
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump221:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump222
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump222:
	cmp rax, [rsp + 40]
	jl .jump223
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump223:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment m
	add qword [rsp + 8], 1
	jmp .jump214
.jump215: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump209
.jump208:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump224
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	jmp .jump225
.jump224:
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
.jump225:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump226
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump226:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump227
	sub rsp, 8 ; Align stack
	lea rdi, [rel const47] ; divide by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump227:
	cqo
	idiv r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump228
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump228:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by (k / k)
	jno .jump229
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump229:
	imul rdi, [rsp + 0 + 8] ; multiply by (if b then g else i)
	jno .jump230
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump230:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump231: ; Begin body of loop
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump233 ; If m >= bound, ...
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
.jump233:
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump232 ; If l >= bound, break
.jump234:
	; Compute loop body
	mov rax, [rel const48] ; 33.18
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment m
	add qword [rsp + 8], 1
	jmp .jump231
.jump232: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump209:
	call _get_time
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 80]
	subsd xmm0, xmm1
	call _print_time
	call _get_time
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 24
	lea rdi, [rsp]
	lea rsi, [rel const49] ; v.png
	call _read_image
	call _get_time
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 24]
	subsd xmm0, xmm1
	call _print_time
	call _get_time
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	call _get_time
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 0]
	subsd xmm0, xmm1
	sub rsp, 8 ; Align stack
	call _print_time
	add rsp, 8 ; Remove alignment
	sub rsp, 32
	; Moving 32 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 72 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 72 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	lea rdi, [rel const50] ; D
	sub rsp, 8 ; Align stack
	call _print
	add rsp, 8 ; Remove alignment
	sub rsp, 24
	; Moving 24 bytes from rbp - 120 to rsp
		mov r10, [rbp - 120 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 120 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 136 to rsp
		mov r10, [rbp - 136 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump349
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
.jump349:
	cmp rax, [rsp + 16]
	jl .jump350
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
.jump350:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump351
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
.jump351:
	cmp rax, [rsp + 24]
	jl .jump352
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
.jump352:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump353
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for G
	sub rsp, 8
	; Moving 8 bytes from rbp - 208 to rsp
		mov r10, [rbp - 208 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump355
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump355:
	; Computing bound for F
	sub rsp, 8
	; Moving 8 bytes from rbp - 176 to rsp
		mov r10, [rbp - 176 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump356
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump356:
	; Computing bound for E
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump357
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump357:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump358
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump358:
	imul rdi, [rsp + 0 + 8] ; multiply by m
	jno .jump359
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump359:
	imul rdi, [rsp + 0 + 16] ; multiply by w
	jno .jump360
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump360:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize G to 0
	mov rax, 0
	push rax
	; Initialize F to 0
	mov rax, 0
	push rax
	; Initialize E to 0
	mov rax, 0
	push rax
.jump361: ; Begin body of loop
	; Compare G to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump363 ; If G >= bound, ...
	mov qword [rsp + 16], 0 ; G = 0
	add qword [rsp + 8], 1 ; F++
.jump363:
	; Compare F to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump364 ; If F >= bound, ...
	mov qword [rsp + 8], 0 ; F = 0
	add qword [rsp + 0], 1 ; E++
.jump364:
	; Compare E to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump362 ; If E >= bound, break
.jump365:
	; Compute loop body
	mov rax, [rel const0] ; False
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment G
	add qword [rsp + 16], 1
	jmp .jump361
.jump362: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump354
.jump353:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for G
	sub rsp, 8
	; Moving 8 bytes from rbp - 136 to rsp
		mov r10, [rbp - 136 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump366
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump366:
	; Computing bound for F
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump367
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
.jump367:
	; Computing bound for E
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump368
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump368:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by k
	jno .jump369
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump369:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump370
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump370:
	imul rdi, [rsp + 0 + 16] ; multiply by r
	jno .jump371
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump371:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize G to 0
	mov rax, 0
	push rax
	; Initialize F to 0
	mov rax, 0
	push rax
	; Initialize E to 0
	mov rax, 0
	push rax
.jump372: ; Begin body of loop
	; Compare G to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump374 ; If G >= bound, ...
	mov qword [rsp + 16], 0 ; G = 0
	add qword [rsp + 8], 1 ; F++
.jump374:
	; Compare F to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump375 ; If F >= bound, ...
	mov qword [rsp + 8], 0 ; F = 0
	add qword [rsp + 0], 1 ; E++
.jump375:
	; Compare E to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump373 ; If E >= bound, break
.jump376:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment G
	add qword [rsp + 16], 1
	jmp .jump372
.jump373: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump354:
	sub rsp, 16
	; Moving 16 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for E
	sub rsp, 8
	; Moving 8 bytes from rbp - 200 to rsp
		mov r10, [rbp - 200 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 144 to rsp
		mov r10, [rbp - 144 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump377
	lea rdi, [rel const13] ; mod by zero
	call _fail_assertion
.jump377:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump378
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump378:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by (q % x)
	jno .jump379
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump379:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize E to 0
	mov rax, 0
	push rax
.jump380: ; Begin body of loop
	; Compare E to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump381 ; If E >= bound, break
.jump382:
	; Compute loop body
	mov rax, [rel const0] ; False
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment E
	add qword [rsp + 0], 1
	jmp .jump380
.jump381: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	; Moving 32 bytes from rsp + 32 to rsp + 32
		mov r10, [rsp + 32 + 24]
		mov [rsp + 32 + 24], r10
		mov r10, [rsp + 32 + 16]
		mov [rsp + 32 + 16], r10
		mov r10, [rsp + 32 + 8]
		mov [rsp + 32 + 8], r10
		mov r10, [rsp + 32 + 0]
		mov [rsp + 32 + 0], r10
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump383
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
.jump383:
	cmp rax, [rsp + 24]
	jl .jump384
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
.jump384:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump385
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
.jump385:
	cmp rax, [rsp + 32]
	jl .jump386
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
.jump386:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump387
	lea rdi, [rel const8] ; negative array index
	call _fail_assertion
.jump387:
	cmp rax, [rsp + 40]
	jl .jump388
	lea rdi, [rel const9] ; index too large
	call _fail_assertion
.jump388:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	jne .jump389
	sub rsp, 8 ; Align stack
	lea rdi, [rel const56] ; E
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump389:
	add rsp, 240 ; Local variables
	pop r12
	pop rbp
	ret

