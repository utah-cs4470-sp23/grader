global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 554
const1: db `non-positive loop bound`, 0
const2: db `overflow computing array size`, 0
const3: dq 1
const4: dq 608
const5: dq 0
const6: dq 46.87
const7: db `negative array index`, 0
const8: db `index too large`, 0
const9: db `c`, 0
const10: db `d.png`, 0
const11: db `e.png`, 0
const12: dq 157
const13: db `divide by zero`, 0
const14: dq 424
const15: db `j`, 0
const16: dq 426
const17: dq 793
const18: dq 51.18
const19: dq 1.91
const20: dq 12.74
const21: dq 561
const22: dq 502
const23: dq 68.36
const24: dq 87.86
const25: dq 648
const26: db `mod by zero`, 0
const27: dq 887
const28: dq 72.17
const29: dq 49.75
const30: dq 87.51
const31: dq 279
const32: dq 22.57
const33: dq 95.79
const34: dq 215
const35: db `h.png`, 0
const36: dq 702
const37: dq 894
const38: dq 690
const39: dq 475
const40: dq 342
const41: dq 547
const42: dq 302
const43: dq 966
const44: dq 287
const45: dq 1.55
const46: dq 752
const47: dq 72.03
const48: dq 461
const49: dq 951
const50: dq 763
const51: dq 272
const52: dq 883
const53: dq 48.6
const54: dq 923
const55: dq 829
const56: dq 164
const57: dq 682
const58: dq 587
const59: dq 869
const60: dq 919
const61: dq 980
const62: dq 418
const63: dq 806
const64: db `(IntType)`, 0
const65: dq 33.68

section .text
f:
_f:
	push rbp
	mov rbp, rsp
	mov rax, [rel const12] ; 157
	push rax
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const3] ; True
	push rax
	; Moving 16 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump25
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	jmp .jump26
.jump25:
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
.jump26:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump27
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump27:
	; Computing bound for k
	mov rax, [rel const5] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump28
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump29
.jump28:
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
.jump29:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump30
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump30:
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump31
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; divide by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump31:
	cqo
	idiv r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump32
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump32:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof {bool}
	imul rdi, [rsp + 0 + 0] ; multiply by (b / argnum)
	jno .jump33
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump33:
	imul rdi, [rsp + 0 + 8] ; multiply by (if false then argnum else b)
	jno .jump34
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump34:
	imul rdi, [rsp + 0 + 16] ; multiply by (if h then b else b)
	jno .jump35
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump35:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize l to 0
	mov rax, 0
	push rax
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
.jump36: ; Begin body of loop
	; Compare l to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump38 ; If l >= bound, ...
	mov qword [rsp + 16], 0 ; l = 0
	add qword [rsp + 8], 1 ; k++
.jump38:
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump39 ; If k >= bound, ...
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
.jump39:
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump37 ; If j >= bound, break
.jump40:
	; Compute loop body
	mov rax, [rel const5] ; False
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment l
	add qword [rsp + 16], 1
	jmp .jump36
.jump37: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rel const14] ; 424
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump41
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump41:
	cmp rax, [rsp + 24]
	jl .jump42
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump42:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump43
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump43:
	cmp rax, [rsp + 32]
	jl .jump44
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump44:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump45
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump45:
	cmp rax, [rsp + 40]
	jl .jump46
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump46:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	pop rax
	cmp rax, 0
	je .jump47
	mov rax, [rel const5] ; False
	push rax
	jmp .jump48
.jump47:
	mov rax, [rel const5] ; False
	push rax
.jump48:
	pop rax
	cmp rax, 0
	jne .jump49
	lea rdi, [rel const15] ; j
	call _fail_assertion
.jump49:
	mov rax, [rel const5] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump50
	sub rsp, 16
	; Moving 16 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const3] ; True
	push rax
	sub rsp, 24
	; Moving 24 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 88 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	jmp .jump51
.jump50:
	mov rax, [rel const5] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump52
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump53
.jump52:
	sub rsp, 16
	; Moving 16 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
.jump53:
	mov rax, [rel const5] ; False
	push rax
	sub rsp, 24
	; Moving 24 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 88 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
.jump51:
	; Moving 64 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 56]
		mov [rsp + 0 + 56], r10
		mov r10, [rsp + 0 + 48]
		mov [rsp + 0 + 48], r10
		mov r10, [rsp + 0 + 40]
		mov [rsp + 0 + 40], r10
		mov r10, [rsp + 0 + 32]
		mov [rsp + 0 + 32], r10
		mov r10, [rsp + 0 + 24]
		mov [rsp + 0 + 24], r10
		mov r10, [rsp + 0 + 16]
		mov [rsp + 0 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	add rsp, 88 ; Local variables
	pop rbp
	ret

g:
_g:
	push rbp
	mov rbp, rsp
	sub rsp, 24
	; Moving 24 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 88 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for j
	mov rax, [rel const16] ; 426
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump54
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump54:
	; Computing bound for i
	mov rax, [rel const17] ; 793
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump55
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump55:
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump56
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump56:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
.jump57: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump59 ; If j >= bound, ...
	mov qword [rsp + 16], 0 ; j = 0
	add qword [rsp + 8], 1 ; i++
.jump59:
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump60 ; If i >= bound, ...
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
.jump60:
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump58 ; If h >= bound, break
.jump61:
	; Compute loop body
	mov rax, [rel const18] ; 51.18
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 48] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment j
	add qword [rsp + 16], 1
	jmp .jump57
.jump58: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	; Moving 8 bytes from rsp + 0 to rsp + 24
		mov r10, [rsp + 0 + 0]
		mov [rsp + 24 + 0], r10
	add rsp, 24
	sub rsp, 8 ; Align stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for i
	sub rsp, 8 ; Align stack
	mov rax, [rel const19] ; 1.91
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump62
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump62:
	; Computing bound for h
	mov rax, [rel const20] ; 12.74
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump63
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump63:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
.jump64: ; Begin body of loop
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump66 ; If i >= bound, ...
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
.jump66:
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump65 ; If h >= bound, break
.jump67:
	; Compute loop body
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 32] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 32], xmm0 ; Save sum
	; Increment i
	add qword [rsp + 8], 1
	jmp .jump64
.jump65: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	add rsp, 0 ; Local variables
	pop rbp
	ret
	mov rax, [rel const21] ; 561
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	pop rax
	pop r10
	sub rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const22] ; 502
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const23] ; 68.36
	push rax
	mov rax, [rel const24] ; 87.86
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump68
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump69
.jump68:
	mov rax, [rel const25] ; 648
	push rax
.jump69:
	pop rax
	pop r10
	cmp r10, 0
	jne .jump70
	sub rsp, 8 ; Align stack
	lea rdi, [rel const26] ; mod by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump70:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	call _g
	push rax
	pop rax
	xor rax, 1
	push rax
	mov rax, [rel const3] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump71
	mov rax, [rel const5] ; False
	push rax
	pop rax
.jump71:
	push rax
	; Moving 16 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 8]
		mov [rsp + 8 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	; Moving 8 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	pop rax
	add rsp, 8 ; Local variables
	pop rbp
	ret
	mov rax, [rel const3] ; True
	push rax
	mov rdi, 8
	call _jpl_alloc
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	mov rax, [rel const27] ; 887
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump72
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
.jump72:
	cmp rax, [rsp + 8]
	jl .jump73
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
.jump73:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump74
	mov rax, [rel const3] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	jne .jump75
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
.jump75:
	push rax
	pop rax
.jump74:
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump76
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for i
	mov rax, [rel const28] ; 72.17
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump78
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump78:
	; Computing total size of heap memory to allocate
	mov rdi, 40 ; sizeof {{int},{{float,float,float,float}[,]},int}
	imul rdi, [rsp + 0 + 0] ; multiply by to_int(tan(72.17))
	jno .jump79
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump79:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
.jump80: ; Begin body of loop
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump81 ; If i >= bound, break
.jump82:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	; Moving 24 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 88 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 40
	add rax, [rsp + 56]
	; Move body (40 bytes) to index
	; Moving 40 bytes from rsp to rax
		mov r10, [rsp + 32]
		mov [rax + 32], r10
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 40
	; Increment i
	add qword [rsp + 0], 1
	jmp .jump80
.jump81: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	mov rax, [rel const29] ; 49.75
	push rax
	mov rax, [rel const30] ; 87.51
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump83
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump85
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump85:
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump86
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump86:
	; Computing bound for i
	mov rax, [rel const31] ; 279
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump87
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump87:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
.jump88: ; Begin body of loop
	; Compare k to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump90 ; If k >= bound, ...
	mov qword [rsp + 16], 0 ; k = 0
	add qword [rsp + 8], 1 ; j++
.jump90:
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump91 ; If j >= bound, ...
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
.jump91:
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump89 ; If i >= bound, break
.jump92:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment k
	add qword [rsp + 16], 1
	jmp .jump88
.jump89: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	jmp .jump84
.jump83:
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
.jump84:
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump93
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
.jump93:
	cmp rax, [rsp + 8]
	jl .jump94
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
.jump94:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 40
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 40
	; Moving 40 bytes from rax to rsp
		mov r10, [rax + 32]
		mov [rsp + 32], r10
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump77
.jump76:
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump95
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump95:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump96
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump96:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof {{float,float,float,float}[,]}
	imul rdi, [rsp + 0 + 0] ; multiply by b
	jno .jump97
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump97:
	imul rdi, [rsp + 0 + 8] ; multiply by b
	jno .jump98
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump98:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
.jump99: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump101 ; If j >= bound, ...
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
.jump101:
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump100 ; If i >= bound, break
.jump102:
	; Compute loop body
	sub rsp, 24
	; Moving 24 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 88 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 24
	add rax, [rsp + 56]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment j
	add qword [rsp + 8], 1
	jmp .jump99
.jump100: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8 ; Align stack
	mov rax, [rel const32] ; 22.57
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	; Moving 24 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 64 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 32 to rsp + 32
		mov r10, [rsp + 32 + 0]
		mov [rsp + 32 + 0], r10
	add rsp, 32
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump103
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump103:
	cmp rax, [rsp + 16]
	jl .jump104
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump104:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump105
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump105:
	cmp rax, [rsp + 24]
	jl .jump106
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump106:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 24
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump107
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump107:
	; Computing bound for i
	sub rsp, 8 ; Align stack
	mov rax, [rel const33] ; 95.79
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump108
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump108:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof {int}
	imul rdi, [rsp + 0 + 0] ; multiply by to_int(95.79)
	jno .jump109
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump109:
	imul rdi, [rsp + 0 + 8] ; multiply by h
	jno .jump110
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump110:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
.jump111: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump113 ; If j >= bound, ...
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
.jump113:
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump112 ; If i >= bound, break
.jump114:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment j
	add qword [rsp + 8], 1
	jmp .jump111
.jump112: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 16
	; Moving 16 bytes from r12 - 40 to rsp
		mov r10, [r12 - 40 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump115
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
.jump115:
	cmp rax, [rsp + 8]
	jl .jump116
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
.jump116:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump117
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
.jump117:
	cmp rax, [rsp + 16]
	jl .jump118
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
.jump118:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump119
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
.jump119:
	cmp rax, [rsp + 24]
	jl .jump120
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
.jump120:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump77:
	mov rax, [rel const5] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump121
	call _g
	push rax
	pop rax
	cmp rax, 0
	je .jump123
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const34] ; 215
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	pop rax
.jump123:
	push rax
	pop rax
	cmp rax, 0
	jne .jump124
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump125
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump125:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump126
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump126:
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump127
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump127:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by b
	jno .jump128
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump128:
	imul rdi, [rsp + 0 + 8] ; multiply by i
	jno .jump129
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump129:
	imul rdi, [rsp + 0 + 16] ; multiply by k
	jno .jump130
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump130:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
.jump131: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump133 ; If p >= bound, ...
	mov qword [rsp + 16], 0 ; p = 0
	add qword [rsp + 8], 1 ; o++
.jump133:
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump134 ; If o >= bound, ...
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
.jump134:
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump132 ; If n >= bound, break
.jump135:
	; Compute loop body
	sub rsp, 8 ; Align stack
	call _g
	add rsp, 8 ; Remove alignment
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment p
	add qword [rsp + 16], 1
	jmp .jump131
.jump132: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump136
	lea rdi, [rel const26] ; mod by zero
	call _fail_assertion
.jump136:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump137
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump137:
	cmp rax, [rsp + 24]
	jl .jump138
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump138:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump139
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump139:
	cmp rax, [rsp + 32]
	jl .jump140
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump140:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump141
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump141:
	cmp rax, [rsp + 40]
	jl .jump142
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump142:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
.jump124:
	push rax
	jmp .jump122
.jump121:
	mov rax, [rel const3] ; True
	push rax
.jump122:
	pop rax
	cmp rax, 0
	jne .jump143
	mov rax, [rel const3] ; True
	push rax
	pop rax
.jump143:
	push rax
	pop rax
	add rsp, 48 ; Local variables
	pop rbp
	ret

i:
_i:
	push rbp
	mov rbp, rsp
	call _g
	push rax
	pop rax
	cmp rax, 0
	je .jump144
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump146
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump146:
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump147
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump147:
	; Computing bound for j
	sub rsp, 8 ; Align stack
	call _g
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	cmp rax, 0
	je .jump148
	mov rax, [rel const36] ; 702
	push rax
	jmp .jump149
.jump148:
	mov rax, [rel const37] ; 894
	push rax
.jump149:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump150
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump150:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by (if g() then 702 else 894)
	jno .jump151
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump151:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump152
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump152:
	imul rdi, [rsp + 0 + 16] ; multiply by b
	jno .jump153
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump153:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize l to 0
	mov rax, 0
	push rax
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
.jump154: ; Begin body of loop
	; Compare l to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump156 ; If l >= bound, ...
	mov qword [rsp + 16], 0 ; l = 0
	add qword [rsp + 8], 1 ; k++
.jump156:
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump157 ; If k >= bound, ...
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
.jump157:
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump155 ; If j >= bound, break
.jump158:
	; Compute loop body
	sub rsp, 16
	; Moving 16 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump159
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
.jump159:
	cmp rax, [rsp + 8]
	jl .jump160
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
.jump160:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment l
	add qword [rsp + 16], 1
	jmp .jump154
.jump155: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const38] ; 690
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump161
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump161:
	cmp rax, [rsp + 24]
	jl .jump162
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump162:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump163
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump163:
	cmp rax, [rsp + 32]
	jl .jump164
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump164:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump165
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump165:
	cmp rax, [rsp + 40]
	jl .jump166
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump166:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump167
	call _i
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	sub rsp, 8 ; Align stack
	call _g
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	cmp rax, 0
	je .jump168
	mov rax, [rel const5] ; False
	push rax
	jmp .jump169
.jump168:
	sub rsp, 8 ; Align stack
	call _g
	add rsp, 8 ; Remove alignment
	push rax
.jump169:
	pop rax
	xor rax, 1
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
.jump167:
	push rax
	jmp .jump145
.jump144:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for j
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump170
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump170:
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump171
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump171:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
.jump172: ; Begin body of loop
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump174 ; If k >= bound, ...
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
.jump174:
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump173 ; If j >= bound, break
.jump175:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment k
	add qword [rsp + 8], 1
	jmp .jump172
.jump173: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump176
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump176:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof {{float,float,float,float}[,],bool}
imul rdi, [rsp + 0 + 0] ; multiply by (sum[j : b, k : b] b)
	jno .jump177
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump177:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
.jump178: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump179 ; If j >= bound, break
.jump180:
	; Compute loop body
	sub rsp, 8 ; Align stack
	call _g
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 24
	; Moving 24 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 88 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 32
	add rax, [rsp + 48]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment j
	add qword [rsp + 0], 1
	jmp .jump178
.jump179: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump181
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump181:
	cmp rax, [rsp + 8]
	jl .jump182
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump182:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 32
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 32
	; Moving 32 bytes from rax to rsp
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 24 to rsp + 24
		mov r10, [rsp + 24 + 0]
		mov [rsp + 24 + 0], r10
	add rsp, 24
.jump145:
	pop rax
	cmp rax, 0
	jne .jump183
	lea rdi, [rel const15] ; j
	call _fail_assertion
.jump183:
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump184
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const39] ; 475
	push rax
	jmp .jump185
.jump184:
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
.jump185:
	; Moving 8 bytes from rsp + 0 to rsp + 16
		mov r10, [rsp + 0 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for k
	mov rax, [rel const40] ; 342
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump186
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump186:
	; Computing bound for j
	mov rax, [rel const5] ; False
	push rax
	mov rax, [rel const3] ; True
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump187
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump188
.jump187:
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
.jump188:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump189
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump189:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
.jump190: ; Begin body of loop
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump192 ; If k >= bound, ...
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
.jump192:
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump191 ; If j >= bound, break
.jump193:
	; Compute loop body
	call _i
	push rax
	pop rax
	cmp rax, 0
	je .jump194
	mov rax, [rel const41] ; 547
	push rax
	jmp .jump195
.jump194:
	mov rax, [rel const42] ; 302
	push rax
.jump195:
	sub rsp, 16
	; Moving 16 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump196
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
.jump196:
	cmp rax, [rsp + 8]
	jl .jump197
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
.jump197:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment k
	add qword [rsp + 8], 1
	jmp .jump190
.jump191: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump198
	call _g
	push rax
	pop rax
.jump198:
	push rax
	pop rax
	add rsp, 0 ; Local variables
	pop rbp
	ret
	call _i
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump199
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const43] ; 966
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	jmp .jump200
.jump199:
	mov rax, [rel const5] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
.jump200:
	pop rax
	cmp rax, 0
	je .jump201
	sub rsp, 16
	; Moving 16 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	jmp .jump202
.jump201:
	call _g
	push rax
	pop rax
	xor rax, 1
	push rax
	mov rdi, 8
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
.jump202:
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump203
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump203:
	cmp rax, [rsp + 8]
	jl .jump204
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump204:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump205
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump207
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump207:
	; Computing bound for j
	mov rax, [rel const44] ; 287
	push rax
	mov rax, [rel const45] ; 1.55
	push rax
	; Moving 8 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	mov rax, [rsp]
	cmp rax, 0
	jg .jump208
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump208:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof {float,float,float,float}[,][,,]
	imul rdi, [rsp + 0 + 0] ; multiply by {1.55, 287}{1}
	jno .jump209
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump209:
	imul rdi, [rsp + 0 + 8] ; multiply by b
	jno .jump210
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump210:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
.jump211: ; Begin body of loop
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump213 ; If k >= bound, ...
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
.jump213:
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump212 ; If j >= bound, break
.jump214:
	; Compute loop body
	sub rsp, 8 ; Align stack
	call _i
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	cmp rax, 0
	je .jump215
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump217
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump217:
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump218
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump218:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump219
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump219:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof {float,float,float,float}[,]
	imul rdi, [rsp + 0 + 0] ; multiply by b
	jno .jump220
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump220:
	imul rdi, [rsp + 0 + 8] ; multiply by b
	jno .jump221
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump221:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump222
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump222:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump223: ; Begin body of loop
	; Compare n to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump225 ; If n >= bound, ...
	mov qword [rsp + 16], 0 ; n = 0
	add qword [rsp + 8], 1 ; m++
.jump225:
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump226 ; If m >= bound, ...
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
.jump226:
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump224 ; If l >= bound, break
.jump227:
	; Compute loop body
	sub rsp, 24
	; Moving 24 bytes from r12 - 112 to rsp
		mov r10, [r12 - 112 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 112 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 112 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 24
	add rax, [rsp + 72]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment n
	add qword [rsp + 16], 1
	jmp .jump223
.jump224: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump216
.jump215:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump228
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump228:
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump229
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump229:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump230
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump230:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof {float,float,float,float}[,]
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump231
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump231:
	imul rdi, [rsp + 0 + 8] ; multiply by k
	jno .jump232
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump232:
	imul rdi, [rsp + 0 + 16] ; multiply by b
	jno .jump233
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump233:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump234: ; Begin body of loop
	; Compare n to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump236 ; If n >= bound, ...
	mov qword [rsp + 16], 0 ; n = 0
	add qword [rsp + 8], 1 ; m++
.jump236:
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump237 ; If m >= bound, ...
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
.jump237:
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump235 ; If l >= bound, break
.jump238:
	; Compute loop body
	sub rsp, 24
	; Moving 24 bytes from r12 - 112 to rsp
		mov r10, [r12 - 112 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 112 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 112 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 24
	add rax, [rsp + 72]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment n
	add qword [rsp + 16], 1
	jmp .jump234
.jump235: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump216:
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 32
	add rax, [rsp + 64]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment k
	add qword [rsp + 8], 1
	jmp .jump211
.jump212: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const46] ; 752
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump239
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump239:
	cmp rax, [rsp + 16]
	jl .jump240
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump240:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump241
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump241:
	cmp rax, [rsp + 24]
	jl .jump242
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump242:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 32
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 32
	; Moving 32 bytes from rax to rsp
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump206
.jump205:
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const47] ; 72.03
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump243
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump245
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump245:
	; Computing bound for k
	mov rax, [rel const48] ; 461
	push rax
	mov rax, [rel const49] ; 951
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump246
	lea rdi, [rel const26] ; mod by zero
	call _fail_assertion
.jump246:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump247
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump247:
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump248
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump248:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof {float,float,float,float}[,][,,]
	imul rdi, [rsp + 0 + 0] ; multiply by (- b)
	jno .jump249
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump249:
	imul rdi, [rsp + 0 + 8] ; multiply by (951 % 461)
	jno .jump250
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump250:
	imul rdi, [rsp + 0 + 16] ; multiply by (- argnum)
	jno .jump251
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump251:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize l to 0
	mov rax, 0
	push rax
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
.jump252: ; Begin body of loop
	; Compare l to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump254 ; If l >= bound, ...
	mov qword [rsp + 16], 0 ; l = 0
	add qword [rsp + 8], 1 ; k++
.jump254:
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump255 ; If k >= bound, ...
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
.jump255:
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump253 ; If j >= bound, break
.jump256:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump257
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump257:
	; Computing bound for n
	mov rax, [rel const50] ; 763
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump258
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump258:
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump259
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump259:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof {float,float,float,float}[,]
	imul rdi, [rsp + 0 + 0] ; multiply by l
	jno .jump260
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump260:
	imul rdi, [rsp + 0 + 8] ; multiply by 763
	jno .jump261
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump261:
	imul rdi, [rsp + 0 + 16] ; multiply by j
	jno .jump262
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump262:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
	; Initialize m to 0
	mov rax, 0
	push rax
.jump263: ; Begin body of loop
	; Compare o to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump265 ; If o >= bound, ...
	mov qword [rsp + 16], 0 ; o = 0
	add qword [rsp + 8], 1 ; n++
.jump265:
	; Compare n to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump266 ; If n >= bound, ...
	mov qword [rsp + 8], 0 ; n = 0
	add qword [rsp + 0], 1 ; m++
.jump266:
	; Compare m to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump264 ; If m >= bound, break
.jump267:
	; Compute loop body
	sub rsp, 24
	; Moving 24 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 88 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 24
	add rax, [rsp + 72]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment o
	add qword [rsp + 16], 1
	jmp .jump263
.jump264: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, [rsp + 72] ; No overflow if indices in bounds
	add rax, [rsp + 48]
	imul rax, 32
	add rax, [rsp + 80]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment l
	add qword [rsp + 16], 1
	jmp .jump252
.jump253: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump244
.jump243:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump268
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump268:
	; Computing bound for k
	mov rax, [rel const51] ; 272
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump269
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump269:
	; Computing bound for j
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for l
	mov rax, [rel const52] ; 883
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump270
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump270:
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump271
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump271:
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump272
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump272:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize l to 0
	mov rax, 0
	push rax
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
.jump273: ; Begin body of loop
	; Compare l to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump275 ; If l >= bound, ...
	mov qword [rsp + 16], 0 ; l = 0
	add qword [rsp + 8], 1 ; k++
.jump275:
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump276 ; If k >= bound, ...
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
.jump276:
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump274 ; If j >= bound, break
.jump277:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment l
	add qword [rsp + 16], 1
	jmp .jump273
.jump274: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump278
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump278:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof {float,float,float,float}[,][,,]
imul rdi, [rsp + 0 + 0] ; multiply by (sum[j : argnum, k : b, l : 883] j)
	jno .jump279
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump279:
	imul rdi, [rsp + 0 + 8] ; multiply by (b + 272)
	jno .jump280
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump280:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump281
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump281:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize l to 0
	mov rax, 0
	push rax
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
.jump282: ; Begin body of loop
	; Compare l to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump284 ; If l >= bound, ...
	mov qword [rsp + 16], 0 ; l = 0
	add qword [rsp + 8], 1 ; k++
.jump284:
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump285 ; If k >= bound, ...
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
.jump285:
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump283 ; If j >= bound, break
.jump286:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump287
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump287:
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump288
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump288:
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump289
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump289:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof {float,float,float,float}[,]
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump290
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump290:
	imul rdi, [rsp + 0 + 8] ; multiply by b
	jno .jump291
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump291:
	imul rdi, [rsp + 0 + 16] ; multiply by k
	jno .jump292
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump292:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize o to 0
	mov rax, 0
	push rax
	; Initialize n to 0
	mov rax, 0
	push rax
	; Initialize m to 0
	mov rax, 0
	push rax
.jump293: ; Begin body of loop
	; Compare o to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump295 ; If o >= bound, ...
	mov qword [rsp + 16], 0 ; o = 0
	add qword [rsp + 8], 1 ; n++
.jump295:
	; Compare n to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump296 ; If n >= bound, ...
	mov qword [rsp + 8], 0 ; n = 0
	add qword [rsp + 0], 1 ; m++
.jump296:
	; Compare m to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump294 ; If m >= bound, break
.jump297:
	; Compute loop body
	sub rsp, 24
	; Moving 24 bytes from r12 - 64 to rsp
		mov r10, [r12 - 64 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 64 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 24
	add rax, [rsp + 72]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment o
	add qword [rsp + 16], 1
	jmp .jump293
.jump294: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, [rsp + 72] ; No overflow if indices in bounds
	add rax, [rsp + 48]
	imul rax, 32
	add rax, [rsp + 80]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment l
	add qword [rsp + 16], 1
	jmp .jump282
.jump283: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump244:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for j
	sub rsp, 8 ; Align stack
	mov rax, [rel const53] ; 48.6
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump298
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump298:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
.jump299: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump300 ; If j >= bound, break
.jump301:
	; Compute loop body
	mov rax, [rel const54] ; 923
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment j
	add qword [rsp + 0], 1
	jmp .jump299
.jump300: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	sub rsp, 8 ; Align stack
	call _g
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump302
	sub rsp, 8 ; Align stack
	call _i
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	cmp rax, 0
	jne .jump304
	mov rax, [rel const5] ; False
	push rax
	pop rax
.jump304:
	push rax
	pop rax
	cmp rax, 0
	je .jump305
	mov rax, [rel const55] ; 829
	push rax
	pop rax
	neg rax
	push rax
	jmp .jump306
.jump305:
	mov rax, [rel const56] ; 164
	push rax
.jump306:
	jmp .jump303
.jump302:
	mov rax, [rel const57] ; 682
	push rax
.jump303:
	mov rax, [rel const58] ; 587
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump307
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump307:
	cmp rax, [rsp + 24]
	jl .jump308
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump308:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump309
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump309:
	cmp rax, [rsp + 32]
	jl .jump310
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump310:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump311
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump311:
	cmp rax, [rsp + 40]
	jl .jump312
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump312:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 32
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 32
	; Moving 32 bytes from rax to rsp
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump206:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump313
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump313:
	; Computing total size of heap memory to allocate
	mov rdi, 88 ; sizeof {{float,float,float,float}[,][,,],{float,float,float,float}[,],{float,float,float,float}[,][,,]}
	imul rdi, [rsp + 0 + 0] ; multiply by k
	jno .jump314
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump314:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
.jump315: ; Begin body of loop
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump316 ; If n >= bound, break
.jump317:
	; Compute loop body
	sub rsp, 32
	; Moving 32 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	; Moving 24 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 88 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	sub rsp, 32
	; Moving 32 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 96] ; No overflow if indices in bounds
	add rax, [rsp + 88]
	imul rax, 88
	add rax, [rsp + 104]
	; Move body (88 bytes) to index
	; Moving 88 bytes from rsp to rax
		mov r10, [rsp + 80]
		mov [rax + 80], r10
		mov r10, [rsp + 72]
		mov [rax + 72], r10
		mov r10, [rsp + 64]
		mov [rax + 64], r10
		mov r10, [rsp + 56]
		mov [rax + 56], r10
		mov r10, [rsp + 48]
		mov [rax + 48], r10
		mov r10, [rsp + 40]
		mov [rax + 40], r10
		mov r10, [rsp + 32]
		mov [rax + 32], r10
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 88
	; Increment n
	add qword [rsp + 0], 1
	jmp .jump315
.jump316: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	; Moving 16 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump318
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump318:
	cmp rax, [rsp + 8]
	jl .jump319
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump319:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 88
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 88
	; Moving 88 bytes from rax to rsp
		mov r10, [rax + 80]
		mov [rsp + 80], r10
		mov r10, [rax + 72]
		mov [rsp + 72], r10
		mov r10, [rax + 64]
		mov [rsp + 64], r10
		mov r10, [rax + 56]
		mov [rsp + 56], r10
		mov r10, [rax + 48]
		mov [rsp + 48], r10
		mov r10, [rax + 40]
		mov [rsp + 40], r10
		mov r10, [rax + 32]
		mov [rsp + 32], r10
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	call _i
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	add rsp, 120 ; Local variables
	pop rbp
	ret

jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for a
	mov rax, [rel const0] ; 554
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump1:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by ((- argnum) + 554)
	jno .jump2
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump2:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize a to 0
	mov rax, 0
	push rax
.jump3: ; Begin body of loop
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump4 ; If a >= bound, break
.jump5:
	; Compute loop body
	mov rax, [rel const3] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump6
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for d
	mov rax, [rel const4] ; 608
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump7
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump7:
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump8
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump8:
	; Computing bound for b
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump9
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump9:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by (- a)
	jno .jump10
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump10:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump11
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump11:
	imul rdi, [rsp + 0 + 16] ; multiply by 608
	jno .jump12
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump12:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
.jump13: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump15 ; If d >= bound, ...
	mov qword [rsp + 16], 0 ; d = 0
	add qword [rsp + 8], 1 ; c++
.jump15:
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump16 ; If c >= bound, ...
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
.jump16:
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump14 ; If b >= bound, break
.jump17:
	; Compute loop body
	mov rax, [rel const5] ; False
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment d
	add qword [rsp + 16], 1
	jmp .jump13
.jump14: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 24
		mov r10, [rsp + 0 + 0]
		mov [rsp + 24 + 0], r10
	add rsp, 24
	mov rax, [rel const6] ; 46.87
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump18
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump18:
	cmp rax, [rsp + 24]
	jl .jump19
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump19:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump20
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump20:
	cmp rax, [rsp + 32]
	jl .jump21
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump21:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump22
	sub rsp, 8 ; Align stack
	lea rdi, [rel const7] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump22:
	cmp rax, [rsp + 40]
	jl .jump23
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump23:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
.jump6:
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment a
	add qword [rsp + 0], 1
	jmp .jump3
.jump4: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	mov rax, [rel const5] ; False
	push rax
	pop rax
	cmp rax, 0
	jne .jump24
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; c
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump24:
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	lea rdi, [rsp]
	lea rsi, [rel const10] ; d.png
	call _read_image
	sub rsp, 24
	lea rdi, [rsp]
	sub rsp, 8 ; Align stack
	lea rsi, [rel const11] ; e.png
	call _read_image
	add rsp, 8 ; Remove alignment
	sub rsp, 24
	lea rdi, [rsp]
	lea rsi, [rel const35] ; h.png
	call _read_image
	sub rsp, 8 ; Align stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for j
	call _i
	push rax
	pop rax
	cmp rax, 0
	je .jump320
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const59] ; 869
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump322
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump323
.jump322:
	mov rax, [rel const60] ; 919
	push rax
.jump323:
	jmp .jump321
.jump320:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for l
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for l
	mov rax, [rel const61] ; 980
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump324
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump324:
	; Computing bound for k
	mov rax, [rel const62] ; 418
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump325
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump325:
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump326
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump326:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize l to 0
	mov rax, 0
	push rax
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
.jump327: ; Begin body of loop
	; Compare l to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump329 ; If l >= bound, ...
	mov qword [rsp + 16], 0 ; l = 0
	add qword [rsp + 8], 1 ; k++
.jump329:
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump330 ; If k >= bound, ...
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
.jump330:
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump328 ; If j >= bound, break
.jump331:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 184 to rsp
		mov r10, [rbp - 184 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment l
	add qword [rsp + 16], 1
	jmp .jump327
.jump328: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump332
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump332:
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump333
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump333:
	; Computing bound for j
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump334
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump334:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
.jump335: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump336 ; If j >= bound, break
.jump337:
	; Compute loop body
	mov rax, [rel const63] ; 806
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment j
	add qword [rsp + 0], 1
	jmp .jump335
.jump336: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump338
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump338:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize l to 0
	mov rax, 0
	push rax
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
.jump339: ; Begin body of loop
	; Compare l to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump341 ; If l >= bound, ...
	mov qword [rsp + 16], 0 ; l = 0
	add qword [rsp + 8], 1 ; k++
.jump341:
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump342 ; If k >= bound, ...
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
.jump342:
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump340 ; If j >= bound, break
.jump343:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment l
	add qword [rsp + 16], 1
	jmp .jump339
.jump340: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
.jump321:
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump344
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump344:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
.jump345: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump346 ; If j >= bound, break
.jump347:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment j
	add qword [rsp + 0], 1
	jmp .jump345
.jump346: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	lea rdi, [rel const64] ; (IntType)
	lea rsi, [rsp]
	call _show
	add rsp, 8
	add rsp, 8 ; Remove alignment
	call _g
	push rax
	pop rax
	cmp rax, 0
	jne .jump348
	lea rdi, [rel const15] ; j
	call _fail_assertion
.jump348:
	mov rax, [rel const65] ; 33.68
	push rax
	add rsp, 112 ; Local variables
	pop r12
	pop rbp
	ret

