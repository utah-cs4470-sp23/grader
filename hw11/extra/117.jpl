fn a() : float[,,] {
  assert (array[b : (- 913)] {(argnum > b), a()[b, b, 767]}{0})[(sum[b : (- argnum), c : ((- to_int(33.84)) % argnum), d : ((134 - (argnum / 229)) - (- (if true then 640 else 161)))] argnum)], "b"
  return (array[b : (to_int(atan((sum[b : argnum, c : 343, d : 982] 91.14))) % {(array[b : argnum, c : argnum] true), argnum}{1}), c : (if (! true) then (if false then {885, 127} else {770, argnum}) else {argnum, (if false then 173 else 823)}){1}, d : {argnum, ((- argnum) < 279)}{0}] tan(atan(asin(pow(21.03, 18.63)))))
  let {} = (if (array[b : (argnum + argnum)] (array[c : b] false))[(if (argnum != 56) then args[40] else 387)][(argnum * (sum[b : 448, c : 277, d : (980 % argnum)] c))] then {} else (if (to_int(cos(12.14)) == {179}{0}) then (array[b : 748, c : argnum] (if true then {} else {}))[(sum[b : (sum[b : argnum] 218), c : 650, d : (argnum / 917)] d), ((- 166) * 833)] else {}))
  let b = cos(atan2((sum[b : (if (! false) then to_int(52.27) else argnum)] atan(sin(45.49))), 4.9))
  return (array[c : (if (! (exp(36.96) != a()[argnum, argnum, 222])) then (- ((- 530) - to_int(36.59))) else (- (- 366))), d : (array[c : 300, d : (532 % argnum)] (array[e : argnum, f : argnum] c))[to_int(sin(63.84)), (sum[c : (- argnum)] c)][(sum[c : (argnum + to_int(b)), d : (- argnum)] (- argnum)), (- (if (713 < 326) then (- argnum) else (631 % argnum)))], e : (if (! true) then (sum[c : argnum, d : ((- 281) % argnum), e : (110 / (- 763))] to_int((- b))) else (- (587 + (sum[c : argnum, d : 427] c))))] sqrt(atan(85.46)))
}

let {b, c, d[e, f, g]} = (array[b : to_int(asin(58.11)), c : (if (42.8 == 51.78) then 832 else to_int(65.28))] (array[d : (- b), e : b] {15.39, 10.53, a()}))[to_int(cos(81.07)), (if (if false then false else true) then (array[b : argnum, c : argnum, d : 77] d) else (array[b : 929, c : 737, d : 233] argnum))[argnum, to_int((sum[b : 1000, c : argnum] 72.77)), (array[b : argnum, c : 391] b)[(argnum + 939), (- argnum)]]][argnum, (sum[b : (- (sum[b : (if true then 387 else argnum)] (sum[c : 221] 612))), c : (if (570 == 244) then {68.71, argnum, 677} else {95.96, argnum, argnum}){2}, d : (sum[b : (- argnum)] (if (! true) then argnum else (- b)))] 97)]
let h[i, j, k] = (if {{f, true}}{0}{1} then d else a())
read image "l.png" to l

fn m() : int {
  let {} = (if {i, false}{1} then (array[n : g, o : k, p : f] {{}}) else (array[n : k, o : f, p : 853] {{}}))[171, argnum, e]{0}
  let n[o, p] = (if (! true) then (array[n : 30, o : k] log(72.95)) else (array[n : e] (array[o : (e * f), p : (sum[o : i, p : k] o)] log(c)))[{(false != false), (- j)}{1}])
  return (- (if ((! (b == 66.75)) && {false}{0}) then j else i))
  let q[r] = [{args}{0}, args, [to_int(asin(60.45)), 411, p]][{{o, false, o}, to_float(533)}{0}{0}]
  return (m() * 295)
}

show atan2(cos((- b)), sin((if (j != (g % m())) then asin(pow(b, c)) else asin(sqrt(17.9)))))

let {n} = (if (b > b) then [{asin(c)}, {sqrt(b)}, {c}][f] else {(- j), sqrt(atan(b)), {49.76}}{2})
assert true, "o"
fn o(p : {}, q[r, s, t] : bool[,,]) : bool {
  let u[v, w, x] = (array[u : argnum, v : m()] {a()})[i, k]{0}
  let y[z, A, B] = a()
  assert (atan2(log(pow(c, sin(n))), sin(n)) >= {{36.6, i}, l, A}{0}{0}), "C"
  let C[D] = {(array[C : f, D : g, E : e] args)}{0}[t, 106, z]
  return ((if (if true then true else true) then (k == t) else (if (array[E : f, F : j, G : r] true)[x, D, (sum[E : r] v)] then {false, x}{0} else ((A == s) && (false || false)))) || (if false then o((if o(p, q) then p else p), (array[E : v, F : e, G : z] (b != n))) else ((asin(b) < cos(n)) || ((- z) >= A))))
}

print "p"

let p[q, r, s] = (if (! {g, (false || true)}{1}) then d else d)
fn t(u : float, v : float) : float {
  let w[x, y, z] = a()
  return t(cos(v), acos(cos(16.39)))
  let A[B] = (if {(array[A : z, B : f, C : y] true)}{0}[(- to_int(n)), z, i] then (if true then [x, 103] else (if (r == q) then (array[A : k, B : q, C : y] args) else (array[A : j, B : e, C : e] args))[s, g, j]) else (array[A : (sum[A : f] f)] y))
  assert (if true then ((array[C : s, D : 709] u)[114, (890 * y)] == (- b)) else o({}, {tan(6.37), (array[C : argnum, D : j, E : x] false), sin(b)}{1})), "C"
  return sqrt((sum[C : f, D : argnum] n))
}

