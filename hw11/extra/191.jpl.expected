global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 91.62
const1: dq 934
const2: dq 25.92
const3: dq 29.34
const4: db `a`, 0
const5: dq 107
const6: dq 89
const7: dq 1
const8: dq 0
const9: dq 5
const10: dq 0.06
const11: db `non-positive loop bound`, 0
const12: dq 188
const13: db `overflow computing array size`, 0
const14: dq 948
const15: dq 208
const16: db `negative array index`, 0
const17: db `index too large`, 0
const18: dq 555
const19: db `c`, 0
const20: dq 673
const21: dq 93.45
const22: dq 62
const23: dq 51.63
const24: dq 485
const25: dq 492
const26: dq 816
const27: dq 617
const28: dq 26.48
const29: dq 27.86
const30: dq 154
const31: dq 0.75
const32: dq 55.26
const33: dq 74.12
const34: db `d`, 0
const35: dq 866
const36: dq 417
const37: dq 72.11
const38: dq 217
const39: dq 959
const40: dq 729
const41: dq 929
const42: db `mod by zero`, 0
const43: dq 373
const44: dq 522
const45: dq 10.65
const46: dq 885
const47: dq 48.47
const48: dq 945
const49: dq 265
const50: dq 24.05
const51: dq 87
const52: dq 445
const53: dq 473
const54: dq 893
const55: dq 0.11
const56: dq 30.32
const57: dq 933
const58: dq 95.13
const59: dq 70.57
const60: dq 4.97
const61: db `p`, 0
const62: dq 980
const63: dq 379
const64: db `divide by zero`, 0
const65: dq 29.99
const66: dq 520
const67: dq 797
const68: dq 738
const69: dq 73.23
const70: dq 702
const71: dq 519
const72: dq 5.0
const73: dq 65.3
const74: dq 905
const75: dq 45.92
const76: dq 53.08
const77: dq 48.04
const78: dq 53.07
const79: dq 161
const80: dq 76.89
const81: dq 489
const82: dq 827
const83: dq 901
const84: dq 88.6
const85: dq 39.22
const86: dq 579
const87: dq 388
const88: dq 370
const89: dq 13.13
const90: dq 16
const91: dq 850
const92: dq 316
const93: dq 823
const94: dq 12.34
const95: dq 592
const96: dq 10.53
const97: dq 98.69
const98: dq 951
const99: dq 640
const100: dq 21.95
const101: dq 25.99
const102: dq 494
const103: dq 28
const104: dq 600
const105: dq 593
const106: dq 814
const107: dq 46.22
const108: dq 61.67
const109: dq 31.16
const110: dq 68.05
const111: dq 704
const112: dq 86.37
const113: dq 74.36
const114: db `t`, 0
const115: dq 45.6
const116: db `(ArrayType (IntType) 2)`, 0
const117: db `u.png`, 0
const118: db `(FloatType)`, 0

section .text
a:
_a:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for d
	mov rax, [rel const5] ; 107
	push rax
	mov rax, [rsp]
	; Computing bound for c
	mov rax, [rel const6] ; 89
	push rax
	mov rax, [rsp]
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump5: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump7 ; If d >= bound, ...
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
.jump7:
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump6 ; If c >= bound, break
.jump8:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 32] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 32], xmm0 ; Save sum
	; Increment d
	add qword [rsp + 8], 1
	jmp .jump5
.jump6: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump9
	mov rax, [rel const7] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	jmp .jump10
.jump9:
	mov rax, [rel const8] ; False
	push rax
	pop rax
	cmp rax, 0
	jne .jump11
	mov rax, [rel const7] ; True
	push rax
	pop rax
.jump11:
	push rax
	pop rax
	cmp rax, 0
	jne .jump12
	mov rax, [rel const9] ; 5
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	pop rax
.jump12:
	push rax
.jump10:
	pop rax
	cmp rax, 0
	je .jump13
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for d
	mov rax, [rel const10] ; 0.06
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump15
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump15:
	; Computing bound for c
	mov rax, [rel const12] ; 188
	push rax
	mov rax, [rsp]
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof {bool}
	imul rdi, [rsp + 0 + 0] ; multiply by 188
	jno .jump16
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump16:
	imul rdi, [rsp + 0 + 8] ; multiply by to_int(0.06)
	jno .jump17
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump17:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump18: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump20 ; If d >= bound, ...
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
.jump20:
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump19 ; If c >= bound, break
.jump21:
	; Compute loop body
	mov rax, [rel const7] ; True
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment d
	add qword [rsp + 8], 1
	jmp .jump18
.jump19: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump22
	mov rax, [rel const14] ; 948
	push rax
	jmp .jump23
.jump22:
	mov rax, [rel const15] ; 208
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
.jump23:
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump24
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
.jump24:
	cmp rax, [rsp + 16]
	jl .jump25
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
.jump25:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump26
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
.jump26:
	cmp rax, [rsp + 24]
	jl .jump27
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
.jump27:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump14
.jump13:
	mov rax, [rel const8] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump28
	mov rax, [rel const7] ; True
	push rax
	pop rax
	cmp rax, 0
	jne .jump30
	mov rax, [rel const8] ; False
	push rax
	pop rax
.jump30:
	push rax
	jmp .jump29
.jump28:
	mov rax, [rel const7] ; True
	push rax
.jump29:
	pop rax
	cmp rax, 0
	je .jump31
	mov rax, [rel const8] ; False
	push rax
	pop rax
	cmp rax, 0
	jne .jump33
	mov rax, [rel const8] ; False
	push rax
	pop rax
.jump33:
	push rax
	jmp .jump32
.jump31:
	mov rax, [rel const18] ; 555
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump34
	mov rax, [rel const7] ; True
	push rax
	jmp .jump35
.jump34:
	mov rax, [rel const7] ; True
	push rax
.jump35:
.jump32:
.jump14:
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	pop rax
	cmp rax, 0
	jne .jump36
	sub rsp, 8 ; Align stack
	lea rdi, [rel const19] ; c
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump36:
	sub rsp, 8 ; Align stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for e
	mov rax, [rel const20] ; 673
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump37
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump37:
	; Computing bound for d
	mov rax, [rel const21] ; 93.45
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump38
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump38:
	; Computing bound for c
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump39
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump39:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof float[,,]
	imul rdi, [rsp + 0 + 0] ; multiply by to_int(b)
	jno .jump40
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump40:
	imul rdi, [rsp + 0 + 8] ; multiply by to_int(93.45)
	jno .jump41
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump41:
	imul rdi, [rsp + 0 + 16] ; multiply by (- 673)
	jno .jump42
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump42:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump43: ; Begin body of loop
	; Compare e to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump45 ; If e >= bound, ...
	mov qword [rsp + 16], 0 ; e = 0
	add qword [rsp + 8], 1 ; d++
.jump45:
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump46 ; If d >= bound, ...
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
.jump46:
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump44 ; If c >= bound, break
.jump47:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for h
	mov rax, [rel const22] ; 62
	push rax
	mov rax, [rsp]
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump48
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump48:
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump49
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump49:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by d
	jno .jump50
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump50:
	imul rdi, [rsp + 0 + 8] ; multiply by c
	jno .jump51
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump51:
	imul rdi, [rsp + 0 + 16] ; multiply by 62
	jno .jump52
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump52:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
.jump53: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump55 ; If h >= bound, ...
	mov qword [rsp + 16], 0 ; h = 0
	add qword [rsp + 8], 1 ; g++
.jump55:
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump56 ; If g >= bound, ...
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
.jump56:
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump54 ; If f >= bound, break
.jump57:
	; Compute loop body
	mov rax, [rel const23] ; 51.63
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment h
	add qword [rsp + 16], 1
	jmp .jump53
.jump54: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, [rsp + 72] ; No overflow if indices in bounds
	add rax, [rsp + 48]
	shl rax, 5
	add rax, [rsp + 80]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment e
	add qword [rsp + 16], 1
	jmp .jump43
.jump44: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _a
	add rsp, 8 ; Remove alignment
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for e
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump58
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump58:
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump59
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump59:
	; Computing bound for c
	mov rax, [rel const24] ; 485
	push rax
	mov rax, [rsp]
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by 485
	jno .jump60
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump60:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump61
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump61:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump62
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump62:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump63: ; Begin body of loop
	; Compare e to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump65 ; If e >= bound, ...
	mov qword [rsp + 16], 0 ; e = 0
	add qword [rsp + 8], 1 ; d++
.jump65:
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump66 ; If d >= bound, ...
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
.jump66:
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump64 ; If c >= bound, break
.jump67:
	; Compute loop body
	mov rax, [rel const25] ; 492
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment e
	add qword [rsp + 16], 1
	jmp .jump63
.jump64: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for d
	mov rax, [rel const26] ; 816
	push rax
	mov rax, [rsp]
	; Computing bound for c
	mov rax, [rel const27] ; 617
	push rax
	mov rax, [rsp]
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump68: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump70 ; If d >= bound, ...
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
.jump70:
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump69 ; If c >= bound, break
.jump71:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 144 to rsp
		mov r10, [rbp - 144 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment d
	add qword [rsp + 8], 1
	jmp .jump68
.jump69: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump72
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump72:
	cmp rax, [rsp + 24]
	jl .jump73
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump73:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump74
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump74:
	cmp rax, [rsp + 32]
	jl .jump75
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump75:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump76
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump76:
	cmp rax, [rsp + 40]
	jl .jump77
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump77:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump78
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump78:
	cmp rax, [rsp + 24]
	jl .jump79
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump79:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump80
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump80:
	cmp rax, [rsp + 32]
	jl .jump81
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump81:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump82
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump82:
	cmp rax, [rsp + 40]
	jl .jump83
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump83:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 5
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 32
	; Moving 32 bytes from rax to rsp
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const8] ; False
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const28] ; 26.48
	push rax
	mov rax, [rel const29] ; 27.86
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	; Moving 8 bytes from rsp + 8 to rsp + 16
		mov r10, [rsp + 8 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	mov rax, [rel const30] ; 154
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rdi, 8
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump84
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump84:
	cmp rax, [rsp + 8]
	jl .jump85
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump85:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump86
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump86:
	cmp rax, [rsp + 24]
	jl .jump87
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump87:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump88
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump88:
	cmp rax, [rsp + 32]
	jl .jump89
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump89:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump90
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump90:
	cmp rax, [rsp + 40]
	jl .jump91
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump91:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const7] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump92
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	jmp .jump93
.jump92:
	mov rax, [rel const31] ; 0.75
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	sub rsp, 8
	movsd [rsp], xmm0
.jump93:
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const8] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump94
	mov rax, [rel const32] ; 55.26
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	jmp .jump95
.jump94:
	sub rsp, 8 ; Align stack
	mov rax, [rel const33] ; 74.12
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
.jump95:
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump96
	mov rax, [rel const8] ; False
	push rax
	jmp .jump97
.jump96:
	mov rax, [rel const7] ; True
	push rax
.jump97:
	pop rax
	cmp rax, 0
	jne .jump98
	lea rdi, [rel const34] ; d
	call _fail_assertion
.jump98:
	mov rax, [rel const8] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump99
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const35] ; 866
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setg al
	and rax, 1
	push rax
	pop rax
.jump99:
	push rax
	pop rax
	cmp rax, 0
	je .jump100
	mov rax, [rel const8] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump102
	mov rax, [rel const7] ; True
	push rax
	jmp .jump103
.jump102:
	mov rax, [rel const8] ; False
	push rax
.jump103:
	jmp .jump101
.jump100:
	mov rax, [rel const8] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
.jump101:
	pop rax
	cmp rax, 0
	je .jump104
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump106
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump106:
	; Computing bound for e
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump107
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump107:
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump108
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump108:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump109
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump109:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump110
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump110:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump111
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump111:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize f to 0
	mov rax, 0
	push rax
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
.jump112: ; Begin body of loop
	; Compare f to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump114 ; If f >= bound, ...
	mov qword [rsp + 16], 0 ; f = 0
	add qword [rsp + 8], 1 ; e++
.jump114:
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump115 ; If e >= bound, ...
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
.jump115:
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump113 ; If d >= bound, break
.jump116:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment f
	add qword [rsp + 16], 1
	jmp .jump112
.jump113: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const7] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump117
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump118
.jump117:
	mov rax, [rel const36] ; 417
	push rax
.jump118:
	mov rax, [rel const37] ; 72.11
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump119
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump119:
	cmp rax, [rsp + 24]
	jl .jump120
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump120:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump121
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump121:
	cmp rax, [rsp + 32]
	jl .jump122
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump122:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump123
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump123:
	cmp rax, [rsp + 40]
	jl .jump124
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump124:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const38] ; 217
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	jmp .jump105
.jump104:
	mov rax, [rel const7] ; True
	push rax
.jump105:
	pop rax
	cmp rax, 0
	je .jump125
	mov rax, [rel const7] ; True
	push rax
	jmp .jump126
.jump125:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for f
	mov rax, [rel const39] ; 959
	push rax
	mov rax, [rel const40] ; 729
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump127
	mov rax, [rel const41] ; 929
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump129
	sub rsp, 8 ; Align stack
	lea rdi, [rel const42] ; mod by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump129:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	jmp .jump128
.jump127:
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
.jump128:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump130
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump130:
	; Computing bound for e
	mov rax, [rel const43] ; 373
	push rax
	mov rax, [rsp]
	; Computing bound for d
	mov rax, [rel const44] ; 522
	push rax
	mov rax, [rsp]
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by 522
	jno .jump131
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump131:
	imul rdi, [rsp + 0 + 8] ; multiply by 373
	jno .jump132
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump132:
	imul rdi, [rsp + 0 + 16] ; multiply by (if (729 < 959) then (argnum % 929) else to_int(b))
	jno .jump133
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump133:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize f to 0
	mov rax, 0
	push rax
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
.jump134: ; Begin body of loop
	; Compare f to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump136 ; If f >= bound, ...
	mov qword [rsp + 16], 0 ; f = 0
	add qword [rsp + 8], 1 ; e++
.jump136:
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump137 ; If e >= bound, ...
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
.jump137:
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump135 ; If d >= bound, break
.jump138:
	; Compute loop body
	mov rax, [rel const8] ; False
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment f
	add qword [rsp + 16], 1
	jmp .jump134
.jump135: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const45] ; 10.65
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _a
	push rax
	; Moving 8 bytes from rsp + 16 to rsp + 16
		mov r10, [rsp + 16 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	mov rax, [rel const46] ; 885
	push rax
	mov rax, [rel const47] ; 48.47
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _a
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump139
	mov rax, [rel const48] ; 945
	push rax
	pop rax
	neg rax
	push rax
	jmp .jump140
.jump139:
	mov rax, [rel const49] ; 265
	push rax
.jump140:
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump141
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump141:
	cmp rax, [rsp + 24]
	jl .jump142
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump142:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump143
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump143:
	cmp rax, [rsp + 32]
	jl .jump144
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump144:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump145
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump145:
	cmp rax, [rsp + 40]
	jl .jump146
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump146:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump126:
	pop rax
	cmp rax, 0
	jne .jump147
	lea rdi, [rel const34] ; d
	call _fail_assertion
.jump147:
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Moving 8 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	pop rax
	add rsp, 16 ; Local variables
	pop rbp
	ret

b:
_b:
	push rbp
	mov rbp, rsp
	sub rsp, 32
	; Moving 32 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - -16 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const50] ; 24.05
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _a
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const7] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump148
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump150
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump150:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump151
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump151:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by d
	jno .jump152
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump152:
	imul rdi, [rsp + 0 + 8] ; multiply by j
	jno .jump153
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump153:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump154: ; Begin body of loop
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump156 ; If m >= bound, ...
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
.jump156:
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump155 ; If l >= bound, break
.jump157:
	; Compute loop body
	mov rax, [rel const51] ; 87
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment m
	add qword [rsp + 8], 1
	jmp .jump154
.jump155: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump149
.jump148:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump158
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump158:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump159
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump159:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by i
	jno .jump160
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump160:
	imul rdi, [rsp + 0 + 8] ; multiply by j
	jno .jump161
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump161:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump162: ; Begin body of loop
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump164 ; If m >= bound, ...
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
.jump164:
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump163 ; If l >= bound, break
.jump165:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -32 to rsp
		mov r10, [rbp - -32 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment m
	add qword [rsp + 8], 1
	jmp .jump162
.jump163: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump149:
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump166
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump166:
	; Computing bound for m
	mov rax, [rel const52] ; 445
	push rax
	mov rax, [rsp]
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump167
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump167:
	; Computing total size of heap memory to allocate
	mov rdi, 0 ; sizeof {}
	imul rdi, [rsp + 0 + 0] ; multiply by e
	jno .jump168
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump168:
	imul rdi, [rsp + 0 + 8] ; multiply by 445
	jno .jump169
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump169:
	imul rdi, [rsp + 0 + 16] ; multiply by k
	jno .jump170
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump170:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump171: ; Begin body of loop
	; Compare n to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump173 ; If n >= bound, ...
	mov qword [rsp + 16], 0 ; n = 0
	add qword [rsp + 8], 1 ; m++
.jump173:
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump174 ; If m >= bound, ...
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
.jump174:
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump172 ; If l >= bound, break
.jump175:
	; Compute loop body
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 0
	add rax, [rsp + 48]
	; Move body (0 bytes) to index
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	; Increment n
	add qword [rsp + 16], 1
	jmp .jump171
.jump172: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const53] ; 473
	push rax
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for l
	mov rax, [rel const54] ; 893
	push rax
	mov rax, [rsp]
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize l to 0
	mov rax, 0
	push rax
.jump176: ; Begin body of loop
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump177 ; If l >= bound, break
.jump178:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment l
	add qword [rsp + 0], 1
	jmp .jump176
.jump177: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump179
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump179:
	cmp rax, [rsp + 24]
	jl .jump180
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump180:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump181
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump181:
	cmp rax, [rsp + 32]
	jl .jump182
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump182:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump183
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump183:
	cmp rax, [rsp + 40]
	jl .jump184
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump184:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 0
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 0
	; Moving 0 bytes from rax to rsp
	; Moving 32 bytes from rsp + 0 to rsp + 16
		mov r10, [rsp + 0 + 24]
		mov [rsp + 16 + 24], r10
		mov r10, [rsp + 0 + 16]
		mov [rsp + 16 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 16 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for r
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump185
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump185:
	; Computing bound for q
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump186
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump186:
	; Computing bound for p
	sub rsp, 8 ; Align stack
	mov rax, [rel const55] ; 0.11
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump187
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump187:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by to_int(0.11)
	jno .jump188
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump188:
	imul rdi, [rsp + 0 + 8] ; multiply by e
	jno .jump189
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump189:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump190
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump190:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize r to 0
	mov rax, 0
	push rax
	; Initialize q to 0
	mov rax, 0
	push rax
	; Initialize p to 0
	mov rax, 0
	push rax
.jump191: ; Begin body of loop
	; Compare r to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump193 ; If r >= bound, ...
	mov qword [rsp + 16], 0 ; r = 0
	add qword [rsp + 8], 1 ; q++
.jump193:
	; Compare q to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump194 ; If q >= bound, ...
	mov qword [rsp + 8], 0 ; q = 0
	add qword [rsp + 0], 1 ; p++
.jump194:
	; Compare p to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump192 ; If p >= bound, break
.jump195:
	; Compute loop body
	mov rax, [rel const56] ; 30.32
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment r
	add qword [rsp + 16], 1
	jmp .jump191
.jump192: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for q
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump196
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump196:
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump197
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump197:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by l
	jno .jump198
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump198:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump199
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump199:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize q to 0
	mov rax, 0
	push rax
	; Initialize p to 0
	mov rax, 0
	push rax
.jump200: ; Begin body of loop
	; Compare q to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump202 ; If q >= bound, ...
	mov qword [rsp + 8], 0 ; q = 0
	add qword [rsp + 0], 1 ; p++
.jump202:
	; Compare p to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump201 ; If p >= bound, break
.jump203:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment q
	add qword [rsp + 8], 1
	jmp .jump200
.jump201: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rax, [rel const57] ; 933
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump204
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
.jump204:
	cmp rax, [rsp + 16]
	jl .jump205
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
.jump205:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump206
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
.jump206:
	cmp rax, [rsp + 24]
	jl .jump207
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
.jump207:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump208
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump208:
	cmp rax, [rsp + 24]
	jl .jump209
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump209:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump210
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump210:
	cmp rax, [rsp + 32]
	jl .jump211
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump211:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump212
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump212:
	cmp rax, [rsp + 40]
	jl .jump213
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump213:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	mov rax, [rel const58] ; 95.13
	push rax
	mov rax, [rel const59] ; 70.57
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const60] ; 4.97
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	jne .jump214
	lea rdi, [rel const61] ; p
	call _fail_assertion
.jump214:
	sub rsp, 32
	; Moving 32 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - -16 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump215
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump215:
	cmp rax, [rsp + 24]
	jl .jump216
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump216:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump217
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump217:
	cmp rax, [rsp + 32]
	jl .jump218
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump218:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump219
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump219:
	cmp rax, [rsp + 40]
	jl .jump220
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump220:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	jne .jump221
	lea rdi, [rel const61] ; p
	call _fail_assertion
.jump221:
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 64 ; Local variables
	pop rbp
	ret

d:
_d:
	push rbp
	mov rbp, rsp
	push rdi
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const71] ; 519
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump264
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump264:
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump265
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump265:
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump266
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump266:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof {bool,int,float}
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump267
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump267:
	imul rdi, [rsp + 0 + 8] ; multiply by (argnum * c)
	jno .jump268
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump268:
	imul rdi, [rsp + 0 + 16] ; multiply by (519 + c)
	jno .jump269
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump269:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
.jump270: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump272 ; If h >= bound, ...
	mov qword [rsp + 16], 0 ; h = 0
	add qword [rsp + 8], 1 ; g++
.jump272:
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump273 ; If g >= bound, ...
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
.jump273:
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump271 ; If f >= bound, break
.jump274:
	; Compute loop body
	mov rax, [rel const72] ; 5.0
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const8] ; False
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 24
	add rax, [rsp + 72]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment h
	add qword [rsp + 16], 1
	jmp .jump270
.jump271: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	mov rax, [rel const73] ; 65.3
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const8] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump275
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump276
.jump275:
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
.jump276:
	pop rax
	pop r10
	cmp r10, 0
	jne .jump277
	lea rdi, [rel const42] ; mod by zero
	call _fail_assertion
.jump277:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump278
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump278:
	cmp rax, [rsp + 24]
	jl .jump279
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump279:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump280
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump280:
	cmp rax, [rsp + 32]
	jl .jump281
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump281:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump282
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump282:
	cmp rax, [rsp + 40]
	jl .jump283
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump283:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 24
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 16
		mov r10, [rsp + 0 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	pop rax
	cmp rax, 0
	je .jump284
	mov rax, [rel const74] ; 905
	push rax
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for h
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump286
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump286:
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump287
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump287:
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump288
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump288:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump289
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump289:
	imul rdi, [rsp + 0 + 8] ; multiply by e
	jno .jump290
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump290:
	imul rdi, [rsp + 0 + 16] ; multiply by e
	jno .jump291
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump291:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
.jump292: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump294 ; If h >= bound, ...
	mov qword [rsp + 16], 0 ; h = 0
	add qword [rsp + 8], 1 ; g++
.jump294:
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump295 ; If g >= bound, ...
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
.jump295:
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump293 ; If f >= bound, break
.jump296:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment h
	add qword [rsp + 16], 1
	jmp .jump292
.jump293: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump297
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
.jump297:
	cmp rax, [rsp + 24]
	jl .jump298
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
.jump298:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump299
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
.jump299:
	cmp rax, [rsp + 32]
	jl .jump300
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
.jump300:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump301
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
.jump301:
	cmp rax, [rsp + 40]
	jl .jump302
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
.jump302:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump303
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump303:
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump304
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump304:
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump305
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump305:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by (- c)
	jno .jump306
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump306:
	imul rdi, [rsp + 0 + 8] ; multiply by e
	jno .jump307
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump307:
imul rdi, [rsp + 0 + 16] ; multiply by (array[f : argnum, g : e, h : e] e)[c, argnum, (- c)]
	jno .jump308
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump308:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
.jump309: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump311 ; If h >= bound, ...
	mov qword [rsp + 16], 0 ; h = 0
	add qword [rsp + 8], 1 ; g++
.jump311:
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump312 ; If g >= bound, ...
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
.jump312:
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump310 ; If f >= bound, break
.jump313:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment h
	add qword [rsp + 16], 1
	jmp .jump309
.jump310: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump285
.jump284:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for h
	mov rax, [rel const8] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump314
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	jmp .jump315
.jump314:
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
.jump315:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump316
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump316:
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump317
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump317:
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump318
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump318:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by c
	jno .jump319
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump319:
	imul rdi, [rsp + 0 + 8] ; multiply by e
	jno .jump320
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump320:
	imul rdi, [rsp + 0 + 16] ; multiply by (if false then e else argnum)
	jno .jump321
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump321:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
.jump322: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump324 ; If h >= bound, ...
	mov qword [rsp + 16], 0 ; h = 0
	add qword [rsp + 8], 1 ; g++
.jump324:
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump325 ; If g >= bound, ...
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
.jump325:
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump323 ; If f >= bound, break
.jump326:
	; Compute loop body
	mov rax, [rel const75] ; 45.92
	push rax
	mov rax, [rel const76] ; 53.08
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment h
	add qword [rsp + 16], 1
	jmp .jump322
.jump323: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _a
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump327
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump327:
	cmp rax, [rsp + 24]
	jl .jump328
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump328:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump329
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump329:
	cmp rax, [rsp + 32]
	jl .jump330
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump330:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump331
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump331:
	cmp rax, [rsp + 40]
	jl .jump332
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump332:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump333
	mov rax, [rel const7] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump335
	mov rax, [rel const7] ; True
	push rax
	jmp .jump336
.jump335:
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
.jump336:
	pop rax
	cmp rax, 0
	je .jump337
	mov rax, [rel const77] ; 48.04
	push rax
	mov rax, [rel const78] ; 53.07
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump339
	sub rsp, 8 ; Align stack
	lea rdi, [rel const64] ; divide by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump339:
	cqo
	idiv r10
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump340
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump340:
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump341
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump341:
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump342
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump342:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by e
	jno .jump343
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump343:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump344
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump344:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump345
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump345:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
.jump346: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump348 ; If h >= bound, ...
	mov qword [rsp + 16], 0 ; h = 0
	add qword [rsp + 8], 1 ; g++
.jump348:
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump349 ; If g >= bound, ...
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
.jump349:
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump347 ; If f >= bound, break
.jump350:
	; Compute loop body
	mov rax, [rel const79] ; 161
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment h
	add qword [rsp + 16], 1
	jmp .jump346
.jump347: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump338
.jump337:
	mov rax, [rel const80] ; 76.89
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for h
	mov rax, [rel const81] ; 489
	push rax
	mov rax, [rsp]
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump351
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump351:
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump352
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump352:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by c
	jno .jump353
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump353:
	imul rdi, [rsp + 0 + 8] ; multiply by c
	jno .jump354
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump354:
	imul rdi, [rsp + 0 + 16] ; multiply by 489
	jno .jump355
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump355:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
.jump356: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump358 ; If h >= bound, ...
	mov qword [rsp + 16], 0 ; h = 0
	add qword [rsp + 8], 1 ; g++
.jump358:
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump359 ; If g >= bound, ...
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
.jump359:
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump357 ; If f >= bound, break
.jump360:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment h
	add qword [rsp + 16], 1
	jmp .jump356
.jump357: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump338:
	jmp .jump334
.jump333:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump361
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump361:
	; Computing bound for g
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump362
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump362:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize f to 0
	mov rax, 0
	push rax
.jump363: ; Begin body of loop
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump364 ; If f >= bound, break
.jump365:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment f
	add qword [rsp + 0], 1
	jmp .jump363
.jump364: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump366
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump366:
	; Computing bound for f
	mov rax, [rel const82] ; 827
	push rax
	mov rax, [rsp]
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
.jump367: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump369 ; If h >= bound, ...
	mov qword [rsp + 16], 0 ; h = 0
	add qword [rsp + 8], 1 ; g++
.jump369:
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump370 ; If g >= bound, ...
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
.jump370:
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump368 ; If f >= bound, break
.jump371:
	; Compute loop body
	sub rsp, 8 ; Align stack
	mov rax, [rel const83] ; 901
	push rax
	pop rdi
	call _to_float
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 48] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment h
	add qword [rsp + 16], 1
	jmp .jump367
.jump368: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	sub rsp, 8 ; Align stack
	mov rax, [rel const84] ; 88.6
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for h
	sub rsp, 8 ; Align stack
	mov rax, [rel const85] ; 39.22
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump372
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump372:
	; Computing bound for g
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for g
	mov rax, [rel const86] ; 579
	push rax
	mov rax, [rsp]
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump373
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump373:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
.jump374: ; Begin body of loop
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump376 ; If g >= bound, ...
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
.jump376:
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump375 ; If f >= bound, break
.jump377:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment g
	add qword [rsp + 8], 1
	jmp .jump374
.jump375: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump378
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump378:
	; Computing bound for f
	mov rax, [rel const87] ; 388
	push rax
	mov rax, [rsp]
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by 388
	jno .jump379
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump379:
imul rdi, [rsp + 0 + 8] ; multiply by (sum[f : argnum, g : 579] g)
	jno .jump380
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump380:
	imul rdi, [rsp + 0 + 16] ; multiply by to_int(39.22)
	jno .jump381
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump381:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
.jump382: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump384 ; If h >= bound, ...
	mov qword [rsp + 16], 0 ; h = 0
	add qword [rsp + 8], 1 ; g++
.jump384:
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump385 ; If g >= bound, ...
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
.jump385:
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump383 ; If f >= bound, break
.jump386:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment h
	add qword [rsp + 16], 1
	jmp .jump382
.jump383: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump334:
.jump285:
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setg al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump387
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for n
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump389
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump389:
	; Computing bound for m
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump390
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump390:
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump391
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump391:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof float[][,]
	imul rdi, [rsp + 0 + 0] ; multiply by i
	jno .jump392
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump392:
	imul rdi, [rsp + 0 + 8] ; multiply by e
	jno .jump393
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump393:
	imul rdi, [rsp + 0 + 16] ; multiply by i
	jno .jump394
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump394:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize n to 0
	mov rax, 0
	push rax
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump395: ; Begin body of loop
	; Compare n to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump397 ; If n >= bound, ...
	mov qword [rsp + 16], 0 ; n = 0
	add qword [rsp + 8], 1 ; m++
.jump397:
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump398 ; If m >= bound, ...
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
.jump398:
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump396 ; If l >= bound, break
.jump399:
	; Compute loop body
	mov rax, [rel const8] ; False
	push rax
	pop rax
	cmp rax, 0
	jne .jump400
	mov rax, [rel const7] ; True
	push rax
	pop rax
.jump400:
	push rax
	pop rax
	cmp rax, 0
	je .jump401
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump403
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump403:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump404
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump404:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof float[]
	imul rdi, [rsp + 0 + 0] ; multiply by c
	jno .jump405
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump405:
	imul rdi, [rsp + 0 + 8] ; multiply by c
	jno .jump406
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump406:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
.jump407: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump409 ; If p >= bound, ...
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
.jump409:
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump408 ; If o >= bound, break
.jump410:
	; Compute loop body
	sub rsp, 16
	lea rdi, [rsp + 0]
	call _d
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 4
	add rax, [rsp + 48]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment p
	add qword [rsp + 8], 1
	jmp .jump407
.jump408: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump402
.jump401:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump411
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump411:
	; Computing bound for o
	mov rax, [rel const88] ; 370
	push rax
	mov rax, [rsp]
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof float[]
	imul rdi, [rsp + 0 + 0] ; multiply by 370
	jno .jump412
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump412:
	imul rdi, [rsp + 0 + 8] ; multiply by l
	jno .jump413
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump413:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
.jump414: ; Begin body of loop
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump416 ; If p >= bound, ...
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
.jump416:
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump415 ; If o >= bound, break
.jump417:
	; Compute loop body
	sub rsp, 16
	lea rdi, [rsp + 0]
	call _d
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 4
	add rax, [rsp + 48]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment p
	add qword [rsp + 8], 1
	jmp .jump414
.jump415: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump402:
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 24
	add rax, [rsp + 72]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment n
	add qword [rsp + 16], 1
	jmp .jump395
.jump396: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 32
	; Moving 32 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 64 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 64 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const89] ; 13.13
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump418
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
.jump418:
	cmp rax, [rsp + 24]
	jl .jump419
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
.jump419:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump420
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
.jump420:
	cmp rax, [rsp + 32]
	jl .jump421
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
.jump421:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump422
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
.jump422:
	cmp rax, [rsp + 40]
	jl .jump423
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
.jump423:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump424
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	jmp .jump425
.jump424:
	mov rax, [rel const90] ; 16
	push rax
.jump425:
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump426
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump426:
	cmp rax, [rsp + 24]
	jl .jump427
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump427:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump428
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump428:
	cmp rax, [rsp + 32]
	jl .jump429
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump429:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump430
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump430:
	cmp rax, [rsp + 40]
	jl .jump431
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump431:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 24
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump388
.jump387:
	mov rax, [rel const8] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump432
	mov rax, [rel const7] ; True
	push rax
	pop rax
.jump432:
	push rax
	pop rax
	cmp rax, 0
	je .jump433
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for m
	mov rax, [rel const91] ; 850
	push rax
	mov rax, [rsp]
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump435
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump435:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof float[]
	imul rdi, [rsp + 0 + 0] ; multiply by i
	jno .jump436
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump436:
	imul rdi, [rsp + 0 + 8] ; multiply by 850
	jno .jump437
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump437:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump438: ; Begin body of loop
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump440 ; If m >= bound, ...
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
.jump440:
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump439 ; If l >= bound, break
.jump441:
	; Compute loop body
	sub rsp, 16
	sub rsp, 8 ; Align stack
	lea rdi, [rsp + 8]
	call _d
	add rsp, 8 ; Remove alignment
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 4
	add rax, [rsp + 48]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment m
	add qword [rsp + 8], 1
	jmp .jump438
.jump439: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rax, [rel const8] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	jmp .jump434
.jump433:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for m
	mov rax, [rel const92] ; 316
	push rax
	mov rax, [rsp]
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump442
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump442:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof float[]
	imul rdi, [rsp + 0 + 0] ; multiply by c
	jno .jump443
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump443:
	imul rdi, [rsp + 0 + 8] ; multiply by 316
	jno .jump444
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump444:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize m to 0
	mov rax, 0
	push rax
	; Initialize l to 0
	mov rax, 0
	push rax
.jump445: ; Begin body of loop
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump447 ; If m >= bound, ...
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
.jump447:
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump446 ; If l >= bound, break
.jump448:
	; Compute loop body
	sub rsp, 16
	sub rsp, 8 ; Align stack
	lea rdi, [rsp + 8]
	call _d
	add rsp, 8 ; Remove alignment
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 4
	add rax, [rsp + 48]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment m
	add qword [rsp + 8], 1
	jmp .jump445
.jump446: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rax, [rel const8] ; False
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
.jump434:
	; Moving 24 bytes from rsp + 16 to rsp + 16
		mov r10, [rsp + 16 + 16]
		mov [rsp + 16 + 16], r10
		mov r10, [rsp + 16 + 8]
		mov [rsp + 16 + 8], r10
		mov r10, [rsp + 16 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
.jump388:
	sub rsp, 16
	sub rsp, 8 ; Align stack
	lea rdi, [rsp + 8]
	call _d
	add rsp, 8 ; Remove alignment
	mov rax, [rbp - 8] ; Address to write return value into
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 104 ; Local variables
	pop rbp
	ret
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for o
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for q
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump449
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump449:
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump450
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump450:
	; Computing bound for o
	mov rax, [rel const93] ; 823
	push rax
	mov rax, [rsp]
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize q to 0
	mov rax, 0
	push rax
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
.jump451: ; Begin body of loop
	; Compare q to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump453 ; If q >= bound, ...
	mov qword [rsp + 16], 0 ; q = 0
	add qword [rsp + 8], 1 ; p++
.jump453:
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump454 ; If p >= bound, ...
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
.jump454:
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump452 ; If o >= bound, break
.jump455:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment q
	add qword [rsp + 16], 1
	jmp .jump451
.jump452: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump456
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump456:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
imul rdi, [rsp + 0 + 0] ; multiply by (sum[o : 823, p : argnum, q : c] g)
	jno .jump457
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump457:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize o to 0
	mov rax, 0
	push rax
.jump458: ; Begin body of loop
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump459 ; If o >= bound, break
.jump460:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment o
	add qword [rsp + 0], 1
	jmp .jump458
.jump459: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const94] ; 12.34
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const95] ; 592
	push rax
	; Moving 16 bytes from rsp + 16 to rsp + 16
		mov r10, [rsp + 16 + 8]
		mov [rsp + 16 + 8], r10
		mov r10, [rsp + 16 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	mov rax, [rbp - 8] ; Address to write return value into
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 120 ; Local variables
	pop rbp
	ret

jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp
	sub rsp, 8 ; Align stack
	mov rax, [rel const0] ; 91.62
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	sub rsp, 8
	movsd [rsp], xmm0
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for a
	mov rax, [rel const1] ; 934
	push rax
	mov rax, [rsp]
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize a to 0
	mov rax, 0
	push rax
.jump1: ; Begin body of loop
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump2 ; If a >= bound, break
.jump3:
	; Compute loop body
	mov rax, [rel const2] ; 25.92
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 16] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 16], xmm0 ; Save sum
	; Increment a
	add qword [rsp + 0], 1
	jmp .jump1
.jump2: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _pow
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sqrt
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const3] ; 29.34
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _log
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _tan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	jne .jump4
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; a
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump4:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for e
	mov rax, [rel const62] ; 980
	push rax
	mov rax, [rel const63] ; 379
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump222
	lea rdi, [rel const42] ; mod by zero
	call _fail_assertion
.jump222:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump223
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump223:
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump224
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump224:
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump225
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump225:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump226: ; Begin body of loop
	; Compare e to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump228 ; If e >= bound, ...
	mov qword [rsp + 16], 0 ; e = 0
	add qword [rsp + 8], 1 ; d++
.jump228:
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump229 ; If d >= bound, ...
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
.jump229:
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump227 ; If c >= bound, break
.jump230:
	; Compute loop body
	mov rax, [rel const20] ; 673
	push rax
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment e
	add qword [rsp + 16], 1
	jmp .jump226
.jump227: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	pop rax
	pop r10
	cmp r10, 0
	jne .jump231
	lea rdi, [rel const64] ; divide by zero
	call _fail_assertion
.jump231:
	cqo
	idiv r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump232
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump232:
	; Computing bound for c
	sub rsp, 8 ; Align stack
	mov rax, [rel const65] ; 29.99
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _a
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump233
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump233:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump234: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump236 ; If d >= bound, ...
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
.jump236:
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump235 ; If c >= bound, break
.jump237:
	; Compute loop body
	mov rax, [rel const7] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump238
	mov rax, [rel const8] ; False
	push rax
	pop rax
.jump238:
	push rax
	pop rax
	cmp rax, 0
	je .jump239
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for f
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump241
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump241:
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump242
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump242:
	; Computing bound for e
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump243
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump243:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
	; Initialize e to 0
	mov rax, 0
	push rax
.jump244: ; Begin body of loop
	; Compare g to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump246 ; If g >= bound, ...
	mov qword [rsp + 16], 0 ; g = 0
	add qword [rsp + 8], 1 ; f++
.jump246:
	; Compare f to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump247 ; If f >= bound, ...
	mov qword [rsp + 8], 0 ; f = 0
	add qword [rsp + 0], 1 ; e++
.jump247:
	; Compare e to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump245 ; If e >= bound, break
.jump248:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment g
	add qword [rsp + 16], 1
	jmp .jump244
.jump245: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump249
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump249:
	; Computing bound for e
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump250
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump250:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize f to 0
	mov rax, 0
	push rax
	; Initialize e to 0
	mov rax, 0
	push rax
.jump251: ; Begin body of loop
	; Compare f to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump253 ; If f >= bound, ...
	mov qword [rsp + 8], 0 ; f = 0
	add qword [rsp + 0], 1 ; e++
.jump253:
	; Compare e to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump252 ; If e >= bound, break
.jump254:
	; Compute loop body
	mov rax, [rel const66] ; 520
	push rax
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment f
	add qword [rsp + 8], 1
	jmp .jump251
.jump252: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	jmp .jump240
.jump239:
	mov rax, [rel const8] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump255
	mov rax, [rel const7] ; True
	push rax
	jmp .jump256
.jump255:
	mov rax, [rel const8] ; False
	push rax
.jump256:
	pop rax
	cmp rax, 0
	je .jump257
	mov rax, [rel const67] ; 797
	push rax
	jmp .jump258
.jump257:
	mov rax, [rel const7] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump259
	mov rax, [rel const68] ; 738
	push rax
	jmp .jump260
.jump259:
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
.jump260:
.jump258:
.jump240:
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment d
	add qword [rsp + 8], 1
	jmp .jump234
.jump235: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const69] ; 73.23
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const70] ; 702
	push rax
	pop rdi
	call _to_float
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump261
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump261:
	cmp rax, [rsp + 8]
	jl .jump262
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump262:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump263
	sub rsp, 8 ; Align stack
	lea rdi, [rel const64] ; divide by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump263:
	cqo
	idiv r10
	push rax
	call _get_time
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	mov rax, [rel const96] ; 10.53
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _a
	add rsp, 8 ; Remove alignment
	push rax
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for f
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for e
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump461
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump461:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize e to 0
	mov rax, 0
	push rax
.jump462: ; Begin body of loop
	; Compare e to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump463 ; If e >= bound, break
.jump464:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment e
	add qword [rsp + 0], 1
	jmp .jump462
.jump463: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump465
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump465:
	; Computing bound for e
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump466
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump466:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize f to 0
	mov rax, 0
	push rax
	; Initialize e to 0
	mov rax, 0
	push rax
.jump467: ; Begin body of loop
	; Compare f to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump469 ; If f >= bound, ...
	mov qword [rsp + 8], 0 ; f = 0
	add qword [rsp + 0], 1 ; e++
.jump469:
	; Compare e to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump468 ; If e >= bound, break
.jump470:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment f
	add qword [rsp + 8], 1
	jmp .jump467
.jump468: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump471
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump473
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump473:
	; Computing bound for f
	sub rsp, 8 ; Align stack
	mov rax, [rel const97] ; 98.69
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _a
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump474
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump474:
	; Computing bound for e
	mov rax, [rel const98] ; 951
	push rax
	mov rax, [rsp]
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof {int,int}
	imul rdi, [rsp + 0 + 0] ; multiply by 951
	jno .jump475
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump475:
	imul rdi, [rsp + 0 + 8] ; multiply by a(98.69)
	jno .jump476
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump476:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump477
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump477:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
	; Initialize e to 0
	mov rax, 0
	push rax
.jump478: ; Begin body of loop
	; Compare g to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump480 ; If g >= bound, ...
	mov qword [rsp + 16], 0 ; g = 0
	add qword [rsp + 8], 1 ; f++
.jump480:
	; Compare f to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump481 ; If f >= bound, ...
	mov qword [rsp + 8], 0 ; f = 0
	add qword [rsp + 0], 1 ; e++
.jump481:
	; Compare e to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump479 ; If e >= bound, break
.jump482:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	shl rax, 4
	add rax, [rsp + 64]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment g
	add qword [rsp + 16], 1
	jmp .jump478
.jump479: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const7] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump483
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump484
.jump483:
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
.jump484:
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump485
	mov rax, [rel const99] ; 640
	push rax
	jmp .jump486
.jump485:
	sub rsp, 8 ; Align stack
	mov rax, [rel const100] ; 21.95
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
.jump486:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump487
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
.jump487:
	cmp rax, [rsp + 24]
	jl .jump488
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
.jump488:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump489
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
.jump489:
	cmp rax, [rsp + 32]
	jl .jump490
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
.jump490:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump491
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
.jump491:
	cmp rax, [rsp + 40]
	jl .jump492
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
.jump492:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 4
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump472
.jump471:
	sub rsp, 8 ; Align stack
	mov rax, [rel const101] ; 25.99
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const102] ; 494
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Moving 16 bytes from rsp + 0 to rsp + 16
		mov r10, [rsp + 0 + 8]
		mov [rsp + 16 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
.jump472:
	sub rsp, 8 ; Align stack
	call _get_time
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 16]
	subsd xmm0, xmm1
	sub rsp, 8 ; Align stack
	call _print_time
	add rsp, 8 ; Remove alignment
	mov rax, [rel const7] ; True
	push rax
	pop rax
	cmp rax, 0
	jne .jump493
	mov rax, [rel const7] ; True
	push rax
	pop rax
	cmp rax, 0
	jne .jump494
	mov rax, [rel const8] ; False
	push rax
	mov rdi, 8
	call _jpl_alloc
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump495
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
.jump495:
	cmp rax, [rsp + 8]
	jl .jump496
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
.jump496:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
.jump494:
	push rax
	pop rax
.jump493:
	push rax
	pop rax
	cmp rax, 0
	je .jump497
	mov rax, [rel const103] ; 28
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for i
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump499
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump499:
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump500
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump500:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
.jump501: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump503 ; If h >= bound, ...
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
.jump503:
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump502 ; If g >= bound, break
.jump504:
	; Compute loop body
	mov rax, [rel const104] ; 600
	push rax
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment h
	add qword [rsp + 8], 1
	jmp .jump501
.jump502: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump505
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump505:
	; Computing bound for h
	mov rax, [rel const105] ; 593
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump506
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump506:
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump507
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump507:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof int[,]
	imul rdi, [rsp + 0 + 0] ; multiply by f
	jno .jump508
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump508:
	imul rdi, [rsp + 0 + 8] ; multiply by (argnum - 593)
	jno .jump509
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump509:
imul rdi, [rsp + 0 + 16] ; multiply by (sum[g : c, h : argnum] 600)
	jno .jump510
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump510:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
.jump511: ; Begin body of loop
	; Compare i to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump513 ; If i >= bound, ...
	mov qword [rsp + 16], 0 ; i = 0
	add qword [rsp + 8], 1 ; h++
.jump513:
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump514 ; If h >= bound, ...
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
.jump514:
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump512 ; If g >= bound, break
.jump515:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump516
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump516:
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump517
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump517:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by f
	jno .jump518
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump518:
	imul rdi, [rsp + 0 + 8] ; multiply by g
	jno .jump519
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump519:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
.jump520: ; Begin body of loop
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump522 ; If k >= bound, ...
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
.jump522:
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump521 ; If j >= bound, break
.jump523:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment k
	add qword [rsp + 8], 1
	jmp .jump520
.jump521: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 24
	add rax, [rsp + 72]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment i
	add qword [rsp + 16], 1
	jmp .jump511
.jump512: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump524
	lea rdi, [rel const64] ; divide by zero
	call _fail_assertion
.jump524:
	cqo
	idiv r10
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump525
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump525:
	cmp rax, [rsp + 24]
	jl .jump526
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump526:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump527
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump527:
	cmp rax, [rsp + 32]
	jl .jump528
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump528:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump529
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump529:
	cmp rax, [rsp + 40]
	jl .jump530
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump530:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 24
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump531
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump531:
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump532
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump532:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by e
	jno .jump533
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump533:
	imul rdi, [rsp + 0 + 8] ; multiply by c
	jno .jump534
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump534:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
.jump535: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump537 ; If h >= bound, ...
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
.jump537:
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump536 ; If g >= bound, break
.jump538:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment h
	add qword [rsp + 8], 1
	jmp .jump535
.jump536: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const106] ; 814
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump539
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump539:
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump540
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump540:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof float[]
	imul rdi, [rsp + 0 + 0] ; multiply by f
	jno .jump541
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump541:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump542
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump542:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
.jump543: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump545 ; If h >= bound, ...
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
.jump545:
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump544 ; If g >= bound, break
.jump546:
	; Compute loop body
	sub rsp, 16
	lea rdi, [rsp + 0]
	call _d
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 4
	add rax, [rsp + 48]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment h
	add qword [rsp + 8], 1
	jmp .jump543
.jump544: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rax, [rel const107] ; 46.22
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	sub rsp, 8 ; Align stack
	mov rax, [rel const108] ; 61.67
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	jmp .jump498
.jump497:
	sub rsp, 8 ; Align stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump547
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump547:
	; Computing bound for h
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump548
	sub rsp, 8 ; Align stack
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump548:
	cmp rax, [rsp + 8]
	jl .jump549
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump549:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump550
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump550:
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump551
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump551:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
.jump552: ; Begin body of loop
	; Compare i to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump554 ; If i >= bound, ...
	mov qword [rsp + 16], 0 ; i = 0
	add qword [rsp + 8], 1 ; h++
.jump554:
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump555 ; If h >= bound, ...
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
.jump555:
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump553 ; If g >= bound, break
.jump556:
	; Compute loop body
	sub rsp, 8 ; Align stack
	mov rax, [rel const109] ; 31.16
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 48] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment i
	add qword [rsp + 16], 1
	jmp .jump552
.jump553: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	call _a
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const7] ; True
	push rax
	mov rax, [rel const8] ; False
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump557
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump559
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump559:
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump560
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump560:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by f
	jno .jump561
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump561:
	imul rdi, [rsp + 0 + 8] ; multiply by c
	jno .jump562
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump562:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
.jump563: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump565 ; If h >= bound, ...
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
.jump565:
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump564 ; If g >= bound, break
.jump566:
	; Compute loop body
	sub rsp, 8 ; Align stack
	mov rax, [rel const110] ; 68.05
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment h
	add qword [rsp + 8], 1
	jmp .jump563
.jump564: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump558
.jump557:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump567
	sub rsp, 8 ; Align stack
	lea rdi, [rel const64] ; divide by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump567:
	cqo
	idiv r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump568
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump568:
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump569
	lea rdi, [rel const64] ; divide by zero
	call _fail_assertion
.jump569:
	cqo
	idiv r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump570
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump570:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by (e / f)
	jno .jump571
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump571:
	imul rdi, [rsp + 0 + 8] ; multiply by (argnum / e)
	jno .jump572
	sub rsp, 8 ; Align stack
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump572:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
.jump573: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump575 ; If h >= bound, ...
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
.jump575:
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump574 ; If g >= bound, break
.jump576:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment h
	add qword [rsp + 8], 1
	jmp .jump573
.jump574: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump558:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for h
	mov rax, [rel const111] ; 704
	push rax
	mov rax, [rsp]
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump577
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump577:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump578
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump578:
	imul rdi, [rsp + 0 + 8] ; multiply by 704
	jno .jump579
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump579:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
.jump580: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump582 ; If h >= bound, ...
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
.jump582:
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump581 ; If g >= bound, break
.jump583:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment h
	add qword [rsp + 8], 1
	jmp .jump580
.jump581: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rax, [rel const8] ; False
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump584
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump584:
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump585
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump585:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof float[]
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump586
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump586:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump587
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump587:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
.jump588: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump590 ; If h >= bound, ...
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
.jump590:
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump589 ; If g >= bound, break
.jump591:
	; Compute loop body
	sub rsp, 16
	lea rdi, [rsp + 0]
	call _d
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 4
	add rax, [rsp + 48]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment h
	add qword [rsp + 8], 1
	jmp .jump588
.jump589: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const112] ; 86.37
	push rax
	mov rax, [rel const113] ; 74.36
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
.jump498:
	mov rax, [rel const8] ; False
	push rax
	pop rax
	cmp rax, 0
	jne .jump592
	lea rdi, [rel const114] ; t
	call _fail_assertion
.jump592:
	sub rsp, 24
	; Moving 24 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 96 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for v
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump593
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump593:
	; Computing bound for u
	sub rsp, 8 ; Align stack
	mov rax, [rel const7] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump594
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	jmp .jump595
.jump594:
	mov rax, [rel const7] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump596
	mov rax, [rel const8] ; False
	push rax
	jmp .jump597
.jump596:
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
.jump597:
.jump595:
	pop rax
	cmp rax, 0
	je .jump598
	sub rsp, 8
	; Moving 8 bytes from rbp - 144 to rsp
		mov r10, [rbp - 144 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const115] ; 45.6
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	jmp .jump599
.jump598:
	mov rax, [rel const7] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump600
	sub rsp, 8
	; Moving 8 bytes from rbp - 144 to rsp
		mov r10, [rbp - 144 + 0]
		mov [rsp + 0], r10
	jmp .jump601
.jump600:
	sub rsp, 8
	; Moving 8 bytes from rbp - 144 to rsp
		mov r10, [rbp - 144 + 0]
		mov [rsp + 0], r10
.jump601:
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
.jump599:
	movsd xmm0, [rsp]
	add rsp, 8
	call _a
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump602
	lea rdi, [rel const11] ; non-positive loop bound
	call _fail_assertion
.jump602:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by a((if (if (! true) then l else (if true then false else l)) then cos((45.6 + g)) else (- (if true then g else g))))
	jno .jump603
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump603:
	imul rdi, [rsp + 0 + 8] ; multiply by n
	jno .jump604
	lea rdi, [rel const13] ; overflow computing array size
	call _fail_assertion
.jump604:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize v to 0
	mov rax, 0
	push rax
	; Initialize u to 0
	mov rax, 0
	push rax
.jump605: ; Begin body of loop
	; Compare v to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump607 ; If v >= bound, ...
	mov qword [rsp + 8], 0 ; v = 0
	add qword [rsp + 0], 1 ; u++
.jump607:
	; Compare u to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump606 ; If u >= bound, break
.jump608:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment v
	add qword [rsp + 8], 1
	jmp .jump605
.jump606: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	lea rdi, [rel const116] ; (ArrayType (IntType) 2)
	lea rsi, [rsp]
	call _show
	add rsp, 24
	sub rsp, 24
	lea rdi, [rsp]
	lea rsi, [rel const117] ; u.png
	call _read_image
	sub rsp, 8 ; Align stack
	sub rsp, 16
	sub rsp, 8 ; Align stack
	lea rdi, [rsp + 8]
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump609
	lea rdi, [rel const16] ; negative array index
	call _fail_assertion
.jump609:
	cmp rax, [rsp + 8]
	jl .jump610
	lea rdi, [rel const17] ; index too large
	call _fail_assertion
.jump610:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	lea rdi, [rel const118] ; (FloatType)
	lea rsi, [rsp]
	call _show
	add rsp, 8
	add rsp, 8 ; Remove alignment
	add rsp, 184 ; Local variables
	pop r12
	pop rbp
	ret

