global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 1
const1: dq 20.36
const2: dq 334
const3: dq 85.32
const4: dq 0
const5: dq 0.28
const6: db `non-positive loop bound`, 0
const7: dq 587
const8: db `overflow computing array size`, 0
const9: dq 51.38
const10: dq 13.41
const11: dq 36.54
const12: dq 525
const13: dq 279
const14: db `negative array index`, 0
const15: db `index too large`, 0
const16: db `d.png`, 0
const17: dq 32.58
const18: dq 40.3
const19: dq 96.45
const20: dq 46.69
const21: dq 813
const22: dq 458
const23: dq 686
const24: db `G`, 0
const25: db `J`, 0
const26: dq 891
const27: dq 412
const28: dq 193
const29: dq 501
const30: dq 400
const31: db `mod by zero`, 0

section .text
c:
_c:
	push rbp
	mov rbp, rsp
	call _c
	push rax
	pop rax
	add rsp, 0 ; Local variables
	pop rbp
	ret
	mov rax, [rel const0] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump1
	call _c
	push rax
	jmp .jump2
.jump1:
	mov rax, [rel const1] ; 20.36
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
.jump2:
	pop rax
	cmp rax, 0
	je .jump3
	call _c
	push rax
	pop rax
	cmp rax, 0
	je .jump5
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump6
.jump5:
	mov rax, [rel const2] ; 334
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
.jump6:
	; Moving 8 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	jmp .jump4
.jump3:
	mov rax, [rel const3] ; 85.32
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
.jump4:
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	mov rax, [rel const0] ; True
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	pop rax
	add rsp, 16 ; Local variables
	pop rbp
	ret
	call _c
	push rax
	pop rax
	cmp rax, 0
	jne .jump7
	mov rax, [rel const4] ; False
	push rax
	pop rax
.jump7:
	push rax
	sub rsp, 8 ; Align stack
	mov rax, [rel const5] ; 0.28
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Moving 8 bytes from rsp + 8 to rsp + 8
		mov r10, [rsp + 8 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	pop rax
	cmp rax, 0
	je .jump8
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump10
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
.jump10:
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump11
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump11:
	; Computing bound for f
	mov rax, [rel const7] ; 587
	push rax
	mov rax, [rsp]
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by 587
	jno .jump12
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump12:
	imul rdi, [rsp + 0 + 8] ; multiply by b
	jno .jump13
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump13:
	imul rdi, [rsp + 0 + 16] ; multiply by b
	jno .jump14
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump14:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
.jump15: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump17 ; If h >= bound, ...
	mov qword [rsp + 16], 0 ; h = 0
	add qword [rsp + 8], 1 ; g++
.jump17:
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump18 ; If g >= bound, ...
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
.jump18:
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump16 ; If f >= bound, break
.jump19:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment h
	add qword [rsp + 16], 1
	jmp .jump15
.jump16: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 16
	; Moving 16 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	; Moving 32 bytes from rsp + 16 to rsp + 16
		mov r10, [rsp + 16 + 24]
		mov [rsp + 16 + 24], r10
		mov r10, [rsp + 16 + 16]
		mov [rsp + 16 + 16], r10
		mov r10, [rsp + 16 + 8]
		mov [rsp + 16 + 8], r10
		mov r10, [rsp + 16 + 0]
		mov [rsp + 16 + 0], r10
	add rsp, 16
	jmp .jump9
.jump8:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for h
	sub rsp, 8 ; Align stack
	mov rax, [rel const9] ; 51.38
	push rax
	mov rax, [rel const10] ; 13.41
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _atan2
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump20
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
.jump20:
	; Computing bound for g
	mov rax, [rel const11] ; 36.54
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump21
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump21:
	; Computing bound for f
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump22
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump22:
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump23
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
.jump23:
	; Computing bound for f
	mov rax, [rel const12] ; 525
	push rax
	mov rax, [rsp]
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
.jump24: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump26 ; If h >= bound, ...
	mov qword [rsp + 16], 0 ; h = 0
	add qword [rsp + 8], 1 ; g++
.jump26:
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump27 ; If g >= bound, ...
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
.jump27:
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump25 ; If f >= bound, break
.jump28:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment h
	add qword [rsp + 16], 1
	jmp .jump24
.jump25: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump29
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
.jump29:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
imul rdi, [rsp + 0 + 0] ; multiply by (sum[f : 525, g : argnum, h : argnum] argnum)
	jno .jump30
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump30:
	imul rdi, [rsp + 0 + 8] ; multiply by to_int((- 36.54))
	jno .jump31
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump31:
	imul rdi, [rsp + 0 + 16] ; multiply by to_int(atan2(13.41, 51.38))
	jno .jump32
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump32:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
.jump33: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump35 ; If h >= bound, ...
	mov qword [rsp + 16], 0 ; h = 0
	add qword [rsp + 8], 1 ; g++
.jump35:
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump36 ; If g >= bound, ...
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
.jump36:
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump34 ; If f >= bound, break
.jump37:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump38
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	pop rax
.jump38:
	push rax
	pop rax
	cmp rax, 0
	je .jump39
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	jmp .jump40
.jump39:
	sub rsp, 8 ; Align stack
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const0] ; True
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
.jump40:
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment h
	add qword [rsp + 16], 1
	jmp .jump33
.jump34: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump9:
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const13] ; 279
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump41
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump41:
	cmp rax, [rsp + 24]
	jl .jump42
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump42:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump43
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump43:
	cmp rax, [rsp + 32]
	jl .jump44
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump44:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump45
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump45:
	cmp rax, [rsp + 40]
	jl .jump46
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump46:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	add rsp, 16 ; Local variables
	pop rbp
	ret

G:
_G:
	push rbp
	mov rbp, rsp
	mov rax, [rel const4] ; False
	push rax
	pop rax
	cmp rax, 0
	jne .jump104
	lea rdi, [rel const25] ; J
	call _fail_assertion
.jump104:
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	call _G
	add rsp, 16
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump105
	mov rax, [rel const0] ; True
	push rax
	jmp .jump106
.jump105:
	mov rax, [rel const0] ; True
	push rax
.jump106:
	pop rax
	cmp rax, 0
	je .jump107
	mov rax, [rel const0] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump109
	call _c
	push rax
	pop rax
	cmp rax, 0
	jne .jump111
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	pop rax
.jump111:
	push rax
	pop rax
	cmp rax, 0
	je .jump112
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for L
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump114
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
.jump114:
	; Computing bound for K
	sub rsp, 8
	; Moving 8 bytes from r12 - 224 to rsp
		mov r10, [r12 - 224 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump115
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump115:
	; Computing bound for J
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump116
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
.jump116:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof {float,float,float,float}[,][,,]
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump117
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump117:
	imul rdi, [rsp + 0 + 8] ; multiply by u
	jno .jump118
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump118:
	imul rdi, [rsp + 0 + 16] ; multiply by I
	jno .jump119
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump119:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize L to 0
	mov rax, 0
	push rax
	; Initialize K to 0
	mov rax, 0
	push rax
	; Initialize J to 0
	mov rax, 0
	push rax
.jump120: ; Begin body of loop
	; Compare L to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump122 ; If L >= bound, ...
	mov qword [rsp + 16], 0 ; L = 0
	add qword [rsp + 8], 1 ; K++
.jump122:
	; Compare K to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump123 ; If K >= bound, ...
	mov qword [rsp + 8], 0 ; K = 0
	add qword [rsp + 0], 1 ; J++
.jump123:
	; Compare J to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump121 ; If J >= bound, break
.jump124:
	; Compute loop body
	sub rsp, 32
	; Moving 32 bytes from r12 - 240 to rsp
		mov r10, [r12 - 240 + 24]
		mov [rsp + 24], r10
		mov r10, [r12 - 240 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 240 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 240 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, [rsp + 72] ; No overflow if indices in bounds
	add rax, [rsp + 48]
	shl rax, 5
	add rax, [rsp + 80]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment L
	add qword [rsp + 16], 1
	jmp .jump120
.jump121: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump113
.jump112:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for L
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump125
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
.jump125:
	; Computing bound for K
	sub rsp, 8
	; Moving 8 bytes from r12 - 240 to rsp
		mov r10, [r12 - 240 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump126
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump126:
	; Computing bound for J
	sub rsp, 8
	; Moving 8 bytes from r12 - 256 to rsp
		mov r10, [r12 - 256 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump127
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
.jump127:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof {float,float,float,float}[,][,,]
	imul rdi, [rsp + 0 + 0] ; multiply by E
	jno .jump128
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump128:
	imul rdi, [rsp + 0 + 8] ; multiply by s
	jno .jump129
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump129:
	imul rdi, [rsp + 0 + 16] ; multiply by o
	jno .jump130
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump130:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize L to 0
	mov rax, 0
	push rax
	; Initialize K to 0
	mov rax, 0
	push rax
	; Initialize J to 0
	mov rax, 0
	push rax
.jump131: ; Begin body of loop
	; Compare L to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump133 ; If L >= bound, ...
	mov qword [rsp + 16], 0 ; L = 0
	add qword [rsp + 8], 1 ; K++
.jump133:
	; Compare K to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump134 ; If K >= bound, ...
	mov qword [rsp + 8], 0 ; K = 0
	add qword [rsp + 0], 1 ; J++
.jump134:
	; Compare J to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump132 ; If J >= bound, break
.jump135:
	; Compute loop body
	sub rsp, 32
	; Moving 32 bytes from r12 - 240 to rsp
		mov r10, [r12 - 240 + 24]
		mov [rsp + 24], r10
		mov r10, [r12 - 240 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 240 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 240 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, [rsp + 72] ; No overflow if indices in bounds
	add rax, [rsp + 48]
	shl rax, 5
	add rax, [rsp + 80]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment L
	add qword [rsp + 16], 1
	jmp .jump131
.jump132: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump113:
	jmp .jump110
.jump109:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for L
	mov rax, [rel const26] ; 891
	push rax
	mov rax, [rsp]
	; Computing bound for K
	sub rsp, 8
	; Moving 8 bytes from r12 - 224 to rsp
		mov r10, [r12 - 224 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump136
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump136:
	; Computing bound for J
	sub rsp, 8
	; Moving 8 bytes from r12 - 208 to rsp
		mov r10, [r12 - 208 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump137
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
.jump137:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof {float,float,float,float}[,][,,]
	imul rdi, [rsp + 0 + 0] ; multiply by w
	jno .jump138
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump138:
	imul rdi, [rsp + 0 + 8] ; multiply by u
	jno .jump139
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump139:
	imul rdi, [rsp + 0 + 16] ; multiply by 891
	jno .jump140
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump140:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize L to 0
	mov rax, 0
	push rax
	; Initialize K to 0
	mov rax, 0
	push rax
	; Initialize J to 0
	mov rax, 0
	push rax
.jump141: ; Begin body of loop
	; Compare L to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump143 ; If L >= bound, ...
	mov qword [rsp + 16], 0 ; L = 0
	add qword [rsp + 8], 1 ; K++
.jump143:
	; Compare K to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump144 ; If K >= bound, ...
	mov qword [rsp + 8], 0 ; K = 0
	add qword [rsp + 0], 1 ; J++
.jump144:
	; Compare J to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump142 ; If J >= bound, break
.jump145:
	; Compute loop body
	sub rsp, 32
	; Moving 32 bytes from r12 - 240 to rsp
		mov r10, [r12 - 240 + 24]
		mov [rsp + 24], r10
		mov r10, [r12 - 240 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 240 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 240 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, [rsp + 72] ; No overflow if indices in bounds
	add rax, [rsp + 48]
	shl rax, 5
	add rax, [rsp + 80]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment L
	add qword [rsp + 16], 1
	jmp .jump141
.jump142: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump110:
	jmp .jump108
.jump107:
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump146
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for L
	sub rsp, 8
	; Moving 8 bytes from r12 - 112 to rsp
		mov r10, [r12 - 112 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump148
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
.jump148:
	; Computing bound for K
	sub rsp, 8
	; Moving 8 bytes from r12 - 224 to rsp
		mov r10, [r12 - 224 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump149
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump149:
	; Computing bound for J
	sub rsp, 8
	; Moving 8 bytes from r12 - 256 to rsp
		mov r10, [r12 - 256 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump150
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
.jump150:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof {float,float,float,float}[,][,,]
	imul rdi, [rsp + 0 + 0] ; multiply by E
	jno .jump151
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump151:
	imul rdi, [rsp + 0 + 8] ; multiply by u
	jno .jump152
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump152:
	imul rdi, [rsp + 0 + 16] ; multiply by k
	jno .jump153
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump153:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize L to 0
	mov rax, 0
	push rax
	; Initialize K to 0
	mov rax, 0
	push rax
	; Initialize J to 0
	mov rax, 0
	push rax
.jump154: ; Begin body of loop
	; Compare L to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump156 ; If L >= bound, ...
	mov qword [rsp + 16], 0 ; L = 0
	add qword [rsp + 8], 1 ; K++
.jump156:
	; Compare K to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump157 ; If K >= bound, ...
	mov qword [rsp + 8], 0 ; K = 0
	add qword [rsp + 0], 1 ; J++
.jump157:
	; Compare J to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump155 ; If J >= bound, break
.jump158:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump159
	sub rsp, 32
	; Moving 32 bytes from r12 - 240 to rsp
		mov r10, [r12 - 240 + 24]
		mov [rsp + 24], r10
		mov r10, [r12 - 240 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 240 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 240 + 0]
		mov [rsp + 0], r10
	jmp .jump160
.jump159:
	sub rsp, 32
	; Moving 32 bytes from r12 - 240 to rsp
		mov r10, [r12 - 240 + 24]
		mov [rsp + 24], r10
		mov r10, [r12 - 240 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 240 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 240 + 0]
		mov [rsp + 0], r10
.jump160:
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, [rsp + 72] ; No overflow if indices in bounds
	add rax, [rsp + 48]
	shl rax, 5
	add rax, [rsp + 80]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment L
	add qword [rsp + 16], 1
	jmp .jump154
.jump155: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump147
.jump146:
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump161
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for L
	sub rsp, 8
	; Moving 8 bytes from r12 - 112 to rsp
		mov r10, [r12 - 112 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump163
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
.jump163:
	; Computing bound for K
	sub rsp, 8
	; Moving 8 bytes from r12 - 264 to rsp
		mov r10, [r12 - 264 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump164
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump164:
	; Computing bound for J
	sub rsp, 8
	; Moving 8 bytes from r12 - 208 to rsp
		mov r10, [r12 - 208 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump165
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
.jump165:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof {float,float,float,float}[,][,,]
	imul rdi, [rsp + 0 + 0] ; multiply by w
	jno .jump166
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump166:
	imul rdi, [rsp + 0 + 8] ; multiply by D
	jno .jump167
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump167:
	imul rdi, [rsp + 0 + 16] ; multiply by k
	jno .jump168
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump168:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize L to 0
	mov rax, 0
	push rax
	; Initialize K to 0
	mov rax, 0
	push rax
	; Initialize J to 0
	mov rax, 0
	push rax
.jump169: ; Begin body of loop
	; Compare L to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump171 ; If L >= bound, ...
	mov qword [rsp + 16], 0 ; L = 0
	add qword [rsp + 8], 1 ; K++
.jump171:
	; Compare K to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump172 ; If K >= bound, ...
	mov qword [rsp + 8], 0 ; K = 0
	add qword [rsp + 0], 1 ; J++
.jump172:
	; Compare J to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump170 ; If J >= bound, break
.jump173:
	; Compute loop body
	sub rsp, 32
	; Moving 32 bytes from r12 - 240 to rsp
		mov r10, [r12 - 240 + 24]
		mov [rsp + 24], r10
		mov r10, [r12 - 240 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 240 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 240 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, [rsp + 72] ; No overflow if indices in bounds
	add rax, [rsp + 48]
	shl rax, 5
	add rax, [rsp + 80]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment L
	add qword [rsp + 16], 1
	jmp .jump169
.jump170: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump162
.jump161:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for L
	sub rsp, 8
	; Moving 8 bytes from r12 - 192 to rsp
		mov r10, [r12 - 192 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump174
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
.jump174:
	; Computing bound for K
	sub rsp, 8
	; Moving 8 bytes from r12 - 264 to rsp
		mov r10, [r12 - 264 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump175
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump175:
	; Computing bound for J
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump176
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
.jump176:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof {float,float,float,float}[,][,,]
	imul rdi, [rsp + 0 + 0] ; multiply by b
	jno .jump177
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump177:
	imul rdi, [rsp + 0 + 8] ; multiply by D
	jno .jump178
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump178:
	imul rdi, [rsp + 0 + 16] ; multiply by y
	jno .jump179
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump179:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize L to 0
	mov rax, 0
	push rax
	; Initialize K to 0
	mov rax, 0
	push rax
	; Initialize J to 0
	mov rax, 0
	push rax
.jump180: ; Begin body of loop
	; Compare L to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump182 ; If L >= bound, ...
	mov qword [rsp + 16], 0 ; L = 0
	add qword [rsp + 8], 1 ; K++
.jump182:
	; Compare K to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump183 ; If K >= bound, ...
	mov qword [rsp + 8], 0 ; K = 0
	add qword [rsp + 0], 1 ; J++
.jump183:
	; Compare J to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump181 ; If J >= bound, break
.jump184:
	; Compute loop body
	sub rsp, 32
	; Moving 32 bytes from r12 - 240 to rsp
		mov r10, [r12 - 240 + 24]
		mov [rsp + 24], r10
		mov r10, [r12 - 240 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 240 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 240 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, [rsp + 72] ; No overflow if indices in bounds
	add rax, [rsp + 48]
	shl rax, 5
	add rax, [rsp + 80]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment L
	add qword [rsp + 16], 1
	jmp .jump180
.jump181: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump162:
.jump147:
.jump108:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for J
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for J
	sub rsp, 8
	; Moving 8 bytes from r12 - 256 to rsp
		mov r10, [r12 - 256 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump185
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump185:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize J to 0
	mov rax, 0
	push rax
.jump186: ; Begin body of loop
	; Compare J to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump187 ; If J >= bound, break
.jump188:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 104 to rsp
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment J
	add qword [rsp + 0], 1
	jmp .jump186
.jump187: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump189
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
.jump189:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof int[,]
imul rdi, [rsp + 0 + 0] ; multiply by (sum[J : E] l)
	jno .jump190
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump190:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize J to 0
	mov rax, 0
	push rax
.jump191: ; Begin body of loop
	; Compare J to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump192 ; If J >= bound, break
.jump193:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for L
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump194
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump194:
	; Computing bound for K
	sub rsp, 8
	; Moving 8 bytes from r12 - 232 to rsp
		mov r10, [r12 - 232 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump195
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
.jump195:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by t
	jno .jump196
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump196:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump197
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump197:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize L to 0
	mov rax, 0
	push rax
	; Initialize K to 0
	mov rax, 0
	push rax
.jump198: ; Begin body of loop
	; Compare L to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump200 ; If L >= bound, ...
	mov qword [rsp + 8], 0 ; L = 0
	add qword [rsp + 0], 1 ; K++
.jump200:
	; Compare K to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump199 ; If K >= bound, break
.jump201:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment L
	add qword [rsp + 8], 1
	jmp .jump198
.jump199: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 24
	add rax, [rsp + 40]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment J
	add qword [rsp + 0], 1
	jmp .jump191
.jump192: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for K
	sub rsp, 8
	; Moving 8 bytes from r12 - 192 to rsp
		mov r10, [r12 - 192 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump202
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
.jump202:
	; Computing bound for J
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump203
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump203:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize K to 0
	mov rax, 0
	push rax
	; Initialize J to 0
	mov rax, 0
	push rax
.jump204: ; Begin body of loop
	; Compare K to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump206 ; If K >= bound, ...
	mov qword [rsp + 8], 0 ; K = 0
	add qword [rsp + 0], 1 ; J++
.jump206:
	; Compare J to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump205 ; If J >= bound, break
.jump207:
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for M
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump208
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump208:
	; Computing bound for L
	sub rsp, 8
	; Moving 8 bytes from r12 - 112 to rsp
		mov r10, [r12 - 112 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump209
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
.jump209:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize M to 0
	mov rax, 0
	push rax
	; Initialize L to 0
	mov rax, 0
	push rax
.jump210: ; Begin body of loop
	; Compare M to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump212 ; If M >= bound, ...
	mov qword [rsp + 8], 0 ; M = 0
	add qword [rsp + 0], 1 ; L++
.jump212:
	; Compare L to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump211 ; If L >= bound, break
.jump213:
	; Compute loop body
	mov rax, [rel const27] ; 412
	push rax
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment M
	add qword [rsp + 8], 1
	jmp .jump210
.jump211: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment K
	add qword [rsp + 8], 1
	jmp .jump204
.jump205: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump214
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump214:
	cmp rax, [rsp + 8]
	jl .jump215
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump215:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 24
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const28] ; 193
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 192 to rsp
		mov r10, [r12 - 192 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump216
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump216:
	cmp rax, [rsp + 16]
	jl .jump217
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump217:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump218
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump218:
	cmp rax, [rsp + 24]
	jl .jump219
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump219:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 208 to rsp
		mov r10, [r12 - 208 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump220
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for K
	sub rsp, 8 ; Align stack
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	cmp rax, 0
	je .jump222
	sub rsp, 8
	; Moving 8 bytes from r12 - 208 to rsp
		mov r10, [r12 - 208 + 0]
		mov [rsp + 0], r10
	jmp .jump223
.jump222:
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
.jump223:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump224
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
.jump224:
	; Computing bound for J
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump225
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump225:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize K to 0
	mov rax, 0
	push rax
	; Initialize J to 0
	mov rax, 0
	push rax
.jump226: ; Begin body of loop
	; Compare K to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump228 ; If K >= bound, ...
	mov qword [rsp + 8], 0 ; K = 0
	add qword [rsp + 0], 1 ; J++
.jump228:
	; Compare J to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump227 ; If J >= bound, break
.jump229:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 152 to rsp
		mov r10, [r12 - 152 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 32] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 32], xmm0 ; Save sum
	; Increment K
	add qword [rsp + 8], 1
	jmp .jump226
.jump227: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	jmp .jump221
.jump220:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for K
	sub rsp, 8
	; Moving 8 bytes from r12 - 176 to rsp
		mov r10, [r12 - 176 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump230
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
.jump230:
	; Computing bound for J
	sub rsp, 8
	; Moving 8 bytes from r12 - 256 to rsp
		mov r10, [r12 - 256 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump231
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump231:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by E
	jno .jump232
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump232:
	imul rdi, [rsp + 0 + 8] ; multiply by A
	jno .jump233
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump233:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize K to 0
	mov rax, 0
	push rax
	; Initialize J to 0
	mov rax, 0
	push rax
.jump234: ; Begin body of loop
	; Compare K to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump236 ; If K >= bound, ...
	mov qword [rsp + 8], 0 ; K = 0
	add qword [rsp + 0], 1 ; J++
.jump236:
	; Compare J to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump235 ; If J >= bound, break
.jump237:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 104 to rsp
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment K
	add qword [rsp + 8], 1
	jmp .jump234
.jump235: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 112 to rsp
		mov r10, [r12 - 112 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump238
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump238:
	cmp rax, [rsp + 16]
	jl .jump239
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump239:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump240
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump240:
	cmp rax, [rsp + 24]
	jl .jump241
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump241:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump221:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump242
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump242:
	cmp rax, [rsp + 24]
	jl .jump243
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump243:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump244
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump244:
	cmp rax, [rsp + 32]
	jl .jump245
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump245:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump246
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump246:
	cmp rax, [rsp + 40]
	jl .jump247
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump247:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 5
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 32
	; Moving 32 bytes from rax to rsp
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 224 to rsp
		mov r10, [r12 - 224 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	add rsp, 32 ; Local variables
	pop rbp
	ret
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 240 to rsp
		mov r10, [r12 - 240 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump248
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump250
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump252
	jmp .jump253
.jump252:
.jump253:
	jmp .jump251
.jump250:
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump254
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for O
	sub rsp, 8
	; Moving 8 bytes from r12 - 264 to rsp
		mov r10, [r12 - 264 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump256
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
.jump256:
	; Computing bound for N
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump257
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump257:
	; Computing total size of heap memory to allocate
	mov rdi, 0 ; sizeof {}
	imul rdi, [rsp + 0 + 0] ; multiply by I
	jno .jump258
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump258:
	imul rdi, [rsp + 0 + 8] ; multiply by D
	jno .jump259
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump259:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize O to 0
	mov rax, 0
	push rax
	; Initialize N to 0
	mov rax, 0
	push rax
.jump260: ; Begin body of loop
	; Compare O to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump262 ; If O >= bound, ...
	mov qword [rsp + 8], 0 ; O = 0
	add qword [rsp + 0], 1 ; N++
.jump262:
	; Compare N to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump261 ; If N >= bound, break
.jump263:
	; Compute loop body
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 0
	add rax, [rsp + 32]
	; Move body (0 bytes) to index
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	; Increment O
	add qword [rsp + 8], 1
	jmp .jump260
.jump261: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump255
.jump254:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for O
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump264
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
.jump264:
	; Computing bound for N
	sub rsp, 8
	; Moving 8 bytes from r12 - 112 to rsp
		mov r10, [r12 - 112 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump265
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump265:
	; Computing total size of heap memory to allocate
	mov rdi, 0 ; sizeof {}
	imul rdi, [rsp + 0 + 0] ; multiply by k
	jno .jump266
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump266:
	imul rdi, [rsp + 0 + 8] ; multiply by K
	jno .jump267
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump267:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize O to 0
	mov rax, 0
	push rax
	; Initialize N to 0
	mov rax, 0
	push rax
.jump268: ; Begin body of loop
	; Compare O to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump270 ; If O >= bound, ...
	mov qword [rsp + 8], 0 ; O = 0
	add qword [rsp + 0], 1 ; N++
.jump270:
	; Compare N to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump269 ; If N >= bound, break
.jump271:
	; Compute loop body
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 0
	add rax, [rsp + 32]
	; Move body (0 bytes) to index
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	; Increment O
	add qword [rsp + 8], 1
	jmp .jump268
.jump269: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump255:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for P
	mov rax, [rel const29] ; 501
	push rax
	mov rax, [rsp]
	; Computing bound for O
	sub rsp, 8
	; Moving 8 bytes from r12 - 232 to rsp
		mov r10, [r12 - 232 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump272
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
.jump272:
	; Computing bound for N
	sub rsp, 8
	; Moving 8 bytes from r12 - 232 to rsp
		mov r10, [r12 - 232 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump273
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump273:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize P to 0
	mov rax, 0
	push rax
	; Initialize O to 0
	mov rax, 0
	push rax
	; Initialize N to 0
	mov rax, 0
	push rax
.jump274: ; Begin body of loop
	; Compare P to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump276 ; If P >= bound, ...
	mov qword [rsp + 16], 0 ; P = 0
	add qword [rsp + 8], 1 ; O++
.jump276:
	; Compare O to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump277 ; If O >= bound, ...
	mov qword [rsp + 8], 0 ; O = 0
	add qword [rsp + 0], 1 ; N++
.jump277:
	; Compare N to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump275 ; If N >= bound, break
.jump278:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment P
	add qword [rsp + 16], 1
	jmp .jump274
.jump275: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump279
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump279:
	cmp rax, [rsp + 16]
	jl .jump280
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump280:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump281
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump281:
	cmp rax, [rsp + 24]
	jl .jump282
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump282:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 0
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 0
	; Moving 0 bytes from rax to rsp
.jump251:
	jmp .jump249
.jump248:
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump283
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for O
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump285
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
.jump285:
	; Computing bound for N
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for N
	sub rsp, 8
	; Moving 8 bytes from r12 - 104 to rsp
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump286
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
.jump286:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize N to 0
	mov rax, 0
	push rax
.jump287: ; Begin body of loop
	; Compare N to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump288 ; If N >= bound, break
.jump289:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment N
	add qword [rsp + 0], 1
	jmp .jump287
.jump288: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump290
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump290:
	; Computing total size of heap memory to allocate
	mov rdi, 0 ; sizeof {}
imul rdi, [rsp + 0 + 0] ; multiply by (sum[N : l] I)
	jno .jump291
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump291:
	imul rdi, [rsp + 0 + 8] ; multiply by L
	jno .jump292
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump292:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize O to 0
	mov rax, 0
	push rax
	; Initialize N to 0
	mov rax, 0
	push rax
.jump293: ; Begin body of loop
	; Compare O to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump295 ; If O >= bound, ...
	mov qword [rsp + 8], 0 ; O = 0
	add qword [rsp + 0], 1 ; N++
.jump295:
	; Compare N to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump294 ; If N >= bound, break
.jump296:
	; Compute loop body
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 0
	add rax, [rsp + 32]
	; Move body (0 bytes) to index
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	; Increment O
	add qword [rsp + 8], 1
	jmp .jump293
.jump294: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rax, [rel const30] ; 400
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 104 to rsp
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump297
	lea rdi, [rel const31] ; mod by zero
	call _fail_assertion
.jump297:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump298
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump298:
	cmp rax, [rsp + 16]
	jl .jump299
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump299:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump300
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump300:
	cmp rax, [rsp + 24]
	jl .jump301
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump301:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 0
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 0
	; Moving 0 bytes from rax to rsp
	jmp .jump284
.jump283:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for N
	sub rsp, 8
	; Moving 8 bytes from r12 - 240 to rsp
		mov r10, [r12 - 240 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump302
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
.jump302:
	; Computing total size of heap memory to allocate
	mov rdi, 0 ; sizeof {}
	imul rdi, [rsp + 0 + 0] ; multiply by s
	jno .jump303
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump303:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize N to 0
	mov rax, 0
	push rax
.jump304: ; Begin body of loop
	; Compare N to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump305 ; If N >= bound, break
.jump306:
	; Compute loop body
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 0
	add rax, [rsp + 16]
	; Move body (0 bytes) to index
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	; Increment N
	add qword [rsp + 0], 1
	jmp .jump304
.jump305: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 232 to rsp
		mov r10, [r12 - 232 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump307
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump307:
	cmp rax, [rsp + 8]
	jl .jump308
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump308:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 0
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 0
	; Moving 0 bytes from rax to rsp
.jump284:
.jump249:
	sub rsp, 8
	; Moving 8 bytes from r12 - 104 to rsp
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for O
	sub rsp, 8
	; Moving 8 bytes from r12 - 112 to rsp
		mov r10, [r12 - 112 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump309
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump309:
	; Computing bound for N
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump310
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
.jump310:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by o
	jno .jump311
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump311:
	imul rdi, [rsp + 0 + 8] ; multiply by k
	jno .jump312
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump312:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize O to 0
	mov rax, 0
	push rax
	; Initialize N to 0
	mov rax, 0
	push rax
.jump313: ; Begin body of loop
	; Compare O to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump315 ; If O >= bound, ...
	mov qword [rsp + 8], 0 ; O = 0
	add qword [rsp + 0], 1 ; N++
.jump315:
	; Compare N to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump314 ; If N >= bound, break
.jump316:
	; Compute loop body
	call _c
	push rax
	pop rax
	xor rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment O
	add qword [rsp + 8], 1
	jmp .jump313
.jump314: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 16
	; Moving 16 bytes from r12 - 208 to rsp
		mov r10, [r12 - 208 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 208 + 0]
		mov [rsp + 0], r10
	; Moving 24 bytes from rsp + 16 to rsp + 24
		mov r10, [rsp + 16 + 16]
		mov [rsp + 24 + 16], r10
		mov r10, [rsp + 16 + 8]
		mov [rsp + 24 + 8], r10
		mov r10, [rsp + 16 + 0]
		mov [rsp + 24 + 0], r10
	add rsp, 24
	sub rsp, 8 ; Align stack
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	cmp rax, 0
	je .jump317
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for P
	sub rsp, 8
	; Moving 8 bytes from r12 - 208 to rsp
		mov r10, [r12 - 208 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump319
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump319:
	; Computing bound for O
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump320
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
.jump320:
	; Computing bound for N
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump321
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump321:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump322
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump322:
	imul rdi, [rsp + 0 + 8] ; multiply by o
	jno .jump323
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump323:
	imul rdi, [rsp + 0 + 16] ; multiply by w
	jno .jump324
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump324:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize P to 0
	mov rax, 0
	push rax
	; Initialize O to 0
	mov rax, 0
	push rax
	; Initialize N to 0
	mov rax, 0
	push rax
.jump325: ; Begin body of loop
	; Compare P to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump327 ; If P >= bound, ...
	mov qword [rsp + 16], 0 ; P = 0
	add qword [rsp + 8], 1 ; O++
.jump327:
	; Compare O to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump328 ; If O >= bound, ...
	mov qword [rsp + 8], 0 ; O = 0
	add qword [rsp + 0], 1 ; N++
.jump328:
	; Compare N to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump326 ; If N >= bound, break
.jump329:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment P
	add qword [rsp + 16], 1
	jmp .jump325
.jump326: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump318
.jump317:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for P
	sub rsp, 8
	; Moving 8 bytes from r12 - 224 to rsp
		mov r10, [r12 - 224 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump330
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump330:
	; Computing bound for O
	sub rsp, 8
	; Moving 8 bytes from r12 - 104 to rsp
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump331
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
.jump331:
	; Computing bound for N
	sub rsp, 8
	; Moving 8 bytes from r12 - 232 to rsp
		mov r10, [r12 - 232 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump332
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump332:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by t
	jno .jump333
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump333:
	imul rdi, [rsp + 0 + 8] ; multiply by l
	jno .jump334
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump334:
	imul rdi, [rsp + 0 + 16] ; multiply by u
	jno .jump335
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump335:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize P to 0
	mov rax, 0
	push rax
	; Initialize O to 0
	mov rax, 0
	push rax
	; Initialize N to 0
	mov rax, 0
	push rax
.jump336: ; Begin body of loop
	; Compare P to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump338 ; If P >= bound, ...
	mov qword [rsp + 16], 0 ; P = 0
	add qword [rsp + 8], 1 ; O++
.jump338:
	; Compare O to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump339 ; If O >= bound, ...
	mov qword [rsp + 8], 0 ; O = 0
	add qword [rsp + 0], 1 ; N++
.jump339:
	; Compare N to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump337 ; If N >= bound, break
.jump340:
	; Compute loop body
	mov rax, [rel const0] ; True
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment P
	add qword [rsp + 16], 1
	jmp .jump336
.jump337: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump318:
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 88 to rsp
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	push rax
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 280 to rsp
		mov r10, [r12 - 280 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _to_int
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump341
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump341:
	cmp rax, [rsp + 24]
	jl .jump342
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump342:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump343
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump343:
	cmp rax, [rsp + 32]
	jl .jump344
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump344:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump345
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
.jump345:
	cmp rax, [rsp + 40]
	jl .jump346
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
.jump346:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump347
	sub rsp, 8
	; Moving 8 bytes from r12 - 264 to rsp
		mov r10, [r12 - 264 + 0]
		mov [rsp + 0], r10
	jmp .jump348
.jump347:
	sub rsp, 8
	; Moving 8 bytes from r12 - -16 to rsp
		mov r10, [r12 - -16 + 0]
		mov [rsp + 0], r10
.jump348:
	sub rsp, 8
	; Moving 8 bytes from r12 - 264 to rsp
		mov r10, [r12 - 264 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump349
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump349:
	cmp rax, [rsp + 16]
	jl .jump350
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump350:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump351
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump351:
	cmp rax, [rsp + 24]
	jl .jump352
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump352:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	add rsp, 32 ; Local variables
	pop rbp
	ret

jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	lea rdi, [rsp]
	lea rsi, [rel const16] ; d.png
	call _read_image
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rdi
	call _to_float
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _asin
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const17] ; 32.58
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump47
	mov rax, [rel const0] ; True
	push rax
	jmp .jump48
.jump47:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for e
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump49
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
.jump49:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by b
	jno .jump50
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump50:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize e to 0
	mov rax, 0
	push rax
.jump51: ; Begin body of loop
	; Compare e to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump52 ; If e >= bound, break
.jump53:
	; Compute loop body
	mov rax, [rel const4] ; False
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment e
	add qword [rsp + 0], 1
	jmp .jump51
.jump52: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	; Moving 16 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	mov rax, [rel const0] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump54
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	jmp .jump55
.jump54:
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
.jump55:
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump56
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump56:
	cmp rax, [rsp + 8]
	jl .jump57
	sub rsp, 8 ; Align stack
	lea rdi, [rel const15] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump57:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump48:
	sub rsp, 8 ; Align stack
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	cmp rax, 0
	je .jump58
	jmp .jump59
.jump58:
.jump59:
	sub rsp, 24
	; Moving 24 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 48 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const18] ; 40.3
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump60
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump60:
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump61
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
.jump61:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float
	imul rdi, [rsp + 0 + 0] ; multiply by b
	jno .jump62
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump62:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump63
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump63:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
.jump64: ; Begin body of loop
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump66 ; If h >= bound, ...
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
.jump66:
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jge .jump65 ; If g >= bound, break
.jump67:
	; Compute loop body
	mov rax, [rel const19] ; 96.45
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment h
	add qword [rsp + 8], 1
	jmp .jump64
.jump65: ; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rax, [rel const4] ; False
	push rax
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	mov rax, [rel const20] ; 46.69
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _sin
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Moving 88 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 80]
		mov [rsp + 0 + 80], r10
		mov r10, [rsp + 0 + 72]
		mov [rsp + 0 + 72], r10
		mov r10, [rsp + 0 + 64]
		mov [rsp + 0 + 64], r10
		mov r10, [rsp + 0 + 56]
		mov [rsp + 0 + 56], r10
		mov r10, [rsp + 0 + 48]
		mov [rsp + 0 + 48], r10
		mov r10, [rsp + 0 + 40]
		mov [rsp + 0 + 40], r10
		mov r10, [rsp + 0 + 32]
		mov [rsp + 0 + 32], r10
		mov r10, [rsp + 0 + 24]
		mov [rsp + 0 + 24], r10
		mov r10, [rsp + 0 + 16]
		mov [rsp + 0 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	sub rsp, 8
	; Moving 8 bytes from rbp - 144 to rsp
		mov r10, [rbp - 144 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	cmp rax, 0
	je .jump68
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _atan
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _acos
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for r
	sub rsp, 8
	; Moving 8 bytes from rbp - 112 to rsp
		mov r10, [rbp - 112 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump70
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
.jump70:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by k
	jno .jump71
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump71:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize r to 0
	mov rax, 0
	push rax
.jump72: ; Begin body of loop
	; Compare r to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump73 ; If r >= bound, break
.jump74:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 112 to rsp
		mov r10, [rbp - 112 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment r
	add qword [rsp + 0], 1
	jmp .jump72
.jump73: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for t
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump75
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
.jump75:
	; Computing bound for s
	mov rax, [rel const21] ; 813
	push rax
	mov rax, [rsp]
	; Computing bound for r
	mov rax, [rel const22] ; 458
	push rax
	mov rax, [rsp]
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof {float,float,float,float}[,]
	imul rdi, [rsp + 0 + 0] ; multiply by 458
	jno .jump76
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump76:
	imul rdi, [rsp + 0 + 8] ; multiply by 813
	jno .jump77
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump77:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump78
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump78:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize t to 0
	mov rax, 0
	push rax
	; Initialize s to 0
	mov rax, 0
	push rax
	; Initialize r to 0
	mov rax, 0
	push rax
.jump79: ; Begin body of loop
	; Compare t to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump81 ; If t >= bound, ...
	mov qword [rsp + 16], 0 ; t = 0
	add qword [rsp + 8], 1 ; s++
.jump81:
	; Compare s to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump82 ; If s >= bound, ...
	mov qword [rsp + 8], 0 ; s = 0
	add qword [rsp + 0], 1 ; r++
.jump82:
	; Compare r to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump80 ; If r >= bound, break
.jump83:
	; Compute loop body
	sub rsp, 24
	; Moving 24 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 80 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 24
	add rax, [rsp + 72]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment t
	add qword [rsp + 16], 1
	jmp .jump79
.jump80: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump69
.jump68:
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 152 to rsp
		mov r10, [rbp - 152 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 16
	; Moving 16 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from rbp - 136 to rsp
		mov r10, [rbp - 136 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 136 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for t
	mov rax, [rel const23] ; 686
	push rax
	mov rax, [rsp]
	; Computing bound for s
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump84
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump84:
	; Computing bound for r
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump85
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
.jump85:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof {float,float,float,float}[,]
	imul rdi, [rsp + 0 + 0] ; multiply by b
	jno .jump86
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump86:
	imul rdi, [rsp + 0 + 8] ; multiply by b
	jno .jump87
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump87:
	imul rdi, [rsp + 0 + 16] ; multiply by 686
	jno .jump88
	lea rdi, [rel const8] ; overflow computing array size
	call _fail_assertion
.jump88:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize t to 0
	mov rax, 0
	push rax
	; Initialize s to 0
	mov rax, 0
	push rax
	; Initialize r to 0
	mov rax, 0
	push rax
.jump89: ; Begin body of loop
	; Compare t to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump91 ; If t >= bound, ...
	mov qword [rsp + 16], 0 ; t = 0
	add qword [rsp + 8], 1 ; s++
.jump91:
	; Compare s to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump92 ; If s >= bound, ...
	mov qword [rsp + 8], 0 ; s = 0
	add qword [rsp + 0], 1 ; r++
.jump92:
	; Compare r to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump90 ; If r >= bound, break
.jump93:
	; Compute loop body
	sub rsp, 24
	; Moving 24 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 48 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 24
	add rax, [rsp + 72]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment t
	add qword [rsp + 16], 1
	jmp .jump89
.jump90: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump69:
	sub rsp, 24
	; Moving 24 bytes from rbp - 112 to rsp
		mov r10, [rbp - 112 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 112 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 112 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	call _get_time
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for H
	sub rsp, 8
	; Moving 8 bytes from rbp - 232 to rsp
		mov r10, [rbp - 232 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump94
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
.jump94:
	; Computing bound for G
	sub rsp, 8
	; Moving 8 bytes from rbp - 112 to rsp
		mov r10, [rbp - 112 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump95
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump95:
	; Computing bound for F
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump96
	sub rsp, 8
	; Moving 8 bytes from rbp - 192 to rsp
		mov r10, [rbp - 192 + 0]
		mov [rsp + 0], r10
	jmp .jump97
.jump96:
	sub rsp, 8
	; Moving 8 bytes from rbp - 264 to rsp
		mov r10, [rbp - 264 + 0]
		mov [rsp + 0], r10
.jump97:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump98
	lea rdi, [rel const6] ; non-positive loop bound
	call _fail_assertion
.jump98:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize H to 0
	mov rax, 0
	push rax
	; Initialize G to 0
	mov rax, 0
	push rax
	; Initialize F to 0
	mov rax, 0
	push rax
.jump99: ; Begin body of loop
	; Compare H to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump101 ; If H >= bound, ...
	mov qword [rsp + 16], 0 ; H = 0
	add qword [rsp + 8], 1 ; G++
.jump101:
	; Compare G to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump102 ; If G >= bound, ...
	mov qword [rsp + 8], 0 ; G = 0
	add qword [rsp + 0], 1 ; F++
.jump102:
	; Compare F to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jge .jump100 ; If F >= bound, break
.jump103:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 152 to rsp
		mov r10, [rbp - 152 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 48] ; Load sum
	addsd xmm0, xmm1 ; Add loop body
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment H
	add qword [rsp + 16], 1
	jmp .jump99
.jump100: ; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 144 to rsp
		mov r10, [rbp - 144 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _exp
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _cos
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Align stack
	call _get_time
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 8]
	subsd xmm0, xmm1
	sub rsp, 8 ; Align stack
	call _print_time
	add rsp, 8 ; Remove alignment
	lea rdi, [rel const24] ; G
	sub rsp, 8 ; Align stack
	call _print
	add rsp, 8 ; Remove alignment
	add rsp, 272 ; Local variables
	pop r12
	pop rbp
	ret

