global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 4562284561
const1: dq 61681
const2: dq 241
const3: dq 17
const4: db `overflow computing array size`, 0
const5: dq 1
const6: db `(ArrayType (IntType) 4)`, 0

section .text
jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for l
	mov rax, [rel const0] ; 4562284561
	push rax
	mov rax, [rsp]
	; Computing bound for k
	mov rax, [rel const1] ; 61681
	push rax
	mov rax, [rsp]
	; Computing bound for j
	mov rax, [rel const2] ; 241
	push rax
	mov rax, [rsp]
	; Computing bound for i
	mov rax, [rel const3] ; 17
	push rax
	mov rax, [rsp]
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by 17
	jno .jump1
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump1:
	imul rdi, [rsp + 0 + 8] ; multiply by 241
	jno .jump2
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump2:
	imul rdi, [rsp + 0 + 16] ; multiply by 61681
	jno .jump3
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump3:
	imul rdi, [rsp + 0 + 24] ; multiply by 4562284561
	jno .jump4
	lea rdi, [rel const4] ; overflow computing array size
	call _fail_assertion
.jump4:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 32], rax ; Move to pre-allocated space
	; Initialize l to 0
	mov rax, 0
	push rax
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
.jump5: ; Begin body of loop
	; Compare l to its bound
	mov rax, [rsp + 24]
	cmp rax, [rsp + 56]
	jl .jump7 ; If l >= bound, ...
	mov qword [rsp + 24], 0 ; l = 0
	add qword [rsp + 16], 1 ; k++
.jump7:
	; Compare k to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 48]
	jl .jump8 ; If k >= bound, ...
	mov qword [rsp + 16], 0 ; k = 0
	add qword [rsp + 8], 1 ; j++
.jump8:
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 40]
	jl .jump9 ; If j >= bound, ...
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
.jump9:
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 32]
	jge .jump6 ; If i >= bound, break
.jump10:
	; Compute loop body
	mov rax, [rel const5] ; 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	shl rax, 3
	add rax, [rsp + 72]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment l
	add qword [rsp + 24], 1
	jmp .jump5
.jump6: ; End body of loop
	; Free all loop variables
	add rsp, 32
	; array left on stack
	lea rdi, [rel const6] ; (ArrayType (IntType) 4)
	lea rsi, [rsp]
	call _show
	add rsp, 40
	pop r12
	pop rbp
	ret

