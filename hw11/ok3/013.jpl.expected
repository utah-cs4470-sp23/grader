global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 65536
const1: db `non-positive loop bound`, 0
const2: db `(IntType)`, 0

section .text
jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for l
	mov rax, [rel const0] ; 65536
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump1:
	; Computing bound for k
	mov rax, [rel const0] ; 65536
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump2
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump2:
	; Computing bound for j
	mov rax, [rel const0] ; 65536
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump3
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump3:
	; Computing bound for i
	mov rax, [rel const0] ; 65536
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump4
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump4:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 32], rax ; Move to pre-allocated space
	; Initialize l to 0
	mov rax, 0
	push rax
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
.jump5: ; Begin body of loop
	; Compare l to its bound
	mov rax, [rsp + 24]
	cmp rax, [rsp + 56]
	jl .jump7 ; If l >= bound, ...
	mov qword [rsp + 24], 0 ; l = 0
	add qword [rsp + 16], 1 ; k++
.jump7:
	; Compare k to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 48]
	jl .jump8 ; If k >= bound, ...
	mov qword [rsp + 16], 0 ; k = 0
	add qword [rsp + 8], 1 ; j++
.jump8:
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 40]
	jl .jump9 ; If j >= bound, ...
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
.jump9:
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 32]
	jge .jump6 ; If i >= bound, break
.jump10:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	add [rsp + 64], rax ; Add loop body to sum
	; Increment l
	add qword [rsp + 24], 1
	jmp .jump5
.jump6: ; End body of loop
	; Free all loop variables
	add rsp, 32
	; Free all loop bounds
	add rsp, 32
	; sum left on stack
	lea rdi, [rel const2] ; (IntType)
	lea rsi, [rsp]
	call _show
	add rsp, 8
	pop r12
	pop rbp
	ret

