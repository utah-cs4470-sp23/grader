global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 205
const1: dq 0
const2: dq 1
const3: dq 519
const4: dq 714
const5: db `negative array index`, 0
const6: db `index too large`, 0
const7: dq 527
const8: db `non-positive loop bound`, 0
const9: db `overflow computing array size`, 0
const10: dq 839
const11: db `mod by zero`, 0
const12: dq 50
const13: dq 905
const14: dq 970
const15: db `a.png`, 0
const16: dq 366
const17: db `divide by zero`, 0
const18: dq 638
const19: dq 557
const20: dq 57
const21: dq 943
const22: dq 963
const23: dq 502
const24: dq 44

section .text
jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp
	mov rax, [rel const0] ; 205
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setg al
	and rax, 1
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	mov rax, [rel const1] ; False
	push rax
	mov rdi, 8
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	mov rax, [rel const2] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump1
	mov rax, [rel const3] ; 519
	push rax
	jmp .jump2
.jump1:
	mov rax, [rel const4] ; 714
	push rax
.jump2:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump3
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump3:
	cmp rax, [rsp + 8]
	jl .jump4
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump4:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump5
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for a
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const7] ; 527
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump7
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump7:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof {}[]
	imul rdi, [rsp + 0 + 0] ; multiply by (527 * argnum)
	jno .jump8
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump8:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize a to 0
	mov rax, 0
	push rax
.jump9: ; Begin body of loop
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump10 ; If a >= bound, break
.jump11:
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for b
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump12
	lea rdi, [rel const8] ; non-positive loop bound
	call _fail_assertion
.jump12:
	; Computing total size of heap memory to allocate
	mov rdi, 0 ; sizeof {}
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump13
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
.jump13:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize b to 0
	mov rax, 0
	push rax
.jump14: ; Begin body of loop
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump15 ; If b >= bound, break
.jump16:
	; Compute loop body
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 0
	add rax, [rsp + 16]
	; Move body (0 bytes) to index
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	; Increment b
	add qword [rsp + 0], 1
	jmp .jump14
.jump15: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 16
	add rax, [rsp + 32]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment a
	add qword [rsp + 0], 1
	jmp .jump9
.jump10: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const10] ; 839
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump17
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; mod by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump17:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump18
	lea rdi, [rel const5] ; negative array index
	call _fail_assertion
.jump18:
	cmp rax, [rsp + 8]
	jl .jump19
	lea rdi, [rel const6] ; index too large
	call _fail_assertion
.jump19:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 16
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const12] ; 50
	push rax
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for a
	mov rax, [rel const13] ; 905
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump20
	lea rdi, [rel const8] ; non-positive loop bound
	call _fail_assertion
.jump20:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize a to 0
	mov rax, 0
	push rax
.jump21: ; Begin body of loop
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump22 ; If a >= bound, break
.jump23:
	; Compute loop body
	mov rax, [rel const14] ; 970
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment a
	add qword [rsp + 0], 1
	jmp .jump21
.jump22: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	pop rax
	pop r10
	cmp r10, 0
	jne .jump24
	sub rsp, 8 ; Align stack
	lea rdi, [rel const11] ; mod by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump24:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump25
	lea rdi, [rel const5] ; negative array index
	call _fail_assertion
.jump25:
	cmp rax, [rsp + 8]
	jl .jump26
	lea rdi, [rel const6] ; index too large
	call _fail_assertion
.jump26:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 0
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 0
	; Moving 0 bytes from rax to rsp
	jmp .jump6
.jump5:
	mov rax, [rel const1] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump27
	mov rax, [rel const1] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump29
	jmp .jump30
.jump29:
.jump30:
	jmp .jump28
.jump27:
.jump28:
	; Moving 0 bytes from rsp + 0 to rsp + 0
	add rsp, 0
.jump6:
	sub rsp, 24
	lea rdi, [rsp]
	lea rsi, [rel const15] ; a.png
	call _read_image
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for b
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	mov rax, [rel const16] ; 366
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump31
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; divide by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump31:
	cqo
	idiv r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump32
	lea rdi, [rel const8] ; non-positive loop bound
	call _fail_assertion
.jump32:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by (366 / {(- argnum)}{0})
	jno .jump33
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
.jump33:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize b to 0
	mov rax, 0
	push rax
.jump34: ; Begin body of loop
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump35 ; If b >= bound, break
.jump36:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment b
	add qword [rsp + 0], 1
	jmp .jump34
.jump35: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	mov rax, [rel const1] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump37
	mov rax, [rel const2] ; True
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	jmp .jump38
.jump37:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump39
	lea rdi, [rel const8] ; non-positive loop bound
	call _fail_assertion
.jump39:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by c
	jno .jump40
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
.jump40:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
.jump41: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump42 ; If d >= bound, break
.jump43:
	; Compute loop body
	mov rax, [rel const2] ; True
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment d
	add qword [rsp + 0], 1
	jmp .jump41
.jump42: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	mov rax, [rel const2] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump44
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	jmp .jump45
.jump44:
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
.jump45:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump46
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump46:
	cmp rax, [rsp + 8]
	jl .jump47
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump47:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump38:
	pop rax
	cmp rax, 0
	je .jump48
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rdi, 16
	call _jpl_alloc
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 1
	push rax
	; Moving 16 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	jmp .jump49
.jump48:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for d
	mov rax, [rel const18] ; 638
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump50
	lea rdi, [rel const8] ; non-positive loop bound
	call _fail_assertion
.jump50:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by (- 638)
	jno .jump51
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
.jump51:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
.jump52: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump53 ; If d >= bound, break
.jump54:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment d
	add qword [rsp + 0], 1
	jmp .jump52
.jump53: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	mov rdi, 16
	call _jpl_alloc
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 1
	push rax
.jump49:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for d
	mov rax, [rel const1] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump55
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const19] ; 557
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump57
	lea rdi, [rel const5] ; negative array index
	call _fail_assertion
.jump57:
	cmp rax, [rsp + 8]
	jl .jump58
	lea rdi, [rel const6] ; index too large
	call _fail_assertion
.jump58:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump56
.jump55:
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const20] ; 57
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump59
	lea rdi, [rel const5] ; negative array index
	call _fail_assertion
.jump59:
	cmp rax, [rsp + 8]
	jl .jump60
	lea rdi, [rel const6] ; index too large
	call _fail_assertion
.jump60:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump56:
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump61
	lea rdi, [rel const8] ; non-positive loop bound
	call _fail_assertion
.jump61:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
.jump62: ; Begin body of loop
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump63 ; If d >= bound, break
.jump64:
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for e
	mov rax, [rel const21] ; 943
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump65
	sub rsp, 8 ; Align stack
	lea rdi, [rel const8] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump65:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize e to 0
	mov rax, 0
	push rax
.jump66: ; Begin body of loop
	; Compare e to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump67 ; If e >= bound, break
.jump68:
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 112 to rsp
		mov r10, [rbp - 112 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment e
	add qword [rsp + 0], 1
	jmp .jump66
.jump67: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	pop rax
	neg rax
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment d
	add qword [rsp + 0], 1
	jmp .jump62
.jump63: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump69
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump69:
	cmp rax, [rsp + 8]
	jl .jump70
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump70:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 16
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rdi, 16
	call _jpl_alloc
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump71
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump71:
	cmp rax, [rsp + 8]
	jl .jump72
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump72:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 16
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Moving 16 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	sub rsp, 16
	; Moving 16 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump73
	mov rax, [rel const2] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump75
	mov rax, [rel const1] ; False
	push rax
	pop rax
.jump75:
	push rax
	pop rax
	cmp rax, 0
	je .jump76
	jmp .jump77
.jump76:
.jump77:
	jmp .jump74
.jump73:
.jump74:
	; Moving 0 bytes from rsp + 0 to rsp + 0
	add rsp, 0
	sub rsp, 16
	; Moving 16 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from rbp - 112 to rsp
		mov r10, [rbp - 112 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 112 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump78
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump78:
	cmp rax, [rsp + 8]
	jl .jump79
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump79:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump80
	mov rax, [rel const2] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump82
	mov rax, [rel const1] ; False
	push rax
	pop rax
.jump82:
	push rax
	pop rax
	cmp rax, 0
	je .jump83
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump85
	lea rdi, [rel const8] ; non-positive loop bound
	call _fail_assertion
.jump85:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by g
	jno .jump86
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
.jump86:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
.jump87: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump88 ; If j >= bound, break
.jump89:
	; Compute loop body
	mov rax, [rel const2] ; True
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment j
	add qword [rsp + 0], 1
	jmp .jump87
.jump88: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	jmp .jump84
.jump83:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump90
	lea rdi, [rel const8] ; non-positive loop bound
	call _fail_assertion
.jump90:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by e
	jno .jump91
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
.jump91:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
.jump92: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump93 ; If j >= bound, break
.jump94:
	; Compute loop body
	mov rax, [rel const1] ; False
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment j
	add qword [rsp + 0], 1
	jmp .jump92
.jump93: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
.jump84:
	jmp .jump81
.jump80:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump95
	lea rdi, [rel const8] ; non-positive loop bound
	call _fail_assertion
.jump95:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump96
	lea rdi, [rel const9] ; overflow computing array size
	call _fail_assertion
.jump96:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
.jump97: ; Begin body of loop
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jge .jump98 ; If j >= bound, break
.jump99:
	; Compute loop body
	mov rax, [rel const1] ; False
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment j
	add qword [rsp + 0], 1
	jmp .jump97
.jump98: ; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
.jump81:
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	pop rax
	pop r10
	cmp r10, 0
	jne .jump100
	lea rdi, [rel const11] ; mod by zero
	call _fail_assertion
.jump100:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump101
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump101:
	cmp rax, [rsp + 8]
	jl .jump102
	sub rsp, 8 ; Align stack
	lea rdi, [rel const6] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump102:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump103
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	jmp .jump104
.jump103:
	mov rax, [rel const22] ; 963
	push rax
	pop rax
	neg rax
	push rax
.jump104:
	mov rax, [rel const2] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump105
	jmp .jump106
.jump105:
.jump106:
	mov rdi, 0
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 0 bytes from rsp to rax
	add rsp, 0
	push rax
	mov rax, 1
	push rax
	; Moving 16 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rdi, 8
	call _jpl_alloc
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	; Moving 16 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 8]
		mov [rsp + 0 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump107
	mov rax, [rel const23] ; 502
	push rax
	jmp .jump108
.jump107:
	mov rax, [rel const24] ; 44
	push rax
.jump108:
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump109
	lea rdi, [rel const5] ; negative array index
	call _fail_assertion
.jump109:
	cmp rax, [rsp + 8]
	jl .jump110
	lea rdi, [rel const6] ; index too large
	call _fail_assertion
.jump110:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump111
	lea rdi, [rel const5] ; negative array index
	call _fail_assertion
.jump111:
	cmp rax, [rsp + 8]
	jl .jump112
	lea rdi, [rel const6] ; index too large
	call _fail_assertion
.jump112:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 0
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 0
	; Moving 0 bytes from rax to rsp
	sub rsp, 16
	; Moving 16 bytes from rbp - 112 to rsp
		mov r10, [rbp - 112 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 112 + 0]
		mov [rsp + 0], r10
	add rsp, 128 ; Local variables
	pop r12
	pop rbp
	ret

