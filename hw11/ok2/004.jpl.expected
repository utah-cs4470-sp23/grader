global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 3
const1: dq 2
const2: dq 1
const3: db `negative array index`, 0
const4: db `index too large`, 0
const5: db `(IntType)`, 0

section .text
jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp
	mov rax, [rel const0] ; 3
	push rax
	mov rax, [rel const1] ; 2
	push rax
	mov rax, [rel const2] ; 1
	push rax
	mov rdi, 24
	call _jpl_alloc
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	push rax
	mov rax, 3
	push rax
	sub rsp, 16
	; Moving 16 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const2] ; 1
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump1
	lea rdi, [rel const3] ; negative array index
	call _fail_assertion
.jump1:
	cmp rax, [rsp + 8]
	jl .jump2
	lea rdi, [rel const4] ; index too large
	call _fail_assertion
.jump2:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	lea rdi, [rel const5] ; (IntType)
	lea rsi, [rsp]
	call _show
	add rsp, 8
	add rsp, 16 ; Local variables
	pop r12
	pop rbp
	ret

