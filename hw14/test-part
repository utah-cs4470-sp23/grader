#!/bin/sh
set -e

DIR="$1"
PART="$2"
# From https://stackoverflow.com/questions/59895/
HERE=$(CDPATH= cd -- "$(dirname -- "$0")" && pwd)

ppasm () {
    python3 "$HERE/../normalize-asm.py"
}

cmp() {
    PROG="$2"
    OUT="$3"
    FLAGS="$1"
    make --silent --no-print-directory -C "$DIR" run FLAGS="$FLAGS" TEST="$PROG" > "$HERE"/out.txt
    if ! grep -c "Compilation succeeded" "$HERE"/out.txt >/dev/null ||
       grep -c "Compilation failed" "$HERE"/out.txt >/dev/null; then
        echo "fail: file didn't assemble with $FLAGS"
        echo "======= Output ======="
        cat "$HERE"/out.txt
        echo "======================"
        return 1
    fi
    sed "\$d" "$HERE"/out.txt | ppasm > "$HERE"/out.pp
    cat "$OUT" | ppasm > "$HERE"/expected.pp
    diff -c "$HERE/out.pp" "$HERE"/expected.pp
}

test_ok() {
    PROG="$1"
    BASE="$1.expected"

    printf "%s : " $(basename "$PROG")
    if ! cmp "-s" "$PROG" "$BASE"; then return 1; fi
    if cmp "-s -O3" "$PROG" "$BASE.opt" > "$HERE"/o3.diff; then echo "pass"; return 0; fi
    if cmp "-s -O3" "$PROG" "$BASE.opt3only" > "$HERE"/noo3.diff; then echo "pass without -O1/-O2"; return 0; fi
    cat "$HERE"/o3.diff >&2
    return 1
}

regen() {
    PROG="$1"
    OUT="$1.expected"
    printf "%s ...\n" $(basename "$PROG")
    make --silent --no-print-directory -C "$DIR" run FLAGS="-s" TEST="$PROG" > "$HERE"/out.txt
    if ! grep -c "Compilation succeeded" "$HERE"/out.txt >/dev/null ||
       grep -c "Compilation failed" "$HERE"/out.txt >/dev/null; then
        echo "fail: file should have assembled"
        echo "======= Output ======="
        cat "$HERE"/out.txt
        echo "======================"
        return 1
    fi
    sed "\$d" "$HERE"/out.txt > "$OUT"
    make --silent --no-print-directory -C "$DIR" run FLAGS="-s -O3" TEST="$PROG" > "$HERE"/out.txt
    if ! grep -c "Compilation succeeded" "$HERE"/out.txt >/dev/null ||
       grep -c "Compilation failed" "$HERE"/out.txt >/dev/null; then
        echo "fail: file should have assembled"
        echo "======= Output ======="
        cat "$HERE"/out.txt
        echo "======================"
        return 1
    fi
    sed "\$d" "$HERE"/out.txt > "$OUT".opt
    make --silent --no-print-directory -C "$DIR" run FLAGS="-s -O4" TEST="$PROG" > "$HERE"/out.txt
    if ! grep -c "Compilation succeeded" "$HERE"/out.txt >/dev/null ||
       grep -c "Compilation failed" "$HERE"/out.txt >/dev/null; then
        echo "fail: file should have assembled"
        echo "======= Output ======="
        cat "$HERE"/out.txt
        echo "======================"
        return 1
    fi
    sed "\$d" "$HERE"/out.txt > "$OUT".opt3only
}

case $PART in
    count)
        echo 5
        ;;
    all)
        sh "$0" "$1" 1
        sh "$0" "$1" 2
        sh "$0" "$1" 3
        sh "$0" "$1" 4
        sh "$0" "$1" 5
        ;;
    regen)
        [ -f "$HERE/col.jpl" ] && regen "$HERE"/col.jpl; echo Regenerated col.
        [ -f "$HERE/crs.jpl" ] && regen "$HERE"/crs.jpl; echo Regenerated crs.
        [ -f "$HERE/mat.jpl" ] && regen "$HERE"/mat.jpl; echo Regenerated mat.
        [ -f "$HERE/sft.jpl" ] && regen "$HERE"/sft.jpl; echo Regenerated sft.
        [ -f "$HERE/dns.jpl" ] && regen "$HERE"/dns.jpl; echo Regenerated dns.
        ;;
    1)
        test_ok "$HERE/col.jpl"
        ;;
    2)
        test_ok "$HERE/crs.jpl"
        ;;
    3)
        test_ok "$HERE/mat.jpl"
        ;;
    4)
        test_ok "$HERE/sft.jpl"
        ;;
    5)
        test_ok "$HERE/dns.jpl"
        ;;
    *)
        echo "USAGE: make test-hw14 DIR=$DIR PART=$PART"
        echo "$PART can be any of all $(seq 1 $(sh $0 $1 count))"
        ;;
esac
