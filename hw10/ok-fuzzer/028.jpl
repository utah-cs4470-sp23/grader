let {} = {}
let a[b] = [to_int((- sqrt(48.91)))]
let c = 19.11
let d = argnum
fn e() : bool {
  return ((- ((- to_int(c)) % argnum)) >= b)
  let f[g] = args
  let h[i] = args
  let j = b
  return (argnum == (- b))
}

let f = tan(sin({log(c)}{0}))
let g[h] = args
fn i() : float[] {
  return [log(f)]
  return [f]
  let j[k] = [((to_float((argnum * b)) == sqrt(f)) != ((argnum + b) <= d))]
  let l[m] = args
  return {[log(pow(90.09, c))]}{0}
}

fn j(k : int, l : {int}) : bool[] {
  let {} = {{{}}}{0}{0}
  let m[n] = i()
  let {} = {{}}{0}
  return {{[true]}}{0}{0}
  return {{[e()]}}{0}{0}
}

let k = e()
fn l() : {int} {
  let {} = {}
  let m = acos((atan(exp(c)) + atan2((- to_float(d)), atan(78.76))))
  let {} = {{}}{0}
  let n = sin((- cos(pow(c, f))))
  return {b}
}

let m = exp((- sqrt(exp((- 84.45)))))
