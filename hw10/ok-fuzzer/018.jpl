let a[b] = args
let {} = {}
fn c(d : float[], e : int[], f : float) : float[] {
  assert (! (! (! (! true)))), "g"
  let g[h] = {{[b]}}{0}{0}
  assert false, "i"
  return d
  return {{d}}{0}{0}
}

fn d() : int {
  let e[f] = args
  assert (to_int(atan(sin(log(17.1)))) < 943), "g"
  assert (sqrt(asin(sqrt(tan(85.59)))) == sqrt(to_float(b))), "g"
  let g = atan(to_float(to_int((- log(86.02)))))
  return argnum
}

let e[f] = c([cos(((- 75.54) - sin(77.91)))], args, asin(sin(to_float((d() - 656)))))
let {} = {}
let {} = {{}}{0}
let {g} = {sqrt((- sin(tan(18.84))))}
let {h[i]} = {{{e}}{0}}{0}
let j[k] = c({[to_float(548)]}{0}, [to_int(log(sqrt(71.07)))], acos(sin(atan2(g, acos(10.19)))))
show (988 > i)

fn l(m : {bool}, n : int, o : float) : bool {
  let {} = {{{}}}{0}{0}
  let p = exp(cos(atan2(sqrt(exp(13.15)), (- asin(g)))))
  let q[r] = c(j, {{args}}{0}{0}, g)
  let s[t] = q
  return (n != k)
}

