global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float
section .data
const0: dq 88.64
const1: dq 27.05
const2: dq 75
const3: db `divide by zero`, 0
const4: dq 8.53
const5: dq 666
const6: dq 38.74
const7: dq 696
const8: db `j`, 0
section .text
b:
_b:
push rbp
mov rbp, rsp
sub rsp, 8
mov r10, [r12 - - 6]
mov [rsp + 0], r10
pop rax
neg rax
push rax
sub rsp, 16
mov r10, [rbp - - 8]
mov [rsp + 8], r10
mov r10, [rbp - ]
mov [rsp + 0], r10
add rsp, 24
pop rbp
ret
e:
_e:
push rbp
mov rbp, rsp
push rdi
sub rsp, 8
mov rax, [rel const4]
push rax
movsd xmm0, [rsp]
add rsp, 8
call _tan
sub rsp, 8
movsd [rsp], xmm0
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
movsd xmm0, [rsp]
add rsp, 8
call _sin
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
sub rsp, 8
mov r10, [r12 - 2]
mov [rsp + 0], r10
movsd xmm0, [rsp]
add rsp, 8
call _atan
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _atan
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
mov rax, [rel const5]
push rax
pop rdi
call _to_float
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
call _pow
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
call _atan2
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 16
mov r10, [r12 - - 2]
mov [rsp + 8], r10
mov r10, [r12 - - 6]
mov [rsp + 0], r10
sub rsp, 8
mov r10, [r12 - 2]
mov [rsp + 0], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
mov rax, [rbp - 8]
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 40
pop rbp
ret
mov rax, [rel const6]
push rax
movsd xmm1, [rsp]
add rsp, 8
pxor xmm0, xmm0
subsd xmm0, xmm1
sub rsp, 8
movsd [rsp], xmm0
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
mov rax, [rbp - 8]
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 48
pop rbp
ret
sub rsp, 8
mov r10, [rbp - 6]
mov [rsp + 0], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
mov rax, [rbp - 8]
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 56
pop rbp
ret
jpl_main:
_jpl_main:
push rbp
mov rbp, rsp
push r12
mov r12, rbp
add rsp, 0
add rsp, 0
sub rsp, 16
mov r10, [rbp - - 2]
mov [rsp + 8], r10
mov r10, [rbp - - 6]
mov [rsp + 0], r10
sub rsp, 8
mov rax, [rel const0]
push rax
movsd xmm0, [rsp]
add rsp, 8
call _acos
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
sub rsp, 8
mov r10, [rbp - - 6]
mov [rsp + 0], r10
pop rdi
call _to_float
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
mulsd xmm0, xmm1
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
mov rax, [rel const1]
push rax
movsd xmm0, [rsp]
add rsp, 8
call _tan
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _sqrt
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
call _atan2
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _atan
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
sub rsp, 8
mov r10, [rbp - - 6]
mov [rsp + 0], r10
pop rax
neg rax
push rax
sub rsp, 8
mov r10, [rbp - - 6]
mov [rsp + 0], r10
mov rax, [rel const2]
push rax
pop rax
pop r10
cmp r10, 0
jne .jump1
sub rsp, 8
lea rdi, [rel const3]
call _fail_assertion
add rsp, 8
.jump1:
cqo
idiv r10
push rax
pop rax
pop r10
sub rax, r10
push rax
pop rdi
call _to_float
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _tan
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
call _pow
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 16
mov r10, [rbp - 4]
mov [rsp + 8], r10
mov r10, [rbp - 4]
mov [rsp + 0], r10
mov r10, [rsp - 8]
mov [rsp - 8], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
sub rsp, 8
sub rsp, 8
lea rdi, [rsp + 8]
call _e
add rsp, 8
add rsp, 0
sub rsp, 8
mov r10, [rbp - 8]
mov [rsp + 0], r10
mov rax, [rel const7]
push rax
pop rax
pop r10
cmp rax, r10
sete al
and rax, 1
push rax
lea rdi, [rel const8]
call _print
sub rsp, 16
mov r10, [rbp - - 2]
mov [rsp + 8], r10
mov r10, [rbp - - 6]
mov [rsp + 0], r10
add rsp, 72
pop r12
pop rbp
ret
