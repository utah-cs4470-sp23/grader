let {} = {}
fn a(b[c] : float[], d : int, {  }) : {} {
  let {} = {}
  let e[f] = [to_float((- 354))]
  return {{}}{0}
  let {} = {}
}

print "b"

fn b() : int {
  let {c[d]} = {{{args}}{0}{0}}
  let e = to_float(to_int(acos(39.35)))
  return (to_int(cos(asin(to_float(530)))) - argnum)
  let f[g] = c
  return {{g}}{0}{0}
}

fn c(d[e] : float[], f[g] : int[]) : bool {
  return (to_int(exp(atan2(15.25, atan(81.31)))) <= g)
  return (true != (! (to_int(30.48) > b())))
  let h[i] = {d}{0}
  return (! false)
  return {{true}}{0}{0}
}

type d = bool[]
assert (b() <= b()), "e"
fn e(f : bool, g[h] : int[]) : bool {
  let i[j] = [c({[24.19]}{0}, {g}{0})]
  assert {false}{0}, "k"
  assert {{f}{0}}{0}, "k"
  let k[l] = i
  return c([(- sin(71.51))], {{args}}{0}{0})
}

let f = b()
let g = 77.95
let h[i] = args
let j = (to_int(pow(asin(atan2(g, 62.16)), {g}{0})) <= argnum)
