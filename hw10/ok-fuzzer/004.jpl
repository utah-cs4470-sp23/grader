let {} = {{{}}}{0}{0}
let {} = {{{}}}{0}{0}
let a = argnum
fn b({  }, c[d] : float[]) : float {
  let {e[f]} = {c}
  return asin(tan(log(sin(exp(18.13)))))
  return (- cos(atan(acos(sin(99.0)))))
  let g[h] = c
  return pow(31.99, (acos(log((- 88.2))) * {to_float(a)}{0}))
}

fn c() : int {
  let d[e] = [(((91.71 - sqrt(37.23)) == (asin(77.47) - 33.12)) != false)]
  let f = (- 73.2)
  let g = to_int(sin(atan2(f, sin(atan(f)))))
  let h[i] = {[argnum]}{0}
  return to_int(cos(exp((- f))))
}

fn d(e[f] : int[], {  }) : {} {
  let {} = {}
  let g[h] = {{e}}{0}{0}
  return {{{}}{0}}{0}
  let i = a
}

let e = asin((- (cos(sqrt(11.75)) / (tan(31.49) / (- 18.49)))))
let f[g] = args
fn h() : {} {
  let {i} = {atan2(pow(cos(atan(e)), 21.03), sqrt((- cos(e))))}
  let {j[k]} = {f}
  let l = {pow(atan(58.1), (- atan(i)))}{0}
  return d(j, {{{}}}{0}{0})
}

let {} = d({{f}{0}}{0}, d([(- g)], d({f}{0}, {})))
let {i} = {argnum}
let j = (atan2((- e), cos(log(atan(e)))) + tan(exp(atan2(tan(e), 42.5))))
