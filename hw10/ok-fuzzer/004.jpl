let {a} = {sin(82.92)}
let {} = {{{}}}{0}{0}
let b[c] = {args}{0}
show (atan({sqrt(91.87)}{0}) == 13.85)

fn d({ e : int }, f[g] : bool[]) : bool {
  assert (argnum != to_int(sqrt(6.15))), "h"
  let {h} = {50.4}
  return (! (sqrt(atan(82.09)) > (- asin(atan2(47.81, a)))))
  return (! {(! (c > 774))}{0})
  return {{(! false)}{0}}{0}
}

fn e() : {} {
  let {f} = {{[false]}}{0}
  return {}
  let g[h] = b
  let {} = {}
  return {{{}}}{0}{0}
}

let f[g] = args
assert {{false}}{0}{0}, "h"
show c

let h = acos(log((- log(log(62.17)))))
fn i() : {bool} {
  let j = d({{c}}{0}, {[(g == 395)]}{0})
  let k[l] = args
  let {} = {}
  let m = pow(acos(atan(a)), tan(cos(a)))
  return {((g * {c}{0}) == argnum)}
}

let {j} = {{d({c}, [true])}}{0}
