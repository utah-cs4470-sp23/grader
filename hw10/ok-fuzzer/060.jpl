let {} = {{{}}}{0}{0}
let {a} = {{false}}{0}
let b[c] = {{args}}{0}{0}
let d[e] = {{[542]}}{0}{0}
fn f(g[h] : bool[], i[j] : bool[]) : float {
  let k = j
  return acos(tan(atan({51.7}{0})))
  let l = false
  let m = false
  return (cos(atan2(atan2((- 2.22), to_float(argnum)), exp(55.9))) * (- pow(tan(sqrt(23.97)), to_float((19 / j)))))
}

print "g"

fn g(h : float[], i : {}, j : float) : {}[] {
  return {{[i]}{0}}{0}
  return {{[{}]}}{0}{0}
  let {k} = {{{a}}{0}}{0}
  assert (({to_float(argnum)}{0} % tan(sqrt((34.71 + 74.46)))) > pow({to_float(argnum)}{0}, to_float(689))), "l"
  return {{[i]}{0}}{0}
}

let h[i] = {{[argnum]}}{0}{0}
assert {{(c == e)}}{0}{0}, "j"
let {j} = {{{e}}{0}}{0}
fn k() : int {
  let l = sin((acos(atan(cos(81.6))) % exp(acos(to_float(j)))))
  return (577 / {argnum}{0})
  let m[n] = g([sqrt((- l))], {}, exp((sin(pow(l, l)) + (- acos(l)))))
  let {} = {{{}}}{0}{0}
  return (- 346)
}

fn l() : bool {
  let m = (52 / i)
  let n[o] = b
  let {} = {}
  let p[q] = {{[j]}{0}}{0}
  return (true != (k() != argnum))
}

