global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float
section .data
const0: dq 886
const1: dq 12.17
const2: dq 1
const3: db `g`, 0
const4: db `(ArrayType (IntType) 1)`, 0
const5: dq 0
const6: db `m`, 0
const7: dq 45.79
const8: dq 614
const9: db `o`, 0
section .text
e:
_e:
push rbp
mov rbp, rsp
add rsp, 0
add rsp, 0
mov rax, [rel const0]
push rax
sub rsp, 8
mov r10, [r12 - 24]
mov [rsp + 0], r10
pop rax
pop r10
add rax, r10
push rax
pop rdi
call _to_float
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _tan
sub rsp, 8
movsd [rsp], xmm0
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
movsd xmm0, [rsp]
add rsp, 8
add rsp, 0
pop rbp
ret
mov rax, [rel const1]
push rax
movsd xmm0, [rsp]
add rsp, 8
call _sqrt
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _tan
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _to_int
push rax
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
mov rax, [rel const2]
push rax
pop rax
cmp rax, 0
jne .jump1
sub rsp, 8
lea rdi, [rel const3]
call _fail_assertion
add rsp, 8
.jump1:
sub rsp, 8
sub rsp, 8
mov r10, [r12 - 40]
mov [rsp + 0], r10
pop rdi
call _to_float
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _cos
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _sqrt
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _atan
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
add rsp, 8
pop rbp
ret
k:
_k:
push rbp
mov rbp, rsp
sub rsp, 8
movsd [rsp], xmm0
mov rax, [rel const5]
push rax
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
mov rax, [rel const2]
push rax
pop rax
xor rax, 1
push rax
pop rax
xor rax, 1
push rax
sub rsp, 8
mov r10, [r12 - 40]
mov [rsp + 0], r10
sub rsp, 8
mov r10, [r12 - 56]
mov [rsp + 0], r10
pop rax
pop r10
cmp rax, r10
sete al
and rax, 1
push rax
pop rax
pop r10
cmp rax, r10
sete al
and rax, 1
push rax
pop rax
pop r10
cmp rax, r10
setne al
and rax, 1
push rax
pop rax
xor rax, 1
push rax
pop rax
cmp rax, 0
jne .jump2
sub rsp, 8
lea rdi, [rel const6]
call _fail_assertion
add rsp, 8
.jump2:
sub rsp, 8
mov rax, [rel const7]
push rax
movsd xmm0, [rsp]
add rsp, 8
call _log
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
sub rsp, 16
mov r10, [r12 - 48]
mov [rsp + 8], r10
mov r10, [r12 - 56]
mov [rsp + 0], r10
sub rsp, 16
mov r10, [r12 - 72]
mov [rsp + 8], r10
mov r10, [r12 - 80]
mov [rsp + 0], r10
sub rsp, 8
mov r10, [rbp - 16]
mov [rsp + 0], r10
sub rsp, 8
sub rsp, 8
mov r10, [rbp - 8]
mov [rsp + 0], r10
movsd xmm0, [rsp]
add rsp, 8
call _cos
sub rsp, 8
movsd [rsp], xmm0
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
movsd xmm0, [rsp]
add rsp, 8
call _sqrt
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
mulsd xmm0, xmm1
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
add rsp, 48
pop rbp
ret
l:
_l:
push rbp
mov rbp, rsp
push rdi
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 16
mov r10, [r12 - 16]
mov [rsp + 8], r10
mov r10, [r12 - 24]
mov [rsp + 0], r10
sub rsp, 8
mov r10, [r12 - 64]
mov [rsp + 0], r10
sub rsp, 8
sub rsp, 8
mov r10, [r12 - - 16]
mov [rsp + 0], r10
pop rax
neg rax
push rax
pop rdi
call _to_float
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
add rsp, 40
pop rbp
ret
jpl_main:
_jpl_main:
push rbp
mov rbp, rsp
push r12
mov r12, rbp
sub rsp, 16
mov r10, [rbp - - 8]
mov [rsp + 8], r10
mov r10, [rbp - - 16]
mov [rsp + 0], r10
sub rsp, 16
mov r10, [rbp - 16]
mov [rsp + 8], r10
mov r10, [rbp - 24]
mov [rsp + 0], r10
mov r10, [rsp + 8]
mov [rsp + 8], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
sub rsp, 16
mov r10, [rbp - - 8]
mov [rsp + 8], r10
mov r10, [rbp - - 16]
mov [rsp + 0], r10
sub rsp, 8
sub rsp, 8
mov r10, [rbp - 56]
mov [rsp + 0], r10
pop rdi
call _to_float
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _cos
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 16
mov r10, [rbp - - 8]
mov [rsp + 8], r10
mov r10, [rbp - - 16]
mov [rsp + 0], r10
lea rdi, [rel const4]
lea rsi, [rsp]
call _show
add rsp, 16
sub rsp, 16
mov r10, [rbp - 16]
mov [rsp + 8], r10
mov r10, [rbp - 24]
mov [rsp + 0], r10
sub rsp, 8
mov r10, [rbp - - 16]
mov [rsp + 0], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
pop rdi
call _to_float
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _cos
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 16
mov r10, [rbp - 32]
mov [rsp + 8], r10
mov r10, [rbp - 40]
mov [rsp + 0], r10
sub rsp, 8
sub rsp, 8
mov r10, [rbp - 64]
mov [rsp + 0], r10
movsd xmm0, [rsp]
add rsp, 8
call _k
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
mov rax, [rel const8]
push rax
pop rax
neg rax
push rax
pop rdi
call _to_float
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _asin
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
cmplesd xmm1, xmm0
movq rax, xmm1
and rax, 1
push rax
pop rax
cmp rax, 0
jne .jump3
sub rsp, 8
lea rdi, [rel const9]
call _fail_assertion
add rsp, 8
.jump3:
add rsp, 96
pop r12
pop rbp
ret
