global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float
section .data
const0: dq 53.97
const1: dq 91.97
const2: dq 93.21
const3: db `b`, 0
const4: dq 89.66
const5: dq 84.54
const6: dq 153
const7: db `mod by zero`, 0
const8: dq 316
const9: dq 54.52
const10: dq 1
const11: db `e`, 0
const12: dq 622
const13: db `(ArrayType (IntType) 1)`, 0
const14: db `i`, 0
const15: db `(BoolType)`, 0
const16: dq 582
const17: dq 0
const18: db `n`, 0
section .text
a:
_a:
push rbp
mov rbp, rsp
mov rax, [rel const0]
push rax
movsd xmm0, [rsp]
add rsp, 8
call _acos
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _sqrt
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
mov rax, [rel const1]
push rax
movsd xmm1, [rsp]
add rsp, 8
pxor xmm0, xmm0
subsd xmm0, xmm1
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _exp
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
call _pow
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
mov rax, [rel const2]
push rax
movsd xmm0, [rsp]
add rsp, 8
call _cos
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _log
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
cmpneqsd xmm0, xmm1
movq rax, xmm0
and rax, 1
push rax
pop rax
xor rax, 1
push rax
pop rax
cmp rax, 0
jne .jump1
lea rdi, [rel const3]
call _fail_assertion
.jump1:
mov rax, [rel const4]
push rax
sub rsp, 8
mov rax, [rel const5]
push rax
movsd xmm0, [rsp]
add rsp, 8
call _cos
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
call _atan2
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _sin
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _sqrt
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
sub rsp, 8
mov r10, [rbp - 8]
mov [rsp + 0], r10
movsd xmm0, [rsp]
add rsp, 8
call _cos
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _exp
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _atan
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
mov r10, [r12 - - 6]
mov [rsp + 0], r10
pop rdi
call _to_float
sub rsp, 8
movsd [rsp], xmm0
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
cmpltsd xmm1, xmm0
movq rax, xmm1
and rax, 1
push rax
mov rax, [rel const6]
push rax
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
pop rax
neg rax
push rax
sub rsp, 8
mov r10, [r12 - - 6]
mov [rsp + 0], r10
sub rsp, 8
mov r10, [r12 - - 6]
mov [rsp + 0], r10
pop rax
pop r10
cmp r10, 0
jne .jump2
sub rsp, 8
lea rdi, [rel const7]
call _fail_assertion
add rsp, 8
.jump2:
cqo
idiv r10
mov rax, rdx
push rax
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
pop rax
pop r10
cmp rax, r10
setg al
and rax, 1
push rax
pop rax
pop r10
cmp rax, r10
sete al
and rax, 1
push rax
mov rax, [rel const8]
push rax
mov rdi, 8
sub rsp, 8
call _jpl_alloc
add rsp, 8
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 8
push rax
mov rax, 1
push rax
mov rax, [rel const9]
push rax
movsd xmm0, [rsp]
add rsp, 8
call _asin
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _sqrt
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
sub rsp, 8
mov r10, [rbp - 2]
mov [rsp + 0], r10
pop rdi
call _to_float
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
divsd xmm0, xmm1
sub rsp, 8
movsd [rsp], xmm0
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
movsd xmm0, [rsp]
add rsp, 8
add rsp, 32
pop rbp
ret
b:
_b:
push rbp
mov rbp, rsp
mov rax, [rel const10]
push rax
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
pop rax
xor rax, 1
push rax
pop rax
cmp rax, 0
jne .jump3
lea rdi, [rel const11]
call _fail_assertion
.jump3:
sub rsp, 16
mov r10, [rbp - - 2]
mov [rsp + 8], r10
mov r10, [rbp - - 6]
mov [rsp + 0], r10
sub rsp, 8
mov r10, [r12 - - 6]
mov [rsp + 0], r10
mov rax, [rel const12]
push rax
pop rax
pop r10
cmp r10, 0
jne .jump4
lea rdi, [rel const7]
call _fail_assertion
.jump4:
cqo
idiv r10
mov rax, rdx
push rax
pop rdi
call _to_float
sub rsp, 8
movsd [rsp], xmm0
movsd xmm1, [rsp]
add rsp, 8
pxor xmm0, xmm0
subsd xmm0, xmm1
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _to_int
push rax
pop rax
add rsp, 16
pop rbp
ret
sub rsp, 8
mov r10, [rbp - - 6]
mov [rsp + 0], r10
pop rax
add rsp, 16
pop rbp
ret
h:
_h:
push rbp
mov rbp, rsp
push rdi
sub rsp, 16
mov r10, [r12 - 8]
mov [rsp + 8], r10
mov r10, [r12 ]
mov [rsp + 0], r10
mov r10, [rsp - 8]
mov [rsp - 8], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
sub rsp, 8
call _a
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _atan
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _tan
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 16
mov r10, [r12 - 4]
mov [rsp + 8], r10
mov r10, [r12 - 4]
mov [rsp + 0], r10
mov rax, [rel const10]
push rax
pop rax
xor rax, 1
push rax
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
pop rax
add rsp, 48
pop rbp
ret
mov rax, [rel const10]
push rax
pop rax
add rsp, 48
pop rbp
ret
i:
_i:
push rbp
mov rbp, rsp
mov rax, [rel const16]
push rax
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
mov rax, [rel const17]
push rax
pop rax
cmp rax, 0
jne .jump5
sub rsp, 8
lea rdi, [rel const18]
call _fail_assertion
add rsp, 8
.jump5:
sub rsp, 8
call _a
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _log
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _acos
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _atan
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _atan
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
add rsp, 8
pop rbp
ret
add rsp, 0
add rsp, 0
sub rsp, 8
sub rsp, 8
mov r10, [r12 - 8]
mov [rsp + 0], r10
movsd xmm0, [rsp]
add rsp, 8
call _exp
sub rsp, 8
movsd [rsp], xmm0
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
movsd xmm0, [rsp]
add rsp, 8
call _exp
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _exp
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
add rsp, 8
pop rbp
ret
jpl_main:
_jpl_main:
push rbp
mov rbp, rsp
push r12
mov r12, rbp
add rsp, 0
sub rsp, 8
sub rsp, 16
mov r10, [rbp - - 2]
mov [rsp + 8], r10
mov r10, [rbp - - 6]
mov [rsp + 0], r10
lea rdi, [rel const13]
lea rsi, [rsp]
call _show
add rsp, 16
add rsp, 8
sub rsp, 16
mov r10, [rbp - - 2]
mov [rsp + 8], r10
mov r10, [rbp - - 6]
mov [rsp + 0], r10
mov r10, [rsp - 8]
mov [rsp - 8], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
sub rsp, 16
mov r10, [rbp - 4]
mov [rsp + 8], r10
mov r10, [rbp - 4]
mov [rsp + 0], r10
sub rsp, 8
sub rsp, 8
mov r10, [rbp - - 6]
mov [rsp + 0], r10
pop rdi
call _to_float
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _log
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _log
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _sin
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
lea rdi, [rel const14]
call _print
add rsp, 0
call _get_time
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
mov r10, [rbp ]
mov [rsp + 0], r10
pop rax
neg rax
push rax
sub rsp, 8
mov r10, [rbp - - 6]
mov [rsp + 0], r10
pop rax
neg rax
push rax
pop rax
pop r10
sub rax, r10
push rax
sub rsp, 8
mov r10, [rbp ]
mov [rsp + 0], r10
pop rax
pop r10
cmp rax, r10
setge al
and rax, 1
push rax
pop rax
xor rax, 1
push rax
lea rdi, [rel const15]
lea rsi, [rsp]
call _show
add rsp, 8
sub rsp, 8
call _get_time
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp + 0]
subsd xmm0, xmm1
sub rsp, 8
call _print_time
add rsp, 8
add rsp, 48
pop r12
pop rbp
ret
