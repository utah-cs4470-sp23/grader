fn a() : {} {
  let b[c] = args
  let {} = {{{}}}{0}{0}
  let d[e] = args
  return {{{}}}{0}{0}
}

show argnum

fn b(c[d] : float[], {  }, e : bool[]) : bool[] {
  let {f} = {{exp(cos(16.98))}}{0}
  let g[h] = args
  let {} = {a()}{0}
  let i = exp(17.34)
  return [false]
}

let {{{c}}} = {{{{66.95}}}}{0}
fn d({ e : {{}} }) : int {
  let f = argnum
  let g = e
  return f
  return argnum
  return f
}

fn e(f[g] : float[], h[i] : int[], j[k] : int[]) : int {
  let l = atan2(cos(atan((55.1 * pow(87.61, c)))), (((asin(59.21) - asin(18.68)) + sin(to_float(235))) * exp(atan2(cos(c), atan(4.8)))))
  let m = l
  return (- d({{a()}}))
  let n = args
  return k
}

let f = 37.28
let {g[h]} = {{{args}}{0}}{0}
let {} = {}
fn i({ {  } }, { j[k] : {}[] }) : float {
  let {{l[m]}} = {{{g}}}{0}
  let n[o] = [k]
  return log(tan(atan(cos(atan(88.3)))))
  let p = acos(asin((- c)))
  return sqrt((- sqrt(exp(to_float(353)))))
}

let j[k] = args
let l = {}
