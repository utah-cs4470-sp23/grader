let {} = {{{}}}{0}{0}
let a = log({{66.27}}{0}{0})
type b = int
let c = to_float(argnum)
let d[e] = {{[false]}{0}}{0}
let {f} = {{{true}}{0}}{0}
fn g({  }, h : int) : int {
  let {} = {{{}}{0}}{0}
  let i[j] = d
  let k[l] = args
  assert f, "m"
  return j
}

fn h(i : b, { { j : float } }) : {} {
  assert (argnum != e), "k"
  let k = f
  let l = exp(pow(tan(atan2((- j), asin(a))), tan(a)))
  return {}
  return {{{}}}{0}{0}
}

fn i(j[k] : int[]) : float {
  let l = g({{{}}}{0}{0}, g({{}}{0}, (- argnum)))
  assert (f == ((! {true}{0}) == (! (to_int(c) < k)))), "m"
  assert ((g({{}}{0}, (- argnum)) + to_int((- pow(c, c)))) == {(- k)}{0}), "m"
  let {m[n]} = {d}
  return (- 94.92)
}

fn j() : int {
  assert (! (g({}, 789) > g({{}}{0}, (to_int(c) / e)))), "k"
  assert (acos((- cos(asin(a)))) != {sin(sqrt(a))}{0}), "k"
  let {k} = {(- {a}{0})}
  assert (! ({argnum}{0} == argnum)), "l"
  return e
}

let k = sin(asin(i(args)))
let {l} = {sqrt(pow(to_float((- 104)), sqrt(exp(a))))}
