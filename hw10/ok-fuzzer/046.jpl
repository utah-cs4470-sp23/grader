let a = ((argnum - argnum) <= ((- (- (- 678))) % (- (- (- 96)))))
let b = sin(atan(atan(atan2(59.95, 10.18))))
let c[d] = [to_float(427)]
fn e(f[g] : bool[], h[i] : bool[], { j : float }) : {float} {
  let k = ((argnum % (to_int((- 14.17)) * g)) - argnum)
  let {{l}} = {{{i}}}{0}
  let m[n] = h
  let {} = {}
  return {atan(sqrt((- 99.73)))}
}

time let {f[g]} = {c}

fn h() : bool[] {
  let i[j] = c
  let k[l] = f
  let m[n] = [atan(sin(atan2((33.23 - b), tan(81.75))))]
  let {} = {}
  return {{[a]}{0}}{0}
}

time let i = pow(pow(pow(log(36.88), acos(21.33)), to_float(d)), sin(pow(b, cos(89.35))))

let j = a
fn k(l : bool, m[n] : {}[]) : bool[] {
  let o = (- to_float(g))
  let p = log(atan2(sin(sin(tan(b))), log(log(sin(i)))))
  assert {{(o != 66.62)}}{0}{0}, "q"
  let {} = {{{}}{0}}{0}
  return [(d >= {(d % g)}{0})]
}

let l = ((- (- d)) > argnum)
assert (log(e([a], [l], {i}){0}) > asin(tan(tan(b)))), "m"
fn m() : {} {
  let n[o] = k(true, {[{}]}{0})
  assert l, "p"
  assert l, "p"
  let {p[q]} = {n}
}

