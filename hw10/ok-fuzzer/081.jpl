fn a() : {} {
  let {} = {}
  let b = args
  let c = to_int(pow(to_float({argnum}{0}), pow((- to_float(712)), acos(to_float(argnum)))))
  let {{}} = {{}}
  return {}
}

assert {true}{0}, "b"
fn b({  }) : int {
  let c[d] = args
  let e = atan2(to_float(argnum), asin(tan((- sin(31.29)))))
  let f[g] = [argnum]
  let {} = {{}}{0}
  return d
}

let c[d] = {args}{0}
fn e({ f : bool }, g : float, h : int) : int {
  assert (f == (f != ({false}{0} != f))), "i"
  return b(a())
  let i[j] = {args}{0}
  assert f, "k"
  return ({argnum}{0} % (to_int({g}{0}) % 51))
}

type f = int
fn g() : float {
  assert (atan2((- pow(73.14, exp(88.06))), log(67.9)) != atan2(log(sin(acos(90.62))), atan2(cos(exp(99.88)), (90.51 + log(75.31))))), "h"
  return log(pow(sqrt(asin(cos(26.55))), cos((- 29.6))))
  let h = to_float({(- 242)}{0})
  assert (! (cos(pow(47.97, h)) == (85.45 * tan(95.29)))), "i"
  return exp(sin(atan(sin(to_float(argnum)))))
}

let h[i] = [381]
let {} = {{a()}}{0}{0}
read image "j.png" to j

let k = to_int(log(acos(tan((g() * g())))))
assert (acos(log(63.28)) == cos((- (- 49.74)))), "l"
