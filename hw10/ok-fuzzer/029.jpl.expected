global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float
section .data
const0: dq 1
const1: db `a`, 0
const2: dq 72.03
const3: dq 33.02
const4: dq 18.29
const5: dq 637
const6: dq 746
const7: db `mod by zero`, 0
const8: dq 14.89
const9: dq 162
const10: db `j`, 0
const11: dq 24.92
const12: dq 49.33
const13: dq 21.11
const14: dq 46.33
const15: dq 63.43
const16: db `k`, 0
const17: db `(IntType)`, 0
const18: dq 0
const19: db `l`, 0
const20: db `o`, 0
const21: dq 5.29
const22: dq 40.03
const23: dq 45.58
const24: dq 13.39
section .text
a:
_a:
push rbp
mov rbp, rsp
push rdi
sub rsp, 16
mov r10, [r12 - - 8]
mov [rsp + 8], r10
mov r10, [r12 - - 16]
mov [rsp + 0], r10
sub rsp, 8
mov rax, [rel const2]
push rax
mov rax, [rel const3]
push rax
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
call _pow
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
sub rsp, 8
mov r10, [r12 - - 16]
mov [rsp + 0], r10
pop rdi
call _to_float
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _exp
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
subsd xmm0, xmm1
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _asin
sub rsp, 8
movsd [rsp], xmm0
mov rax, [rel const4]
push rax
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
call _atan2
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 16
mov r10, [rbp - 16]
mov [rsp + 8], r10
mov r10, [rbp - 24]
mov [rsp + 0], r10
add rsp, 0
mov rax, [rel const5]
push rax
mov rdi, 8
sub rsp, 8
call _jpl_alloc
add rsp, 8
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 8
push rax
mov rax, 1
push rax
mov r10, [rsp + 8]
mov [rsp + 8], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
mov r10, [rsp + 8]
mov [rsp + 8], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
mov rax, [rbp - 8]
mov r10, [rsp + 8]
mov [rax + 8], r10
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 64
pop rbp
ret
g:
_g:
push rbp
mov rbp, rsp
sub rsp, 8
mov r10, [r12 - 24]
mov [rsp + 0], r10
mov rax, [rel const9]
push rax
sub rsp, 8
mov r10, [rbp - - 16]
mov [rsp + 0], r10
pop rax
neg rax
push rax
pop rax
pop r10
cmp r10, 0
jne .jump3
sub rsp, 8
lea rdi, [rel const7]
call _fail_assertion
add rsp, 8
.jump3:
cqo
idiv r10
mov rax, rdx
push rax
pop rax
pop r10
cmp rax, r10
setne al
and rax, 1
push rax
pop rax
cmp rax, 0
jne .jump4
lea rdi, [rel const10]
call _fail_assertion
.jump4:
sub rsp, 16
mov r10, [r12 - 48]
mov [rsp + 8], r10
mov r10, [r12 - 56]
mov [rsp + 0], r10
mov rax, [rel const11]
push rax
mov rax, [rel const12]
push rax
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
call _atan2
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _exp
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _tan
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
mov rax, [rel const13]
push rax
movsd xmm0, [rsp]
add rsp, 8
call _sqrt
sub rsp, 8
movsd [rsp], xmm0
mov rax, [rel const14]
push rax
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
call _pow
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _asin
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
cmpeqsd xmm0, xmm1
movq rax, xmm0
and rax, 1
push rax
mov rax, [rel const15]
push rax
sub rsp, 8
mov r10, [r12 - 56]
mov [rsp + 0], r10
pop rdi
call _to_float
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
cmpneqsd xmm0, xmm1
movq rax, xmm0
and rax, 1
push rax
pop rax
xor rax, 1
push rax
pop rax
pop r10
cmp rax, r10
setne al
and rax, 1
push rax
pop rax
cmp rax, 0
jne .jump5
lea rdi, [rel const16]
call _fail_assertion
.jump5:
mov rax, [rel const0]
push rax
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
pop rax
xor rax, 1
push rax
pop rax
xor rax, 1
push rax
pop rax
cmp rax, 0
jne .jump6
lea rdi, [rel const16]
call _fail_assertion
.jump6:
mov rax, [rel const0]
push rax
pop rax
add rsp, 16
pop rbp
ret
h:
_h:
push rbp
mov rbp, rsp
mov rax, [rel const18]
push rax
pop rax
xor rax, 1
push rax
sub rsp, 16
mov r10, [r12 - 32]
mov [rsp + 8], r10
mov r10, [r12 - 40]
mov [rsp + 0], r10
sub rsp, 8
mov r10, [rbp - 8]
mov [rsp + 0], r10
pop rax
xor rax, 1
push rax
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
pop rax
xor rax, 1
push rax
pop rax
xor rax, 1
push rax
pop rax
cmp rax, 0
jne .jump7
sub rsp, 8
lea rdi, [rel const19]
call _fail_assertion
add rsp, 8
.jump7:
sub rsp, 16
mov r10, [r12 - 48]
mov [rsp + 8], r10
mov r10, [r12 - 56]
mov [rsp + 0], r10
add rsp, 40
pop rbp
ret
i:
_i:
push rbp
mov rbp, rsp
sub rsp, 8
movsd [rsp], xmm0
mov rax, [rel const18]
push rax
pop rax
cmp rax, 0
jne .jump8
sub rsp, 8
lea rdi, [rel const20]
call _fail_assertion
add rsp, 8
.jump8:
sub rsp, 8
sub rsp, 8
mov r10, [rbp - 8]
mov [rsp + 0], r10
sub rsp, 8
mov r10, [rbp - 8]
mov [rsp + 0], r10
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
call _pow
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _sqrt
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _asin
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
mov rax, [rel const21]
push rax
movsd xmm0, [rsp]
add rsp, 8
call _tan
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _sqrt
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _sqrt
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
call _pow
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _cos
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 16
mov r10, [r12 - 32]
mov [rsp + 8], r10
mov r10, [r12 - 40]
mov [rsp + 0], r10
sub rsp, 8
mov r10, [rbp - 8]
mov [rsp + 0], r10
sub rsp, 8
mov r10, [rbp - 8]
mov [rsp + 0], r10
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
call _atan2
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _atan
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
mov rax, [rel const22]
push rax
movsd xmm0, [rsp]
add rsp, 8
call _log
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _acos
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
subsd xmm0, xmm1
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _exp
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
mov rax, [rel const23]
push rax
movsd xmm0, [rsp]
add rsp, 8
call _cos
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
sub rsp, 8
mov r10, [rbp - 32]
mov [rsp + 0], r10
pop rdi
call _to_float
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
call _pow
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _sqrt
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _sqrt
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
call _atan2
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
add rsp, 32
pop rbp
ret
jpl_main:
_jpl_main:
push rbp
mov rbp, rsp
push r12
mov r12, rbp
mov rax, [rel const0]
push rax
pop rax
cmp rax, 0
jne .jump1
sub rsp, 8
lea rdi, [rel const1]
call _fail_assertion
add rsp, 8
.jump1:
sub rsp, 8
mov rax, [rel const6]
push rax
sub rsp, 8
mov r10, [rbp - - 16]
mov [rsp + 0], r10
pop rax
pop r10
cmp r10, 0
jne .jump2
lea rdi, [rel const7]
call _fail_assertion
.jump2:
cqo
idiv r10
mov rax, rdx
push rax
pop rdi
call _to_float
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
mov rdi, 8
call _jpl_alloc
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 8
push rax
mov rax, 1
push rax
sub rsp, 8
sub rsp, 8
mov r10, [rbp - 24]
mov [rsp + 0], r10
pop rdi
call _to_float
sub rsp, 8
movsd [rsp], xmm0
mov rax, [rel const8]
push rax
movsd xmm1, [rsp]
add rsp, 8
pxor xmm0, xmm0
subsd xmm0, xmm1
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
divsd xmm0, xmm1
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _to_int
push rax
pop rdi
call _to_float
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
mov rdi, 8
call _jpl_alloc
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 8
push rax
mov rax, 1
push rax
sub rsp, 16
mov r10, [rbp - 32]
mov [rsp + 8], r10
mov r10, [rbp - 40]
mov [rsp + 0], r10
sub rsp, 8
mov r10, [rbp - 56]
mov [rsp + 0], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
pop rax
neg rax
push rax
lea rdi, [rel const17]
lea rsi, [rsp]
call _show
add rsp, 8
lea rdi, [rel const10]
sub rsp, 8
call _print
add rsp, 8
sub rsp, 8
sub rsp, 8
mov r10, [rbp - 56]
mov [rsp + 0], r10
pop rdi
call _to_float
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _cos
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
sub rsp, 8
mov r10, [rbp - 24]
mov [rsp + 0], r10
pop rdi
call _to_float
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
mov rax, [rel const24]
push rax
movsd xmm0, [rsp]
add rsp, 8
call _tan
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
subsd xmm0, xmm1
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
call _fmod
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _asin
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _to_int
add rsp, 8
push rax
sub rsp, 16
mov r10, [rbp - 32]
mov [rsp + 8], r10
mov r10, [rbp - 40]
mov [rsp + 0], r10
mov rdi, 16
call _jpl_alloc
mov r10, [rsp + 8]
mov [rax + 8], r10
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 16
push rax
mov rax, 1
push rax
add rsp, 72
pop r12
pop rbp
ret
