let {} = {}
fn a(b : float) : bool[] {
  let c[d] = [false]
  return {{c}}{0}{0}
  let e[f] = args
  let {} = {}
  return {{[true]}}{0}{0}
}

let b = to_int(atan2(atan2((- to_float(argnum)), (to_float(argnum) / sqrt(79.4))), pow(log(log(17.27)), sin(sqrt(28.7)))))
let c = (924 + argnum)
let d = acos(tan(pow(pow(asin(52.12), to_float(779)), {15.11}{0})))
let e = args
fn f({ g : float[] }) : int {
  let {} = {}
  return (- (c * (argnum + (- to_int(d)))))
  let {h} = {e}
  let {{{}}} = {{{{}}}}{0}
  return b
}

let g = {args}
let {} = {}
let {{}} = {{{}}}{0}
fn h() : int[] {
  let i[j] = {args}{0}
  return e
  let k = args
  let {{l}} = {{asin(atan(atan2(67.44, 44.66)))}}
  return i
}

let {i[j]} = {{g}}{0}{0}
