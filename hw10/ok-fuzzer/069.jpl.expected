global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float
section .data
const0: dq 29.95
const1: db `c.png`, 0
const2: dq 1
const3: db `d`, 0
const4: dq 80.95
const5: dq 60.06
const6: dq 77.15
const7: dq 49.03
const8: dq 91.78
const9: dq 635
const10: db `g`, 0
const11: dq 37.07
const12: db `i`, 0
const13: dq 0
const14: db `k`, 0
const15: dq 0.88
const16: db `l`, 0
const17: dq 137
const18: dq 729
const19: dq 20.78
const20: dq 4.56
const21: db `m.png`, 0
section .text
d:
_d:
push rbp
mov rbp, rsp
push rdi
sub rsp, 16
mov r10, [r12 - - 2]
mov [rsp + 8], r10
mov r10, [r12 - - 6]
mov [rsp + 0], r10
mov rax, [rel const4]
push rax
sub rsp, 16
mov r10, [r12 - - 2]
mov [rsp + 8], r10
mov r10, [r12 - - 6]
mov [rsp + 0], r10
mov rax, [rbp - 8]
mov r10, [rsp + 8]
mov [rax + 8], r10
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 48
pop rbp
ret
mov rax, [rel const5]
push rax
sub rsp, 16
mov r10, [rbp - 4]
mov [rsp + 8], r10
mov r10, [rbp - 4]
mov [rsp + 0], r10
mov rax, [rbp - 8]
mov r10, [rsp + 8]
mov [rax + 8], r10
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 72
pop rbp
ret
e:
_e:
push rbp
mov rbp, rsp
mov rax, [rel const6]
push rax
movsd xmm0, [rsp]
add rsp, 8
call _to_int
push rax
pop rax
neg rax
push rax
pop rdi
call _to_float
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
sub rsp, 8
mov r10, [r12 - - 6]
mov [rsp + 0], r10
pop rdi
call _to_float
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _sin
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _log
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm1, [rsp]
add rsp, 8
pxor xmm0, xmm0
subsd xmm0, xmm1
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
cmplesd xmm0, xmm1
movq rax, xmm0
and rax, 1
push rax
pop rax
add rsp, 0
pop rbp
ret
mov rax, [rel const7]
push rax
movsd xmm0, [rsp]
add rsp, 8
call _exp
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _log
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _atan
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _exp
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
mov rax, [rel const8]
push rax
movsd xmm0, [rsp]
add rsp, 8
call _asin
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _asin
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
mov rax, [rel const9]
push rax
pop rdi
call _to_float
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
divsd xmm0, xmm1
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _acos
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
cmpneqsd xmm0, xmm1
movq rax, xmm0
and rax, 1
push rax
pop rax
cmp rax, 0
jne .jump2
lea rdi, [rel const10]
call _fail_assertion
.jump2:
sub rsp, 16
mov r10, [r12 - 4]
mov [rsp + 8], r10
mov r10, [r12 - 4]
mov [rsp + 0], r10
mov r10, [rsp - 8]
mov [rsp - 8], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
mov r10, [rsp - 8]
mov [rsp - 8], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
sub rsp, 8
mov r10, [rbp - - 6]
mov [rsp + 0], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
sub rsp, 8
mov rax, [rel const11]
push rax
movsd xmm0, [rsp]
add rsp, 8
call _to_int
add rsp, 8
push rax
sub rsp, 8
mov r10, [r12 - 4]
mov [rsp + 0], r10
pop rax
pop r10
cmp rax, r10
setne al
and rax, 1
push rax
pop rax
pop r10
cmp rax, r10
sete al
and rax, 1
push rax
pop rax
cmp rax, 0
jne .jump3
lea rdi, [rel const12]
call _fail_assertion
.jump3:
mov rax, [rel const13]
push rax
pop rax
add rsp, 16
pop rbp
ret
h:
_h:
push rbp
mov rbp, rsp
sub rsp, 8
mov rax, [rel const2]
push rax
pop rax
xor rax, 1
push rax
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
call _e
add rsp, 8
add rsp, 8
push rax
pop rax
cmp rax, 0
jne .jump4
lea rdi, [rel const14]
call _fail_assertion
.jump4:
mov rax, [rel const15]
push rax
movsd xmm0, [rsp]
add rsp, 8
call _sin
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _sqrt
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _sin
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _sin
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
mov r10, [r12 - - 6]
mov [rsp + 0], r10
sub rsp, 8
mov r10, [r12 - 4]
mov [rsp + 0], r10
pop rax
pop r10
sub rax, r10
push rax
pop rax
neg rax
push rax
sub rsp, 8
mov r10, [r12 - 4]
mov [rsp + 0], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
pop rax
pop r10
cmp rax, r10
setle al
and rax, 1
push rax
pop rax
cmp rax, 0
jne .jump5
sub rsp, 8
lea rdi, [rel const16]
call _fail_assertion
add rsp, 8
.jump5:
sub rsp, 8
sub rsp, 8
mov r10, [r12 - - 6]
mov [rsp + 0], r10
pop rdi
call _to_float
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _sqrt
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
mov rax, [rel const17]
push rax
pop rdi
call _to_float
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _tan
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
call _atan2
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _log
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _tan
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
add rsp, 8
pop rbp
ret
jpl_main:
_jpl_main:
push rbp
mov rbp, rsp
push r12
mov r12, rbp
mov rax, [rel const0]
push rax
mov rdi, 8
call _jpl_alloc
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 8
push rax
mov rax, 1
push rax
add rsp, 0
add rsp, 0
sub rsp, 24
lea rdi, [rsp]
lea rsi, [rel const1]
call _read_image
mov rax, [rel const2]
push rax
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
pop rax
xor rax, 1
push rax
pop rax
cmp rax, 0
jne .jump1
lea rdi, [rel const3]
call _fail_assertion
.jump1:
sub rsp, 16
lea rdi, [rsp + 0]
call _d
add rsp, 0
sub rsp, 16
mov r10, [rbp - - 2]
mov [rsp + 8], r10
mov r10, [rbp - - 6]
mov [rsp + 0], r10
mov rax, [rel const18]
push rax
pop rax
neg rax
push rax
pop rdi
call _to_float
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _sin
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _cos
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
sub rsp, 8
mov r10, [rbp ]
mov [rsp + 0], r10
pop rdi
call _to_float
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
call _atan2
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
mov rax, [rel const19]
push rax
movsd xmm0, [rsp]
add rsp, 8
call _sin
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _atan
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
mov rax, [rel const20]
push rax
movsd xmm0, [rsp]
add rsp, 8
call _sin
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
call _pow
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _exp
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _exp
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
sub rsp, 24
mov r10, [rbp - 2]
mov [rsp + 16], r10
mov r10, [rbp ]
mov [rsp + 8], r10
mov r10, [rbp - 8]
mov [rsp + 0], r10
lea rdi, [rel const21]
call _write_image
add rsp, 24
add rsp, 8
add rsp, 88
pop r12
pop rbp
ret
