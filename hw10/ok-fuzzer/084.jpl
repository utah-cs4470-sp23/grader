fn a(b : float, c : float, d : float) : int[] {
  let {e} = {atan(exp(exp(exp(b))))}
  let f = sqrt(sin(sqrt(93.26)))
  let g = sin(sin(f))
  let {} = {}
  return args
}

let b = atan2(acos((- pow(sqrt(94.67), to_float(96)))), tan({log(30.55)}{0}))
let c[d] = [{{args}}{0}{0}]
let {} = {}
read image "e.png" to e

fn f() : bool {
  return ((d * to_int(sqrt(acos(b)))) <= 810)
  let g = sin((tan(cos(74.92)) % exp(atan2(cos(82.12), to_float(argnum)))))
  assert (! (! (! {true}{0}))), "h"
  let h[i] = args
  return (! (g != (96.27 % (- pow(g, g)))))
}

fn g() : float {
  return (pow(sqrt(to_float((d - 79))), log((b % (- b)))) + asin({to_float(d)}{0}))
  let h[i] = {{c}}{0}{0}
  let {j} = {atan2(asin(cos((- b))), acos(b))}
  assert f(), "k"
  return atan(16.1)
}

fn h({  }, {  }) : bool[] {
  let i[j] = args
  let k = b
  let l[m] = args
  let {} = {}
  return [{{f()}}{0}{0}]
}

fn i() : {float} {
  let j = (atan(asin(cos(b))) > {exp(tan(g()))}{0})
  let k = sqrt(atan2(b, log(b)))
  assert j, "l"
  assert (! j), "l"
  return {cos(exp(acos((g() - g()))))}
}

type j = bool[][][][]
fn k(l[m] : float[], n[o] : j) : j {
  let p[q] = h({}, {{{}}{0}}{0})
  let r[s] = {{l}}{0}{0}
  let t = argnum
  let {} = {{{}}}{0}{0}
  return {n}{0}
}

let l = sqrt(sqrt(g()))
