global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float
section .data
const0: db `a`, 0
const1: dq 367
const2: db `mod by zero`, 0
const3: dq 892
const4: db `(IntType)`, 0
const5: dq 17.89
const6: dq 28.99
const7: dq 32.84
const8: dq 28.88
const9: dq 39.51
const10: dq 71.08
const11: dq 62.05
const12: dq 309
const13: db `b.png`, 0
const14: db `f.png`, 0
const15: db `f`, 0
section .text
f:
_f:
push rbp
mov rbp, rsp
push rdi
sub rsp, 8
mov r10, [r12 - 6]
mov [rsp + 0], r10
sub rsp, 8
mov r10, [r12 - 6]
mov [rsp + 0], r10
movsd xmm0, [rsp]
add rsp, 8
call _cos
sub rsp, 8
movsd [rsp], xmm0
movsd xmm1, [rsp]
add rsp, 8
pxor xmm0, xmm0
subsd xmm0, xmm1
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _sqrt
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _cos
sub rsp, 8
movsd [rsp], xmm0
mov rdi, 8
sub rsp, 8
call _jpl_alloc
add rsp, 8
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 8
push rax
mov rax, 1
push rax
mov rax, [rbp - 8]
mov r10, [rsp + 8]
mov [rax + 8], r10
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 32
pop rbp
ret
sub rsp, 16
mov r10, [r12 - 6]
mov [rsp + 8], r10
mov r10, [r12 - 2]
mov [rsp + 0], r10
sub rsp, 16
mov r10, [rbp ]
mov [rsp + 8], r10
mov r10, [rbp - 8]
mov [rsp + 0], r10
sub rsp, 16
mov r10, [rbp - ]
mov [rsp + 8], r10
mov r10, [rbp - - 8]
mov [rsp + 0], r10
mov rax, [rbp - 8]
mov r10, [rsp + 8]
mov [rax + 8], r10
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 80
pop rbp
ret
jpl_main:
_jpl_main:
push rbp
mov rbp, rsp
push r12
mov r12, rbp
lea rdi, [rel const0]
sub rsp, 8
call _print
add rsp, 8
mov rax, [rel const1]
push rax
pop rax
neg rax
push rax
sub rsp, 8
mov r10, [rbp - - 6]
mov [rsp + 0], r10
pop rax
pop r10
cmp r10, 0
jne .jump1
sub rsp, 8
lea rdi, [rel const2]
call _fail_assertion
add rsp, 8
.jump1:
cqo
idiv r10
mov rax, rdx
push rax
mov rax, [rel const3]
push rax
pop rax
neg rax
push rax
pop rax
pop r10
cmp r10, 0
jne .jump2
sub rsp, 8
lea rdi, [rel const2]
call _fail_assertion
add rsp, 8
.jump2:
cqo
idiv r10
mov rax, rdx
push rax
sub rsp, 8
mov r10, [rbp - - 6]
mov [rsp + 0], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
pop rax
neg rax
push rax
pop rax
pop r10
imul rax, r10
push rax
lea rdi, [rel const4]
lea rsi, [rsp]
call _show
add rsp, 8
sub rsp, 8
mov rax, [rel const5]
push rax
sub rsp, 8
mov rax, [rel const6]
push rax
mov rax, [rel const7]
push rax
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
call _pow
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
call _atan2
sub rsp, 8
movsd [rsp], xmm0
mov rax, [rel const8]
push rax
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
call _atan2
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
mov rax, [rel const9]
push rax
mov rax, [rel const10]
push rax
movsd xmm1, [rsp]
add rsp, 8
pxor xmm0, xmm0
subsd xmm0, xmm1
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
call _atan2
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
mov rax, [rel const11]
push rax
movsd xmm0, [rsp]
add rsp, 8
call _cos
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _sin
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
call _pow
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
cmplesd xmm1, xmm0
movq rax, xmm1
and rax, 1
push rax
pop rax
xor rax, 1
push rax
pop rax
cmp rax, 0
jne .jump3
sub rsp, 8
lea rdi, [rel const0]
call _fail_assertion
add rsp, 8
.jump3:
sub rsp, 8
mov rax, [rel const12]
push rax
pop rdi
call _to_float
sub rsp, 8
movsd [rsp], xmm0
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
movsd xmm0, [rsp]
add rsp, 8
call _sqrt
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _atan
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 24
lea rdi, [rsp]
sub rsp, 8
lea rsi, [rel const13]
call _read_image
add rsp, 8
sub rsp, 16
mov r10, [rbp - - 2]
mov [rsp + 8], r10
mov r10, [rbp - - 6]
mov [rsp + 0], r10
sub rsp, 16
mov r10, [rbp - - 2]
mov [rsp + 8], r10
mov r10, [rbp - - 6]
mov [rsp + 0], r10
sub rsp, 24
mov r10, [rbp - 6]
mov [rsp + 16], r10
mov r10, [rbp - 8]
mov [rsp + 8], r10
mov r10, [rbp ]
mov [rsp + 0], r10
mov r10, [rsp - 6]
mov [rsp - 6], r10
mov r10, [rsp - 8]
mov [rsp - 8], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
mov r10, [rsp - 6]
mov [rsp - 6], r10
mov r10, [rsp - 8]
mov [rsp - 8], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
lea rdi, [rel const14]
call _write_image
add rsp, 24
sub rsp, 24
mov r10, [rbp - 6]
mov [rsp + 16], r10
mov r10, [rbp - 8]
mov [rsp + 8], r10
mov r10, [rbp ]
mov [rsp + 0], r10
lea rdi, [rel const14]
call _write_image
add rsp, 24
lea rdi, [rel const15]
sub rsp, 8
call _print
add rsp, 8
add rsp, 64
pop r12
pop rbp
ret
