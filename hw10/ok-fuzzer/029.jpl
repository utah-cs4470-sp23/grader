assert true, "a"
fn a(b[c] : bool[], {  }, {  }) : int[] {
  let d[e] = args
  let f = atan2(18.29, asin((exp(to_float(argnum)) - pow(33.02, 72.03))))
  let g[h] = d
  let {} = {{}}{0}
  return {{[637]}}{0}{0}
}

let b[c] = [to_float((argnum % 746))]
let d = [to_float(to_int(((- 14.89) / to_float(c))))]
let e[f] = d
fn g(h[i] : float[]) : bool {
  assert (((- i) % 162) != c), "j"
  let j = e
  assert ((! (to_float(f) != 63.43)) != (asin(pow(46.33, sqrt(21.11))) == tan(exp(atan2(49.33, 24.92))))), "k"
  assert (! (! {true}{0})), "k"
  return true
}

show (- {f}{0})

fn h() : {} {
  let {i} = {(! false)}
  let j[k] = d
  assert (! (! {(! i)}{0})), "l"
  let {l[m]} = {e}
}

fn i(j[k] : int[], l[m] : int[], n : float) : float {
  assert false, "o"
  let {} = {}
  let o = cos(pow(sqrt(sqrt(tan(5.29))), asin(sqrt(pow(n, n)))))
  let p[q] = d
  return atan2(sqrt(sqrt(pow(to_float(q), cos(45.58)))), exp((acos(log(40.03)) - atan(atan2(n, n)))))
}

print "j"

let j = to_int(asin(((tan(13.39) - to_float(c)) % cos(to_float(f)))))
let k = [d]
