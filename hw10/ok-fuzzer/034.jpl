let a[b] = args
let c[d] = {a}{0}
fn e({  }) : float {
  let {{}} = {{{{}}}}{0}{0}
  return {tan(to_float((b + 886)))}{0}
  let f = {to_int(tan(sqrt(12.17)))}{0}
  assert true, "g"
  return atan(sqrt(cos(to_float(d))))
}

let f[g] = args
let h = cos(to_float(g))
show args

let i = a
let j = cos(to_float({argnum}{0}))
fn k(l : float) : float {
  assert (! (((g == d) == (! (! true))) != {false}{0})), "m"
  let {{m}} = {{{log(45.79)}}}{0}
  let n[o] = f
  let p[q] = i
  return (sqrt({cos(l)}{0}) * m)
}

fn l(m : bool, n : float) : float {
  let {} = {}
  let {{}} = {{}}
  let o = a
  let p = h
  return to_float((- argnum))
}

let m[n] = c
assert (asin(to_float((- 614))) >= k(h)), "o"
