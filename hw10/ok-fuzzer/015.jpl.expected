global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float
section .data
const0: dq 62
const1: dq 17
const2: dq 20
const3: dq 249
const4: dq 532
const5: dq 225
const6: dq 88
const7: dq 30
const8: dq 49
const9: dq 1
const10: dq 69
const11: dq 18
const12: dq 31
const13: db `m`, 0
const14: dq 912
const15: db `divide by zero`, 0
const16: dq 15
const17: dq 81
const18: dq 98
const19: dq 73
section .text
a:
_a:
push rbp
mov rbp, rsp
push rdi
add rsp, 0
add rsp, 0
sub rsp, 8
sub rsp, 8
mov r10, [rbp - - 6]
mov [rsp + 0], r10
pop rdi
call _to_float
sub rsp, 8
movsd [rsp], xmm0
mov rax, [rel const0]
push rax
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
divsd xmm0, xmm1
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _log
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
mov rax, [rel const1]
push rax
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
pop rdi
call _to_float
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
mulsd xmm0, xmm1
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
mov rax, [rel const2]
push rax
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
sub rsp, 8
mov rax, [rel const3]
push rax
pop rdi
call _to_float
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _atan
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
call _atan2
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _asin
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
call _pow
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
add rsp, 0
add rsp, 0
sub rsp, 8
mov r10, [r12 - - 6]
mov [rsp + 0], r10
mov rdi, 8
sub rsp, 8
call _jpl_alloc
add rsp, 8
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 8
push rax
mov rax, 1
push rax
mov r10, [rsp - 8]
mov [rsp - 8], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
mov r10, [rsp - 8]
mov [rsp - 8], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
mov rax, [rbp - 8]
mov r10, [rsp + 8]
mov [rax + 8], r10
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 32
pop rbp
ret
e:
_e:
push rbp
mov rbp, rsp
sub rsp, 16
mov r10, [rbp - - 6]
mov [rsp + 8], r10
mov r10, [rbp - - 2]
mov [rsp + 0], r10
sub rsp, 16
mov r10, [rbp - - 2]
mov [rsp + 8], r10
mov r10, [rbp - - 6]
mov [rsp + 0], r10
sub rsp, 16
mov r10, [rbp - - 2]
mov [rsp + 8], r10
mov r10, [rbp - - 6]
mov [rsp + 0], r10
sub rsp, 16
mov r10, [rbp - 2]
mov [rsp + 8], r10
mov r10, [rbp - 6]
mov [rsp + 0], r10
mov rax, [rel const6]
push rax
mov rax, [rel const7]
push rax
movsd xmm1, [rsp]
add rsp, 8
pxor xmm0, xmm0
subsd xmm0, xmm1
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
addsd xmm0, xmm1
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _sqrt
sub rsp, 8
movsd [rsp], xmm0
mov rax, [rel const8]
push rax
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
cmpltsd xmm0, xmm1
movq rax, xmm0
and rax, 1
push rax
pop rax
add rsp, 64
pop rbp
ret
f:
_f:
push rbp
mov rbp, rsp
add rsp, 0
add rsp, 0
mov rax, [rel const9]
push rax
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
pop rax
add rsp, 0
pop rbp
ret
sub rsp, 16
mov r10, [r12 - - 2]
mov [rsp + 8], r10
mov r10, [r12 - - 6]
mov [rsp + 0], r10
mov rax, [rel const10]
push rax
mov rax, [rel const11]
push rax
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
cmpneqsd xmm0, xmm1
movq rax, xmm0
and rax, 1
push rax
pop rax
add rsp, 16
pop rbp
ret
g:
_g:
push rbp
mov rbp, rsp
push rdi
push rsi
mov rax, [rel const12]
push rax
sub rsp, 8
sub rsp, 8
mov r10, [rbp - - 6]
mov [rsp + 0], r10
movsd xmm0, [rsp]
add rsp, 8
call _sin
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _log
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _exp
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
mov r10, [rbp - - 6]
mov [rsp + 0], r10
movsd xmm0, [rsp]
add rsp, 8
call _exp
sub rsp, 8
movsd [rsp], xmm0
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
call _fmod
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
cmplesd xmm0, xmm1
movq rax, xmm0
and rax, 1
push rax
sub rsp, 8
sub rsp, 8
mov r10, [rbp - - 4]
mov [rsp + 0], r10
pop rax
neg rax
push rax
pop rdi
call _to_float
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
sub rsp, 16
mov r10, [r12 - 4]
mov [rsp + 8], r10
mov r10, [r12 - 4]
mov [rsp + 0], r10
add rsp, 0
add rsp, 0
sub rsp, 16
mov r10, [r12 - 4]
mov [rsp + 8], r10
mov r10, [r12 - 4]
mov [rsp + 0], r10
mov rax, [rbp - 8]
mov r10, [rsp + 8]
mov [rax + 8], r10
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 64
pop rbp
ret
h:
_h:
push rbp
mov rbp, rsp
push rdi
mov rax, [rel const9]
push rax
pop rax
cmp rax, 0
jne .jump1
sub rsp, 8
lea rdi, [rel const13]
call _fail_assertion
add rsp, 8
.jump1:
sub rsp, 8
call _f
add rsp, 0
add rsp, 8
push rax
pop rax
cmp rax, 0
jne .jump2
sub rsp, 8
lea rdi, [rel const13]
call _fail_assertion
add rsp, 8
.jump2:
sub rsp, 8
mov r10, [r12 - - 6]
mov [rsp + 0], r10
pop rax
neg rax
push rax
mov rax, [rel const14]
push rax
pop rax
pop r10
cmp r10, 0
jne .jump3
sub rsp, 8
lea rdi, [rel const15]
call _fail_assertion
add rsp, 8
.jump3:
cqo
idiv r10
push rax
mov rax, [rel const16]
push rax
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
add rsp, 24
pop rbp
ret
k:
_k:
push rbp
mov rbp, rsp
sub rsp, 16
mov r10, [r12 - 4]
mov [rsp + 8], r10
mov r10, [r12 - 4]
mov [rsp + 0], r10
mov r10, [rsp - 8]
mov [rsp - 8], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
sub rsp, 8
mov r10, [rbp - - 8]
mov [rsp + 0], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
movsd xmm0, [rsp]
add rsp, 8
call _acos
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
mov rax, [rel const18]
push rax
mov rax, [rel const19]
push rax
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
call _pow
sub rsp, 8
movsd [rsp], xmm0
movsd xmm1, [rsp]
add rsp, 8
pxor xmm0, xmm0
subsd xmm0, xmm1
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _tan
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
call _atan2
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _log
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 16
sub rsp, 16
mov r10, [rbp - 2]
mov [rsp + 8], r10
mov r10, [rbp - 6]
mov [rsp + 0], r10
sub rsp, 8
mov r10, [rbp - - 8]
mov [rsp + 0], r10
call _f
add rsp, 0
push rax
pop rsi
lea rdi, [rsp + 24]
call _g
add rsp, 8
add rsp, 16
mov rax, [rel const9]
push rax
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
pop rax
add rsp, 40
pop rbp
ret
jpl_main:
_jpl_main:
push rbp
mov rbp, rsp
push r12
mov r12, rbp
mov rax, [rel const4]
push rax
pop rax
neg rax
push rax
sub rsp, 8
mov r10, [rbp - - 6]
mov [rsp + 0], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
pop rax
pop r10
sub rax, r10
push rax
mov rdi, 8
call _jpl_alloc
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 8
push rax
mov rax, 1
push rax
sub rsp, 8
mov rax, [rel const5]
push rax
pop rdi
call _to_float
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _to_int
add rsp, 8
push rax
sub rsp, 16
mov rax, [rel const17]
push rax
mov rdi, 8
sub rsp, 8
call _jpl_alloc
add rsp, 8
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 8
push rax
mov rax, 1
push rax
mov r10, [rsp - 8]
mov [rsp - 8], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
lea rdi, [rsp + 16]
call _a
add rsp, 16
sub rsp, 16
mov r10, [rbp ]
mov [rsp + 8], r10
mov r10, [rbp - 8]
mov [rsp + 0], r10
add rsp, 56
pop r12
pop rbp
ret
