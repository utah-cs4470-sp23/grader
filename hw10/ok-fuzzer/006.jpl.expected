global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float
section .data
const0: dq 23.7
const1: dq 45.1
const2: dq 99.56
const3: db `j`, 0
const4: dq 9.0
const5: dq 34.5
const6: dq 47.49
const7: dq 98.72
const8: dq 1
const9: db `c.png`, 0
const10: dq 729
const11: dq 15.99
const12: dq 9.31
const13: dq 88.46
const14: dq 16.98
const15: dq 26.18
const16: db `h`, 0
const17: db `mod by zero`, 0
const18: dq 401
const19: dq 0
const20: dq 471
const21: dq 636
const22: dq 816
const23: dq 39.71
const24: dq 99.85
const25: dq 11
const26: dq 652
const27: dq 256
const28: dq 70
const29: db `o`, 0
const30: dq 8.66
const31: dq 26.35
section .text
a:
_a:
push rbp
mov rbp, rsp
push rdi
push rsi
sub rsp, 16
mov r10, [rbp - - 8]
mov [rsp + 8], r10
mov r10, [rbp - - 16]
mov [rsp + 0], r10
sub rsp, 16
mov r10, [r12 - - 8]
mov [rsp + 8], r10
mov r10, [r12 - - 16]
mov [rsp + 0], r10
mov r10, [rsp + 8]
mov [rsp + 8], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
mov rax, [rel const0]
push rax
movsd xmm0, [rsp]
add rsp, 8
call _sin
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _tan
sub rsp, 8
movsd [rsp], xmm0
mov rax, [rel const1]
push rax
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
call _pow
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
sub rsp, 8
mov r10, [r12 - - 16]
mov [rsp + 0], r10
pop rdi
call _to_float
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _sqrt
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _atan
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
call _pow
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
mov rax, [rel const2]
push rax
movsd xmm1, [rsp]
add rsp, 8
pxor xmm0, xmm0
subsd xmm0, xmm1
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _exp
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
cmpeqsd xmm0, xmm1
movq rax, xmm0
and rax, 1
push rax
sub rsp, 8
mov r10, [rbp - 56]
mov [rsp + 0], r10
pop rax
cmp rax, 0
jne .jump1
sub rsp, 8
lea rdi, [rel const3]
call _fail_assertion
add rsp, 8
.jump1:
mov rax, [rel const4]
push rax
mov rdi, 8
call _jpl_alloc
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 8
push rax
mov rax, 1
push rax
mov r10, [rsp + 8]
mov [rsp + 8], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
mov r10, [rsp + 8]
mov [rsp + 8], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
mov rax, [rbp - 8]
mov r10, [rsp + 8]
mov [rax + 8], r10
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 72
pop rbp
ret
b:
_b:
push rbp
mov rbp, rsp
sub rsp, 16
mov r10, [rbp - - 8]
mov [rsp + 8], r10
mov r10, [rbp - - 16]
mov [rsp + 0], r10
mov r10, [rsp + 8]
mov [rsp + 8], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
mov rax, [rel const5]
push rax
movsd xmm0, [rsp]
add rsp, 8
call _exp
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _acos
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _cos
sub rsp, 8
movsd [rsp], xmm0
mov rax, [rel const6]
push rax
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
addsd xmm0, xmm1
sub rsp, 8
movsd [rsp], xmm0
mov rdi, 8
sub rsp, 8
call _jpl_alloc
add rsp, 8
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 8
push rax
mov rax, 1
push rax
sub rsp, 16
mov r10, [rbp - - 8]
mov [rsp + 8], r10
mov r10, [rbp - - 16]
mov [rsp + 0], r10
add rsp, 0
add rsp, 0
mov rax, [rel const7]
push rax
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
movsd xmm0, [rsp]
add rsp, 8
call _cos
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
sub rsp, 8
mov r10, [rbp - 32]
mov [rsp + 0], r10
pop rdi
call _to_float
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _cos
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _log
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
cmpneqsd xmm0, xmm1
movq rax, xmm0
and rax, 1
push rax
mov rax, [rel const8]
push rax
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
pop rax
pop r10
cmp rax, r10
setne al
and rax, 1
push rax
pop rax
add rsp, 48
pop rbp
ret
f:
_f:
push rbp
mov rbp, rsp
push rdi
sub rsp, 8
mov rax, [rel const11]
push rax
movsd xmm0, [rsp]
add rsp, 8
call _sqrt
sub rsp, 8
movsd [rsp], xmm0
mov rax, [rel const12]
push rax
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
call _atan2
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
mov rax, [rel const13]
push rax
movsd xmm0, [rsp]
add rsp, 8
call _asin
sub rsp, 8
movsd [rsp], xmm0
mov rax, [rel const14]
push rax
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
call _pow
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
call _atan2
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _sin
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
mov rax, [rel const15]
push rax
movsd xmm0, [rsp]
add rsp, 8
call _sqrt
sub rsp, 8
movsd [rsp], xmm0
movsd xmm1, [rsp]
add rsp, 8
pxor xmm0, xmm0
subsd xmm0, xmm1
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _exp
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _sqrt
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
cmpltsd xmm0, xmm1
movq rax, xmm0
and rax, 1
push rax
pop rax
add rsp, 8
pop rbp
ret
sub rsp, 8
mov r10, [rbp - 8]
mov [rsp + 0], r10
pop rax
cmp rax, 0
jne .jump2
sub rsp, 8
lea rdi, [rel const16]
call _fail_assertion
add rsp, 8
.jump2:
sub rsp, 8
sub rsp, 8
mov r10, [r12 - 48]
mov [rsp + 0], r10
sub rsp, 8
mov r10, [r12 - - 16]
mov [rsp + 0], r10
pop rax
pop r10
cmp r10, 0
jne .jump3
lea rdi, [rel const17]
call _fail_assertion
.jump3:
cqo
idiv r10
mov rax, rdx
push rax
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
pop rdi
call _to_float
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
mov rax, [rel const18]
push rax
pop rdi
call _to_float
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
call _atan2
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
mov r10, [rbp - 8]
mov [rsp + 0], r10
pop rax
add rsp, 16
pop rbp
ret
g:
_g:
push rbp
mov rbp, rsp
sub rsp, 16
mov rax, [rel const8]
push rax
mov rdi, 8
sub rsp, 8
call _jpl_alloc
add rsp, 8
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 8
push rax
mov rax, 1
push rax
mov r10, [rsp + 8]
mov [rsp + 8], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
mov rax, [rel const19]
push rax
pop rdi
call _f
push rax
mov rax, [rel const20]
push rax
mov rax, [rel const21]
push rax
pop rax
pop r10
cmp rax, r10
setle al
and rax, 1
push rax
pop rax
pop r10
cmp rax, r10
sete al
and rax, 1
push rax
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
pop rsi
lea rdi, [rsp + 16]
call _a
add rsp, 16
sub rsp, 8
mov r10, [r12 - - 16]
mov [rsp + 0], r10
mov rdi, 8
sub rsp, 8
call _jpl_alloc
add rsp, 8
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 8
push rax
mov rax, 1
push rax
mov r10, [rsp + 8]
mov [rsp + 8], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
mov r10, [rsp + 8]
mov [rsp + 8], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
mov rax, [rel const22]
push rax
pop rdi
call _to_float
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 16
mov r10, [rbp - 24]
mov [rsp + 8], r10
mov r10, [rbp - 32]
mov [rsp + 0], r10
sub rsp, 8
mov rax, [rel const23]
push rax
movsd xmm0, [rsp]
add rsp, 8
call _sin
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _tan
sub rsp, 8
movsd [rsp], xmm0
mov rax, [rel const24]
push rax
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
call _atan2
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
sub rsp, 8
mov r10, [rbp - 16]
mov [rsp + 0], r10
pop rdi
call _to_float
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
subsd xmm0, xmm1
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _tan
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
add rsp, 56
pop rbp
ret
h:
_h:
push rbp
mov rbp, rsp
push rdi
sub rsp, 8
mov r10, [rbp - - 16]
mov [rsp + 0], r10
add rsp, 0
sub rsp, 8
mov r10, [r12 - 48]
mov [rsp + 0], r10
sub rsp, 8
mov r10, [r12 - 48]
mov [rsp + 0], r10
pop rax
neg rax
push rax
pop rax
pop r10
cmp rax, r10
setne al
and rax, 1
push rax
mov rax, [rel const25]
push rax
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
mov rdi, 8
call _jpl_alloc
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 8
push rax
mov rax, 1
push rax
mov rax, [rbp - 8]
mov r10, [rsp + 8]
mov [rax + 8], r10
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 40
pop rbp
ret
l:
_l:
push rbp
mov rbp, rsp
sub rsp, 16
mov r10, [r12 - - 8]
mov [rsp + 8], r10
mov r10, [r12 - - 16]
mov [rsp + 0], r10
mov r10, [rsp + 8]
mov [rsp + 8], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
call _b
add rsp, 16
push rax
pop rax
cmp rax, 0
jne .jump6
lea rdi, [rel const29]
call _fail_assertion
.jump6:
mov rax, [rel const30]
push rax
sub rsp, 8
mov rax, [rel const31]
push rax
sub rsp, 8
call _g
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _asin
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
call _atan2
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _sqrt
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
call _pow
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _sin
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
mov r10, [r12 - - 16]
mov [rsp + 0], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
pop rax
add rsp, 8
pop rbp
ret
sub rsp, 16
mov r10, [r12 - 40]
mov [rsp + 8], r10
mov r10, [r12 - 48]
mov [rsp + 0], r10
sub rsp, 8
mov r10, [r12 - 88]
mov [rsp + 0], r10
pop rax
add rsp, 24
pop rbp
ret
jpl_main:
_jpl_main:
push rbp
mov rbp, rsp
push r12
mov r12, rbp
sub rsp, 24
lea rdi, [rsp]
lea rsi, [rel const9]
call _read_image
sub rsp, 16
sub rsp, 8
mov r10, [rbp - - 16]
mov [rsp + 0], r10
mov rax, [rel const10]
push rax
pop rax
pop r10
cmp rax, r10
setge al
and rax, 1
push rax
mov rdi, 8
sub rsp, 8
call _jpl_alloc
add rsp, 8
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 8
push rax
mov rax, 1
push rax
mov r10, [rsp + 8]
mov [rsp + 8], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
mov rax, [rel const8]
push rax
pop rax
xor rax, 1
push rax
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
pop rax
xor rax, 1
push rax
pop rsi
lea rdi, [rsp + 16]
call _a
add rsp, 16
sub rsp, 24
mov r10, [rbp - 16]
mov [rsp + 16], r10
mov r10, [rbp - 24]
mov [rsp + 8], r10
mov r10, [rbp - 32]
mov [rsp + 0], r10
sub rsp, 8
sub rsp, 8
mov r10, [rbp - 48]
mov [rsp + 0], r10
pop rdi
call _to_float
sub rsp, 8
movsd [rsp], xmm0
movsd xmm1, [rsp]
add rsp, 8
pxor xmm0, xmm0
subsd xmm0, xmm1
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _asin
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _to_int
add rsp, 8
push rax
mov rax, [rel const26]
push rax
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
pop rax
pop r10
cmp rax, r10
setg al
and rax, 1
push rax
pop rax
cmp rax, 0
jne .jump4
sub rsp, 8
lea rdi, [rel const3]
call _fail_assertion
add rsp, 8
.jump4:
mov rax, [rel const27]
push rax
mov rax, [rel const28]
push rax
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
pop rax
pop r10
cmp rax, r10
setge al
and rax, 1
push rax
pop rax
cmp rax, 0
jne .jump5
sub rsp, 8
lea rdi, [rel const3]
call _fail_assertion
add rsp, 8
.jump5:
sub rsp, 16
mov r10, [rbp - 40]
mov [rsp + 8], r10
mov r10, [rbp - 48]
mov [rsp + 0], r10
add rsp, 80
pop r12
pop rbp
ret
