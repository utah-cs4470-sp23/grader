global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float
section .data
const0: dq 29.33
const1: dq 82.99
const2: dq 971
const3: db `f`, 0
const4: dq 1
const5: db `i`, 0
const6: dq 97.24
const7: db `divide by zero`, 0
const8: dq 706
const9: dq 73.19
const10: db `o`, 0
const11: db `p`, 0
section .text
b:
_b:
push rbp
mov rbp, rsp
push rdi
mov rax, [rel const2]
push rax
pop rax
add rsp, 8
pop rbp
ret
sub rsp, 8
sub rsp, 8
mov r10, [r12 - 6]
mov [rsp + 0], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
movsd xmm1, [rsp]
add rsp, 8
pxor xmm0, xmm0
subsd xmm0, xmm1
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _tan
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _asin
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 16
mov r10, [r12 - - 2]
mov [rsp + 8], r10
mov r10, [r12 - - 6]
mov [rsp + 0], r10
sub rsp, 8
mov r10, [rbp - 2]
mov [rsp + 0], r10
pop rax
neg rax
push rax
pop rax
add rsp, 32
pop rbp
ret
sub rsp, 8
mov r10, [r12 - - 6]
mov [rsp + 0], r10
pop rax
add rsp, 32
pop rbp
ret
c:
_c:
push rbp
mov rbp, rsp
sub rsp, 8
mov r10, [r12 - 6]
mov [rsp + 0], r10
movsd xmm0, [rsp]
add rsp, 8
call _cos
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _tan
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _atan
sub rsp, 8
movsd [rsp], xmm0
mov rdi, 8
sub rsp, 8
call _jpl_alloc
add rsp, 8
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 8
push rax
mov rax, 1
push rax
sub rsp, 8
mov r10, [r12 - 6]
mov [rsp + 0], r10
movsd xmm0, [rsp]
add rsp, 8
add rsp, 16
pop rbp
ret
sub rsp, 8
mov r10, [r12 - 6]
mov [rsp + 0], r10
movsd xmm0, [rsp]
add rsp, 8
add rsp, 16
pop rbp
ret
sub rsp, 8
mov r10, [r12 - 6]
mov [rsp + 0], r10
movsd xmm0, [rsp]
add rsp, 8
call _sin
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
sub rsp, 8
mov r10, [r12 - - 6]
mov [rsp + 0], r10
pop rdi
call _to_float
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _asin
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
cmpltsd xmm0, xmm1
movq rax, xmm0
and rax, 1
push rax
pop rax
xor rax, 1
push rax
pop rax
xor rax, 1
push rax
pop rax
cmp rax, 0
jne .jump1
lea rdi, [rel const3]
call _fail_assertion
.jump1:
sub rsp, 8
mov r10, [r12 - 6]
mov [rsp + 0], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
movsd xmm0, [rsp]
add rsp, 8
add rsp, 16
pop rbp
ret
d:
_d:
push rbp
mov rbp, rsp
sub rsp, 16
mov r10, [r12 - - 2]
mov [rsp + 8], r10
mov r10, [r12 - - 6]
mov [rsp + 0], r10
mov r10, [rsp - 8]
mov [rsp - 8], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
mov r10, [rsp - 8]
mov [rsp - 8], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
sub rsp, 16
mov r10, [r12 - - 2]
mov [rsp + 8], r10
mov r10, [r12 - - 6]
mov [rsp + 0], r10
mov rax, [rel const4]
push rax
pop rax
xor rax, 1
push rax
pop rax
cmp rax, 0
jne .jump2
lea rdi, [rel const5]
call _fail_assertion
.jump2:
sub rsp, 16
mov r10, [rbp - 6]
mov [rsp + 8], r10
mov r10, [rbp - 2]
mov [rsp + 0], r10
sub rsp, 8
mov r10, [r12 - 6]
mov [rsp + 0], r10
movsd xmm0, [rsp]
add rsp, 8
call _exp
sub rsp, 8
movsd [rsp], xmm0
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
movsd xmm0, [rsp]
add rsp, 8
call _sqrt
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _acos
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
add rsp, 48
pop rbp
ret
i:
_i:
push rbp
mov rbp, rsp
push rdi
sub rsp, 8
sub rsp, 8
mov r10, [r12 - 2]
mov [rsp + 0], r10
movsd xmm0, [rsp]
add rsp, 8
call _sqrt
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _to_int
add rsp, 8
push rax
sub rsp, 8
mov r10, [r12 - 8]
mov [rsp + 0], r10
sub rsp, 8
mov r10, [rbp - - 2]
mov [rsp + 0], r10
pop rax
pop r10
cmp rax, r10
setg al
and rax, 1
push rax
pop rdi
call _b
push rax
pop rax
pop r10
cmp rax, r10
setle al
and rax, 1
push rax
pop rax
xor rax, 1
push rax
pop rax
cmp rax, 0
jne .jump4
sub rsp, 8
lea rdi, [rel const10]
call _fail_assertion
add rsp, 8
.jump4:
add rsp, 0
add rsp, 0
sub rsp, 16
mov r10, [r12 - - 2]
mov [rsp + 8], r10
mov r10, [r12 - - 6]
mov [rsp + 0], r10
sub rsp, 16
mov r10, [rbp - 4]
mov [rsp + 8], r10
mov r10, [rbp - 4]
mov [rsp + 0], r10
sub rsp, 8
sub rsp, 8
mov r10, [r12 - - 6]
mov [rsp + 0], r10
pop rdi
call _to_float
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _sin
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _exp
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm1, [rsp]
add rsp, 8
pxor xmm0, xmm0
subsd xmm0, xmm1
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
add rsp, 40
pop rbp
ret
j:
_j:
push rbp
mov rbp, rsp
push rdi
push rsi
sub rsp, 8
movsd [rsp], xmm0
push rdx
call _c
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _sin
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _acos
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _to_int
push rax
mov rdi, 8
sub rsp, 8
call _jpl_alloc
add rsp, 8
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 8
push rax
mov rax, 1
push rax
sub rsp, 8
mov r10, [r12 - 4]
mov [rsp + 0], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
pop rax
cmp rax, 0
jne .jump5
lea rdi, [rel const11]
call _fail_assertion
.jump5:
sub rsp, 16
mov r10, [r12 - - 2]
mov [rsp + 8], r10
mov r10, [r12 - - 6]
mov [rsp + 0], r10
sub rsp, 16
mov r10, [r12 - - 2]
mov [rsp + 8], r10
mov r10, [r12 - - 6]
mov [rsp + 0], r10
add rsp, 0
mov rdi, 0
call _jpl_alloc
add rsp, 0
push rax
mov rax, 1
push rax
mov r10, [rsp - 8]
mov [rsp - 8], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
mov rax, [rbp - 8]
mov r10, [rsp + 8]
mov [rax + 8], r10
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 96
pop rbp
ret
l:
_l:
push rbp
mov rbp, rsp
sub rsp, 8
mov r10, [r12 - 4]
mov [rsp + 0], r10
pop rax
cmp rax, 0
jne .jump6
lea rdi, [rel const10]
call _fail_assertion
.jump6:
sub rsp, 8
mov r10, [r12 - 6]
mov [rsp + 0], r10
sub rsp, 8
call _d
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _atan
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
call _pow
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _to_int
push rax
sub rsp, 8
mov r10, [r12 - 4]
mov [rsp + 0], r10
pop rax
cmp rax, 0
jne .jump7
sub rsp, 8
lea rdi, [rel const11]
call _fail_assertion
add rsp, 8
.jump7:
mov rax, [rel const4]
push rax
pop rax
cmp rax, 0
jne .jump8
sub rsp, 8
lea rdi, [rel const11]
call _fail_assertion
add rsp, 8
.jump8:
sub rsp, 8
call _c
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _atan
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _acos
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
add rsp, 8
pop rbp
ret
jpl_main:
_jpl_main:
push rbp
mov rbp, rsp
push r12
mov r12, rbp
sub rsp, 8
mov rax, [rel const0]
push rax
movsd xmm0, [rsp]
add rsp, 8
call _cos
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _acos
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
sub rsp, 8
mov r10, [rbp - - 6]
mov [rsp + 0], r10
pop rdi
call _to_float
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _atan
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
mulsd xmm0, xmm1
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _acos
sub rsp, 8
movsd [rsp], xmm0
mov rax, [rel const1]
push rax
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
call _pow
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
mov r10, [rbp - - 6]
mov [rsp + 0], r10
pop rax
neg rax
push rax
sub rsp, 8
mov rax, [rel const6]
push rax
movsd xmm0, [rsp]
add rsp, 8
call _to_int
add rsp, 8
push rax
pop rax
pop r10
cmp r10, 0
jne .jump3
lea rdi, [rel const7]
call _fail_assertion
.jump3:
cqo
idiv r10
push rax
pop rax
neg rax
push rax
mov rax, [rel const8]
push rax
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
mov rax, [rel const4]
push rax
pop rdi
call _b
push rax
pop rax
neg rax
push rax
pop rax
pop r10
add rax, r10
push rax
pop rax
pop r10
cmp rax, r10
setle al
and rax, 1
push rax
pop rax
xor rax, 1
push rax
mov rax, [rel const9]
push rax
sub rsp, 16
mov r10, [rbp - - 2]
mov [rsp + 8], r10
mov r10, [rbp - - 6]
mov [rsp + 0], r10
mov r10, [rsp - 8]
mov [rsp - 8], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
mov r10, [rsp - 8]
mov [rsp - 8], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
call _get_time
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
mov r10, [rbp - 2]
mov [rsp + 0], r10
call _get_time
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp + 8]
subsd xmm0, xmm1
call _print_time
add rsp, 56
pop r12
pop rbp
ret
