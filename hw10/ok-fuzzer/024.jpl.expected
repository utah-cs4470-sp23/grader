global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float
section .data
const0: dq 462
const1: dq 53.48
const2: dq 26.99
const3: dq 26.39
const4: dq 99.44
const5: dq 665
const6: db `mod by zero`, 0
const7: dq 295
const8: dq 1
const9: dq 56.97
const10: dq 4.68
const11: db `e`, 0
const12: dq 61.85
const13: dq 52.45
const14: dq 32.43
const15: dq 3.16
const16: db `q`, 0
const17: dq 290
const18: dq 506
const19: db `divide by zero`, 0
section .text
a:
_a:
push rbp
mov rbp, rsp
sub rsp, 16
mov r10, [rbp - - 6]
mov [rsp + 8], r10
mov r10, [rbp - - 2]
mov [rsp + 0], r10
mov r10, [rsp - 8]
mov [rsp - 8], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
mov rax, [rel const0]
push rax
pop rdi
call _to_float
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _acos
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _sqrt
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _asin
sub rsp, 8
movsd [rsp], xmm0
mov rdi, 8
sub rsp, 8
call _jpl_alloc
add rsp, 8
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 8
push rax
mov rax, 1
push rax
sub rsp, 16
mov r10, [rbp - - 6]
mov [rsp + 8], r10
mov r10, [rbp - - 2]
mov [rsp + 0], r10
sub rsp, 16
mov r10, [rbp - - 2]
mov [rsp + 8], r10
mov r10, [rbp - - 6]
mov [rsp + 0], r10
sub rsp, 8
mov r10, [rbp - 4]
mov [rsp + 0], r10
pop rdi
call _to_float
sub rsp, 8
movsd [rsp], xmm0
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
movsd xmm0, [rsp]
add rsp, 8
call _sin
sub rsp, 8
movsd [rsp], xmm0
movsd xmm1, [rsp]
add rsp, 8
pxor xmm0, xmm0
subsd xmm0, xmm1
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
add rsp, 64
pop rbp
ret
c:
_c:
push rbp
mov rbp, rsp
mov rax, [rel const5]
push rax
sub rsp, 8
mov r10, [rbp - - 6]
mov [rsp + 0], r10
pop rax
pop r10
cmp r10, 0
jne .jump1
lea rdi, [rel const6]
call _fail_assertion
.jump1:
cqo
idiv r10
mov rax, rdx
push rax
sub rsp, 8
mov r10, [r12 - - 6]
mov [rsp + 0], r10
mov rax, [rel const7]
push rax
pop rax
pop r10
imul rax, r10
push rax
pop rax
pop r10
imul rax, r10
push rax
sub rsp, 16
mov r10, [r12 - - 2]
mov [rsp + 8], r10
mov r10, [r12 - - 6]
mov [rsp + 0], r10
mov rax, [rel const8]
push rax
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
pop rax
xor rax, 1
push rax
mov rax, [rel const8]
push rax
pop rax
xor rax, 1
push rax
pop rax
add rsp, 32
pop rbp
ret
d:
_d:
push rbp
mov rbp, rsp
mov rax, [rel const9]
push rax
movsd xmm0, [rsp]
add rsp, 8
call _log
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _tan
sub rsp, 8
movsd [rsp], xmm0
mov rdi, 8
sub rsp, 8
call _jpl_alloc
add rsp, 8
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 8
push rax
mov rax, 1
push rax
sub rsp, 16
mov r10, [r12 - - 2]
mov [rsp + 8], r10
mov r10, [r12 - - 6]
mov [rsp + 0], r10
sub rsp, 8
mov r10, [rbp - 6]
mov [rsp + 0], r10
sub rsp, 8
mov rax, [rel const10]
push rax
movsd xmm0, [rsp]
add rsp, 8
call _acos
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _acos
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _acos
sub rsp, 8
movsd [rsp], xmm0
movsd xmm1, [rsp]
add rsp, 8
pxor xmm0, xmm0
subsd xmm0, xmm1
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _atan
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
add rsp, 40
pop rbp
ret
m:
_m:
push rbp
mov rbp, rsp
push rdi
mov rax, [rel const8]
push rax
pop rax
cmp rax, 0
jne .jump3
sub rsp, 8
lea rdi, [rel const16]
call _fail_assertion
add rsp, 8
.jump3:
sub rsp, 8
mov r10, [r12 ]
mov [rsp + 0], r10
pop rax
neg rax
push rax
mov rax, [rel const17]
push rax
pop rax
neg rax
push rax
pop rax
pop r10
cmp rax, r10
setle al
and rax, 1
push rax
pop rax
cmp rax, 0
jne .jump4
sub rsp, 8
lea rdi, [rel const16]
call _fail_assertion
add rsp, 8
.jump4:
sub rsp, 8
mov r10, [r12 ]
mov [rsp + 0], r10
mov rax, [rel const18]
push rax
pop rax
pop r10
cmp r10, 0
jne .jump5
sub rsp, 8
lea rdi, [rel const19]
call _fail_assertion
add rsp, 8
.jump5:
cqo
idiv r10
push rax
pop rax
neg rax
push rax
sub rsp, 8
mov r10, [r12 - 2]
mov [rsp + 0], r10
pop rax
pop r10
cmp rax, r10
sete al
and rax, 1
push rax
sub rsp, 8
mov r10, [r12 ]
mov [rsp + 0], r10
sub rsp, 8
mov r10, [rbp - 8]
mov [rsp + 0], r10
pop rax
xor rax, 1
push rax
pop rax
add rsp, 24
pop rbp
ret
jpl_main:
_jpl_main:
push rbp
mov rbp, rsp
push r12
mov r12, rbp
sub rsp, 8
mov rax, [rel const1]
push rax
movsd xmm0, [rsp]
add rsp, 8
call _sqrt
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _atan
sub rsp, 8
movsd [rsp], xmm0
sub rsp, 8
mov rax, [rel const2]
push rax
mov rax, [rel const3]
push rax
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
call _atan2
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _log
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
call _fmod
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _asin
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
mov rax, [rel const4]
push rax
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
cmplesd xmm1, xmm0
movq rax, xmm1
and rax, 1
push rax
mov rax, [rel const8]
push rax
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
sub rsp, 8
mov r10, [rbp - 6]
mov [rsp + 0], r10
pop rax
pop r10
cmp rax, r10
sete al
and rax, 1
push rax
pop rax
cmp rax, 0
jne .jump2
lea rdi, [rel const11]
call _fail_assertion
.jump2:
mov rax, [rel const12]
push rax
sub rsp, 16
mov r10, [rbp - - 2]
mov [rsp + 8], r10
mov r10, [rbp - - 6]
mov [rsp + 0], r10
mov r10, [rsp - 8]
mov [rsp - 8], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
mov r10, [rsp - 8]
mov [rsp - 8], r10
mov r10, [rsp ]
mov [rsp ], r10
add rsp, 0
sub rsp, 8
mov rax, [rel const13]
push rax
movsd xmm0, [rsp]
add rsp, 8
call _acos
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
call _sin
add rsp, 8
sub rsp, 8
movsd [rsp], xmm0
movsd xmm1, [rsp]
add rsp, 8
pxor xmm0, xmm0
subsd xmm0, xmm1
sub rsp, 8
movsd [rsp], xmm0
mov rax, [rel const14]
push rax
movsd xmm0, [rsp]
add rsp, 8
call _log
sub rsp, 8
movsd [rsp], xmm0
mov rdi, 8
sub rsp, 8
call _jpl_alloc
add rsp, 8
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 8
push rax
mov rax, 1
push rax
sub rsp, 8
mov r10, [rbp ]
mov [rsp + 0], r10
pop rax
neg rax
push rax
mov rdi, 8
sub rsp, 8
call _jpl_alloc
add rsp, 8
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 8
push rax
mov rax, 1
push rax
call _a
add rsp, 16
add rsp, 16
sub rsp, 8
movsd [rsp], xmm0
movsd xmm0, [rsp]
add rsp, 8
movsd xmm1, [rsp]
add rsp, 8
cmplesd xmm0, xmm1
movq rax, xmm0
and rax, 1
push rax
mov rdi, 8
call _jpl_alloc
mov r10, [rsp + 0]
mov [rax + 0], r10
add rsp, 8
push rax
mov rax, 1
push rax
sub rsp, 16
mov r10, [rbp - - 2]
mov [rsp + 8], r10
mov r10, [rbp - - 6]
mov [rsp + 0], r10
mov rax, [rel const15]
push rax
add rsp, 72
pop r12
pop rbp
ret
