fn f() : int {
   return 4
}
show f()

fn f() : float {
   return 4.0
}
show f()

fn f() : {} {
   return {}
}
show f()

// Implicit return
fn f() : {} {
   assert true, ""
}
show f()

fn f() : int[] {
    return [1, 2, 3]
}
show f()

// Testing padding
let a = 8
fn f() : int[] {
    return [1, 2, 3]
}
show f()

fn f() : {int} {
    return {1}
}
show f()

fn f() : {int, int} {
    return {1, 2}
}
show f()

fn f() : {int, int, int} {
    return {1, 2, 3}
}
show f()

fn f(a : int) : int {
    return 1
}
show f(2)

fn f(a : int) : int {
    return a
}
show f(2)

fn f(a : int) : int {
    return a
}
show f(2)

fn f(a : int, b : int) : int {
    return a + b
}
show f(2, 3)

fn f(a : int, b : int, c : int, d : int, e : int, g : int) : int {
    return a + b + c + d + e + g
}
show f(1, 2, 3, 4, 5, 6)

fn f(a : float) : int {
    return to_int(a)
}
show f(1.0)

fn f(a : float) : float {
    return a
}
show f(1.0)

fn f(a : float, b : float) : float {
    return a + b
}
show f(1.0, 2.0)

fn f(a : float, b : float, c : float, d : float, e : float, g : float, h : float, i : float) : float {
   return a + b + c + d + e + i + g + h
}
show f(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0)

fn f(a : float, b : int) : float {
   return a + to_float(b)
}
show f(1.0, 2)

fn f(a : int, b : float) : int {
   return a + to_int(b)
}
show f(1, 2.0)

fn f(a : int, b : float) : int {
   return a + to_int(b)
}
show f(1, 2.0)

fn f(a : int, b : float, c : int, d : float, e : int, i : int, g : float, h : float) : int {
   return a + c + e + i + to_int(b + d + g + h)
}
show f(1, 2.0, 3, 4.0, 5, 6, 7.0, 8.0)

fn f({}) : int {
   return 4
}
show f({})

fn f({}, {}, {}) : int {
   return 4
}
show f({}, {}, {})

fn f(a : int, {}, b : int) : int {
   return a + b
}
show f(13, {}, 21)

fn f({a : int}) : int {
   return a
}
show f({13})

fn f({a : int, b : int}) : int {
   return a + b
}
show f({13, 14})

fn f({a : int}, {b : int}) : int {
   return a + b
}
show f({13}, {14})

fn f({a : int}, {b : int}) : int {
   return a + b
}
show f({13}, {14})


fn f({a : int}, {b : int}) : {int, int} {
   return {a, b}
}
show f({13}, {14})

fn f({a : int}, {b : int}, c : int) : {int, int} {
   return {c, a}
}
show f({13}, {14}, 17)

fn f(d : int, {a : int}, {b : int}, c : int) : {int, int} {
   return {c, d}
}
show f(1, {13}, {14}, 17)

fn f(a[W, H] : int[,]) : int[,] {
   return a
}

fn f(a[W, H] : int[,]) : int {
   return W + H
}

let x = 1
fn f(d : int) : int {
   return x + d
}
show f(13)

read image "a.png" to x[W, H]
fn f(d : int) : int {
   return W * H + d
}
show f(13)

fn f(d : int) : int {
   assert d > 0, "woops"
   return 3
}
show f(13)

fn f(d : int) : {} {
   assert d > 0, "woops"
}
show f(13)

fn f(d : int) : int {
   let x = d * d
   return x + d
}
show f(13)

fn f(d : int) : {} {
   let x = d * d
}
show f(13)

fn f(d : int) : int {
   let x = d * d
   let y = {x, x}
   let {z, w} = y
   return z + w
}
show f(13)

fn f() : int[,,,,,] {
   return f()
}
show f()
