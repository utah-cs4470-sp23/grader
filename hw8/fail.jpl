type a = 1

type a = a

type a = b
type b = a

type a = a[]

show sin([1, 2]{0})

show asdfasdf()

let a = 1
show a()

type a = int
show a()

show cos(1.0, 2.0)

show pow(1.0)

show sin(1)

show cos([1, 2, 3])

fn sin(a : float) : float {
   return a
}

fn argnum(a : float) : float {
   return a
}

fn f() : int {
   return [1, 2, 3]{0}
}

fn f() : float {
   assert 1, ""
   return 1.0
}

fn f() : float {
   let a[b] = 1
   return 1.0
}

fn f() : int {
   return 1.0
}

fn f() : float {
   return to_int(f())
}

fn f({a : int, a : int}) : int {
   return 1
}

fn f(a[a] : int[]) : int {
   return a[0]
}

fn f(a : int) : int {
   return a
}
show a

fn f() : int {
   assert true, ""
}

fn f() : {int, float} {
   assert true, ""
}

fn f() : {} {
   return 1
}

fn f() : int {
   let x = 7
   return x
}
show x
