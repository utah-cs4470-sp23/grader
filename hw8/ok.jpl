type a = int

type a = int
type b = a

type a = int
type b = a[]

type a = int
type b = a[]

type a = int
type b = {a, a}

show sin(1.0)

show sqrt(1.0)
show exp(1.0)
show sin(1.0)
show cos(1.0)
show tan(1.0)
show asin(1.0)
show acos(1.0)
show atan(1.0)
show log(1.0)

show pow(1.0, 2.0)

show pow(1.0, 2.0)
show atan2(1.0, 2.0)

show to_int(1.0)

show to_float(12)

fn f() : int {
   return 1
}
show f()

fn f(a : int) : int {
   return a
}
show f(1)

fn f(a : int, b : int) : int {
   return a + b
}
show f(1, 2)

fn f(a[b] : int[]) : int {
   return a[b / 2]
}

fn f({a : int, b : int}) : int {
   return a - b
}
show f({1, 2})

fn f({}) : int {
   return 1
}
show f({})


type a = int
fn f() : a {
   return 1
}
show f()

type a = int
type b = a[]
fn f() : b {
   return [1]
}
show f()

type a = int
fn f(b : a) : int {
   return b
}
show f(3)

type a = int
type c = a
fn f(b : a) : c {
   return b
}
show f(7)

fn f() : int {
   return f()
}
show f()

fn f(a : int) : int {
   return f(a / 2) + 1
}
show f(8)

fn f() : int {
   assert true, ""
   return 1
}

fn f() : int {
   let x = 7
   return x
}

fn f() : int {
   let a[b] = [1, 2, 3]
   return b
}

fn f() : {} {
   assert true, ""
}
