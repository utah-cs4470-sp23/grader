fn a(b : int, c : float) : int {
  assert true, "d"
  let d = (! ((to_int(to_float(886)) - [argnum][argnum]) > (if [true][576] then (b * 125) else argnum)))
  let {} = (if d then (if (! d) then (array[e : (sum[e : 208] e), f : b, g : b] {}) else (array[e : (sum[e : b] argnum), f : (- argnum), g : argnum] {})) else {(array[e : argnum, f : 914, g : 448] {}), false, args}{0})[(args[992] - argnum), (b * to_int((sum[e : b, f : (- 690), g : 60] tan(23.17)))), argnum]
  let e[f, g, h] = (array[e : (array[e : (- (b / argnum)), f : (array[e : argnum, f : argnum] f)[(- b), a(b, 13.33)]] f)[(sum[e : a((argnum * b), c), f : 439, g : (- argnum)] {e}{0}), (if true then a(124, c) else to_int(exp(6.21)))], f : (sum[e : (if d then argnum else a(argnum, (78.8 * 59.88))), f : b, g : ((array[e : argnum, f : b] argnum)[(if d then 408 else argnum), b] / (sum[e : (- b), f : 623, g : b] (sum[h : f, i : f, j : b] j)))] (if (if (false || d) then (b < g) else d) then (if d then f else argnum) else to_int(acos(c)))), g : (if ((b < 391) || ((if d then b else argnum) < 401)) then (sum[e : (- a(b, c)), f : (argnum * to_int(c))] {b}{0}) else 837)] sin(log(atan2((sum[h : b, i : argnum] c), 7.95))))
  return 653
}

let b = (if (((sum[b : 860, c : to_int(4.63)] b) / (array[b : 899] argnum)[(argnum + argnum)]) > ((if (true != false) then 722 else argnum) * 581)) then sin((- to_float((- argnum)))) else log(asin(atan2(atan(97.6), cos(0.7)))))
assert false, "c"
read image "c.png" to c

time let {} = (if (array[d : argnum, e : 626] (e > d))[argnum, a((- 340), tan(b))] then {} else (if (if (if true then true else true) then (b < b) else (! true)) then (if false then {} else {}) else {args, {}}{1}))

fn d(e : bool[,]) : float {
  let f = d({atan(exp(77.77)), e}{1})
  return b
  let {g} = {(if (if true then (! true) else (if false then false else false)) then {b} else {cos(f)})}{0}
  let h = ((sum[h : 520, i : argnum, j : {e, (- 296)}{1}] 6.48) >= log(g))
  return atan2({{c, argnum, f}}{0}{2}, {sin((sum[i : 931, j : argnum, k : argnum] b))}{0})
}

let e = to_float(to_int(b))
let f = args
let g[h] = (array[g : to_int(71.07), h : {978, argnum}{0}, i : argnum] (if true then [args] else (array[j : g] f)))[to_int(e), 399, (array[g : (if false then argnum else 662), h : argnum, i : (755 / 479)] (h - argnum))[argnum, to_int(atan2(e, 79.92)), to_int((sum[g : argnum, h : 212] b))]][argnum]
let i[j] = (array[i : (if (if false then (! (! false)) else (if (906 >= argnum) then (b != e) else (e > e))) then h else ((array[i : argnum, j : 836, k : h] j)[to_int(4.24), (sum[i : 826, j : h] 263), argnum] + argnum))] (array[j : (if false then a(argnum, 2.03) else (38 % i)), k : (sum[j : (argnum / i)] (sum[k : j, l : i, m : i] i)), l : argnum] f)[argnum, a(h, atan2(acos(e), asin(e))), {(sum[j : 41, k : 807] h), (- 604)}{0}])
write image {(if true then (array[k : h] c) else (array[k : j] c))}{0}[{log(78.19), {340, h, h}, sqrt(e)}{1}{1}] to "k.png"

let {k[l]} = {(array[k : (if (array[k : h] true)[(h - j)] then (sum[k : j, l : 447] h) else (- (if false then 419 else h)))] to_float(h))}
