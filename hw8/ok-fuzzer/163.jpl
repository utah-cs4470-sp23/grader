let {} = {}
let a = atan2(atan(acos(sin(tan(97.66)))), atan(sqrt(sin(cos(54.58)))))
let b = (array[b : ((if (false && false) then {false, 158} else {true, argnum}){1} - (if true then (array[b : 878] 967) else args)[(sum[b : 584, c : (argnum - argnum), d : (sum[b : 762, c : argnum] b)] b)]), c : (- (- (sum[b : argnum, c : (80 % argnum)] argnum))), d : argnum] (482 * to_int(sqrt(sqrt(34.65)))))
fn c(d : {float,float}[,,], { e[f, g] : int[,], { h : int }, { { i : {bool[,],bool} }, { j : {}, k[l, m] : float[][,] } } }, n : int) : int {
  let o = atan((if ((if true then true else true) || (! false)) then [30.37, (- a), atan(41.12)] else [(- a), atan(a), atan(60.2)])[(array[o : (if true then n else n), p : (sum[o : 769, p : n] o)] h)[h, (- m)]])
  return g
  let p[q, r, s] = (array[p : argnum] (if (false && false) then {d} else {d}))[(sum[p : (argnum / m), q : 385] (if true then 437 else l))]{0}
  assert {(498 <= (- argnum)), f}{0}, "t"
  return n
}

let {} = {}
let d = (true || {(! true), false, b}{1})
let e = atan(log(cos(log(sin(a)))))
let f[g, h] = (array[f : {{argnum}}{0}{0}, g : argnum] args)
assert (if (atan2(to_float(b[argnum, 382, g]), e) >= (sum[i : to_int(atan(40.03)), j : g] (sum[k : (- g)] asin(e)))) then (tan(to_float((- 187))) == acos(acos(61.59))) else d), "i"
assert false, "i"
let i = a
print "j"

