fn a() : float {
  let {b[c, d], e[f, g, h]} = (array[b : argnum, c : 638, d : (- (array[b : argnum, c : argnum] argnum)[(sum[b : argnum] b), to_int(a())])] (if (if false then false else (argnum < 330)) then {(array[e : 62, f : argnum] f), (array[e : c, f : argnum, g : argnum] b)} else {(array[e : 439, f : 242] e), (array[e : c, f : c, g : b] e)}))[to_int(to_float((sum[b : (sum[b : argnum, c : argnum, d : argnum] c), c : 918] c))), (if (! (if (a() == 78.6) then (891 == argnum) else false)) then (to_int((if true then a() else a())) % (if true then (55 % 521) else 526)) else argnum), (if (if (atan(a()) > a()) then (sin(a()) > pow(67.44, a())) else ((if true then 993 else 337) <= 157)) then (- ((545 + 772) - to_int(16.73))) else argnum)]
  assert ((if (! false) then {(true || false), c} else {(argnum == f), b[d, d]}){0} || true), "i"
  return pow(exp((sum[i : d, j : f] 67.03)), atan2((sum[i : c, j : to_int((- a())), k : g] sqrt(59.49)), asin(to_float(argnum))))
  let i = atan(cos(cos(sqrt(atan(61.64)))))
  return sin((((7.17 % (- 58.93)) - (if false then a() else i)) * (- sqrt((sum[j : c, k : 110, l : c] i)))))
}

let b = sqrt((asin(cos((- 74.56))) - a()))
let {c, {}} = (if ((if (365 < (sum[c : argnum] argnum)) then (sum[c : 174, d : argnum, e : (- argnum)] tan(a())) else sqrt(27.4)) == asin(pow((sum[c : 862] b), asin(b)))) then (if (if (! false) then (! false) else (if (! true) then false else true)) then {asin(tan(a())), (if true then (if true then {} else {}) else {})} else (array[c : argnum, d : 42, e : (sum[c : 2] c)] {b, {}})[to_int(atan(21.91)), (sum[c : 265] args[argnum]), to_int(a())]) else (if (to_float(argnum) != atan(a())) then {sin((- b)), (array[c : 797, d : 304, e : argnum] {})[43, (- 712), 567]} else {args, {a(), {}}}{1}))
assert true, "d"
let {} = {(array[d : to_int(b), e : 823, f : (- 130)] {})[(sum[d : (sum[d : argnum] d)] argnum), (sum[d : argnum, e : (sum[d : argnum, e : argnum] e), f : 449] d), argnum], sqrt(sqrt((- a())))}{0}
type d = float[,]
read image "e.png" to e

let {f, {g, h}, {}} = (array[f : (- argnum), g : (sum[f : (- to_int(13.18))] f), h : 14] {acos(tan(60.29)), {args, to_float(g)}, (if false then {} else {})})[(- {asin(b), b, to_int(c)}{2}), to_int(atan2(cos(asin(a())), sqrt(a()))), (- to_int(30.96))]
let {i[j, k, l], m, {}} = {(array[i : (sum[i : (- to_int(16.1)), j : {e, 977, 434}{1}] i), j : ((- (585 / 907)) + g[(sum[i : 949] argnum)]), k : ((sum[i : (- argnum), j : (sum[i : argnum] 846)] (sum[k : argnum, l : 996, m : argnum] m)) - to_int(asin(b)))] i), (! ((sin(a()) < sqrt(b)) || (array[i : argnum] true)[argnum])), {(array[i : 428, j : 934, k : argnum] {})[(if true then argnum else argnum), 855, 913]}{0}}
let {{n, {o[p, q], {r[s, t]}}, {u[v, w, x], {y}}}} = {{(m || (atan2(h, a()) <= (sum[n : argnum, o : 402, p : k] c))), {e, {(array[n : l, o : k] l)}}, {i, {args}}}}
let z = l
fn A(B : int, { C[D, E, F] : float[,,], G[H, I] : int[,], J[K] : int[] }, L : bool) : {{bool,int}} {
  return A(B, [{(if L then C else C), (array[M : z, N : p] I), J}, {(array[M : E, N : q, O : j] a()), G, (array[M : l] t)}, (if m then {C, r, J} else {C, G, g})][argnum], L)
  let M[N, O] = G
  let {} = {}
  return A(O, {{C, (if L then G else G), (if false then J else y)}}{0}, (q == (- O)))
  return {A(D, {C, G, [O, E]}, m)}{0}
}

