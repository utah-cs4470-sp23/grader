fn a() : int[] {
  let b = exp(sin(acos(atan((- 40.14)))))
  let c[d, e] = (array[c : (- {(- 47.86), (argnum - 415), (- 298)}{1}), d : (array[c : argnum, d : (sum[c : argnum, d : 69] argnum), e : argnum] {b, d})[to_int(tan(16.24)), argnum, to_int(tan(75.58))]{1}] [a(), args, (if (exp(b) <= cos(b)) then {a()}{0} else (if false then a() else a()))])
  let f = 78.01
  let g = sqrt(sqrt(cos((if false then 51.26 else atan(f)))))
  return (if (! (if (317 >= e) then (! false) else (false && false))) then {a()} else {{a()}, asin(g)}{0}){0}
}

let b = (array[b : (sum[b : to_int((log(24.68) * (if false then 11.45 else 68.82))), c : (to_int(log(38.46)) * (- 742)), d : (sum[b : argnum] argnum)] (sum[e : (- (- 287)), f : c] (array[g : d, h : c, i : b] h)[(if true then e else f), b, to_int(97.47)])), c : (if (if false then (true == true) else (false == false)) then (array[b : argnum, c : argnum, d : argnum] argnum) else (array[b : 683, c : (sum[b : argnum] 799), d : argnum] args[argnum]))[(if (argnum <= args[390]) then 196 else (sum[b : argnum, c : 22] (sum[d : argnum, e : argnum, f : c] e))), (sum[b : (430 + (- argnum)), c : (argnum * (- 118)), d : (813 + argnum)] c), (if ((true || false) && (! true)) then (argnum * argnum) else argnum)]] to_float(((if (true && true) then 342 else 645) % to_int((- 84.91)))))
time time let c[d, e] = b


fn f({  }) : {float,float,float} {
  let {g[h, i]} = {(array[g : d] (array[h : argnum, i : g, j : g] c))[(- 422)][d, (if (true && false) then {921}{0} else (if (! true) then (- 702) else (sum[g : argnum, h : e] g))), e]}
  let j[k, l] = (array[j : ((- to_int(64.43)) * (if ((! true) || true) then ((sum[j : h] h) / e) else (h - to_int(18.47)))), k : ((sum[j : (array[j : d] e)[a()[d]], k : {argnum, 157}{1}, l : (sum[j : (- d)] (- d))] l) % 236)] 565)
  let m = f({})
  let n = e
  return m
}

let g[h, i] = c
let j = ((! true) || ((asin((- 36.09)) == sin(acos(3.1))) != (if (pow(42.75, 30.49) >= to_float(e)) then (d == e) else (if true then true else (! true)))))
let k[l] = a()
let {m[n, o, p], {}} = (if (if ((! j) || true) then true else (atan(56.46) > sqrt(89.59))) then {{(array[m : h, n : l, o : argnum] l), {}}} else {{(array[m : 984, n : argnum, o : l] e), {}}}){0}
let {} = {}
let q[r] = [f({})]
fn s(t[u, v] : bool[,][,], w[x, y] : float[][,], { z : int }) : int {
  let A = f({}){0}
  let B = to_float((sum[B : x] (sum[C : (- l), D : r] o)))
  let C[D] = [q, [{exp(B), 18.11, B}]][(- i)]
  let {E, {{}, F[G, H]}, I[J, K, L]} = (array[E : (if (! (if j then false else j)) then x else d)] {205, {{}, b}, m})[(array[E : {v, p, j}{1}] to_int(B))[s((if (j != true) then t else t), w, (if (j != false) then {argnum} else {i}))]]
  return v
}

fn t(u[v] : float[], w : int) : float {
  let x[y, z, A] = (if j then (if true then {p, m} else (if (argnum == v) then {p, m} else {v, m})) else (if (h == o) then (if j then {i, m} else {l, m}) else {l, (array[x : w, y : l, z : e] d)})){1}
  assert true, "B"
  assert (if j then (tan((if true then (- 36.0) else to_float(r))) > tan(pow(log(17.07), g[l, e]))) else (if (! (l == (e + v))) then (if (! j) then [true, j] else [j])[(- k[h])] else (asin(cos(20.09)) <= sin(to_float(p))))), "B"
  let {{B[C]}, D[E, F, G], {H}} = (if ((((! true) && (if true then j else false)) || (! j)) && j) then {{(if false then a() else a())}, x, {atan(52.32)}} else {{{args}, k, w}{0}, (if j then (array[B : v, C : (if false then o else argnum), D : p] l) else (if j then m else x)), (if (! (j != j)) then {log(22.79)} else (if (j == j) then {79.58} else {88.6}))})
  return to_float(E)
}

