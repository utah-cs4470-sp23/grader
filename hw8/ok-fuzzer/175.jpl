write image (if ((array[a : (- argnum), b : (- 784), c : (- 257)] true)[to_int(21.2), (- 509), argnum] && (! ((! false) || (! false)))) then (array[a : (if (sqrt(37.6) <= exp(41.12)) then (if (! true) then argnum else (- 351)) else (if (if true then true else false) then argnum else (if true then argnum else 690))), b : {(argnum * argnum)}{0}] (if (! (! false)) then {68.74, to_float(166), to_float(argnum), exp(55.57)} else {to_float(850), to_float(352), 75.42, 90.31})) else (array[a : (- 248), b : (if ((argnum + 497) == argnum) then 743 else 415)] {atan(to_float(argnum)), (array[c : a, d : argnum] 59.71)[(- argnum), args[argnum]], atan(sin(24.79)), {args, 23.23, false}{1}})) to "a.png"

fn a(b : int) : float[,] {
  return (if (((b < 709) != ((true || true) && (! true))) != ((! true) || (argnum == (if false then argnum else argnum)))) then {a((sum[c : b, d : 164] 391)), a(b)}{0} else [a(argnum), (array[c : (if true then argnum else b), d : (b / argnum)] (- 92.92))][{b}{0}])
  assert (if false then ((- acos(atan(68.45))) > log(log(cos(20.12)))) else (! true)), "c"
  let {c, d[e]} = {(array[c : argnum, d : argnum, e : 983] {c, args})}{0}[(if ((25.75 > 92.61) && (! false)) then {argnum, argnum} else {799, (- b)}){0}, (if {to_float(631), 61.89, (true != false)}{2} then (array[c : b] (sum[d : 943, e : c] b))[argnum] else (if true then to_int(68.78) else 690)), (if (! false) then (- (- (- 996))) else argnum)]
  let f = (array[f : b] 826)
  return (if {d[b], {true, c}, args}{1}{0} then (if (tan(to_float(argnum)) > pow(asin(27.63), to_float(e))) then {a(b)}{0} else (array[g : b, h : (705 / e)] a(c))[(array[g : b, h : e] argnum)[c, (argnum - e)], b]) else (if {(! true)}{0} then (array[g : 256, h : 267] a(b))[(b / (- b)), argnum] else (array[g : (- b), h : (- e)] (array[i : argnum, j : 741] 51.74))[(- e), ((- e) % to_int(71.43))]))
}

let b[c, d, e] = (if (! (if (false && true) then (argnum > argnum) else false)) then (if (true && (! false)) then (array[b : 947, c : argnum] (array[d : b, e : c, f : b] c)) else (array[b : 341, c : (sum[b : 919] 730)] (array[d : 915, e : b, f : argnum] argnum))) else (array[b : {799, argnum}{1}, c : 388] (array[d : c, e : argnum, f : c] (- c))))[[argnum, (sum[b : 95, c : (- 119), d : 974] (- b)), (sum[b : (- argnum), c : (- argnum), d : argnum] c)][(- (sum[b : (argnum + 37), c : 42, d : argnum] c))], argnum]
let f[g] = [(if (! false) then {[argnum], args} else (if (argnum != argnum) then {args, args} else {args, args})){0}]
fn h() : float {
  let {i[j, k]} = {(if true then {80.9} else {h()}){0}, atan2((78.66 % 16.22), sin(h())), {(array[i : g, j : e] [d, d])}}{2}
  let l = atan2((array[l : d, m : {j}{0}, n : (c % c)] h())[e, to_int(sqrt((- 88.06))), g], (- (acos(exp(h())) % atan2(sqrt(h()), exp(14.87)))))
  return (if true then (array[m : k, n : e, o : (sum[m : k, n : g, o : g] c)] {h(), f, c})[((- j) - k), argnum, d] else (array[m : c] {82.98, f, g})[j]){0}
  assert (array[m : (e - j)] {false, a(e)}{0})[e], "m"
  return asin(atan2(sin((sum[m : argnum, n : (if false then c else e), o : 134] l)), sin((- l))))
}

let {i[j, k, l], {}} = (if ((g * g) <= d) then (array[i : c, j : (sum[i : (sum[i : argnum] argnum), j : g] (- i)), k : e] {b, {}}) else (array[i : (- d), j : {argnum, argnum}{1}, k : argnum] {(array[l : j, m : d, n : c] e), {}}))[e, argnum, (- (- c))]
let {m[n, o, p]} = (if (if (((if false then l else j) > j) != (array[m : c] false)[c]) then (if (pow(h(), 65.46) == h()) then [false][c] else false) else (if ((false || false) || false) then (! (argnum != d)) else (if true then (true && false) else true))) then {(array[m : (sum[m : j] (sum[n : l, o : l] e)), n : k, o : k] atan2(sqrt(96.52), pow(h(), 46.17)))} else (if ((array[m : 214] l)[k] == k) then {(array[m : j, n : (if false then c else 964), o : k] h())} else {(array[m : argnum, n : args[l], o : to_int(h())] cos(5.02))}))
time let q = f

assert (((if ((g >= k) != (p < n)) then ((! false) && (j <= g)) else {true}{0}) && (true && (cos(h()) > 49.82))) || (d != (- ((- 400) + o)))), "r"
let r[s, t] = {{a(o), m, a(j)}}{0}{0}
write image (array[u : (- (if (to_float(c) <= h()) then p else o)), v : d] (array[w : (- d)] {h(), 22.48, 91.28, 72.0})[u]) to "u.png"

fn u() : bool {
  assert (if {i, u(), r[p, e]}{1} then (if false then {u()} else {true}) else (if (array[v : k] u())[380] then {false} else {(! u())})){0}, "v"
  let v[w, x, y] = (array[v : e, w : (if {h(), (34.06 >= 93.93), g}{1} then (if ((if u() then o else c) >= 639) then argnum else g) else g), x : s] (if u() then {atan(h())} else {to_float(e)}))
  let {} = (if ((to_int(pow(20.18, h())) % argnum) != n) then (if (to_float(x) <= m[c, n, l]) then {args, (array[z : l, A : o, B : j] x), {}} else {q[x], b, {}}){2} else [(if (h() == h()) then {} else (if false then {} else {})), {}][g])
  let z = atan2(to_float(o), atan2(asin(sqrt(77.46)), (tan(exp(h())) + sin(log(h())))))
  return (u() && (if (u() && (h() == z)) then (array[A : p, B : 7, C : 422] (! u())) else (array[A : n, B : n, C : (n + c)] false))[y, to_int((array[A : w, B : w, C : y] z)[o, d, (k + l)]), g])
}

