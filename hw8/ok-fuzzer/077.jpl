fn a(b : float, c[d, e] : bool[,], f : bool) : float {
  return {(array[g : (sum[g : e, h : e, i : argnum] e)] sin(b)), true}{0}[(- {(argnum + 771), (- argnum)}{0})]
  let {} = {}
  let {{}, {}, {g[h, i, j], k, {}}} = {(if f then {} else {}), {(array[g : d, h : d] {}), b, (array[g : d] argnum)}{0}[{(- argnum)}{0}, (sum[g : (if (if true then f else f) then e else argnum)] d)], {(array[g : argnum, h : 865, i : argnum] c), (array[g : d, h : (if (argnum > 13) then argnum else argnum), i : (if true then argnum else e)] pow(sqrt(b), (- b))), (array[g : (sum[g : argnum, h : 451, i : 921] h), h : argnum] {})[(sum[g : (sum[g : argnum] argnum), h : (e - e)] (226 / h)), {d, e, 772}{1}]}}
  let {} = {}
  return exp(pow(tan(b), pow(log(sin(5.92)), log((if f then b else 63.62)))))
}

let b[c, d, e] = (array[b : argnum, c : (if (if {true}{0} then ((if false then false else false) != (true || false)) else (! (! true))) then to_int({12.92, argnum}{0}) else (194 / to_int(to_float(54)))), d : ({(argnum + 630), (sum[b : argnum, c : 10] c), to_int(56.03)}{0} / (- argnum))] (! {false, 5.13}{0}))
fn f(g[h, i, j] : int[,,], k : float, { { { l : {bool}, { { m : {}, n[o, p, q] : float[,,] }, r[s] : bool[] } }, {  }, t : float }, u : int[][,], v : bool }) : bool {
  let w[x] = (array[w : c] (array[x : h, y : argnum] m))
  assert {99.34, acos(exp(t)), (v != (if true then r[x] else true))}{2}, "y"
  assert (2.22 > (sum[y : (- c), z : (if (! v) then (array[y : 255, z : c] s) else (array[y : p, z : argnum] y))[(if (! v) then s else 216), (sum[y : i, z : (- p), A : (if v then j else o)] (- d))], A : {q}{0}] {sin(k), (z / z), (e - j)}{0})), "y"
  let y = ((h >= s) || {(if true then b else b), exp(t)}{0}[(- (if (h >= d) then 98 else (sum[y : j, z : 350, A : h] h))), (((sum[y : p, z : c, A : p] z) + (- c)) % (if v then q else e)), (- p)])
  return (log(a({62.84, b}{0}, (array[z : e, A : (395 / o)] (! y)), ((k % 54.06) != to_float(e)))) < {exp(atan2(t, t)), (if false then true else l{0})}{0})
}

fn g(h[i, j, k] : {{},int,float}[,,], l : int[,], m : float) : float[,,] {
  let n = (- 84.67)
  assert true, "o"
  return [(if (argnum != 163) then (array[o : k, p : 480, q : argnum] (- 89.31)) else (if (d == c) then (array[o : c, p : i, q : e] m) else g(h, l, 34.56)))][d]
  let {o} = {cos((sum[o : k, p : d, q : argnum] m)), (n <= to_float(e)), {{e}, to_float(j), k}}{2}{0}
  return (array[p : c, q : {(array[p : to_int(m), q : j, r : o] j), ((sum[p : o, q : c] d) * d)}{1}, r : (if b[l[e, argnum], argnum, c] then 824 else (array[p : k, q : i] p)[k, to_int(log(m))])] (atan2(atan(m), tan(asin(m))) * 92.82))
}

time let h = 145

let i = pow((array[i : h, j : e] a((- 35.14), (array[k : e, l : c] true), (! true)))[e, to_int(a(cos(17.13), (array[i : h, j : c] false), (d <= c)))], sqrt(pow(asin(log(80.17)), tan(sin(29.47)))))
fn j() : int {
  return 673
  let k[l, m, n] = (if (if (false && true) then (array[k : 265] (argnum > j())) else [b[d, e, c], false, (argnum != j())])[(if {false}{0} then to_int(acos(i)) else h)] then g((array[k : to_int(atan(i)), l : j(), m : to_int(i)] {{}, argnum, i}), (if ((e != d) != (j() == d)) then (array[k : 858, l : (d / argnum)] j()) else (array[k : d, l : e] (sum[m : argnum, n : h] argnum))), exp(exp(asin(i)))) else g((array[k : e, l : d, m : (- 375)] {{}, l, cos(i)}), (if ((argnum < 440) || (false || false)) then (if (h == j()) then (array[k : argnum, l : c] l) else (array[k : j(), l : 512] l)) else (array[k : (sum[k : d, l : e, m : d] m), l : j()] 68)), (sum[k : to_int(log(52.59))] exp(acos(i)))))
  let o = b[argnum, (- 341), 193]
  let p = [atan(cos(log(i)))][[{argnum}, {e}, {d}][(h * argnum)]{0}]
  return (if (array[q : m, r : m] o)[j(), argnum] then (array[q : j(), r : (sum[q : c] q)] {l, argnum}) else (array[q : h, r : n] {124, m}))[(sum[q : (sum[q : argnum, r : to_int(p), s : h] d), r : (if o then e else j())] j()), d]{1}
}

let {k, l, m[n]} = (if false then {to_int(log(i)), to_int(cos(to_float(j()))), (if (true != false) then {j(), args} else {h, args}){1}} else (if (to_int(log(i)) == j()) then (if false then {676, c, [j(), e, e]} else (if (d > h) then {argnum, d, args} else {h, h, args})) else {{805, h, args}}{0}))
time let o = d

let {} = {c, (if ((e <= d) || true) then {{}}{0} else {l, 962, {}}{2})}{1}
fn p(q : {bool,int}, r : int, s[t, u] : int[,,][,]) : {bool} {
  assert ((if (if (c > r) then (e <= (sum[v : c, w : h] d)) else false) then (if (! true) then (cos(i) / to_float(argnum)) else to_float(812)) else sqrt(atan((sum[v : 494, w : l, x : u] i)))) == exp(sin((- to_float(o))))), "v"
  assert (l > o), "v"
  let v = k
  let w[x, y] = (array[w : (c % c)] [s])[h][(if true then {args} else {args}){0}[(- d)]]
  return (array[z : k, A : {c, j()}{0}, B : e] (array[C : o, D : t] p(q, x, w))[k, l])[(x / 798), {w[k, x], d, (array[z : c, A : k, B : k] c)}{2}[u, (- to_int(atan2(i, i))), (if b[t, c, x] then (array[z : r, A : u] d) else (array[z : argnum, A : v] 208))[r, 629]], l]
}

let {q[r], s[t]} = (array[q : k, r : (if (argnum <= c) then e else (d + e)), s : (array[q : n, r : l] d)[d, to_int((sum[q : h, r : j(), s : argnum] i))]] (if true then (if b[s, n, argnum] then {m, m} else {args, args}) else (if false then {args, args} else {m, args})))[h, o, (if ((false && true) && (h >= k)) then (array[q : l, r : to_int(47.98), s : (sum[q : n] e)] (if true then n else j())) else (array[q : k, r : to_int(i), s : (o % j())] c))[h, k, o]]
