let a = pow(tan(44.77), acos(pow(acos(to_float(argnum)), {84.21}{0})))
let b = ((array[b : {734, false}{0}, c : argnum, d : {argnum}{0}] asin(exp(a)))[(array[b : (- argnum), c : 21] (- b))[(argnum - 52), (sum[b : (- argnum), c : to_int(10.98)] b)], 40, {(- argnum)}{0}] > atan(a))
write image (if false then (if (if b then (array[c : 350] b) else (array[c : 914] b))[(sum[c : 956] c)] then (array[c : (743 + (sum[c : argnum] argnum)), d : {args, b, 494}{2}] {tan(72.23), 60.59, 10.5, sqrt(a)}) else (array[c : (argnum / (sum[c : 141, d : argnum] d)), d : (- (argnum / 501))] {a, to_float(940), cos(59.57), atan(80.97)})) else (array[c : (- argnum)] (array[d : c, e : c] {51.29, 44.97, a, 35.02}))[(- 372)]) to "c.png"

time type c = int[]

fn d(e : bool, f : float) : {float} {
  let g[h, i] = {to_int(atan(53.68)), [(array[g : 537, h : argnum] e)]}{1}[argnum]
  let {j[k, l, m]} = (if (to_int(sqrt(tan(a))) > argnum) then {{(array[j : i, k : h, l : argnum] k), f}{0}} else {{(array[j : h, k : h, l : argnum] j)}, {h, f, f}{2}}{0})
  return {to_float(m)}
  assert (if b then e else (k <= 675)), "n"
  return d(e, (sum[n : 829, o : (array[n : h, o : i, p : l] args)[m, 660, h][i]] (array[p : to_int(a), q : m] log(34.42))[h, (sum[p : argnum, q : (sum[p : h, q : n] i)] l)]))
}

let e = (atan(log(pow(to_float(938), 2.98))) > a)
write image (array[f : (if true then {b, b, 382} else {b, b, argnum}){2}, g : (if (argnum == (604 % 257)) then (- to_int(a)) else argnum), h : argnum] (array[i : (array[i : f, j : g] 462)[(g - f), (- g)], j : f] {a, a, atan2(a, a), a}))[(- args[(- (691 - 160))]), (- ((array[f : 461, g : argnum, h : 566] 235)[(- argnum), (if e then 599 else 727), (sum[f : 168] f)] + (- 247))), (if (! (if (! false) then (! false) else (! b))) then (array[f : (- argnum), g : 499, h : 791] (f / f))[(sum[f : argnum, g : (- 628), h : to_int(31.58)] to_int(73.33)), 142, 450] else argnum)] to "f.png"

let {f[g, h]} = (if e then (if (b || b) then (if e then {(array[f : 254, g : 336] 272)} else {(array[f : argnum, g : 544] argnum)}) else {(array[f : (argnum + argnum), g : (sum[f : 802, g : 566, h : argnum] h)] to_int(29.45))}) else {{(array[f : argnum, g : 834] f)}}{0})
let {i, j[k, l]} = (if (! (cos(a) <= log(sin(a)))) then {{e, f, b}{1}, (if (84.77 > cos(a)) then (array[i : (- 918), j : 885] tan(60.22)) else (array[i : (sum[i : h, j : h] h), j : g] 66.54))} else {(array[i : argnum, j : 101] (sum[k : (- g), l : (argnum / g), m : (if b then i else h)] i)), (if {args, b, f}{1} then (array[i : 316, j : argnum] acos(39.97)) else (array[i : h, j : argnum] exp(a)))})
let m[n, o] = (if e then (if (! (e && true)) then f else (if {b, e}{0} then (array[m : (l + h), n : (- l)] l) else (if (false && true) then i else f))) else (if ((atan(53.99) != sin(61.41)) || e) then (if b then i else i) else (array[m : argnum, n : 941] g)))
fn p() : bool[,,][] {
  let {q[r, s], {t[u]}} = (array[q : g, r : (- (array[q : argnum, r : l, s : l] o)[k, (sum[q : k, r : g] q), (17 % l)]), s : l] {m, {args}})[{(! b), {argnum}}{1}{0}, g, (sum[q : (o - ((- 75) - (sum[q : argnum, r : n] o)))] (if false then {q, h} else {l, q}){0})]
  let {v, w[x, y], z[A, B]} = {a, (array[v : 91, w : g, x : h] (array[y : k, z : s] q))[(- (n % n)), g, g][(if e then f else m)[425, (- o)], to_int(log(asin(7.75)))], (if ((r <= r) || ((b == b) || (s < u))) then q else (if (o >= h) then {q} else {q}){0})}
  assert e, "C"
  let C[D] = (if e then (if (false != b) then {(array[C : x] C)} else {args}) else {(array[C : g] t)[argnum]}){0}
  return [(array[E : to_int(v), F : 579, G : D] e)]
}

let q[r] = (if (! true) then {(k - l), (array[q : g] args)}{1} else {[args, args], sin(99.1), j}{0})[((l % m[g, g]) / to_int(sqrt(log(a))))]
