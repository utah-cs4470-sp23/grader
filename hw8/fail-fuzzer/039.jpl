let a[b] = [sin(sqrt(acos(27.2)))]
let {} = (if ((cos(to_float(argnum)) != tan(sqrt(29.76))) != (! (if (! false) then (true || false) else (true || true)))) then {} else {})
let {{c[d, e]}} = (if (! {(array[c : argnum] 34.64), true, atan2(24.43, 80.08)}{1}) then {{(array[c : (sum[c : b, d : b, e : b] d), d : b] args)}} else {(if (! (true && true)) then {(array[c : argnum, d : argnum] args)} else {(array[c : argnum, d : argnum] args)})})
fn f({ g : bool[,], { h[i] : {bool,{},int}[] } }, j[k, l] : int[,], m : bool) : int {
  let n = {}
  let o[p, q, r] = (if (array[o : (sum[o : i, p : k, q : k] 856), p : argnum, q : argnum] ((p >= l) && (b > k)))[(if g[l, b] then {e} else {b}){0}, (if false then {k, d, 20.88} else {i, l, 53.18}){0}, 624] then (array[o : {(! false), to_float(487), k}{2}, p : l, q : c[k, i][(- 566)]] sqrt(asin(to_float(p)))) else {(array[o : 743, p : to_int(25.13), q : e] (sum[r : argnum] 57.17))}{0})
  let s[t, u] = c
  let v = {false, 298, to_float((- t))}{1}
  return i
}

fn g() : bool {
  let {} = (array[h : d, i : 1000, j : b] (array[k : (sum[k : e] b), l : j, m : i] (if g() then {} else {})))[(- (if (b != 72) then args[d] else b)), (if (! false) then {b} else {b}){0}, {e, argnum, to_int(97.76)}{2}][{true, argnum, {b, d}}{2}{0}, (if (((! true) && (g() || g())) && g()) then (- 753) else (- b)), (if ((sum[h : e] b) > argnum) then g() else (if (false != true) then c[e, d] else [e]))[112]]
  return (log(pow((- to_float(d)), tan(tan(85.98)))) != atan2(to_float(b), log({false, 512, 26.84}{2})))
  let h = tan(cos(tan(sqrt(2.12))))
  assert {(sum[i : (- d), j : 751, k : argnum] sqrt(65.24)), {(if false then argnum else 96), tan(h), true}}{1}{2}, "i"
  return false
}

fn h() : float {
  let {} = (if (! (h() != h())) then (array[i : (sum[i : e, j : argnum] e), j : (- e), k : e] {false, {}}) else (array[i : 937, j : d, k : e] {true, {}}))[(array[i : d, j : (argnum - b)] 516)[((- 513) + (b * b)), (sum[i : argnum] (sum[j : e, k : b] b))], to_int((- (sum[i : 196] 70.83))), argnum]{1}
  let {} = [(array[i : argnum, j : e, k : 807] {})[(sum[i : (if g() then argnum else e)] i), e, e], {to_int(h()), sin(14.1), {}}{2}, (array[i : (if g() then b else argnum), j : e] (if g() then {} else {}))[(e * argnum), (if (g() || g()) then d else to_int(h()))]][e]
  assert (! (array[i : argnum, j : (- b), k : argnum] {false})[b, (182 % argnum), e]{0}), "i"
  let {{i[j]}} = (if false then (array[i : ((argnum - e) / argnum), j : (sum[i : to_int(91.84), j : b] 255)] {{a}})[to_int(h()), b] else (if ((array[i : b, j : argnum] true)[d, (- 748)] == {false}{0}) then tan(asin(h())) else (if (true && true) then {{a}} else {{a}})))
  return asin(sin(atan2(tan(log(h())), sqrt(5.97))))
}

fn i({  }, {  }) : {}[,,][,] {
  let j = args
  let k[l, m] = (if (! (if {g(), b}{0} then ((g() && g()) || (144 == argnum)) else g())) then (array[k : 95, l : (if false then args else j)[(if (g() && false) then 565 else 930)]] i({l, {}}{1}, (array[m : d, n : argnum, o : 920] {})[b, d, l])) else (array[k : (array[k : (argnum / 471), l : argnum, m : 798] d)[to_int(log(h())), (if (if g() then false else g()) then b else (d / b)), b], l : d] (array[m : [k, 72, k][l], n : (263 - (l - argnum))] i({}, {})[(n % b), l])))
  let n[o, p] = k
  let q[r, s, t] = (- log(h())){1}{0}
  return (if [(! g()), g(), g()][(sum[u : (t % o)] o)] then (if (! g()) then (array[u : d, v : r, w : l] n[u, t]) else (array[u : t, v : b, w : 439] i({}, {}))) else (if false then (array[u : o, v : s, w : o] i({}, {})) else (array[u : argnum, v : 766, w : d] i({}, {}))))[s, e, t]
}

let {{}} = {{{{}}{0}}, (to_int(h()) + (- (if true then b else argnum))), atan(sqrt(log(16.43)))}{0}
let j = {(if false then {d, argnum} else {246, d})}{0}{0}
fn k(l : int) : float {
  assert (if d[j][(argnum + 344), to_int(tan(53.6))] then true else g()), "m"
  assert {(b != b), h(), atan(exp(a[e]))}{0}, "m"
  return k((d + e))
  let {m, {n[o], {}}, p[q, r, s]} = {i((if (h() >= 47.11) then (if false then {} else {}) else {}), l[b]), {(k(d) < g()), {a, (if true then {} else {})}, (array[m : l, n : (- d), o : (899 - e)] argnum)}}{1}
  return atan(exp((if {true}{0} then {true, 47.64}{1} else exp(atan(52.01)))))
}

time let {l[m, n, o], p, q} = {(array[l : argnum, m : (- b), n : {88.9, d}{1}] ((g() || true) && (! g()))), {g()}{0}, (sum[l : b, m : d] argnum)}

show sqrt((sum[r : (if (true || (h() != h())) then b else n), s : args[m]] (array[t : 915, u : (sum[t : e, u : d, v : s] q), v : m] to_float(r))[argnum, j, s]))

