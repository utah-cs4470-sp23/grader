let a = exp(tan(pow(log(to_float(argnum)), false)))
let b = sin((a - exp(sin(to_float(argnum)))))
let c = (if (log(a) >= atan2(47.61, b)) then {{a, 914}, log(b)} else atan(a)){0}{0}
fn d(e : int, f : bool, { {  }, g : int }) : bool {
  let {h} = (array[h : (- 764), i : argnum, j : g] (array[k : g, l : 244] {h}))[(if ((f != true) || (e < g)) then (- argnum) else 464), (- (sum[h : e, i : 385, j : argnum] h)), (g * ((sum[h : 971] g) * (- 934)))][(sum[h : (if (false && f) then {e} else {argnum}){0}, i : {59}{0}, j : g] (if (f && true) then (array[k : i, l : h, m : i] l) else (array[k : j, l : h, m : argnum] 453))[545, (sum[k : e] (i - j)), (if false then argnum else 513)]), argnum]
  assert (! false), "i"
  let i[j] = args
  assert {{(h != h), e}, to_float((e % argnum))}{0}{0}, "k"
  return false
}

let e = {(array[e : argnum, f : argnum, g : 860] pow((- atan(b)), sqrt(80.04))), (array[e : (- to_int(4.03)), f : to_int(exp((c - b)))] 441)}
let f = acos((to_float(argnum) + cos(sqrt(asin(c)))))
fn g({ h[i, j] : {float,bool,float}[,], k[l, m] : {}[,][,], n[o, p] : bool[,,][,] }, { { { q : int, {  }, r : {int,int,bool}[,,] }, s : int, t : bool[,,] } }, { {  }, u[v] : int[], w[x] : int[] }) : int[] {
  let y[z] = args
  assert (true == (if d(x[m, 170], (t[o, j, s] || true), (if (x > p) then {{}, q} else {{}, p})) then (if true then {v, argnum, false}{2} else to_float(o)) else (if z[v] then t[p, l, s] else [true, true, false][s]))), "A"
  return u
  return y
  return [{u, to_int(c)}, {(array[A : l] s), u[v]}, {w, l}][i]{0}
}

time let {h[i], {}, {j, {k[l]}, m}} = {(if (c != asin(c)) then (if (b >= b) then (array[h : 124] argnum) else args) else args), {(if true then {} else {})}{0}, {sqrt(c), {[c]}, (if (b == f) then to_float(816) else to_float(argnum))}}

let n[o] = h
fn p(q[r, s] : bool[,], t[u, v] : {float,int,float}[,]) : int {
  assert d((sum[w : o] v), d(o, (c <= cos(tan(a))), {log(j), e, {{}, s}}{2}), q), "w"
  let {{{}, w[x], {y, z[A]}}, B} = (if (! {e}{0}) then {{{}, (array[w : u] s), {(sum[w : i] s), args}}, atan((- (- a)))} else {{[{}, {}, {}][p(q, t)], (if (v < 293) then n else args), {u, args}}, j})
  let {C, D[E, F, G], H[I]} = (if (array[C : to_int(f)] {true, t, u})[u]{0} then (if (cos(asin(c)) < c) then {w[l], (array[C : A, D : i, E : x] y), args} else {x, (array[C : (s / r), D : x, E : to_int(b)] u), (if (! true) then w else h)}) else {to_float((if true then u else A)), s, o}{2})
  assert (j > a), "J"
  return (sum[J : (- o), K : x] I)
}

fn q({  }, { r : int, { s[t, u] : int[,] }, v : bool }) : int {
  return (sum[w : (l - t)] (if (if (array[x : 845, y : l, z : l] v)[(sum[x : o] t), (- argnum), l] then d(o, v, {{}, w}) else (! (! v))) then to_int((- (sum[x : i] b))) else argnum))
  let {w[x, y, z], {}} = (if ({atan(a), (false && false), 464}{1} == (! ((o < o) && (u > i)))) then {(if (to_float(r) <= m) then (array[w : i, x : r, y : argnum] x) else (array[w : t, x : r, y : u] argnum)), {}} else (if (false || (! (! false))) then {(array[w : to_int(86.59), x : 33, y : (if true then l else u)] y), {}} else (if (! (if true then false else true)) then {(array[w : argnum, x : o, y : t] x), (if v then {} else {})} else {(array[w : o, x : t, y : i] r), (if false then {} else {})})))
  let A[B] = argnum{1}
  return x
  return (if false then (sum[C : z, D : r] i) else (if v then B else ((- (sum[C : r, D : u, E : B] D)) - u)))
}

fn r(s : float, t[u] : int[]) : float[,,] {
  return (if {(if true then true else true)}{0} then (if ((if false then true else false) != (true && false)) then b else {{}, (- a), r(m, args)}) else {(if (argnum != i) then (if true then {} else {}) else {}), m, (array[v : (sum[v : o] 485), w : i, x : i] 19.56)}){2}
  let v = {}
  let w[x] = [atan2(f, b), c, to_float(725)]
  let y = k
  return r(pow((sum[z : argnum, A : to_int(acos(c)), B : (sum[z : o, A : n[773]] (- o))] (99.62 * c)), atan2(sin((b % f)), 39.8)), [(array[z : to_int(f), A : (sum[z : i] u), B : l] (if false then u else z))[(- to_int(s)), o, x], l, argnum])
}

