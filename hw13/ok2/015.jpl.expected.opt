global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: db `non-positive loop bound`, 0
const1: db `overflow computing array size`, 0
const2: db `negative array index`, 0
const3: db `index too large`, 0
const4: db `(IntType)`, 0

section .text
jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp
	push qword 512
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for i
	push qword 512
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump1:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by X
	jno .jump2
	lea rdi, [rel const1] ; overflow computing array size
	call _fail_assertion
.jump2:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
.jump3: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment i
	add qword [rsp + 0], 1
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump3 ; If i < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for j
	push qword 512
	mov rax, [rsp]
	cmp rax, 0
	jg .jump4
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump4:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by Y
	jno .jump5
	lea rdi, [rel const1] ; overflow computing array size
	call _fail_assertion
.jump5:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
.jump6: ; Begin body of loop
	; Compute loop body
	push qword 1
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	push qword 512
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump7
	lea rdi, [rel const2] ; negative array index
	call _fail_assertion
.jump7:
	cmp rax, [rsp + 32]
	jl .jump8
	lea rdi, [rel const3] ; index too large
	call _fail_assertion
.jump8:
	mov rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 40]
	add rsp, 8
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment j
	add qword [rsp + 0], 1
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump6 ; If j < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for i
	push qword 512
	mov rax, [rsp]
	cmp rax, 0
	jg .jump9
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump9:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by Z
	jno .jump10
	lea rdi, [rel const1] ; overflow computing array size
	call _fail_assertion
.jump10:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
.jump11: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump12
	lea rdi, [rel const2] ; negative array index
	call _fail_assertion
.jump12:
	cmp rax, [rsp + 48]
	jl .jump13
	lea rdi, [rel const3] ; index too large
	call _fail_assertion
.jump13:
	mov rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 56]
	add rsp, 8
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump14
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump14:
	cmp rax, [rsp + 40]
	jl .jump15
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump15:
	mov rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 48]
	add rsp, 8
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	; Index to store in
	mov rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment i
	add qword [rsp + 0], 1
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump11 ; If i < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8 ; Align stack
	push qword 11
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump16
	lea rdi, [rel const2] ; negative array index
	call _fail_assertion
.jump16:
	cmp rax, [rsp + 16]
	jl .jump17
	lea rdi, [rel const3] ; index too large
	call _fail_assertion
.jump17:
	mov rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 24]
	add rsp, 8
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	lea rdi, [rel const4] ; (IntType)
	lea rsi, [rsp]
	call _show
	add rsp, 8
	add rsp, 8 ; Remove alignment
	add rsp, 56 ; Local variables
	pop r12
	pop rbp
	ret

