global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: db `a.png`, 0
const1: db `non-positive loop bound`, 0
const2: db `overflow computing array size`, 0
const3: db `negative array index`, 0
const4: db `index too large`, 0
const5: db `(ArrayType (TupleType (FloatType) (FloatType) (FloatType) (FloatType)) 2)`, 0
const6: db `n.png`, 0
const7: db `(IntType)`, 0

section .text
jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp
	sub rsp, 24
	lea rdi, [rsp]
	lea rsi, [rel const0] ; a.png
	call _read_image
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	push qword 97
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump1:
	; Computing bound for e
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump2
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump2:
	; Computing bound for d
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump3
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump3:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by b
	jno .jump4
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump4:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump5
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump5:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump6
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump6:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize f to 0
	mov rax, 0
	push rax
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
.jump7: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment f
	add qword [rsp + 16], 1
	; Compare f to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump7 ; If f < bound, next iter
	mov qword [rsp + 16], 0 ; f = 0
	add qword [rsp + 8], 1 ; e++
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump7 ; If e < bound, next iter
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump7 ; If d < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	push qword 792
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump8
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump8:
	cmp rax, [rsp + 24]
	jl .jump9
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump9:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump10
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump10:
	cmp rax, [rsp + 32]
	jl .jump11
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump11:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump12
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump12:
	cmp rax, [rsp + 40]
	jl .jump13
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump13:
	mov rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	; Moving 24 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	lea rdi, [rel const5] ; (ArrayType (TupleType (FloatType) (FloatType) (FloatType) (FloatType)) 2)
	lea rsi, [rsp]
	call _show
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	; Moving 24 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump14
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump14:
	; Computing bound for h
	push qword 447
	; Computing bound for g
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump15
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump15:
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump16
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump16:
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump17
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump17:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by e
	jno .jump18
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump18:
	imul rdi, [rsp + 0 + 8] ; multiply by d
	jno .jump19
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump19:
	imul rdi, [rsp + 0 + 16] ; multiply by d
	jno .jump20
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump20:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
.jump21: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment i
	add qword [rsp + 16], 1
	; Compare i to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump21 ; If i < bound, next iter
	mov qword [rsp + 16], 0 ; i = 0
	add qword [rsp + 8], 1 ; h++
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump21 ; If h < bound, next iter
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump21 ; If g < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	push qword 97
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump22
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump22:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by b
	jno .jump23
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump23:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize g to 0
	mov rax, 0
	push rax
.jump24: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment g
	add qword [rsp + 0], 1
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump24 ; If g < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	push qword 141
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump25
	lea rdi, [rel const3] ; negative array index
	call _fail_assertion
.jump25:
	cmp rax, [rsp + 8]
	jl .jump26
	lea rdi, [rel const4] ; index too large
	call _fail_assertion
.jump26:
	mov rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump27
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump27:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by b
	jno .jump28
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump28:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize g to 0
	mov rax, 0
	push rax
.jump29: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment g
	add qword [rsp + 0], 1
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump29 ; If g < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	push qword 97
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump30
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump30:
	cmp rax, [rsp + 8]
	jl .jump31
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump31:
	mov rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump32
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump32:
	cmp rax, [rsp + 24]
	jl .jump33
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump33:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump34
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump34:
	cmp rax, [rsp + 32]
	jl .jump35
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump35:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump36
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump36:
	cmp rax, [rsp + 40]
	jl .jump37
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump37:
	mov rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump38
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump38:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof {float,float,float,float}[,,]
imul rdi, [rsp + 0 + 0] ; multiply by (array[g : e, h : d, i : d] b)[(array[g : b] argnum)[c], (array[g : b] e)[141], c]
	jno .jump39
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump39:
	imul rdi, [rsp + 0 + 8] ; multiply by 447
	jno .jump40
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump40:
	imul rdi, [rsp + 0 + 16] ; multiply by d
	jno .jump41
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump41:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
.jump42: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for l
	push qword 97
	mov rax, [rsp]
	cmp rax, 0
	jg .jump43
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump43:
	; Computing bound for k
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump44
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump44:
	; Computing bound for j
	push qword 750
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof {float,float,float,float}
	imul rdi, [rsp + 0 + 0] ; multiply by 750
	jno .jump45
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump45:
	imul rdi, [rsp + 0 + 8] ; multiply by d
	jno .jump46
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump46:
	imul rdi, [rsp + 0 + 16] ; multiply by c
	jno .jump47
	lea rdi, [rel const2] ; overflow computing array size
	call _fail_assertion
.jump47:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize l to 0
	mov rax, 0
	push rax
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
.jump48: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 184 to rsp
		mov r10, [rbp - 184 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 200 to rsp
		mov r10, [rbp - 200 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump49
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump49:
	cmp rax, [rsp + 184]
	jl .jump50
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump50:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump51
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump51:
	cmp rax, [rsp + 192]
	jl .jump52
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump52:
	mov rax, [rsp + 0]
	imul rax, [rsp + 192] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 5
	add rax, [rsp + 200]
	add rsp, 16
	sub rsp, 32
	; Moving 32 bytes from rax to rsp
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Index to store in
	imul rax, 750
	mov rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 97
	add rax, [rsp + 48]
	shl rax, 5
	add rax, [rsp + 80]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment l
	add qword [rsp + 16], 1
	; Compare l to its bound
	mov rax, [rsp + 16]
	cmp rax, 97
	jl .jump48 ; If l < bound, next iter
	mov qword [rsp + 16], 0 ; l = 0
	add qword [rsp + 8], 1 ; k++
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump48 ; If k < bound, next iter
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, 750
	jl .jump48 ; If j < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Index to store in
	mov rax, [rsp + 32]
	imul rax, 447
	add rax, [rsp + 40]
	imul rax, [rsp + 72] ; No overflow if indices in bounds
	add rax, [rsp + 48]
	shl rax, 5
	add rax, [rsp + 80]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment i
	add qword [rsp + 16], 1
	; Compare i to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump42 ; If i < bound, next iter
	mov qword [rsp + 16], 0 ; i = 0
	add qword [rsp + 8], 1 ; h++
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, 447
	jl .jump42 ; If h < bound, next iter
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump42 ; If g < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	push qword 778
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump53
	lea rdi, [rel const3] ; negative array index
	call _fail_assertion
.jump53:
	cmp rax, [rsp + 24]
	jl .jump54
	lea rdi, [rel const4] ; index too large
	call _fail_assertion
.jump54:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump55
	lea rdi, [rel const3] ; negative array index
	call _fail_assertion
.jump55:
	cmp rax, [rsp + 32]
	jl .jump56
	lea rdi, [rel const4] ; index too large
	call _fail_assertion
.jump56:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump57
	lea rdi, [rel const3] ; negative array index
	call _fail_assertion
.jump57:
	cmp rax, [rsp + 40]
	jl .jump58
	lea rdi, [rel const4] ; index too large
	call _fail_assertion
.jump58:
	mov rax, [rsp + 0]
	imul rax, 447
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 5
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 32
	; Moving 32 bytes from rax to rsp
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	lea rdi, [rsp]
	sub rsp, 8 ; Align stack
	lea rsi, [rel const6] ; n.png
	call _read_image
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	lea rdi, [rel const7] ; (IntType)
	lea rsi, [rsp]
	call _show
	add rsp, 8
	add rsp, 160 ; Local variables
	pop r12
	pop rbp
	ret

