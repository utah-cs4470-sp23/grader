global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: db `non-positive loop bound`, 0
const1: db `overflow computing array size`, 0
const2: db `negative array index`, 0
const3: db `index too large`, 0
const4: db `u.png`, 0

section .text
jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for c
	push qword 265
	; Computing bound for b
	push qword 98
	; Computing bound for a
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump1:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump2
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump2:
	imul rdi, [rsp + 0 + 8] ; multiply by 98
	jno .jump3
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump3:
	imul rdi, [rsp + 0 + 16] ; multiply by 265
	jno .jump4
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump4:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
	; Initialize a to 0
	mov rax, 0
	push rax
.jump5: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, [rsp + 8]
	imul rax, 98
	add rax, [rsp + 16]
	imul rax, 265
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment c
	add qword [rsp + 16], 1
	; Compare c to its bound
	mov rax, [rsp + 16]
	cmp rax, 265
	jl .jump5 ; If c < bound, next iter
	mov qword [rsp + 16], 0 ; c = 0
	add qword [rsp + 8], 1 ; b++
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, 98
	jl .jump5 ; If b < bound, next iter
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump5 ; If a < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for c
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump6
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump6:
	; Computing bound for b
	push qword 998
	; Computing bound for a
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump7
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump7:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof int[,,]
	imul rdi, [rsp + 0 + 0] ; multiply by argnum
	jno .jump8
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump8:
	imul rdi, [rsp + 0 + 8] ; multiply by 998
	jno .jump9
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump9:
	imul rdi, [rsp + 0 + 16] ; multiply by argnum
	jno .jump10
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump10:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
	; Initialize a to 0
	mov rax, 0
	push rax
.jump11: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump12
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump12:
	; Computing bound for e
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump13
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump13:
	; Computing bound for d
	push qword 713
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by 713
	jno .jump14
	lea rdi, [rel const1] ; overflow computing array size
	call _fail_assertion
.jump14:
	imul rdi, [rsp + 0 + 8] ; multiply by b
	jno .jump15
	lea rdi, [rel const1] ; overflow computing array size
	call _fail_assertion
.jump15:
	imul rdi, [rsp + 0 + 16] ; multiply by a
	jno .jump16
	lea rdi, [rel const1] ; overflow computing array size
	call _fail_assertion
.jump16:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize f to 0
	mov rax, 0
	push rax
	; Initialize e to 0
	mov rax, 0
	push rax
	; Initialize d to 0
	mov rax, 0
	push rax
.jump17: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	; Index to store in
	imul rax, 713
	mov rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment f
	add qword [rsp + 16], 1
	; Compare f to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump17 ; If f < bound, next iter
	mov qword [rsp + 16], 0 ; f = 0
	add qword [rsp + 8], 1 ; e++
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump17 ; If e < bound, next iter
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, 713
	jl .jump17 ; If d < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Index to store in
	mov rax, [rsp + 32]
	imul rax, 998
	add rax, [rsp + 40]
	imul rax, [rsp + 72] ; No overflow if indices in bounds
	add rax, [rsp + 48]
	shl rax, 5
	add rax, [rsp + 80]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment c
	add qword [rsp + 16], 1
	; Compare c to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump11 ; If c < bound, next iter
	mov qword [rsp + 16], 0 ; c = 0
	add qword [rsp + 8], 1 ; b++
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, 998
	jl .jump11 ; If b < bound, next iter
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump11 ; If a < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	push qword 875
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for b
	push qword 969
	; Computing bound for a
	push qword 19
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by 19
	jno .jump18
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump18:
	imul rdi, [rsp + 0 + 8] ; multiply by 969
	jno .jump19
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump19:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize b to 0
	mov rax, 0
	push rax
	; Initialize a to 0
	mov rax, 0
	push rax
.jump20: ; Begin body of loop
	; Compute loop body
	push qword 800
	; Index to store in
	imul rax, 19
	mov rax, [rsp + 8]
	imul rax, 969
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment b
	add qword [rsp + 8], 1
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, 969
	jl .jump20 ; If b < bound, next iter
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, 19
	jl .jump20 ; If a < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	push qword 324
	push qword 629
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump21
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump21:
	cmp rax, [rsp + 16]
	jl .jump22
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump22:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump23
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump23:
	cmp rax, [rsp + 24]
	jl .jump24
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump24:
	imul rax, 19
	mov rax, [rsp + 0]
	imul rax, 969
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for c
	push qword 636
	; Computing bound for b
	push qword 449
	; Computing bound for a
	push qword 534
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by 534
	jno .jump25
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump25:
	imul rdi, [rsp + 0 + 8] ; multiply by 449
	jno .jump26
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump26:
	imul rdi, [rsp + 0 + 16] ; multiply by 636
	jno .jump27
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump27:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize c to 0
	mov rax, 0
	push rax
	; Initialize b to 0
	mov rax, 0
	push rax
	; Initialize a to 0
	mov rax, 0
	push rax
.jump28: ; Begin body of loop
	; Compute loop body
	push qword 33
	; Index to store in
	imul rax, 534
	mov rax, [rsp + 8]
	imul rax, 449
	add rax, [rsp + 16]
	imul rax, 636
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment c
	add qword [rsp + 16], 1
	; Compare c to its bound
	mov rax, [rsp + 16]
	cmp rax, 636
	jl .jump28 ; If c < bound, next iter
	mov qword [rsp + 16], 0 ; c = 0
	add qword [rsp + 8], 1 ; b++
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, 449
	jl .jump28 ; If b < bound, next iter
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, 534
	jl .jump28 ; If a < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	push qword 869
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	push qword 936
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump29
	lea rdi, [rel const2] ; negative array index
	call _fail_assertion
.jump29:
	cmp rax, [rsp + 24]
	jl .jump30
	lea rdi, [rel const3] ; index too large
	call _fail_assertion
.jump30:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump31
	lea rdi, [rel const2] ; negative array index
	call _fail_assertion
.jump31:
	cmp rax, [rsp + 32]
	jl .jump32
	lea rdi, [rel const3] ; index too large
	call _fail_assertion
.jump32:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump33
	lea rdi, [rel const2] ; negative array index
	call _fail_assertion
.jump33:
	cmp rax, [rsp + 40]
	jl .jump34
	lea rdi, [rel const3] ; index too large
	call _fail_assertion
.jump34:
	imul rax, 534
	mov rax, [rsp + 0]
	imul rax, 449
	add rax, [rsp + 8]
	imul rax, 636
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump35
	lea rdi, [rel const2] ; negative array index
	call _fail_assertion
.jump35:
	cmp rax, [rsp + 24]
	jl .jump36
	lea rdi, [rel const3] ; index too large
	call _fail_assertion
.jump36:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump37
	lea rdi, [rel const2] ; negative array index
	call _fail_assertion
.jump37:
	cmp rax, [rsp + 32]
	jl .jump38
	lea rdi, [rel const3] ; index too large
	call _fail_assertion
.jump38:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump39
	lea rdi, [rel const2] ; negative array index
	call _fail_assertion
.jump39:
	cmp rax, [rsp + 40]
	jl .jump40
	lea rdi, [rel const3] ; index too large
	call _fail_assertion
.jump40:
	mov rax, [rsp + 0]
	imul rax, 998
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 5
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 32
	; Moving 32 bytes from rax to rsp
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rdi, 64
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 64 bytes from rsp to rax
		mov r10, [rsp + 56]
		mov [rax + 56], r10
		mov r10, [rsp + 48]
		mov [rax + 48], r10
		mov r10, [rsp + 40]
		mov [rax + 40], r10
		mov r10, [rsp + 32]
		mov [rax + 32], r10
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 64
	push rax
	mov rax, 2
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump41
	lea rdi, [rel const2] ; negative array index
	call _fail_assertion
.jump41:
	cmp rax, [rsp + 8]
	jl .jump42
	lea rdi, [rel const3] ; index too large
	call _fail_assertion
.jump42:
	shl rax, 1
	mov rax, [rsp + 0]
	shl rax, 5
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 32
	; Moving 32 bytes from rax to rsp
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for h
	push qword 46
	; Computing bound for g
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump43
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump43:
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump44
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump44:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by c
	jno .jump45
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump45:
	imul rdi, [rsp + 0 + 8] ; multiply by c
	jno .jump46
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump46:
	imul rdi, [rsp + 0 + 16] ; multiply by 46
	jno .jump47
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump47:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize h to 0
	mov rax, 0
	push rax
	; Initialize g to 0
	mov rax, 0
	push rax
	; Initialize f to 0
	mov rax, 0
	push rax
.jump48: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 46
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment h
	add qword [rsp + 16], 1
	; Compare h to its bound
	mov rax, [rsp + 16]
	cmp rax, 46
	jl .jump48 ; If h < bound, next iter
	mov qword [rsp + 16], 0 ; h = 0
	add qword [rsp + 8], 1 ; g++
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump48 ; If g < bound, next iter
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump48 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from rbp - 56 to rsp
		mov r10, [rbp - 56 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from rbp - 136 to rsp
		mov r10, [rbp - 136 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump49
	sub rsp, 8 ; Align stack
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump49:
	; Computing bound for o
	sub rsp, 8
	; Moving 8 bytes from rbp - 136 to rsp
		mov r10, [rbp - 136 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump50
	lea rdi, [rel const0] ; non-positive loop bound
	call _fail_assertion
.jump50:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by n
	jno .jump51
	lea rdi, [rel const1] ; overflow computing array size
	call _fail_assertion
.jump51:
	imul rdi, [rsp + 0 + 8] ; multiply by n
	jno .jump52
	lea rdi, [rel const1] ; overflow computing array size
	call _fail_assertion
.jump52:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize p to 0
	mov rax, 0
	push rax
	; Initialize o to 0
	mov rax, 0
	push rax
.jump53: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 136 to rsp
		mov r10, [rbp - 136 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment p
	add qword [rsp + 8], 1
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump53 ; If p < bound, next iter
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump53 ; If o < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	; Moving 24 bytes from rbp - 160 to rsp
		mov r10, [rbp - 160 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 160 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 160 + 0]
		mov [rsp + 0], r10
	sub rsp, 32
	; Moving 32 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 40 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 40 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	lea rdi, [rsp]
	sub rsp, 8 ; Align stack
	lea rsi, [rel const4] ; u.png
	call _read_image
	add rsp, 8 ; Remove alignment
	add rsp, 240 ; Local variables
	pop r12
	pop rbp
	ret

