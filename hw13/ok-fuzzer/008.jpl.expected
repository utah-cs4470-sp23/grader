global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 310
const1: db `non-positive loop bound`, 0
const2: dq 819
const3: db `overflow computing array size`, 0
const4: db `negative array index`, 0
const5: db `index too large`, 0
const6: dq 953
const7: dq 930
const8: dq 971
const9: dq 678
const10: db `e.png`, 0
const11: db `g.png`, 0
const12: dq 495
const13: dq 103
const14: dq 869
const15: dq 962
const16: dq 140
const17: dq 241
const18: db `(ArrayType (IntType) 1)`, 0

section .text
jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for b
	mov rax, [rel const0] ; 310
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump1:
	; Computing bound for a
	mov rax, [rel const2] ; 819
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump2
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump2:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof int[,][,]
	imul rdi, [rsp + 0 + 0] ; multiply by 819
	jno .jump3
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump3:
	imul rdi, [rsp + 0 + 8] ; multiply by 310
	jno .jump4
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump4:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize b to 0
	mov rax, 0
	push rax
	; Initialize a to 0
	mov rax, 0
	push rax
.jump5: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for d
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump6
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump6:
	cmp rax, [rsp + 8]
	jl .jump7
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump7:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump8
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump8:
	; Computing bound for c
	mov rax, [rel const6] ; 953
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump9
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump9:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof int[,]
	imul rdi, [rsp + 0 + 0] ; multiply by 953
	jno .jump10
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump10:
	imul rdi, [rsp + 0 + 8] ; multiply by args[argnum]
	jno .jump11
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump11:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize d to 0
	mov rax, 0
	push rax
	; Initialize c to 0
	mov rax, 0
	push rax
.jump12: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for f
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump13
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump13:
	; Computing bound for e
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump14
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump14:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by d
	jno .jump15
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump15:
	imul rdi, [rsp + 0 + 8] ; multiply by b
	jno .jump16
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump16:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize f to 0
	mov rax, 0
	push rax
	; Initialize e to 0
	mov rax, 0
	push rax
.jump17: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment f
	add qword [rsp + 8], 1
	; Compare f to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump17 ; If f < bound, next iter
	mov qword [rsp + 8], 0 ; f = 0
	add qword [rsp + 0], 1 ; e++
	; Compare e to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump17 ; If e < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 24
	add rax, [rsp + 56]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment d
	add qword [rsp + 8], 1
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump12 ; If d < bound, next iter
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump12 ; If c < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 24
	add rax, [rsp + 56]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment b
	add qword [rsp + 8], 1
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump5 ; If b < bound, next iter
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump5 ; If a < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for b
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump18
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump18:
	; Computing bound for a
	mov rax, [rel const7] ; 930
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump19
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump19:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by 930
	jno .jump20
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump20:
	imul rdi, [rsp + 0 + 8] ; multiply by argnum
	jno .jump21
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump21:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize b to 0
	mov rax, 0
	push rax
	; Initialize a to 0
	mov rax, 0
	push rax
.jump22: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment b
	add qword [rsp + 8], 1
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump22 ; If b < bound, next iter
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump22 ; If a < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump23
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump23:
	cmp rax, [rsp + 8]
	jl .jump24
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump24:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump25
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump25:
	cmp rax, [rsp + 16]
	jl .jump26
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump26:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump27
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump27:
	cmp rax, [rsp + 24]
	jl .jump28
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump28:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump29
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump29:
	cmp rax, [rsp + 16]
	jl .jump30
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump30:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump31
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump31:
	cmp rax, [rsp + 24]
	jl .jump32
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump32:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 24
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const8] ; 971
	push rax
	mov rax, [rel const9] ; 678
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump33
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump33:
	cmp rax, [rsp + 16]
	jl .jump34
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump34:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump35
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump35:
	cmp rax, [rsp + 24]
	jl .jump36
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump36:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 24
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	lea rdi, [rsp]
	lea rsi, [rel const10] ; e.png
	call _read_image
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	lea rdi, [rsp]
	lea rsi, [rel const11] ; g.png
	call _read_image
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump37
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump37:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump38
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump38:
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump39
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump39:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof int[,]
	imul rdi, [rsp + 0 + 0] ; multiply by d
	jno .jump40
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump40:
	imul rdi, [rsp + 0 + 8] ; multiply by f
	jno .jump41
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump41:
	imul rdi, [rsp + 0 + 16] ; multiply by d
	jno .jump42
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump42:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
.jump43: ; Begin body of loop
	; Compute loop body
	sub rsp, 24
	; Moving 24 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 24
	add rax, [rsp + 72]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment j
	add qword [rsp + 16], 1
	; Compare j to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump43 ; If j < bound, next iter
	mov qword [rsp + 16], 0 ; j = 0
	add qword [rsp + 8], 1 ; i++
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump43 ; If i < bound, next iter
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump43 ; If h < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump44
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump44:
	; Computing bound for i
	mov rax, [rel const12] ; 495
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump45
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump45:
	; Computing bound for h
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for j
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump46
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump46:
	; Computing bound for i
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump47
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump47:
	; Computing bound for h
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump48
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump48:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
	imul rdi, [rsp + 0 + 0] ; multiply by d
	jno .jump49
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump49:
	imul rdi, [rsp + 0 + 8] ; multiply by f
	jno .jump50
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump50:
	imul rdi, [rsp + 0 + 16] ; multiply by c
	jno .jump51
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump51:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
.jump52: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment j
	add qword [rsp + 16], 1
	; Compare j to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump52 ; If j < bound, next iter
	mov qword [rsp + 16], 0 ; j = 0
	add qword [rsp + 8], 1 ; i++
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump52 ; If i < bound, next iter
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump52 ; If h < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump53
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump53:
	cmp rax, [rsp + 24]
	jl .jump54
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump54:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump55
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump55:
	cmp rax, [rsp + 32]
	jl .jump56
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump56:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump57
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
.jump57:
	cmp rax, [rsp + 40]
	jl .jump58
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
.jump58:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump59
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump59:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int
imul rdi, [rsp + 0 + 0] ; multiply by (array[h : d, i : f, j : c] f)[c, d, argnum]
	jno .jump60
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump60:
	imul rdi, [rsp + 0 + 8] ; multiply by 495
	jno .jump61
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump61:
	imul rdi, [rsp + 0 + 16] ; multiply by b
	jno .jump62
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump62:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize j to 0
	mov rax, 0
	push rax
	; Initialize i to 0
	mov rax, 0
	push rax
	; Initialize h to 0
	mov rax, 0
	push rax
.jump63: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const13] ; 103
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment j
	add qword [rsp + 16], 1
	; Compare j to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump63 ; If j < bound, next iter
	mov qword [rsp + 16], 0 ; j = 0
	add qword [rsp + 8], 1 ; i++
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump63 ; If i < bound, next iter
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump63 ; If h < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 24
	; Moving 24 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const14] ; 869
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump64
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump64:
	cmp rax, [rsp + 16]
	jl .jump65
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump65:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump66
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump66:
	cmp rax, [rsp + 24]
	jl .jump67
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump67:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump68
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump68:
	cmp rax, [rsp + 24]
	jl .jump69
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump69:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump70
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump70:
	cmp rax, [rsp + 32]
	jl .jump71
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump71:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump72
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump72:
	cmp rax, [rsp + 40]
	jl .jump73
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump73:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump74
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump74:
	cmp rax, [rsp + 24]
	jl .jump75
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump75:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump76
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump76:
	cmp rax, [rsp + 32]
	jl .jump77
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump77:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump78
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump78:
	cmp rax, [rsp + 40]
	jl .jump79
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump79:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 24
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 24
	; Moving 24 bytes from rax to rsp
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for k
	mov rax, [rel const15] ; 962
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump80
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump80:
	; Computing bound for j
	mov rax, [rel const16] ; 140
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump81
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump81:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof int[][]
	imul rdi, [rsp + 0 + 0] ; multiply by 140
	jno .jump82
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump82:
	imul rdi, [rsp + 0 + 8] ; multiply by 962
	jno .jump83
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump83:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize k to 0
	mov rax, 0
	push rax
	; Initialize j to 0
	mov rax, 0
	push rax
.jump84: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for l
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump85
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump85:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof int[]
	imul rdi, [rsp + 0 + 0] ; multiply by i
	jno .jump86
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump86:
	sub rsp, 8 ; Align stack
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize l to 0
	mov rax, 0
	push rax
.jump87: ; Begin body of loop
	; Compute loop body
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 16
	add rax, [rsp + 32]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment l
	add qword [rsp + 0], 1
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump87 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 16
	add rax, [rsp + 48]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment k
	add qword [rsp + 8], 1
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump84 ; If k < bound, next iter
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump84 ; If j < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const17] ; 241
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump88
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump88:
	cmp rax, [rsp + 16]
	jl .jump89
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump89:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump90
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump90:
	cmp rax, [rsp + 24]
	jl .jump91
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump91:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 16
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump92
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; negative array index
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump92:
	cmp rax, [rsp + 8]
	jl .jump93
	sub rsp, 8 ; Align stack
	lea rdi, [rel const5] ; index too large
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump93:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 16
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 16
	; Moving 16 bytes from rax to rsp
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	; Moving 24 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 64 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Align stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rdi, 8
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 8 bytes from rsp to rax
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	lea rdi, [rel const18] ; (ArrayType (IntType) 1)
	lea rsi, [rsp]
	call _show
	add rsp, 16
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for r
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump94
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump94:
	; Computing bound for q
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump95
	sub rsp, 8 ; Align stack
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump95:
	; Computing bound for p
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump96
	lea rdi, [rel const1] ; non-positive loop bound
	call _fail_assertion
.jump96:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof {float,float,float,float}[,]
	imul rdi, [rsp + 0 + 0] ; multiply by c
	jno .jump97
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump97:
	imul rdi, [rsp + 0 + 8] ; multiply by c
	jno .jump98
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump98:
	imul rdi, [rsp + 0 + 16] ; multiply by i
	jno .jump99
	lea rdi, [rel const3] ; overflow computing array size
	call _fail_assertion
.jump99:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize r to 0
	mov rax, 0
	push rax
	; Initialize q to 0
	mov rax, 0
	push rax
	; Initialize p to 0
	mov rax, 0
	push rax
.jump100: ; Begin body of loop
	; Compute loop body
	sub rsp, 24
	; Moving 24 bytes from rbp - 64 to rsp
		mov r10, [rbp - 64 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 64 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 24
	add rax, [rsp + 72]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment r
	add qword [rsp + 16], 1
	; Compare r to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump100 ; If r < bound, next iter
	mov qword [rsp + 16], 0 ; r = 0
	add qword [rsp + 8], 1 ; q++
	; Compare q to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump100 ; If q < bound, next iter
	mov qword [rsp + 8], 0 ; q = 0
	add qword [rsp + 0], 1 ; p++
	; Compare p to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump100 ; If p < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	add rsp, 200 ; Local variables
	pop r12
	pop rbp
	ret
