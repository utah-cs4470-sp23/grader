global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 85
const1: dq 996
const2: dq 942
const3: db `mod by zero`, 0
const4: dq 671
const5: dq 404
const6: dq 318
const7: db `divide by zero`, 0
const8: db `(IntType)`, 0

section .text
jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp
	mov rax, [rel const0] ; 85
	push rax
	mov rax, [rel const1] ; 996
	push rax
	mov rax, [rel const2] ; 942
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump1
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; mod by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump1:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const4] ; 671
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const5] ; 404
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const6] ; 318
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 8
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	pop rax
	pop r10
	cmp r10, 0
	jne .jump2
	lea rdi, [rel const7] ; divide by zero
	call _fail_assertion
.jump2:
	cqo
	idiv r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump3
	sub rsp, 8 ; Align stack
	lea rdi, [rel const3] ; mod by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump3:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	lea rdi, [rel const8] ; (IntType)
	lea rsi, [rsp]
	call _show
	add rsp, 8
	pop r12
	pop rbp
	ret
