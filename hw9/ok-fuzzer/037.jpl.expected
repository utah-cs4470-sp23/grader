global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 859
const1: dq 515
const2: db `divide by zero`, 0
const3: dq 329
const4: dq 647
const5: dq 948
const6: dq 207
const7: dq 522
const8: dq 956
const9: db `mod by zero`, 0
const10: dq 1
const11: dq 43.87
const12: dq 651
const13: db `(BoolType)`, 0

section .text
jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp
	mov rax, [rel const0] ; 859
	push rax
	mov rax, [rel const1] ; 515
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump1
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; divide by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump1:
	cqo
	idiv r10
	push rax
	mov rax, [rel const3] ; 329
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const4] ; 647
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const5] ; 948
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 0
		mov r10, [rsp + 0 + 0]
		mov [rsp + 0 + 0], r10
	add rsp, 0
	pop rax
	pop r10
	cmp r10, 0
	jne .jump2
	sub rsp, 8 ; Align stack
	lea rdi, [rel const2] ; divide by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump2:
	cqo
	idiv r10
	push rax
	mov rax, [rel const6] ; 207
	push rax
	mov rax, [rel const7] ; 522
	push rax
	mov rax, [rel const8] ; 956
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump3
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; mod by zero
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump3:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const10] ; True
	push rax
	mov rax, [rel const11] ; 43.87
	push rax
	mov rax, [rel const12] ; 651
	push rax
	; Moving 8 bytes from rsp + 0 to rsp + 32
		mov r10, [rsp + 0 + 0]
		mov [rsp + 32 + 0], r10
	add rsp, 32
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	lea rdi, [rel const13] ; (BoolType)
	lea rsi, [rsp]
	call _show
	add rsp, 8
	pop r12
	pop rbp
	ret
