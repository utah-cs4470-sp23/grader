fn a(b : int[]) : float {
  assert (true || ({(argnum == 735), argnum, false}{1} > (if (if true then (! true) else true) then (if true then b else args)[(sum[c : 990, d : 559, e : argnum] d)] else (if false then (- 275) else (sum[c : argnum, d : argnum, e : 255] c))))), "c"
  return sin((if (69.3 > cos(tan(73.75))) then {exp(68.59), cos(40.84), to_float(argnum)}{0} else cos(acos(atan(89.21)))))
  let c[d] = (array[c : (if (array[c : argnum, d : 471] false)[(- argnum), 369] then (if (argnum <= 446) then (array[c : argnum, d : 17] 601) else (array[c : argnum, d : 284] d)) else (array[c : argnum, d : (sum[c : argnum, d : argnum] argnum)] (- d)))[(array[c : (- 503), d : argnum] (sum[e : argnum] e))[516, [212, argnum][894]], args[argnum]]] asin(sin(cos(to_float(argnum)))))
  return 37.67
  return pow(cos(a((if (false || false) then args else [287, 40, 456]))), sin(exp(7.22)))
}

time print "b"


let {} = {(- ((- 978) + (sum[b : 28] 603))), {{}, to_float(980)}{0}, (if ((! false) && (false || true)) then {false, to_float(973), atan(94.96)} else {(false || false), a(args), atan(84.69)})}{1}
fn b(c[d, e, f] : int[,,][,,]) : int[,,][,] {
  let g[h, i] = {args, b((array[g : e, h : 422, i : argnum] (array[j : d, k : 445, l : f] j))), args}{1}
  let j[k] = (if [{f, d, false}][argnum]{2} then args else [(array[j : (- d)] h), (array[j : d, k : e] args)[(sum[j : h] h), d]][(if (false == true) then e else (if (false == true) then f else (- argnum)))])
  assert false, "l"
  return {{g, (array[l : (sum[l : h, m : i] l), m : (if true then k else k)] args), g}, g}{1}
  return b(c)
}

show ((array[c : (array[c : 92, d : argnum] argnum)[(sum[c : argnum, d : 475] 862), (if true then argnum else argnum)], d : (argnum % (sum[c : 302, d : 610] c)), e : (if false then (- 462) else argnum)] (- argnum))[609, to_int(pow(sin(56.05), to_float(argnum))), ([argnum][432] + (if true then (if false then argnum else 837) else 470))] != ((if ((false != true) && true) then 182 else argnum) * {sin(82.21), argnum, 577}{2}))

let c[d, e] = (if (if ((true || true) && (if (true == false) then (633 <= argnum) else (! true))) then true else (argnum >= (if (731 != argnum) then 76 else (- 428)))) then {false, to_float(argnum), (array[c : argnum, d : argnum] to_float(d))}{2} else (if (! (! (! true))) then (array[c : to_int(sin(15.35)), d : ((- 360) % argnum)] 56.07) else (array[c : (argnum % 891), d : to_int(tan(67.45))] 15.53)))
let f = sin((sum[f : argnum, g : e] to_float((sum[h : 120] (sum[i : f] h)))))
let g = sqrt(cos(exp(cos(sin(f)))))
fn h() : bool {
  let i = (if (if false then (if true then {false, 621} else {true, argnum}) else {(if h() then false else h()), argnum}){0} then (- atan(cos(g))) else (sum[i : argnum] acos(f)))
  let j[k, l] = b((if (if (if h() then h() else h()) then (array[j : argnum] false) else [h(), h(), false])[argnum] then (array[j : (if (! true) then (- argnum) else 317), k : argnum, l : to_int(atan(f))] (array[m : e, n : e, o : j] o)) else (if (array[j : e, k : e] h())[argnum, argnum] then (array[j : (658 - d), k : 94, l : (- argnum)] (array[m : argnum, n : l, o : j] d)) else (array[j : (- e), k : (- 388), l : 604] (array[m : argnum, n : 917, o : e] m)))))
  let m = atan(tan(84.7))
  let n[o, p] = (array[n : (array[n : (k * k)] (array[o : e, p : k, q : k] e))[d][(argnum + 360), e, e], o : (if (((true || h()) == true) && (k <= l)) then (array[n : (573 % k)] (if true then 107 else l))[(- (if h() then k else d))] else (if h() then {k} else {argnum}){0})] atan2(g, ((if (k >= k) then sqrt(g) else f) * (array[p : 316] g)[k])))
  return (if ({h()}{0} || ((! (h() && h())) && (sqrt(f) == f))) then (((m != tan(18.22)) && (if (if h() then h() else false) then (h() && h()) else true)) && (! (acos(67.16) == atan2(g, 60.21)))) else (g > m))
}

fn i(j : bool[,], k[l, m] : {int}[,]) : int[,][,,] {
  let n = sin((if false then acos((- (- f))) else cos(log(g))))
  let o = {(((! (h() && h())) != (pow(f, n) <= (- g))) || (if false then (true && (if false then h() else h())) else ((if h() then h() else false) || h()))), d, f}
  return i({(if false then (array[p : argnum, q : l] true) else j), i((if false then j else j), (if false then k else k))}{0}, (if (argnum >= m) then (if (l >= m) then (array[p : d, q : argnum] k) else (array[p : l, q : m] k)) else (array[p : (if h() then d else d), q : (if h() then m else m)] (if h() then k else k)))[m, (- (l - (e / d)))])
  let p[q, r, s] = (if ((if false then (sum[p : d] m) else e) < argnum) then {i(j, k)} else {i(j, k)}){0}
  return {{p}, argnum}{0}{0}
}

let j = exp(acos(((log(f) % g) / (sum[j : (if h() then e else d), k : (e % d), l : (- d)] exp(10.08)))))
fn k(l[m] : bool[]) : float[] {
  assert (if h() then (to_int(pow((- f), 30.85)) != (- (- argnum))) else true), "n"
  assert (h() || ({(true || true), 64.04}{0} || h())), "n"
  let {{n}, {}, o} = (array[n : e, o : (m - (if false then (- m) else d))] (if h() then {{args}, (if false then {} else {}), false} else {{args}, (if true then {} else {}), (! false)}))[(- (if (false || (! true)) then 551 else 255)), ((if (d != argnum) then {argnum} else {d}){0} % to_int(asin(f)))]
  assert (array[p : {g, argnum}{1}, q : e] {(sum[r : argnum, s : e] f), 97.21, (h() || h())})[707, (sum[p : argnum, q : to_int(atan2(5.46, f))] q)]{2}, "p"
  return (if (! {true}{0}) then (if ((- m) == d) then (array[p : e, q : (916 / e)] (array[r : argnum] 32.24)) else (array[p : e, q : (- d)] k(l))) else (array[p : m, q : (array[p : argnum, q : argnum] q)[(sum[p : 919, q : argnum, r : argnum] argnum), e]] (array[r : 949] to_float(r))))[((- to_int(sqrt(12.45))) * (if (array[p : d, q : d] o)[(- 439), 862] then (if true then (m % d) else m) else [952][e])), e]
}

