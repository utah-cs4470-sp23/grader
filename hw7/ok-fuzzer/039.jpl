fn a() : int {
  let b[c, d] = {(array[b : argnum, c : to_int(85.66), d : a()] (array[e : argnum, f : d] args))}{0}[a(), ((array[b : 534] argnum)[a()] % argnum), (sum[b : (array[b : (- a()), c : a(), d : (argnum % a())] (if false then 483 else b))[647, (638 + (a() - argnum)), (if true then (a() - 779) else (sum[b : a()] 348))], c : (if false then (sum[b : 611] (574 / b)) else (a() / argnum))] (if false then {argnum, false} else {a(), false}){0})]
  return c
  let {e[f, g, h]} = {(if ((377 != argnum) || (! false)) then (array[e : (array[e : c] c)[argnum], f : d, g : {d, {}}{0}] ((d == 939) != (27.25 <= 43.31))) else (if false then (array[e : (a() / a()), f : (846 + 397), g : a()] (false && false)) else (array[e : (sum[e : c, f : argnum] f), f : c, g : (sum[e : 808, f : argnum, g : 218] g)] (! true))))}
  let i[j, k, l] = {d, {(array[i : argnum, j : d] 154), e}, (argnum > (d * argnum))}{1}{1}
  return j
}

print "b"

let b[c, d, e] = [(array[b : (if false then (sum[b : 925] b) else (sum[b : argnum, c : 203, d : 51] 443)), c : argnum, d : (- argnum)] cos(log(34.7))), (if ((620 == argnum) && (! false)) then (array[b : (argnum % 27), c : (argnum + argnum), d : argnum] to_float(932)) else (array[b : (- argnum), c : argnum, d : (if true then argnum else 437)] to_float(argnum))), (if (! (true || true)) then (array[b : a(), c : (- argnum), d : (- 343)] (- 71.73)) else (array[b : (sum[b : a(), c : argnum, d : argnum] a()), c : argnum, d : argnum] atan(21.89)))][(if ((if (true && true) then (true || true) else false) || (! (argnum == 325))) then (- (to_int(95.6) - (sum[b : argnum] b))) else 503)]
fn f(g : {bool,float,{float,float,int}}) : bool {
  assert ((array[h : argnum] a())[a()] < ((d - e) + (- c))), "h"
  return (asin(exp(tan(cos(98.65)))) != to_float(to_int((array[h : 111, i : 842] 74.8)[argnum, (if true then e else 371)])))
  assert true, "h"
  return (if (! (! f(g))) then (array[h : (sum[h : d, i : a(), j : (- d)] (sum[k : d, l : h] d)), i : (546 / argnum)] (g{0} && true)) else (if f((if true then g else g)) then (array[h : (if true then 360 else e), i : 900] (i >= a())) else (if (e <= d) then (array[h : argnum, i : 571] true) else (array[h : d, i : 87] true))))[argnum, 961]
  return (if (array[h : to_int(to_float(a())), i : (if (a() == 450) then (sum[h : e, i : c] a()) else (sum[h : c, i : a(), j : argnum] e))] (if false then (! true) else (! true)))[c, (sum[h : (- (a() % argnum))] h)] then false else ((! {c, true}{1}) != true))
}

let g = (sqrt((pow(to_float(d), exp(40.66)) + 32.8)) / cos(acos(sqrt(to_float(c)))))
let {{}, h[i], j[k, l, m]} = [{{{}, args, b}, 4}{0}, {{}, {541, args, e}{1}, (array[h : (sum[h : argnum, i : a(), j : c] c), i : 252, j : d] exp(g))}][d]
let n[o, p] = (if {{false}}{0}{0} then {(array[n : 256, o : a()] (c == o))}{0} else (array[n : m, o : e] (((sum[p : argnum, q : o] 17.46) > cos(g)) && (! false))))
let {q, r[s]} = {sqrt(log(atan2((34.89 / 2.04), to_float(o)))), {log(66.78), {args}, j[p, argnum, a()]}{1}{0}}
fn t() : {float,bool[,,],float} {
  let {} = {{cos(q), {}}, r, log(g)}{0}{1}
  assert (array[u : to_int(cos(g)), v : e] {[u, u], {t(), h, h}, (! true)})[to_int(b[d, d, h[510]]), r[(- p)]]{2}, "u"
  let {u, {{v[w, x]}, y, z}, {{A[B], {C}, D[E, F]}, G[H]}} = (if (if true then {p, (false || false)} else {i, false}){1} then {{(if false then false else true), o, [611, o, s]}, {{(array[u : o, v : argnum] i)}, (- argnum), {sqrt(39.27)}}, {{(array[u : c] c), {d}, (array[u : 876, v : i] 90.25)}, h}} else {(if (array[u : a(), v : m] true)[(a() % argnum), (- a())] then {(true && false), d, args} else {(g != g), argnum, [p, s]}), {{(array[u : s, v : c] o)}, c, {atan(35.68)}}, {{(array[u : s] e), {l}, (array[u : o, v : k] 66.03)}, [args, args, h][63]}})
  assert (f({(! (! false)), (sum[I : x, J : m] g), {cos(q), to_float(e), (if false then k else d)}}) == {to_float(x), (array[I : m, J : s] false)}{1}[o, B]), "I"
  return t()
}

let u[v, w] = (if (array[u : 1000, v : a(), w : a()] (false || true))[p, (array[u : (- m), v : m] s)[s, 277], m] then n else (array[u : 898, v : o] (array[w : l, x : 959] n)[e, l])[m, argnum])
write (array[x : o, y : a()] {{log(g), c}{0}, to_float(y), log((pow(g, q) * sqrt(55.72))), sqrt(tan(acos(q)))}) to "x.png"

let {{{x, y}, z}} = {{(array[x : l, y : l] {h, r})[to_int(to_float(v)), to_int(8.7)], b}}
