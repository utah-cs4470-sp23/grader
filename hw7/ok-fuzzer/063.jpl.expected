(PrintCmd "a")
(LetCmd
 (ArgLValue (VarArgument (FloatType) a))
 (CallExpr
  (FloatType)
  acos
  (UnopExpr
   (FloatType)
   -
   (CallExpr (FloatType) acos (FloatExpr (FloatType) 9)))))
(LetCmd
 (ArgLValue (VarArgument (ArrayType (IntType) 1) b))
 (VarExpr (ArrayType (IntType) 1) args))
(WriteCmd
 (ArrayIndexExpr
  (ArrayType (TupleType (FloatType) (FloatType) (FloatType) (FloatType)) 2)
  (ArrayLoopExpr
   (ArrayType
    (ArrayType (TupleType (FloatType) (FloatType) (FloatType) (FloatType)) 2)
    1)
   c
   (CallExpr
    (IntType)
    to_int
    (CallExpr
     (FloatType)
     atan
     (UnopExpr (FloatType) - (VarExpr (FloatType) a))))
   (ArrayLoopExpr
    (ArrayType (TupleType (FloatType) (FloatType) (FloatType) (FloatType)) 2)
    d
    (BinopExpr (IntType) (VarExpr (IntType) c) / (VarExpr (IntType) argnum))
    e
    (VarExpr (IntType) c)
    (TupleLiteralExpr
     (TupleType (FloatType) (FloatType) (FloatType) (FloatType))
     (SumLoopExpr (FloatType) f (VarExpr (IntType) d) (VarExpr (FloatType) a))
     (CallExpr (FloatType) acos (VarExpr (FloatType) a))
     (CallExpr (FloatType) cos (VarExpr (FloatType) a))
     (CallExpr (FloatType) atan (FloatExpr (FloatType) 32)))))
  (VarExpr (IntType) argnum))
 "c.png")
(LetCmd (ArgLValue (VarArgument (IntType) c)) (VarExpr (IntType) argnum))
(ReadCmd
 "d.png"
 (VarArgument
  (ArrayType (TupleType (FloatType) (FloatType) (FloatType) (FloatType)) 2)
  d))
(WriteCmd
 (ArrayLoopExpr
  (ArrayType (TupleType (FloatType) (FloatType) (FloatType) (FloatType)) 2)
  e
  (SumLoopExpr
   (IntType)
   e
   (VarExpr (IntType) c)
   (IfExpr
    (IntType)
    (IfExpr
     (BoolType)
     (TrueExpr (BoolType))
     (UnopExpr (BoolType) ! (FalseExpr (BoolType)))
     (BinopExpr (BoolType) (TrueExpr (BoolType)) || (TrueExpr (BoolType))))
    (IntExpr (IntType) 101)
    (TupleIndexExpr
     (IntType)
     (TupleLiteralExpr
      (TupleType (IntType) (IntType) (IntType))
      (VarExpr (IntType) e)
      (VarExpr (IntType) argnum)
      (IntExpr (IntType) 685))
     1)))
  f
  (IfExpr
   (IntType)
   (TupleIndexExpr
    (BoolType)
    (TupleLiteralExpr
     (TupleType (BoolType) (IntType))
     (BinopExpr (BoolType) (VarExpr (IntType) c) <= (VarExpr (IntType) argnum))
     (VarExpr (IntType) argnum))
    0)
   (UnopExpr
    (IntType)
    -
    (TupleIndexExpr
     (IntType)
     (TupleLiteralExpr
      (TupleType (IntType) (IntType))
      (IntExpr (IntType) 296)
      (IntExpr (IntType) 579))
     0))
   (IntExpr (IntType) 366))
  (IfExpr
   (TupleType (FloatType) (FloatType) (FloatType) (FloatType))
   (ArrayIndexExpr
    (BoolType)
    (ArrayLoopExpr
     (ArrayType (BoolType) 3)
     g
     (VarExpr (IntType) argnum)
     h
     (VarExpr (IntType) argnum)
     i
     (SumLoopExpr (IntType) g (VarExpr (IntType) argnum) (VarExpr (IntType) g))
     (TrueExpr (BoolType)))
    (CallExpr (IntType) to_int (VarExpr (FloatType) a))
    (VarExpr (IntType) f)
    (SumLoopExpr
     (IntType)
     g
     (IntExpr (IntType) 231)
     h
     (VarExpr (IntType) c)
     i
     (IntExpr (IntType) 729)
     (VarExpr (IntType) argnum)))
   (ArrayIndexExpr
    (TupleType (FloatType) (FloatType) (FloatType) (FloatType))
    (ArrayLiteralExpr
     (ArrayType (TupleType (FloatType) (FloatType) (FloatType) (FloatType)) 1)
     (ArrayIndexExpr
      (TupleType (FloatType) (FloatType) (FloatType) (FloatType))
      (VarExpr
       (ArrayType
        (TupleType (FloatType) (FloatType) (FloatType) (FloatType))
        2)
       d)
      (VarExpr (IntType) argnum)
      (VarExpr (IntType) c))
     (ArrayIndexExpr
      (TupleType (FloatType) (FloatType) (FloatType) (FloatType))
      (VarExpr
       (ArrayType
        (TupleType (FloatType) (FloatType) (FloatType) (FloatType))
        2)
       d)
      (IntExpr (IntType) 282)
      (IntExpr (IntType) 421)))
    (SumLoopExpr
     (IntType)
     g
     (VarExpr (IntType) e)
     h
     (SumLoopExpr
      (IntType)
      g
      (VarExpr (IntType) argnum)
      h
      (VarExpr (IntType) argnum)
      (VarExpr (IntType) argnum))
     (VarExpr (IntType) g)))
   (IfExpr
    (TupleType (FloatType) (FloatType) (FloatType) (FloatType))
    (BinopExpr (BoolType) (VarExpr (IntType) c) <= (IntExpr (IntType) 184))
    (TupleLiteralExpr
     (TupleType (FloatType) (FloatType) (FloatType) (FloatType))
     (SumLoopExpr
      (FloatType)
      g
      (VarExpr (IntType) c)
      h
      (IntExpr (IntType) 261)
      i
      (VarExpr (IntType) f)
      (VarExpr (FloatType) a))
     (FloatExpr (FloatType) 10)
     (CallExpr (FloatType) tan (FloatExpr (FloatType) 53))
     (FloatExpr (FloatType) 30))
    (TupleLiteralExpr
     (TupleType (FloatType) (FloatType) (FloatType) (FloatType))
     (CallExpr (FloatType) tan (VarExpr (FloatType) a))
     (CallExpr (FloatType) cos (VarExpr (FloatType) a))
     (CallExpr (FloatType) sqrt (FloatExpr (FloatType) 97))
     (CallExpr (FloatType) sin (VarExpr (FloatType) a))))))
 "e.png")
(LetCmd
 (ArgLValue (ArrayArgument e f g h))
 (ArrayIndexExpr
  (ArrayType (IntType) 3)
  (ArrayLoopExpr
   (ArrayType (ArrayType (IntType) 3) 1)
   e
   (ArrayIndexExpr
    (IntType)
    (ArrayLoopExpr
     (ArrayType (IntType) 2)
     e
     (SumLoopExpr (IntType) e (IntExpr (IntType) 619) (IntExpr (IntType) 757))
     f
     (IntExpr (IntType) 639)
     (SumLoopExpr
      (IntType)
      g
      (VarExpr (IntType) f)
      h
      (IntExpr (IntType) 964)
      i
      (IntExpr (IntType) 803)
      (VarExpr (IntType) f)))
    (VarExpr (IntType) c)
    (VarExpr (IntType) argnum))
   (ArrayLoopExpr
    (ArrayType (IntType) 3)
    f
    (SumLoopExpr
     (IntType)
     f
     (BinopExpr (IntType) (VarExpr (IntType) e) - (VarExpr (IntType) c))
     (ArrayIndexExpr
      (IntType)
      (VarExpr (ArrayType (IntType) 1) args)
      (VarExpr (IntType) c)))
    g
    (BinopExpr
     (IntType)
     (VarExpr (IntType) argnum)
     *
     (VarExpr (IntType) argnum))
    h
    (BinopExpr (IntType) (VarExpr (IntType) c) * (IntExpr (IntType) 664))
    (UnopExpr (IntType) - (VarExpr (IntType) argnum))))
  (CallExpr
   (IntType)
   to_int
   (CallExpr
    (FloatType)
    log
    (IfExpr
     (FloatType)
     (TrueExpr (BoolType))
     (UnopExpr (FloatType) - (VarExpr (FloatType) a))
     (CallExpr (FloatType) log (FloatExpr (FloatType) 93)))))))
(LetCmd
 (TupleLValue
  (TupleLValue
   (ArgLValue (ArrayArgument i j k))
   (ArgLValue (ArrayArgument l m n o)))
  (ArgLValue (ArrayArgument p q r s)))
 (TupleLiteralExpr
  (TupleType
   (TupleType
    (ArrayType (TupleType (FloatType) (FloatType) (FloatType) (FloatType)) 2)
    (ArrayType (IntType) 3))
   (ArrayType (ArrayType (IntType) 3) 3))
  (ArrayIndexExpr
   (TupleType
    (ArrayType (TupleType (FloatType) (FloatType) (FloatType) (FloatType)) 2)
    (ArrayType (IntType) 3))
   (IfExpr
    (ArrayType
     (TupleType
      (ArrayType (TupleType (FloatType) (FloatType) (FloatType) (FloatType)) 2)
      (ArrayType (IntType) 3))
     1)
    (BinopExpr
     (BoolType)
     (UnopExpr (BoolType) ! (FalseExpr (BoolType)))
     &&
     (FalseExpr (BoolType)))
    (ArrayLiteralExpr
     (ArrayType
      (TupleType
       (ArrayType
        (TupleType (FloatType) (FloatType) (FloatType) (FloatType))
        2)
       (ArrayType (IntType) 3))
      1)
     (TupleLiteralExpr
      (TupleType
       (ArrayType
        (TupleType (FloatType) (FloatType) (FloatType) (FloatType))
        2)
       (ArrayType (IntType) 3))
      (VarExpr
       (ArrayType
        (TupleType (FloatType) (FloatType) (FloatType) (FloatType))
        2)
       d)
      (VarExpr (ArrayType (IntType) 3) e)))
    (ArrayLoopExpr
     (ArrayType
      (TupleType
       (ArrayType
        (TupleType (FloatType) (FloatType) (FloatType) (FloatType))
        2)
       (ArrayType (IntType) 3))
      1)
     i
     (UnopExpr (IntType) - (VarExpr (IntType) c))
     (TupleLiteralExpr
      (TupleType
       (ArrayType
        (TupleType (FloatType) (FloatType) (FloatType) (FloatType))
        2)
       (ArrayType (IntType) 3))
      (VarExpr
       (ArrayType
        (TupleType (FloatType) (FloatType) (FloatType) (FloatType))
        2)
       d)
      (VarExpr (ArrayType (IntType) 3) e))))
   (VarExpr (IntType) c))
  (IfExpr
   (ArrayType (ArrayType (IntType) 3) 3)
   (TupleIndexExpr
    (BoolType)
    (IfExpr
     (TupleType (BoolType))
     (BinopExpr (BoolType) (VarExpr (FloatType) a) == (VarExpr (FloatType) a))
     (TupleLiteralExpr (TupleType (BoolType)) (FalseExpr (BoolType)))
     (TupleLiteralExpr (TupleType (BoolType)) (FalseExpr (BoolType))))
    0)
   (ArrayLoopExpr
    (ArrayType (ArrayType (IntType) 3) 3)
    i
    (UnopExpr (IntType) - (VarExpr (IntType) c))
    j
    (SumLoopExpr
     (IntType)
     i
     (VarExpr (IntType) f)
     j
     (IntExpr (IntType) 896)
     (BinopExpr (IntType) (VarExpr (IntType) argnum) + (VarExpr (IntType) j)))
    k
    (VarExpr (IntType) c)
    (ArrayLoopExpr
     (ArrayType (IntType) 3)
     l
     (IntExpr (IntType) 867)
     m
     (VarExpr (IntType) h)
     n
     (VarExpr (IntType) h)
     (VarExpr (IntType) g)))
   (ArrayLoopExpr
    (ArrayType (ArrayType (IntType) 3) 3)
    i
    (UnopExpr (IntType) - (VarExpr (IntType) g))
    j
    (BinopExpr
     (IntType)
     (VarExpr (IntType) argnum)
     /
     (CallExpr (IntType) to_int (VarExpr (FloatType) a)))
    k
    (VarExpr (IntType) f)
    (ArrayIndexExpr
     (ArrayType (IntType) 3)
     (ArrayLoopExpr
      (ArrayType (ArrayType (IntType) 3) 2)
      l
      (VarExpr (IntType) argnum)
      m
      (VarExpr (IntType) k)
      (VarExpr (ArrayType (IntType) 3) e))
     (BinopExpr (IntType) (VarExpr (IntType) j) * (VarExpr (IntType) c))
     (IfExpr
      (IntType)
      (TrueExpr (BoolType))
      (VarExpr (IntType) i)
      (VarExpr (IntType) i)))))))
(AssertCmd (FalseExpr (BoolType)) "t")
(LetCmd
 (ArgLValue (VarArgument (FloatType) t))
 (UnopExpr
  (FloatType)
  -
  (SumLoopExpr
   (FloatType)
   t
   (TupleIndexExpr
    (IntType)
    (IfExpr
     (TupleType (IntType))
     (FalseExpr (BoolType))
     (TupleLiteralExpr (TupleType (IntType)) (VarExpr (IntType) q))
     (TupleLiteralExpr (TupleType (IntType)) (VarExpr (IntType) r)))
    0)
   (CallExpr
    (FloatType)
    atan
    (CallExpr
     (FloatType)
     acos
     (CallExpr (FloatType) to_float (VarExpr (IntType) k)))))))
(LetCmd (ArgLValue (ArrayArgument u v)) (VarExpr (ArrayType (IntType) 1) args))
