let {{{a, b[c, d, e], f[g, h, i]}, j[k, l, m]}, n[o, p]} = {{{argnum, (array[a : (- 163), b : (455 * 278), c : (if false then argnum else argnum)] 71.4), (array[a : argnum, b : (- argnum), c : (- argnum)] asin(64.95))}, (if {false}{0} then (array[a : 15, b : (if true then argnum else 743), c : (- 928)] sqrt(6.29)) else (array[a : (argnum * 393), b : argnum, c : argnum] exp(51.51)))}, (array[a : argnum] (array[b : args[a], c : args[argnum]] (array[d : a, e : argnum] {})))[argnum]}
let {q[r, s], {{{}, t}, u}, {v[w]}} = (if (if {argnum, false, 69.52}{1} then [false, true] else (array[q : (- l)] (a > k)))[to_int(log(to_float(h)))] then {(array[q : m, r : k] r), {{{}, g}, c}, (if (true && (m >= p)) then (if (h >= d) then {args} else {args}) else {args})} else {{e, (array[q : l, r : p] r)}{1}, {{{}, o}, (l * h)}, {{args}}{0}})
assert (w == c), "x"
write (array[x : w] (array[y : i, z : i] {(sum[A : 98] 44.29), 85.15, log(38.07), (sum[A : k] 84.39)}))[r] to "x.png"

let x = (sqrt(cos((- pow(26.16, 49.61)))) <= tan(atan2(asin(to_float(d)), sqrt(45.91))))
let {y, z[A, B]} = (if ((! (if false then (if true then x else x) else (t != u))) || {true}{0}) then (if true then {atan(73.73), {args, n}} else {atan(16.66), {v, n}}){1} else {{(array[y : d] s), (if x then n else n)}, a}{0})
let C[D, E, F] = j
fn G(H : {int,int}) : int {
  let {I, {{J[K, L, M]}, N, O[P, Q]}, R[S, T, U]} = (array[I : o] {c, {{j}, (x == x), n}, j})[h]
  let V[W, X] = (if {(array[V : r] false)[d]}{0} then {B, {O}}{1}{0} else O)
  let Y[Z, aa, ab] = j
  let ac = r
  return L
}

fn H(I : {float[,,],float,bool}, J : bool[,,]) : {float,{},{float,int}} {
  assert ({asin(atan2(18.84, 58.78))}{0} != atan2(log(to_float(D)), pow(exp(sin(85.68)), cos(35.91)))), "K"
  let K[L] = args
  let M = s
  let {N, {O[P, Q], R[S, T]}, U} = {H((array[N : u] I)[w], (array[N : A, O : c, P : s] true)){2}, (if {x}{0} then {{z, n}} else {{n, n}}){0}, (e == A)}
  return H({(array[V : D, W : d, X : E] I), 900}{0}[(sum[V : (sum[V : P] h), W : d, X : to_int(8.04)] D), L, (sum[V : (sum[V : g, W : g, X : e] Q)] h)], (array[V : s, W : to_int((if U then to_float(E) else I{1})), X : p] (array[Y : A] true)[e]))
}

fn I() : int {
  let J = (! x)
  let K[L, M, N] = C
  let O = n
  let P[Q] = [O]
  return i
}

write (array[J : {x, B}{1}, K : s] (array[L : (- (- p)), M : w] {atan(59.87), asin(36.11), f[J, i, s], f[M, g, p]}))[D, A] to "J.png"

fn J(K : float) : bool {
  let L[M] = [E, A]
  let {N} = (array[N : (if (u <= s) then D else to_int(K)), O : (array[N : k, O : a, P : A] m)[(E / k), c, k]] (array[P : M, Q : r, R : o] {P}))[G({u, (t - F)}), q[c, (if true then r else m)]][k, h, q[(w * G({k, w})), E]]
  assert x, "O"
  let O = p
  return (((if x then (array[P : a, Q : argnum, R : u] x)[(if false then l else c), o, k] else (array[P : t, Q : s] false)[B, (- t)]) || x) && (if J(K) then ((if J(K) then (! x) else (false && x)) && x) else ((F <= E) || J((- K)))))
}

